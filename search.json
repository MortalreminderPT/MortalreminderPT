[
  
    {
      "title"    : "使用ChatGPT控制Arduino设备",
      "category" : "",
      "tags"     : "ChatGPT, Arduino, and 智能家庭",
      "url"      : "/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/",
      "date"     : "Apr 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#chatgpt接入\" id=\"markdown-toc-chatgpt接入\">ChatGPT接入</a>    <ol>\n      <li><a href=\"#prompt编写与测试\" id=\"markdown-toc-prompt编写与测试\">Prompt编写与测试</a></li>\n      <li><a href=\"#openai-api接入\" id=\"markdown-toc-openai-api接入\">OpenAI API接入</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#基于flask搭建服务器\" id=\"markdown-toc-基于flask搭建服务器\">基于Flask搭建服务器</a>    <ol>\n      <li><a href=\"#flask框架搭建\" id=\"markdown-toc-flask框架搭建\">Flask框架搭建</a></li>\n      <li><a href=\"#添加用户api\" id=\"markdown-toc-添加用户api\">添加用户API</a></li>\n      <li><a href=\"#arduino-api\" id=\"markdown-toc-arduino-api\">Arduino API</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#使用mongodb存储设备状态\" id=\"markdown-toc-使用mongodb存储设备状态\">使用MongoDB存储设备状态</a>    <ol>\n      <li><a href=\"#mongodb数据库结构\" id=\"markdown-toc-mongodb数据库结构\">MongoDB数据库结构</a></li>\n      <li><a href=\"#flask接入mongodb\" id=\"markdown-toc-flask接入mongodb\">Flask接入MongoDB</a></li>\n      <li><a href=\"#与数据库的交互及数据缓存\" id=\"markdown-toc-与数据库的交互及数据缓存\">与数据库的交互及数据缓存</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#编写qqbot实现qq平台控制\" id=\"markdown-toc-编写qqbot实现qq平台控制\">编写QQbot实现QQ平台控制</a></li>\n  <li><a href=\"#arduino状态控制\" id=\"markdown-toc-arduino状态控制\">Arduino状态控制</a>    <ol>\n      <li><a href=\"#arduino设备代码实现\" id=\"markdown-toc-arduino设备代码实现\">Arduino设备代码实现</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#结果展示\" id=\"markdown-toc-结果展示\">结果展示</a></li>\n</ol>\n\n<p>这篇博客中将介绍如何使用ChatGPT来控制Arduino设备。ChatGPT是由OpenAI开发的一种自然语言处理模型，其强大的功能引发了很大的讨论。本文介绍了ChatGPT与外部系统集成的一种方法，通过ChatGPT作为控制器实现对Arduino设备的控制，以探索自然语言命令控制家庭设备的可能性及智能家庭设备的发展方向。</p>\n\n<p>这篇博客的代码公开在我的github仓库，<a href=\"https://github.com/MortalreminderPT/HomeGPT-Intelligent-Home-Assistant\">点此链接</a>传送至该项目。</p>\n\n<h2 id=\"chatgpt接入\">ChatGPT接入</h2>\n\n<h3 id=\"prompt编写与测试\">Prompt编写与测试</h3>\n\n<p>我们期望ChatGPT以json格式输出命令实现对设备的控制，因此首先需要编写一个合适的提示（prompt），用于告诉ChatGPT我们的需求。在这个提示中，我们应该明确表达我们希望ChatGPT理解并回答的问题，如打开/关闭LED灯、控制电机转速等。经过数次测试之后，我们使用python代码整合了我们的全部需求，</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">possible_device</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">air-conditioner</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">curtain</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">As an Intelligent Assistant you need to rely on my words to determine what to do with some of devices.</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">your reply contain a list with json [device] only from these devices: </span><span class=\"si\">{</span><span class=\"n\">possible_device</span><span class=\"si\">}</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\"> and only write json list without any discourse.</span><span class=\"sh\">'</span>\n    <span class=\"k\">return</span> <span class=\"n\">prompt</span>\n</code></pre></div></div>\n\n<p>在ChatGPT官网测试该提示词，发现ChatGPT可以正确理解我们的需求并做出回应。</p>\n\n<p><img src=\"\\images\\posts\\gpt1.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>此时，我们相信ChatGPT可以集成到我们的项目中。</p>\n\n<h3 id=\"openai-api接入\">OpenAI API接入</h3>\n\n<p>OpenAI提供了官方API，以实现通过发送请求与ChatGPT进行实时交互。</p>\n\n<p>首先，我们需要获得OpenAI API的访问密钥。在OpenAI的开发者门户网站上可以注册一个账户并获取API密钥。将API密钥保存在安全的地方，因为它将用于与OpenAI API进行通信。</p>\n\n<p>接下来，我们可以通过引入OpenAI API包来实现与ChatGPT的交互，这个过程仍然被放在了一个函数中：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">mask</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n        <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">completions</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n        <span class=\"k\">return</span> <span class=\"n\">message</span>\n</code></pre></div></div>\n\n<p>执行代码并观察输出结果，发现我们成功与ChatGPT完成交互。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>In: As an Intelligent Assistant you need to rely on my words to determine what to <span class=\"k\">do </span>with some of devices.\n我很冷，你可以帮我些什么吗\nyour reply contain a list with json <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"device_1\"</span>,<span class=\"s2\">\"param\"</span>:0<span class=\"o\">}]</span> only from these devices: <span class=\"o\">[{</span><span class=\"s1\">'light'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'air-conditioner'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'curtain'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}]</span> and only write json list without any discourse.\n\nOut: <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"air-conditioner\"</span>,<span class=\"s2\">\"param\"</span>:1<span class=\"o\">}]</span>\n</code></pre></div></div>\n\n<h2 id=\"基于flask搭建服务器\">基于Flask搭建服务器</h2>\n<p>在上一部分中，我们完成了与ChatGPT的对话和集成。为了便于用户的使用及与Arduino的交互，我们将使用Flask框架搭建一个服务器，以通过网络实现交互。</p>\n\n<h3 id=\"flask框架搭建\">Flask框架搭建</h3>\n<p>Flask是一个轻量级的Python Web框架，非常适合用于构建简单的Web应用程序。我们将使用Flask来搭建一个简单的服务器，以接收用户或Arduino的请求。</p>\n\n<p>首先，我们需要安装Flask。可以使用pip命令来安装Flask：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>flask\n</code></pre></div></div>\n\n<p>随后创建Flask主文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">import</span> <span class=\"n\">flask_restful</span> <span class=\"k\">as</span> <span class=\"n\">restful</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">restful</span><span class=\"p\">.</span><span class=\"nc\">Api</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">default_mediatype</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>此时RESTful风格Flask框架已经搭建完成，我们需要为其添加用户及Arduino交互接口。</p>\n<h3 id=\"添加用户api\">添加用户API</h3>\n<p>定义一个用户API文件order.py，用于向服务器发送请求并获取响应。核心代码如下所示：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">OrderApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">text_dict</span> <span class=\"o\">=</span> <span class=\"nc\">RequestParser</span><span class=\"p\">()</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> \\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n            \n        <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">mask_reply</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]})</span>\n\n        <span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n        <span class=\"n\">reply</span><span class=\"o\">=</span><span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask_reply</span><span class=\"o\">=</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n        <span class=\"n\">update_state</span><span class=\"o\">=</span><span class=\"nf\">match_json</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">update_state</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>随后我们需要在主文件中注册API文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">OrderApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>此时用户可以通过POST请求实现对Arduino设备状态的控制。</p>\n<h3 id=\"arduino-api\">Arduino API</h3>\n\n<p>Arduino设备主要工作内容为读取当前设备工作状态并做出对应调整，因此只需编写简单GET请求响应：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ArduinoApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>同样在主文件中注册API文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">ArduinoApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/arduino</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>通过Postman测试，发现可以服务器已经可以正常工作。</p>\n\n<p><img src=\"\\images\\posts\\gpt2.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"使用mongodb存储设备状态\">使用MongoDB存储设备状态</h2>\n\n<p>为了防止停电等因素对设备开关记忆的影响，我们使用数据库对设备状态进行持久化。MongoDB作为一种基于键值对的通用NoSQL数据库，非常适合实现这个需求。</p>\n\n<h3 id=\"mongodb数据库结构\">MongoDB数据库结构</h3>\n<p>在我们开始之前，我们需要定义设备状态的数据结构。在这个例子中，我们假设我们的设备有一个LED灯，可以打开或关闭。我们可以使用以下JSON格式来表示设备状态：</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"nl\">\"device\"</span><span class=\"p\">:</span><span class=\"s2\">\"light\"</span><span class=\"p\">,</span><span class=\"nl\">\"param\"</span><span class=\"p\">:</span><span class=\"mf\">1.0</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>在上面的示例中，device是设备的唯一标识符，param表示LED灯的状态。</p>\n\n<h3 id=\"flask接入mongodb\">Flask接入MongoDB</h3>\n<p>为了与MongoDB进行交互，我们将使用MongoDB的官方Python驱动程序pymongo。我们需要先安装它：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>pymongo\n</code></pre></div></div>\n<p>接下来，我们需要在Flask应用程序中添加与MongoDB的连接和数据访问逻辑。</p>\n\n<p>在app.py文件中添加pymongo库：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask_pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">PyMongo</span>\n<span class=\"n\">mongo</span> <span class=\"o\">=</span> <span class=\"nc\">PyMongo</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">MONGO_URI</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"与数据库的交互及数据缓存\">与数据库的交互及数据缓存</h3>\n\n<p>我们编写一个DeviceStates类与数据库进行交互，为了提升设备响应的即时性，我们还可以给数据库添加缓存。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">DeviceStates</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">device_state</span> <span class=\"ow\">in</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">projection</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})):</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">device_state</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">device_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dict</span><span class=\"p\">:</span><span class=\"n\">DeviceState</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">update_device</span><span class=\"p\">,</span> <span class=\"n\">update_state</span> <span class=\"ow\">in</span> <span class=\"n\">update_dict</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">update_one</span><span class=\"p\">({</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">update_device</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">$set</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"o\">**</span><span class=\"n\">update_state</span><span class=\"p\">}},</span> <span class=\"n\">upsert</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">update_device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">update_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">delete_many</span><span class=\"p\">({}).</span><span class=\"n\">deleted_count</span>\n</code></pre></div></div>\n\n<h2 id=\"编写qqbot实现qq平台控制\">编写QQbot实现QQ平台控制</h2>\n<p>本节编写了一个简单的QQbot，用户可以在QQ平台与QQbot简单对话，完成对Arduino设备状态的控制。</p>\n\n<p>安装botpy包：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>botpy\n</code></pre></div></div>\n\n<p>为QQbot编写交互代码如下：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">botpy</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy</span> <span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.ext.cog_yaml</span> <span class=\"kn\">import</span> <span class=\"n\">read</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">test_config</span> <span class=\"o\">=</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">config.yaml</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">get_logger</span><span class=\"p\">()</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">accept-language</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">zh-CN,zh;q=0.9,en;q=0.8</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">content-type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">application/json</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_ready</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">robot 「</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">robot</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">」 on_ready!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_at_message_create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">avatar</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">sleep</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">server</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n        <span class=\"kn\">import</span> <span class=\"n\">re</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">&lt;.*?&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">POST</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">reply</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">unicode_escape</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">intents</span> <span class=\"o\">=</span> <span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"nc\">Intents</span><span class=\"p\">(</span><span class=\"n\">public_guild_messages</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">intents</span><span class=\"o\">=</span><span class=\"n\">intents</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">appid</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">appid</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">token</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>此时，我们可以在QQ频道与QQbot对话，以实现对Arduino设备的控制</p>\n\n<p><img src=\"\\images\\posts\\gpt3.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"arduino状态控制\">Arduino状态控制</h2>\n<p>在服务器及交互平台搭建完成后，本部分展示了Arduino设备代码实现，其原理主要为发出GET请求获取设备状态，随后通过字符串匹配控制设备的状态。</p>\n\n<h3 id=\"arduino设备代码实现\">Arduino设备代码实现</h3>\n\n<p><strong>这部分代码是由我的队友编写的，他速成了Arduino代码编写并实现了设备状态控制，感谢他在该项目的贡献。</strong></p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ESP8266WiFi.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;SoftwareSerial.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ESP8266HTTPClient.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ArduinoJson.h&gt;</span><span class=\"cp\">\n</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">ssid</span><span class=\"p\">;</span> <span class=\"c1\">//Enter your Wi-Fi SSID</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">password</span><span class=\"p\">;</span> <span class=\"c1\">//Enter you Wi-Fi Password</span>\n<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">ledpin</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"n\">String</span> <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n<span class=\"n\">define</span> <span class=\"n\">URL</span> <span class=\"s\">\"http://localhost:5000/arduino\"</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">WIFI_STA</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"mi\">115200</span><span class=\"p\">);</span>\n    <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">);</span>\n    <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"开始连接\"</span><span class=\"p\">);</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"正在连接到\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">WL_CONNECTED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"waiting for \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"s...\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"WiFi connected!\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"IP address: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">localIP</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFiClient</span> <span class=\"n\">tcpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">HTTPClient</span> <span class=\"n\">httpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">tcpClient</span><span class=\"p\">,</span> <span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">httpCode</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">GET</span><span class=\"p\">();</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Send GET request to URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">httpCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">getString</span><span class=\"p\">();</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Server Response Payload: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span>\n    <span class=\"n\">StaticJsonDocument</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span> <span class=\"o\">&gt;</span> <span class=\"n\">doc</span><span class=\"p\">;</span>\n    <span class=\"n\">DeserializationError</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">deserializeJson</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s\">\"light\"</span><span class=\"p\">][</span><span class=\"s\">\"param\"</span><span class=\"p\">];</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">HIGH</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">LOW</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n    <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"结果展示\">结果展示</h2>\n\n<p>如图所示，在向QQbot提出需求后，ChatGPT成功接收并理解了我们的需求并将其转化为指令，Arduino设备状态也随之发生改变。</p>\n\n<p><img src=\"\\images\\posts\\gpt4.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>ChatGPT在此次实验中的强大作用向我们展示了大语言模型在智能家庭的重大潜力。包括但不限于识别并发掘深度需求，多模态智能家居控制，个性化用户体验等多种潜在方向。</p>\n\n<p>同样，该项应用也存在隐私保护，数据安全等问题，需要人们的进一步思考和解决。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/'> <img src='https://api.wannote.com/image/bing.php?day=2' alt='使用ChatGPT控制Arduino设备'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>11 min read <time class='article__date' datetime='2023-04-24T00:00:00+08:00'>Apr 24, 2023</time> </span> </div><h2 class='article__title'>使用ChatGPT控制Arduino设备</h2> <p class='article__excerpt'>本文介绍了ChatGPT与外部系统集成的一种方法，通过ChatGPT作为控制器实现对Arduino设备的控制，以探索自然语言命令控制家庭设备的可能性及智能家庭设备的发展方向。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/ChatGPT' class='article__tag'>ChatGPT</a>  <a href='/tag/Arduino' class='article__tag'>Arduino</a>  <a href='/tag/智能家庭' class='article__tag'>智能家庭</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十三）进程通信",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%89-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/",
      "date"     : "Apr 21, 2022",
      "content"  : "",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%89-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十三）进程通信'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T23:59:35+08:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十三）进程通信</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十二）进程控制",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#原语\" id=\"markdown-toc-原语\">原语</a>    <ol>\n      <li><a href=\"#为何进程控制状态转换的过程要一气呵成\" id=\"markdown-toc-为何进程控制状态转换的过程要一气呵成\">为何进程控制（状态转换）的过程要“一气呵成”？</a></li>\n      <li><a href=\"#原语执行原理\" id=\"markdown-toc-原语执行原理\">原语执行原理</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程控制原语\" id=\"markdown-toc-进程控制原语\">进程控制原语</a>    <ol>\n      <li><a href=\"#进程的创建\" id=\"markdown-toc-进程的创建\">进程的创建</a></li>\n      <li><a href=\"#进程的终止\" id=\"markdown-toc-进程的终止\">进程的终止</a></li>\n      <li><a href=\"#进程的阻塞和唤醒\" id=\"markdown-toc-进程的阻塞和唤醒\">进程的阻塞和唤醒</a></li>\n      <li><a href=\"#进程的切换\" id=\"markdown-toc-进程的切换\">进程的切换</a></li>\n      <li><a href=\"#运行环境信息\" id=\"markdown-toc-运行环境信息\">运行环境信息</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。</p>\n\n<p>简化理解：进程控制就是要实现进程状态转换。</p>\n\n<h2 id=\"原语\">原语</h2>\n\n<h3 id=\"为何进程控制状态转换的过程要一气呵成\">为何进程控制（状态转换）的过程要“一气呵成”？</h3>\n\n<p>假设此时进程2等待的事件发生，则操作系统中，负责进程控制的内核程序至少需要做这样两件事：</p>\n<ol>\n  <li>将PCB2的state设为1</li>\n  <li>将PCB2从阻塞队列放到就绪队列</li>\n</ol>\n\n<p>完成了第一步后收到中断信号，那么PCB2的state=1，但是它却被放在阻塞队列里。</p>\n\n<p>如果不能“一气呵成”，就有可能导致操作系统中的某些关键数据结构信息不统一的情况，这会影响操作系统进行别的管理工作。</p>\n\n<h3 id=\"原语执行原理\">原语执行原理</h3>\n\n<p><strong>原语</strong>的执行具有<strong>原子性</strong>，即执行过程只能一气呵成，期间<strong>不允许被中断</strong>。\n可以用“<strong>关中断</strong>指令”和“<strong>开中断</strong>指令”这两个<strong>特权指令</strong>实现原子性。</p>\n\n<p>在正常情况下，CPU<strong>每执行完一条指令</strong>都会例行<strong>检查是否有中断信号</strong>需要处理，\n如果有，则暂停运行当前这段程序，转而执行相应的中断处理程序。</p>\n\n<p>CPU执行了<strong>关中断指令</strong>之后，就不再例行检查中断信号，直到执行<strong>开中断指令</strong>之后才会恢复检查。</p>\n\n<p>这样，关中断、开中断之间的这些指令序列就是不可被中断的，这就实现了“原子性”。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-原语.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"进程控制原语\">进程控制原语</h2>\n\n<p>无论哪个进程控制原语，要做的无非三类事情：</p>\n<ol>\n  <li>更新PCB中的信息（修改进程状态state，保存/恢复运行环境）；</li>\n  <li>将PCB插入合适的队列；</li>\n  <li>分配/回收资源。</li>\n</ol>\n\n<h3 id=\"进程的创建\">进程的创建</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的创建.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"进程的终止\">进程的终止</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的终止.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"进程的阻塞和唤醒\">进程的阻塞和唤醒</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的阻塞和唤醒.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>注意：阻塞和唤醒原语必须成对使用。</p>\n\n<h3 id=\"进程的切换\">进程的切换</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的切换.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"运行环境信息\">运行环境信息</h3>\n\n<p>在执行程序指令的过程中，CPU中会设置很多“寄存器”，用来存放程序运行过程中所需的某些数据，如：</p>\n<ul>\n  <li>PSW：程序状态字寄存器</li>\n  <li>PC：程序计数器，存放下一条指令地址</li>\n  <li>IR：指令寄存器，存放当前正在执行的指令</li>\n  <li>通用寄存器：存放其它一些必要信息</li>\n</ul>\n\n<p>在指令顺序执行的过程中，很多中间结果是放在各种寄存器中的。如执行如下代码时：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* ... */</span>\n<span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"n\">x</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"cm\">/* ... */</span>\n</code></pre></div></div>\n\n<p>此时该进程在内存中结构如图：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-运行环境信息.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>当执行到指令3时，CPU寄存器中的数据如下：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-运行环境信息-寄存器.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>执行完指令3后，另一个进程开始上CPU运行。由于另一个进程在运行过程中也会使用各个寄存器，CPU寄存器数据将被覆盖。</p>\n\n<p>为了解决这个问题，在进程切换时先<strong>在PCB中保存这个进程的运行环境</strong>（保存一些必要的寄存器信息），当原来的进程再次投入运行时，可以<strong>通过PCB恢复它的运行环境</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十二）进程控制'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T17:48:42+08:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十二）进程控制</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十一）进程的状态、转换和组织方式",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%80-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81-%E8%BD%AC%E6%8D%A2%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#进程的状态\" id=\"markdown-toc-进程的状态\">进程的状态</a>    <ol>\n      <li><a href=\"#创建态及就绪态\" id=\"markdown-toc-创建态及就绪态\">创建态及就绪态</a></li>\n      <li><a href=\"#运行态\" id=\"markdown-toc-运行态\">运行态</a></li>\n      <li><a href=\"#阻塞态\" id=\"markdown-toc-阻塞态\">阻塞态</a></li>\n      <li><a href=\"#终止态\" id=\"markdown-toc-终止态\">终止态</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程的状态转换\" id=\"markdown-toc-进程的状态转换\">进程的状态转换</a></li>\n  <li><a href=\"#进程的组织方式\" id=\"markdown-toc-进程的组织方式\">进程的组织方式</a>    <ol>\n      <li><a href=\"#链接方式\" id=\"markdown-toc-链接方式\">链接方式</a></li>\n      <li><a href=\"#索引方式\" id=\"markdown-toc-索引方式\">索引方式</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"进程的状态\">进程的状态</h2>\n\n<p>进程的状态分为运行、就绪、阻塞、创建和终止五种，其中<strong>运行、就绪和阻塞</strong>三种状态为<strong>进程的基本状态</strong>。</p>\n\n<p>进程的整个生命周期中，大部分时间都处于三种基本状态。</p>\n\n<p>单CPU情况下，同一时刻只会有一个进程处于运行态，多核CPU情况下，可能有多个进程处于运行态。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程状态.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"创建态及就绪态\">创建态及就绪态</h3>\n\n<p>进程正在被创建时，它的状态是“创建态”，在这个阶段操作系统会为进程分配资源、初始化PCB；</p>\n\n<p>当进程创建完成后，便进入“就绪态”；</p>\n\n<p>处于<strong>就绪态</strong>的进程已经<strong>具备运行条件</strong>，但由于<strong>没有空闲CPU</strong>，就暂时不能运行。</p>\n\n<h3 id=\"运行态\">运行态</h3>\n\n<p>系统中可能会有很多个进程都处于就绪态；</p>\n\n<p>当CPU空闲时，操作系统就会选择一个就绪进程让它上处理机运行。</p>\n\n<p>如果<strong>一个进程此时在CPU上运行</strong>，那么这个进程处于“<strong>运行态</strong>”。CPU会执行该进程对应的程序（执行指令序列）。</p>\n\n<h3 id=\"阻塞态\">阻塞态</h3>\n\n<p>在进程运行的过程中，可能会请求<strong>等待某个事件的发生（如等待某种系统资源的分配，或者等待其他进程的响应）</strong>。</p>\n\n<p>在这个事件发生之前，进程无法继续往下执行，此时<strong>操作系统会让这个进程下CPU</strong>，并让它进入“<strong>阻塞态</strong>”。</p>\n\n<p>当CPU空闲时，又会选择另一个“就绪态”进程上CPU运行。</p>\n\n<p>此后，若资源成功分配给阻塞进程，即阻塞进程所等待的事件已经发生，此时操作系统将进程转变为就绪态。</p>\n\n<h3 id=\"终止态\">终止态</h3>\n\n<p>一个进程可以执行exit系统调用，请求操作系统终止该进程。\n此时该进程会进入“终止态”，操作系统会让该进程下CPU，并回收内存空间等资源，最后还要回收该进程的PCB。</p>\n\n<p>当终止进程的工作完成之后，这个进程就彻底消失了。</p>\n\n<h2 id=\"进程的状态转换\">进程的状态转换</h2>\n\n<p>进程状态转换过程可以用进程五状态模型进行表示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程状态转换图.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>注意：</p>\n<ul>\n  <li>阻塞态→就绪态是不是进程自身能控制的，是一种<strong>被动行为</strong>。</li>\n  <li>运行态→阻塞态是一种进程自身做出的<strong>主动行为</strong>。</li>\n  <li><strong>不能由阻塞态直接转换为运行态，也不能由就绪态直接转换为阻塞态</strong>（因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求）。</li>\n</ul>\n\n<h2 id=\"进程的组织方式\">进程的组织方式</h2>\n\n<p>进程PCB中，会有一个变量state来表示进程的当前状态。如：1表示创建态、2表示就绪态、3表示运行态…\n为了对同一个状态下的各个进程进行统一的管理，操作系统会将各个进程的PCB组织起来。</p>\n\n<h3 id=\"链接方式\">链接方式</h3>\n<p>在链接方式中，操作系统按照进程状态将PCB分为<strong>多个队列</strong>；操作系统持有<strong>指向各个队列的指针</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-链接方式.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h3 id=\"索引方式\">索引方式</h3>\n<p>在索引方式中，操作系统根据进程状态的不同，建立<strong>几张索引表</strong>；操作系统持有<strong>指向各个索引表的指针</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-索引方式.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%80-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81-%E8%BD%AC%E6%8D%A2%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十一）进程的状态、转换和组织方式'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T16:38:00+08:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十一）进程的状态、转换和组织方式</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十）进程的概念、组成和特征",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5-%E7%BB%84%E6%88%90%E5%92%8C%E7%89%B9%E5%BE%81/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#理解进程和程序的区别\" id=\"markdown-toc-理解进程和程序的区别\">理解”进程“和”程序“的区别</a></li>\n  <li><a href=\"#一个进程实体由哪些部分组成\" id=\"markdown-toc-一个进程实体由哪些部分组成\">一个进程实体由哪些部分组成</a>    <ol>\n      <li><a href=\"#进程控制块pcb\" id=\"markdown-toc-进程控制块pcb\">进程控制块（PCB）</a></li>\n      <li><a href=\"#进程实体的组成\" id=\"markdown-toc-进程实体的组成\">进程实体的组成</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程有哪些重要的特征\" id=\"markdown-toc-进程有哪些重要的特征\">进程有哪些重要的特征</a></li>\n</ol>\n\n<h2 id=\"理解进程和程序的区别\">理解”进程“和”程序“的区别</h2>\n\n<p>程序：是<strong>静态的</strong>，就是个存放在磁盘里的可执行文件，就是一系列的指令集合。</p>\n\n<p>进程（Process）：是<strong>动态的</strong>，是程序的一次执行过程（同一个程序多次执行会对应多个进程）。</p>\n\n<h2 id=\"一个进程实体由哪些部分组成\">一个进程实体由哪些部分组成</h2>\n\n<h3 id=\"进程控制块pcb\">进程控制块（PCB）</h3>\n\n<p>当进程被创建时，操作系统会为该进程分配一个<strong>唯一的、不重复的</strong>“身份证号”——进程ID（Process ID，<strong>PID</strong>）。</p>\n\n<p>操作系统要记录PID、进程所属用户ID（UID）等基本的进程描述信息，以让操作系统区分各个进程。</p>\n\n<p>还要记录给进程分配了哪些资源（如分配了多少内存、正在使用哪些I/O设备、正在使用哪些文件），用于实现操作系统对资源的管理。</p>\n\n<p>还要记录进程的运行情况（如CPU使用时间、磁盘使用情况、网络流量使用情况等），用于实现操作系统对进程的控制、调度。</p>\n\n<p>这些信息都被保存在一个数据结构<strong>PCB（Process Control Block）</strong>中，即<strong>进程控制块</strong>。PCB是进程存在的唯一标志，当进程被创建时，操作系统为其创建PCB，当进程结束时，会回收其PCB。</p>\n\n<p>操作系统需要对各个并发运行的进程进行管理，<strong>但凡管理时所需要的信息，都会被放在PCB中。</strong></p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程控制块.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"进程实体的组成\">进程实体的组成</h3>\n\n<p>在进程的组成部分中，PCB是给操作系统用的。程序段、数据段是给进程自己用的。PCB、程序段及数据段在内存中的位置如下图：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程组成.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:80%;\" /></p>\n\n<p>一个<strong>进程实体（进程映像）</strong>由<strong>PCB、程序段、数据段</strong>组成。<strong>进程</strong>是<strong>动态</strong>的，<strong>进程实体（进程映像）</strong>是<strong>静态</strong>的，类似于进程的一个快照。</p>\n\n<p>进程实体反映了进程在某一时刻的状态（如x++后，x=2）。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程实体.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<ul>\n  <li>PCB是给操作系统使用的；</li>\n  <li>程序段、数据段是给进程自己用的，与进程自身的运行逻辑有关。</li>\n</ul>\n\n<p><strong>程序段、数据段、PCB</strong>三部分组成了<strong>进程实体（进程映像）</strong>。</p>\n\n<p>引入进程实体的概念后，可把进程定义为：\n<strong>进程</strong>是进程实体的<strong>运行过程</strong>，是系统进行<strong>资源分配和调度</strong>的一个独立单位。</p>\n\n<p>注意：PCB是进程存在的唯一标志。</p>\n\n<h2 id=\"进程有哪些重要的特征\">进程有哪些重要的特征</h2>\n\n<p>程序是静态的，进程是动态的，相比于程序，进程拥有以下特征：</p>\n\n<ol>\n  <li><strong>动态性</strong>：进程是程序的一次执行过程，是动态地产生、变化和消亡的；</li>\n  <li>并发性：内存中有多个进程实体，各进程可并发执行；</li>\n  <li>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位；</li>\n  <li>异步性：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题；</li>\n  <li>结构性：每个进程都会配置一个PCB。结构上看，进程由程序段、数据段、PCB组成。</li>\n</ol>\n\n<p>其中，<strong>动态性是进程最基本的特征</strong>，异步性会导致并发程序执行结果的不确定性。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5-%E7%BB%84%E6%88%90%E5%92%8C%E7%89%B9%E5%BE%81/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十）进程的概念、组成和特征'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T03:22:32+08:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十）进程的概念、组成和特征</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（九）虚拟机",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B9%9D-%E8%99%9A%E6%8B%9F%E6%9C%BA/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#虚拟机的定义\" id=\"markdown-toc-虚拟机的定义\">虚拟机的定义</a></li>\n  <li><a href=\"#第一类虚拟机\" id=\"markdown-toc-第一类虚拟机\">第一类虚拟机</a></li>\n  <li><a href=\"#第二类虚拟机\" id=\"markdown-toc-第二类虚拟机\">第二类虚拟机</a></li>\n  <li><a href=\"#两类虚拟机的对比\" id=\"markdown-toc-两类虚拟机的对比\">两类虚拟机的对比</a></li>\n  <li><a href=\"#更多指令等级\" id=\"markdown-toc-更多指令等级\">更多指令等级</a></li>\n</ol>\n\n<h2 id=\"虚拟机的定义\">虚拟机的定义</h2>\n\n<p>在同一台操作系统上并发运行某些进程，可能存在安全隐患；如果将其运行在不同硬件上，则会浪费大量硬件资源。</p>\n\n<p>虚拟机：使用虚拟化技术，将一台物理机器虚拟化为多台虚拟机器（Virtual Machine，VM），每个虚拟机器都可以独立运行一个操作系统。</p>\n\n<p>同义术语：虚拟机管理程序/虚拟机监控程序/Virtual Machine Monitor/Hypervisor</p>\n\n<h2 id=\"第一类虚拟机\">第一类虚拟机</h2>\n<p>第一类虚拟机管理程序直接运行在硬件上。虚拟机管理程序将一个物理机器虚拟化为多台虚拟机器。\n第一类虚拟机管理程序会把一个总的硬件资源划分为多个部分，每一台虚拟机上可以安装各自的操作系统，如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-第一类虚拟机.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>在运行过程中，CPU的时间片被分给若干个虚拟机器，在上层操作系统看来自己分配的是独立的CPU；而磁盘和内存这些则是按空间进行划分。每台机器都拥有自己独立的资源。</p>\n\n<p>在第一类虚拟机中，<strong>只有虚拟机管理程序是运行在内核态</strong>的，可以使用那些最高特权的指令。\n上层<strong>虚拟内核空间运行在用户态</strong>，但它以为自己运行在内核态，会执行特权指令，此时这个<strong>特权指令会被虚拟机管理程序截获并进行等价转换</strong>。</p>\n\n<h2 id=\"第二类虚拟机\">第二类虚拟机</h2>\n<p>第二类虚拟机管理程序运行在宿主操作系统（Host OS）上。</p>\n\n<p>常用第二类虚拟机：VirtualBox、VMWare</p>\n\n<p>第二类虚拟机想要为虚拟机器分配硬件资源时，需要请求操作系统为其分配。<strong>硬件资源的管理者依旧是宿主操作系统</strong>。</p>\n\n<p>注意：在第二类虚拟机中，<strong>部分虚拟机管理程序运行在内核态</strong>，这部分是<strong>以虚拟机驱动程序的方式加载到操作系统内核</strong>当中的。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-第二类虚拟机.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"两类虚拟机的对比\">两类虚拟机的对比</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th> </th>\n      <th>第一类VMM</th>\n      <th>第二类VMM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>对物理资源的控制权</td>\n      <td>直接运行在硬件之上，能直接控制和分配物理资源。</td>\n      <td>运行在Host OS之上，依赖于Host OS为其分配物理资源。</td>\n    </tr>\n    <tr>\n      <td>资源分配方式</td>\n      <td>在安装Guest OS时，VMM要在原本的硬盘上自行分配存储空间，类似于”外核“的分配方式，分配未经抽象的物理硬件。</td>\n      <td>Guest OS拥有自己的虚拟磁盘，该盘实际上是Host OS文件系统中的一个大文件。Guest OS分配到的内存是虚拟内存。</td>\n    </tr>\n    <tr>\n      <td>性能</td>\n      <td>性能较好。</td>\n      <td>性能更差，需要Host OS作为”中介“。</td>\n    </tr>\n    <tr>\n      <td>可支持的虚拟机数量</td>\n      <td>更多，不需要和Host OS竞争资源，相同的硬件资源可以支持更多的虚拟机。</td>\n      <td>更少，Host OS本身需要使用物理资源，Host OS上运行的其他进程也需要物理资源。</td>\n    </tr>\n    <tr>\n      <td>虚拟机的可迁移性</td>\n      <td>更差。</td>\n      <td>更好，只需导出虚拟机镜像文件即可迁移到另一台Host OS 上，商业化应用更广泛。</td>\n    </tr>\n    <tr>\n      <td>运行模式</td>\n      <td>第一类VMM运行在最高特权级（Ring 0），可以执行最高特权的指令。</td>\n      <td>第二类VMM部分运行在用户态、部分运行在内核态。Guest OS发出的系统调用会被VMM截获，并转化为VMM对Host OS的系统调用。</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"更多指令等级\">更多指令等级</h2>\n<p>支持虚拟化的CPU通常分为更多的指令等级，如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-虚拟化CPU指令等级.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>其中，Ring 0表示最高特权级指令；Ring 3表示最低特权级指令。</p>\n\n<p>在第一类虚拟机中，可以使VMM运行在Ring 0，虚拟内核空间运行在Ring 1，虚拟用户空间运行在Ring 2。这样可以保证在运行特权指令Ring 1和Ring 2时，虚拟机管理程序无需介入，提升运行效率。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B9%9D-%E8%99%9A%E6%8B%9F%E6%9C%BA/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（九）虚拟机'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T22:39:30+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（九）虚拟机</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（八）操作系统引导（Boot）",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AB-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC-Boot/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是操作系统引导\" id=\"markdown-toc-什么是操作系统引导\">什么是操作系统引导</a></li>\n  <li><a href=\"#与开机相关的数据\" id=\"markdown-toc-与开机相关的数据\">与开机相关的数据</a></li>\n  <li><a href=\"#操作系统引导的过程\" id=\"markdown-toc-操作系统引导的过程\">操作系统引导的过程</a></li>\n</ol>\n\n<h2 id=\"什么是操作系统引导\">什么是操作系统引导</h2>\n\n<p>开机的时候，怎么让操作系统运行起来？</p>\n\n<h2 id=\"与开机相关的数据\">与开机相关的数据</h2>\n\n<p><img src=\"\\images\\posts\\操作系统-磁盘数据.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:80%;\" /></p>\n\n<ul>\n  <li>ROM（Basic Input/Output System，BIOS）引导程序：指示CPU将磁盘的主引导记录读入RAM；</li>\n  <li>主引导记录（MBR）：CPU可以执行其中的磁盘引导程序，判断主分区的位置，读入分区引导记录；</li>\n  <li>分区引导记录（PBR）：执行引导程序，在分区根目录下的某个位置找到并读入启动管理器；</li>\n  <li>启动管理器：执行启动管理器，完成操作系统初始化的一系列工作。</li>\n</ul>\n\n<h2 id=\"操作系统引导的过程\">操作系统引导的过程</h2>\n\n<ol>\n  <li>CPU从一个特定主存地址开始取指令，执行<strong>ROM（BIOS）中的引导程序</strong>（先进行硬件自检，再开机）；</li>\n  <li>将磁盘的第一块——<strong>主引导记录（MBR）</strong>读入丙存，执行磁盘引导程序，扫描分区表；</li>\n  <li>从活动分区（又称主分区，即安装了操作系统的分区）读入<strong>分区引导记录（PBR）</strong>，执行其中的程序；</li>\n  <li>从根目录下找到完整的<strong>操作系统初始化程序（即启动管理器）</strong>并执行，完成“开机”的一系列动作。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AB-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC-Boot/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（八）操作系统引导（Boot）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T20:24:43+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（八）操作系统引导（Boot）</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（七）操作系统体系结构",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%83-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#操作系统的内核\" id=\"markdown-toc-操作系统的内核\">操作系统的内核</a></li>\n  <li><a href=\"#宏内核大内核单内核和微内核\" id=\"markdown-toc-宏内核大内核单内核和微内核\">宏内核（大内核/单内核）和微内核</a></li>\n  <li><a href=\"#分层结构\" id=\"markdown-toc-分层结构\">分层结构</a></li>\n  <li><a href=\"#模块化\" id=\"markdown-toc-模块化\">模块化</a></li>\n  <li><a href=\"#外核\" id=\"markdown-toc-外核\">外核</a></li>\n</ol>\n\n<h2 id=\"操作系统的内核\">操作系统的内核</h2>\n\n<p>操作系统内部的层次结构可以进一步划分，如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-操作系统分层.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<ul>\n  <li>非内核部分：Ubuntu、CentOS的开发团队，其主要工作是实现非内核功能，而内核都是用了Linux内核。</li>\n  <li>时钟中断：利用时钟中断实现计时功能；</li>\n  <li>原语：原语是一种特殊的程序，具有原子性。也就是说，这段程序的运行必须一气呵成，不可被“中断”。</li>\n</ul>\n\n<p>操作系统内部可以划分为内核和非内核部分，<strong>内核</strong>是操作系统最基本、最核心的部分，实现操作系统内核功能的程序是内核程序。</p>\n\n<p>其中，<strong>时钟管理、中断处理和原语等</strong>部分是<strong>与硬件关联较紧密的模块</strong>；而<strong>管理模块</strong>负责的管理工作更多的是<strong>对数据结构的操作，不会直接涉及硬件</strong>。</p>\n\n<p><strong>操作系统内核</strong>需要运行在<strong>内核态</strong>；</p>\n\n<p><strong>操作系统的非内核功能</strong>运行在<strong>用户态</strong>。</p>\n<h2 id=\"宏内核大内核单内核和微内核\">宏内核（大内核/单内核）和微内核</h2>\n\n<p>把所有功能都包含在内的体系结构叫做宏内核；</p>\n\n<p><img src=\"\\images\\posts\\操作系统-宏内核体系结构.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>内核当中只保留与硬件关联最紧密部分的体系结构叫微内核。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-微内核体系结构.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>现在，应用程序想要请求操作系统的服务，这个服务的处理同时涉及到进程管理、存储管理、设备管理。</p>\n\n<p>此时使用宏内核结构需要进行两次变态，而使用微内核结构需要进行六次变态。</p>\n\n<p><strong>变态的过程是有成本的</strong>，要消耗不少时间，<strong>频繁地变态会降低系统性能</strong>。</p>\n\n<p>宏内核的特点</p>\n\n<p>所有的系统功能都放在内核里（宏内核结构的OS通常也采用了”模块化”的设计思想）。</p>\n\n<p>宏内核的优点</p>\n\n<p>性能高，内核内部各种功能都可以直接相互调用。</p>\n\n<p>宏内核的缺点</p>\n\n<ol>\n  <li>内核庞大功能复杂，难以维护；</li>\n  <li>内核中某个功能模块出错，就可能导致整个系统崩溃。</li>\n</ol>\n\n<p>微内核的特点</p>\n\n<p>只把中断、原语、进程通信等最核心的功能放入内核。进程管理、文件管理、设备管理等功能以用户进程的形式运行在用户态。</p>\n\n<p>微内核的优点</p>\n\n<ol>\n  <li>内核小功能少、易于维护，内核可靠性高；</li>\n  <li>内核外的某个功能模块出错不会导致整个系统崩溃。</li>\n</ol>\n\n<p>微内核的缺点</p>\n\n<ol>\n  <li>性能低，需要频繁的切换用户态/核心态。用户态下的各功能模块不可以直接相互调用，只能通过内核的”消息传递“来间接通信；</li>\n  <li>用户态下的各功能模块不可以直接相互调用，只能通过内核的”消息传递“来间接通信。</li>\n</ol>\n\n<h2 id=\"分层结构\">分层结构</h2>\n\n<p>分层结构的特点</p>\n\n<p><img src=\"\\images\\posts\\操作系统-分层结构.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>内核分多层，每层可单向调用更低一层提供的接口。</p>\n\n<p>分层结构的优点</p>\n\n<ol>\n  <li>便于调试和验证，自底向上逐层调试验证；</li>\n  <li>易扩充和易维护，各层之间调用接口清晰固定。</li>\n</ol>\n\n<p>分层结构的缺点</p>\n\n<ol>\n  <li>仅可调用相邻低层，难以合理定义各层的边界；</li>\n  <li>效率低，不可跨层调用，系统调用执行时间长。</li>\n</ol>\n\n<h2 id=\"模块化\">模块化</h2>\n\n<p>模块化是将操作系统按功能划分为若干个具有一定独立性的模块。每个模块具有某方面的管理功能，并<strong>规定好各模块间的接口</strong>，使各模块之间能通过接口进行通信。\n还可以进一步将各模块细分为若干个具有一定功能的子模块，同样也<strong>规定好各子模块之间的接口</strong>。\n把这种设计方法称为<strong>模块-接口法</strong>，下图为由模块、子模块等组成的模块化操作系统结构：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-模块化.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>模块化的特点</p>\n\n<p>将内核划分为多个模块，各模块之间相互协作。</p>\n\n<p>内核=主模块+可加载内核模块；</p>\n\n<p>主模块︰只负责核心功能，如进程调度、内存管理；</p>\n\n<p>可加载内核模块︰可以动态加载新模块到内核，而无需重新编译整个内核。</p>\n\n<p>模块化的优点</p>\n\n<ol>\n  <li>模块间逻辑清晰易于维护，确定模块间接口后即可多模块同时开发；</li>\n  <li>支持动态加载新的内核模块（如：安装设备驱动程序、安装新的文件系统模块到内核），增强OS适应性；</li>\n  <li>任何模块都可以直接调用其他模块，无需采用消息传递进行通信，效率高。</li>\n</ol>\n\n<p>模块化的缺点</p>\n\n<ol>\n  <li>模块间的接口定义未必合理、实用；</li>\n  <li>模块间相互依赖，更难调试和验证。</li>\n</ol>\n\n<h2 id=\"外核\">外核</h2>\n\n<p>外核的特点</p>\n\n<p>内核负责进程调度、进程通信等功能，外核负责为用户进程分配未经抽象的硬件资源，且由外核负责保证资源使用安全。</p>\n\n<p>外核的优点</p>\n\n<ol>\n  <li>外核可直接给用户进程分配”不虚拟、不抽象“的硬件资源，使用户进程可以更灵活地使用硬件资源；</li>\n  <li>减少了虚拟硬件资源的”映射层“，提升效率。</li>\n</ol>\n\n<p>外核的缺点</p>\n\n<ol>\n  <li>降低了系统的一致性；</li>\n  <li>使系统变得更复杂。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%83-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（七）操作系统体系结构'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T19:29:07+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（七）操作系统体系结构</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（六）系统调用",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AD-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是系统调用系统调用的作用\" id=\"markdown-toc-什么是系统调用系统调用的作用\">什么是系统调用？系统调用的作用</a></li>\n  <li><a href=\"#系统调用与库函数的区别\" id=\"markdown-toc-系统调用与库函数的区别\">系统调用与库函数的区别</a></li>\n  <li><a href=\"#为什么系统调用是必须的\" id=\"markdown-toc-为什么系统调用是必须的\">为什么系统调用是必须的？</a></li>\n  <li><a href=\"#什么功能要用系统调用实现\" id=\"markdown-toc-什么功能要用系统调用实现\">什么功能要用系统调用实现</a></li>\n  <li><a href=\"#系统调用的过程\" id=\"markdown-toc-系统调用的过程\">系统调用的过程</a>    <ol>\n      <li><a href=\"#陷入指令系统调用\" id=\"markdown-toc-陷入指令系统调用\">陷入指令系统调用</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"什么是系统调用系统调用的作用\">什么是系统调用？系统调用的作用</h2>\n<p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中程序接口由一组<strong>系统调用</strong>组成。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的作用1.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，<strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的作用2.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h2 id=\"系统调用与库函数的区别\">系统调用与库函数的区别</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>普通应用程序</th>\n      <th>可直接进行系统调用，也可使用库函数。有的库函数涉及系统调用，有的不涉及。</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>编程语言</td>\n      <td>向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便。</td>\n    </tr>\n    <tr>\n      <td>操作系统</td>\n      <td>向上提供系统调用，使得上层程序能请求内核的服务。</td>\n    </tr>\n    <tr>\n      <td>裸机</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用和库函数1.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>不涉及系统调用的库函数：如“取绝对值”的函数；</p>\n\n<p>涉及系统调用的库函数：如“创建一个新文件”的函数。</p>\n\n<h2 id=\"为什么系统调用是必须的\">为什么系统调用是必须的？</h2>\n\n<p>生活场景：去学校打印店打印论文，你按下了WPS的“打印”选项，打印机开始工作。</p>\n\n<p>你的论文打印到一半时，另一位同学按下了Word的“打印”按钮，开始打印他自己的论文。</p>\n\n<p>如果两个进程可以随意地、并发地共享打印机资源，打印机设备交替地收到WPS和Word两个进程发来的打印请求，两篇论文的内容混杂在一起了…</p>\n\n<p>解决方法：<strong>由操作系统内核对共享资源进行统一管理</strong>，并向上提供“系统调用”用户进程想要使用打印机这种共享资源，只能通过系统调用向操作系统内核发出请求。内核会对各个请求进行协调处理。</p>\n\n<h2 id=\"什么功能要用系统调用实现\">什么功能要用系统调用实现</h2>\n\n<p>应用程序通过系统调用请求操作系统的服务。\n而系统中的各种共享资源都由操作系统内核统一掌管，因此<strong>凡是与共享资源有关的操作(如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求</strong>，由操作系统内核代为完成。\n这样可以<strong>保证系统的稳定性和安全性</strong>，防止用户进行非法操作。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的功能.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h2 id=\"系统调用的过程\">系统调用的过程</h2>\n\n<h3 id=\"陷入指令系统调用\">陷入指令系统调用</h3>\n<ol>\n  <li>应用程序执行传参指令，<strong>将传递的参数（参数1、参数2…）存放于CPU寄存器</strong>，参数可以指明系统调用类型；</li>\n  <li>应用程序执行<strong>陷入指令</strong>，引发一个内中断信号。该中断由陷入指令引发，因此转入相应中断处理程序，即系统调用的入口程序；</li>\n  <li>处理器转变为内核态运行，执行<strong>系统调用入口程序</strong>，根据寄存器中的参数判断用户需要哪种系统调用服务；</li>\n  <li>运行<strong>系统调用所对应的处理程序</strong>；</li>\n  <li>完成系统调用，CPU转变为用户态。</li>\n</ol>\n\n<p>即传递系统调用参数→执行陷入指令（用户态）→执行相应的内请求核程序处理系统调用（内核态）→返回应用程序。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的过程1.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:80%;\" /></p>\n\n<p>注意：</p>\n<ol>\n  <li><strong>陷入指令</strong>是在<strong>用户态</strong>执行的，执行陷入指令之后立即<strong>引发一个内中断</strong>，使CPU<strong>进入内核态</strong>；</li>\n  <li><strong>发出系统调用请求是在用户态</strong>，而<strong>对系统调用的相应处理在核心态</strong>下进行。</li>\n</ol>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AD-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（六）系统调用'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T18:35:40+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（六）系统调用</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（五）中断和异常",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%94-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#中断的作用\" id=\"markdown-toc-中断的作用\">中断的作用</a></li>\n  <li><a href=\"#中断的类型\" id=\"markdown-toc-中断的类型\">中断的类型</a>    <ol>\n      <li><a href=\"#内中断异常类型\" id=\"markdown-toc-内中断异常类型\">内中断（异常）类型：</a></li>\n      <li><a href=\"#外中断类型\" id=\"markdown-toc-外中断类型\">外中断类型：</a></li>\n      <li><a href=\"#内中断异常示例\" id=\"markdown-toc-内中断异常示例\">内中断（异常）示例</a></li>\n      <li><a href=\"#外中断示例\" id=\"markdown-toc-外中断示例\">外中断示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#中断机制的基本原理\" id=\"markdown-toc-中断机制的基本原理\">中断机制的基本原理</a></li>\n</ol>\n\n<h2 id=\"中断的作用\">中断的作用</h2>\n<p>CPU上会运行两种程序，一种是<strong>操作系统内核程序</strong>，一种是<strong>应用程序</strong>。</p>\n\n<p>在合适的情况下，操作系统内核会把CPU的使用权主动让给应用程序。</p>\n\n<p>“中断”是<strong>让操作系统内核夺回CPU使用权的唯一途径</strong>。</p>\n\n<p>如果没有“中断”机制，那么一旦应用程序上CPU运行，CPU就会一直运行这个应用程序（没有中断，就没有并发）。</p>\n\n<h2 id=\"中断的类型\">中断的类型</h2>\n\n<p>广义上中断包括内中断（又称异常）和外中断（狭义上的中断）两种。</p>\n\n<p>内中断与当前执行的<strong>指令有关</strong>，中断信号来源于<strong>CPU内部</strong>。</p>\n\n<p>外中断与当前执行的<strong>指令无关</strong>，中断信号来源于<strong>CPU外部</strong>。</p>\n\n<h3 id=\"内中断异常类型\">内中断（异常）类型：</h3>\n<ol>\n  <li>陷入（trap）：由陷入指令引发，是应用程序故意引发的；</li>\n  <li>故障（fault）：由错误条件引起的，可能被内核程序修复。内核程序修复故障后会把CPU使用权还给应用程序，让它继续执行下去。如缺页故障等；</li>\n  <li>终止（abort）：由致命错误引起，内核程序无法修复该错误，因此一般不再将CPU使用权还给引发终止的应用程序，而是直接终止该应用程序。如整数除0、非法使用特权指令等。</li>\n</ol>\n\n<h3 id=\"外中断类型\">外中断类型：</h3>\n<p>包括时钟中断、I/O中断等。</p>\n\n<h3 id=\"内中断异常示例\">内中断（异常）示例</h3>\n\n<p><strong>终止指令</strong>：若当前执行的指令是非法的，则会引发一个中断信号。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 试图在用户态下执行特权指令\n2. 执行除法指令时发现除数为0\n</code></pre></div></div>\n\n<p><strong>陷入指令</strong>：有时候应用程序想请求操作系统内核的服务，此时会执行一条特殊的指令――陷入指令，该指令会引发一个内部中断信号。</p>\n\n<p>执行“陷入指令”，意味着应用程序主动地将CPU控制权还给操作系统内核。“系统调用”就是通过陷入指令完成的。</p>\n\n<h3 id=\"外中断示例\">外中断示例</h3>\n\n<p><strong>每一条指令执行结束时</strong>，CPU都会例行检查是否有外中断信号。</p>\n\n<p>时钟中断：时钟部件每隔一个时间片（如50ms）会给CPU发送一个时钟中断信号。时钟中断的过程如下：</p>\n\n<ol>\n  <li>在应用程序1的执行过程中，执行时间达到一个时间片，CPU分给该应用程序的时间耗尽。</li>\n  <li>此时时钟部件向CPU发送一个时钟中断信号，CPU转变为内核态并执行处理时钟中断的内核程序。操作系统内核决定接下来让应用程序2在上CPU运行。</li>\n  <li>接下来切换为用户态执行应用程序2，如此往复。</li>\n</ol>\n\n<p>I/O中断：由输入/输出设备发来的中断信号。当输入/输出任务完成后，向CPU发送中断信号。</p>\n\n<h2 id=\"中断机制的基本原理\">中断机制的基本原理</h2>\n\n<p>不同的中断信号，需要用不同的中断处理程序来处理。当CPU检测到中断信号后，会根据中断信号的类型去查询“<strong>中断向量表</strong>”，以此来找到相应的中断处理程序在内存中的存放位置。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-中断向量表示例.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p><strong>中断处理程序一定是内核程序</strong>，因此需要运行在“内核态”。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%94-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（五）中断和异常'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T18:09:49+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（五）中断和异常</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（四）操作系统的运行机制",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#程序是如何运行的\" id=\"markdown-toc-程序是如何运行的\">程序是如何运行的</a></li>\n  <li><a href=\"#内核程序和应用程序\" id=\"markdown-toc-内核程序和应用程序\">内核程序和应用程序</a></li>\n  <li><a href=\"#特权指令和非特权指令\" id=\"markdown-toc-特权指令和非特权指令\">特权指令和非特权指令</a></li>\n  <li><a href=\"#处理器的内核态和用户态\" id=\"markdown-toc-处理器的内核态和用户态\">处理器的内核态和用户态</a>    <ol>\n      <li><a href=\"#内核态和用户态之间的转换\" id=\"markdown-toc-内核态和用户态之间的转换\">内核态和用户态之间的转换</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"程序是如何运行的\">程序是如何运行的</h2>\n<p>在完成代码编写后，编译器将高级语言“翻译”成二进制的机器指令，<strong>程序运行的过程其实就是CPU执行一条一条机器指令的过程</strong>。</p>\n\n<p>“指令”就是处理器（CPU）能识别、执行的最基本命令。</p>\n\n<p>很多人习惯把Linux、Windows、MacOS的“小黑框”中使用的命令也称为“指令”，其实这是“交互式命令接口”，注意与本节的“指令”区别开。本节中的“指令”指二进制机器指令。</p>\n\n<h2 id=\"内核程序和应用程序\">内核程序和应用程序</h2>\n<p>普通程序员写的程序就是“<strong>应用程序</strong>”；</p>\n\n<p>微软、苹果有一帮人负责实现操作系统，他们写的是“<strong>内核程序</strong>”由很多内核程序组成了“<strong>操作系统内核</strong>”，或简称“<strong>内核（Kernel）</strong>”，内核是操作系统最重要最核心的部分，也是<strong>最接近硬件的部分</strong>。</p>\n\n<p>一个操作系统只要有内核就够了（比如Docker仅需Linux内核）。操作系统的功能未必都在内核中，如GUI。</p>\n\n<h2 id=\"特权指令和非特权指令\">特权指令和非特权指令</h2>\n<p>操作系统内核作为“管理者”，有时会让CPU执行一些“特权指令”，如内存清零指令。这些指令影响重大，只允许“管理者”，即操作系统内核来使用。</p>\n\n<p>应用程序只能使用“非特权指令”，如加法指令、减法指令等。</p>\n\n<p>在<strong>CPU设计和生产的时候就划分了特权指令和非特权指令</strong>，因此CPU执行一条指令前就能判断出其类型。</p>\n\n<h2 id=\"处理器的内核态和用户态\">处理器的内核态和用户态</h2>\n<p>虽然CPU能判断出指令类型，但是它怎么区分此时正在运行的是内核程序还是应用程序?</p>\n\n<p>CPU有两种状态，“<strong>内核态</strong>”和“<strong>用户态</strong>”</p>\n\n<p>处于内核态时，说明此时<strong>正在运行的是内核程序</strong>，此时<strong>可以执行特权指令</strong>；</p>\n\n<p>处于用户态时，说明此时<strong>正在运行的是应用程序</strong>，此时<strong>只能执行非特权指令</strong>。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CPU中有一个寄存器叫程序状态字寄存器（PSW），其中有个二进制位，1表示“内核态”，0表示“用户态”。\n</code></pre></div></div>\n\n<h3 id=\"内核态和用户态之间的转换\">内核态和用户态之间的转换</h3>\n\n<ol>\n  <li>刚开机时，CPU为“内核态”，操作系统内核程序先上CPU运行；</li>\n  <li>开机完成后，用户可以启动某个应用程序；</li>\n  <li>操作系统内核程序在合适的时候主动让出CPU，让该应用程序上CPU运行（操作系统内核在让出CPU之前，会<strong>用一条特权指令把PSW的标志位设置为“用户态”</strong>）；</li>\n  <li>应用程序运行在“用户态”；</li>\n  <li>应用程序中植入了一条特权指令，CPU发现接下来要执行的这条指令是特权指令，但是自己又处于“用户态”；</li>\n  <li>因此，这个事件会引发一个<strong>中断信号</strong>（<strong>CPU检测到中断信号后</strong>，会立即<strong>变为“内核态”</strong>，并停止运行当前的应用程序，转而运行处理中断信号的内核程序）；</li>\n  <li>“中断”使操作系统再次夺回CPU的控制权；</li>\n  <li>操作系统会对引发中断的事件进行处理，处理完了再把CPU使用权交给别的应用程序。</li>\n</ol>\n\n<p>内核态→用户态：执行一条<strong>特权指令——修改PSW</strong>的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权。</p>\n\n<p>用户态→内核态：由“<strong>中断</strong>”引发，<strong>硬件自动完成变态过程</strong>，触发中断信号意味着操作系统将强行夺回CPU的使用权（除了非法使用特权指令之外，还有很多事件会触发中断信号。一个共性是，<strong>但凡需要操作系统介入的地方，都会触发中断信号</strong>）。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（四）操作系统的运行机制'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T17:45:27+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（四）操作系统的运行机制</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三）操作系统的发展和分类",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%92%8C%E5%88%86%E7%B1%BB/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#手工操作阶段\" id=\"markdown-toc-手工操作阶段\">手工操作阶段</a></li>\n  <li><a href=\"#批处理阶段\" id=\"markdown-toc-批处理阶段\">批处理阶段</a>    <ol>\n      <li><a href=\"#单道批处理系统\" id=\"markdown-toc-单道批处理系统\">单道批处理系统</a></li>\n      <li><a href=\"#多道批处理系统\" id=\"markdown-toc-多道批处理系统\">多道批处理系统</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#分时操作系统\" id=\"markdown-toc-分时操作系统\">分时操作系统</a></li>\n  <li><a href=\"#实时操作系统\" id=\"markdown-toc-实时操作系统\">实时操作系统</a></li>\n  <li><a href=\"#其它操作系统\" id=\"markdown-toc-其它操作系统\">其它操作系统</a></li>\n</ol>\n\n<p>操作系统的发展主要包含以下发展阶段及分类：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-操作系统的分类.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h2 id=\"手工操作阶段\">手工操作阶段</h2>\n\n<p>在操作系统的手工操作阶段，由于大量时间被消耗在纸带的装取及读写上，计算机的计算效率极低。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-手工操作.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>手工操作阶段的主要缺点是<strong>用户独占全机、人机速度矛盾导致资源利用率极低</strong>。</p>\n\n<h2 id=\"批处理阶段\">批处理阶段</h2>\n\n<h3 id=\"单道批处理系统\">单道批处理系统</h3>\n\n<p>引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-单道批处理示意.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>用户通过外围机把程序提前存到磁带里，磁带的读写速度比纸带快很多。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-单道批处理.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。</p>\n\n<p>主要缺点：<strong>内存中仅能有一道程序运行</strong>，只有该程序运行结束之后才能调入下一道程序。<strong>CPU有大量的时间是在空闲等待I/O完成</strong>，资源利用率依然很低。</p>\n\n<h3 id=\"多道批处理系统\">多道批处理系统</h3>\n\n<p>每次往内存中读入多道程序，此时操作系统正式诞生，用于支持多道程序并发运行。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-多道批处理.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>主要优点：多道程序<strong>并发</strong>执行，<strong>共享</strong>计算机资源。<strong>资源利用率大幅提升</strong>，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。</p>\n\n<p>主要缺点：用户响应时间长，<strong>没有人机交互功能</strong>（用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行。比如无法调试程序/无法在程序运行过程中输入一些参数）</p>\n\n<h2 id=\"分时操作系统\">分时操作系统</h2>\n\n<p>分时操作系统的计算机以<strong>时间片</strong>为单位<strong>轮流为各个用户/作业服务</strong>，各个用户可通过终端与计算机进行交互。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-分时操作系统示意.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>主要优点：用户请求可以被即时响应，<strong>解决了人机交互问题</strong>。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。</p>\n\n<p>主要缺点：<strong>不能优先处理一些紧急任务</strong>。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。</p>\n\n<h2 id=\"实时操作系统\">实时操作系统</h2>\n\n<p>主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。</p>\n\n<p>在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且<strong>要在严格的时限内处理完事件</strong>。实时操作系统的主要特点是<strong>及时性和可靠性</strong>。</p>\n\n<p>实时操作系统主要包含硬实时系统和软实时系统。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 硬实时系统必须在绝对严格的规定时间内完成处理（如导弹控制系统、自动驾驶系统）；\n2. 软实时系统能接收偶尔违反时间规定（如抢票系统）。\n</code></pre></div></div>\n\n<h2 id=\"其它操作系统\">其它操作系统</h2>\n\n<p>网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，<strong>实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信</strong>。（如：Windows NT就是一种典型的网络操作系统，网站服务器就可以使用）</p>\n\n<p>分布式操作系统：主要特点是<strong>分布性和并行性</strong>。系统中的各台计算机地位相同，<strong>任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</strong>。</p>\n\n<p>个人计算机操作系统：如Windows XP、Mac OS，方便个人使用。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%92%8C%E5%88%86%E7%B1%BB/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（三）操作系统的发展和分类'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T16:26:17+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（三）操作系统的发展和分类</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二）操作系统的特征",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#并发\" id=\"markdown-toc-并发\">并发</a></li>\n  <li><a href=\"#共享\" id=\"markdown-toc-共享\">共享</a>    <ol>\n      <li><a href=\"#互斥共享方式\" id=\"markdown-toc-互斥共享方式\">互斥共享方式</a></li>\n      <li><a href=\"#同时共享方式\" id=\"markdown-toc-同时共享方式\">同时共享方式</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#并发和共享的关系\" id=\"markdown-toc-并发和共享的关系\">并发和共享的关系</a></li>\n  <li><a href=\"#虚拟\" id=\"markdown-toc-虚拟\">虚拟</a></li>\n  <li><a href=\"#异步\" id=\"markdown-toc-异步\">异步</a></li>\n</ol>\n\n<p>操作系统主要包括并发、共享、虚拟及异步四个特征。其中并发和共享二者互为存在条件，且没有并发和共享，就谈不上虚拟和异步，因此<strong>并发和共享是操作系统的两个最基本的特征</strong>。</p>\n\n<h2 id=\"并发\">并发</h2>\n\n<p><strong>并发</strong>：指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。</p>\n\n<p><strong>并行</strong>：指两个或多个事件在同一时刻同时发生。</p>\n\n<p><strong>操作系统的并发性</strong>指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。</p>\n\n<p>操作系统是伴随着“多道程序技术”而出现的。因此操作系统和程序并发是一起诞生的。</p>\n\n<p>单核CPU同一时刻只能执行一个程序，各个程序只能并发执行；多核CPU同一时刻可以同时执行多个程序，多个程序可以并行执行。</p>\n\n<p>Intel第八代i3处理器就是4核CPU，意味着可以并行地执行4个程序。但即使是对于4核CPU来说，只要有4个以上的程序需要“同时”运行，那么并发性依然是必不可少的，因此并发性是操作系统一个最基本的特性。</p>\n\n<h2 id=\"共享\">共享</h2>\n<p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n\n<p>共享主要包括互斥共享和同时共享两种共享方式。</p>\n\n<h3 id=\"互斥共享方式\">互斥共享方式</h3>\n<p>系统中的某些资源，虽然可以提供给多个进程使用，但<strong>一个时间段内只允许一个进程访问该资源</strong>。</p>\n\n<p>比如使用QQ和微信进行视频通话，同一时间段摄像头只能分配给其中一个进程。</p>\n\n<h3 id=\"同时共享方式\">同时共享方式</h3>\n<p>系统中的某些资源，<strong>允许一个时间段内由多个进程“同时”对它们进行访问</strong>。但所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问的（即分时共享）。</p>\n\n<p>比如使用QQ发送文件A，同时使用微信发送文件B。宏观上看，两边都在同时读取并发送文件，说明两个进程都在访问硬盘资源，从中读取数据。微观上看，两个进程是交替着访问硬盘的。</p>\n\n<h2 id=\"并发和共享的关系\">并发和共享的关系</h2>\n<p><strong>并发性</strong>指计算机系统中同时存在着多个运行着的程序。</p>\n\n<p><strong>共享性</strong>是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n\n<p>在比如使用QQ发送文件A，同时使用微信发送文件B这一过程中，</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 两个进程正在并发执行（并发性）\n2. 需要共享地访问硬盘资源（共享性）\n</code></pre></div></div>\n\n<p>如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义；如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。</p>\n\n<h2 id=\"虚拟\">虚拟</h2>\n<p>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者)是用户感受到的。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>GTA5需要4GB的运行内存，QQ需要256MB的内存，迅雷需要256MB的内存，网易云音乐需要256MB的内存......\n我的电脑:4GB内存\n问题:这些程序同时运行需要的内存远大于4GB，那么为什么它们还可以在我的电脑上同时运行呢?\n答:这是虚拟存储器技术。实际只有4GB的内存，在用户看来似乎远远大于4GB\n</code></pre></div></div>\n\n<p>虚拟存储器技术用到了<strong>空分复用技术</strong>。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>某用户在单核CPU的电脑上同时打开了6个应用程序。\n问题:既然一个程序需要被分配CPU才能正常执行，那么为什么单核CPU的电脑中能同时运行这么多个程序呢?\n答:这是虚拟处理器技术。实际上只有一个单核CPU，在用户看来似乎有6个CPU在同时为自己服务\n</code></pre></div></div>\n\n<p>这里用到虚拟技术中的<strong>时分复用技术</strong>。微观上处理机在各个微小的时间段内交替为各个进程服务。</p>\n\n<p>显然，如果失去了并发性，则<strong>一个时间段内系统中只需运行一道程序，那么就失去了实现虚拟性的意义了</strong>。因此，<strong>没有并发性，就谈不上虚拟性</strong>。</p>\n\n<h2 id=\"异步\">异步</h2>\n<p>异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p>\n\n<p>由于并发运行的程序会争抢着使用系统资源，而系统中的资源有限，因此进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。</p>\n\n<p>如果失去了并发性，即系统只能串行地运行各个程序，那么每个程序的执行会一贯到底。<strong>只有系统拥有并发性，才有可能导致异步性</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（二）操作系统的特征'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T03:45:10+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（二）操作系统的特征</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（一）操作系统的概念和功能",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8A%9F%E8%83%BD/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#声明\" id=\"markdown-toc-声明\">声明</a></li>\n  <li><a href=\"#操作系统的定义\" id=\"markdown-toc-操作系统的定义\">操作系统的定义</a></li>\n  <li><a href=\"#操作系统的功能和目标\" id=\"markdown-toc-操作系统的功能和目标\">操作系统的功能和目标</a>    <ol>\n      <li><a href=\"#作为系统资源的管理者\" id=\"markdown-toc-作为系统资源的管理者\">作为系统资源的管理者</a></li>\n      <li><a href=\"#向上层提供方便易用的服务\" id=\"markdown-toc-向上层提供方便易用的服务\">向上层提供方便易用的服务</a>        <ol>\n          <li><a href=\"#封装思想\" id=\"markdown-toc-封装思想\">封装思想</a></li>\n          <li><a href=\"#操作系统提供的服务示例\" id=\"markdown-toc-操作系统提供的服务示例\">操作系统提供的服务示例</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#作为最接近硬件的层次\" id=\"markdown-toc-作为最接近硬件的层次\">作为最接近硬件的层次</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"声明\">声明</h2>\n<p>本系列主要参考了\n<a href=\"https://www.bilibili.com/video/BV1YE411D7nH\">王道计算机考研 操作系统</a>\n完成，准确来说是作者的学习笔记，读者可以视频为主，以本文为辅进行学习。</p>\n\n<h2 id=\"操作系统的定义\">操作系统的定义</h2>\n\n<p>在了解操作系统的定义前，为了方便起见，我们可以将计算机系统抽象为包含如下四层的层次结构。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-计算机系统层次结构2.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>明确操作系统在计算机系统所在位置后，可以给出操作系统的定义</p>\n\n<p>操作系统（Operating System，OS）是指控制和<strong>管理</strong>整个计算机系统的<strong>硬件和软件</strong>资源\\(^1\\)，并合理地组织调度计算机的工作和资源的分配；以<strong>提供给用户和其他软件方便的接口和环境</strong>\\(^2\\)；它是计算机系统中最基本的、最接近系统硬件的<strong>系统软件</strong>\\(^3\\)。</p>\n\n<p>在任务管理器中可以看到操作系统对应用程序使用的管理及对硬件资源的监控。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-任务管理器.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"操作系统的功能和目标\">操作系统的功能和目标</h2>\n\n<h3 id=\"作为系统资源的管理者\">作为系统资源的管理者</h3>\n\n<p>操作系统作为系统资源的管理者，其提供的四种功能包括<strong>处理机管理、存储器管理、文件管理及设备管理</strong>。其主要目标包括<strong>安全和高效</strong>。</p>\n\n<p>使用QQ进行视频聊天时，操作系统的工作主要包含四步：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 在各个文件夹中找到QQ安装的位置；（逐层打开文件夹，找到QQ的可执行文件存放位置。）\n2. 用户双击打开QQ；（将该程序相关数据放入内存，执行一个程序前**需要将该程序放到内存中**，才能被CPU处理。）\n3. QQ程序正常运行；（对应进程被处理机（CPU）处理。）\n4. 开始视频聊天。（需要将摄像头设备分配给进程。）\n</code></pre></div></div>\n\n<h3 id=\"向上层提供方便易用的服务\">向上层提供方便易用的服务</h3>\n\n<h4 id=\"封装思想\">封装思想</h4>\n\n<p>操作系统把一些丑陋的硬件功能封装成简单易用的服务，使用户能更方便地使用计算机,用户无需关心底层硬件的原理，只需要对操作系统发出命令即可。</p>\n\n<p>硬件只听得懂二进制指令，如：<code class=\"language-plaintext highlighter-rouge\">01010111101110111010101</code>，对外暴露了“丑陋”、不友好的交互接口。</p>\n\n<p>在硬件之上安装了操作系统，操作系统对外暴露了“美丽”、友好的交互接口。</p>\n\n<h4 id=\"操作系统提供的服务示例\">操作系统提供的服务示例</h4>\n\n<p>操作系统提供的服务包括图形化用户接口、命令接口及程序接口，其中命令接口和程序接口统称用户接口。</p>\n\n<p>（1）图形化用户接口(Graphical User Interface，GUI)</p>\n\n<p>用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>比如在Windows操作系统中，删除一个文件只需要把文件“拖拽”到回收站即可。\n</code></pre></div></div>\n\n<p>（2）联机命令接口(交互式命令接口)</p>\n\n<p>由一组键盘操作命令及命令解释程序组成（通过命令解释程序对用户从键盘输入的命令进行检查命令格式、完成命令的执行）。</p>\n\n<p>即用户说一句，系统做一句。</p>\n\n<p>（3）脱机命令接口(批处理命令接口)</p>\n\n<p>由一组作业控制语言（JCL）组成。</p>\n\n<p>比如.bat、.sh等批处理文件。即用户说一堆，系统做一堆。</p>\n\n<p>（4）程序接口</p>\n\n<p>可以在程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"作为最接近硬件的层次\">作为最接近硬件的层次</h3>\n\n<p>操作系统作为最接近硬件的层次，需要实现<strong>对硬件机器的拓展</strong>。</p>\n\n<p>没有任何软件支持的计算机称为<strong>裸机</strong>。在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强、使用更方便的机器。</p>\n\n<p>通常把覆盖了软件的机器成为<strong>扩充机器</strong>，又称之为<strong>虚拟机</strong>。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>类比于汽车，硬件级别的发动机和轮胎无法直接衔接，使用传动系统让发动机带动轮子，即完成了对原始硬件机器的拓展。\n</code></pre></div></div>\n\n<p>操作系统对硬件机器的拓展：将CPU、内存、磁盘、显示器、键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能。</p>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8A%9F%E8%83%BD/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（一）操作系统的概念和功能'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T02:17:03+08:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（一）操作系统的概念和功能</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "双指针问题（二）滑动窗口",
      "category" : "",
      "tags"     : "算法, 指针, 链表, and 数据结构",
      "url"      : "/2021/10/19/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
      "date"     : "Oct 19, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a></li>\n  <li><a href=\"#209-长度最小的子数组\" id=\"markdown-toc-209-长度最小的子数组\">209. 长度最小的子数组</a></li>\n  <li><a href=\"#713-乘积小于k的子数组\" id=\"markdown-toc-713-乘积小于k的子数组\">713. 乘积小于K的子数组</a></li>\n  <li><a href=\"#3-无重复字符的最长子串\" id=\"markdown-toc-3-无重复字符的最长子串\">3. 无重复字符的最长子串</a></li>\n  <li><a href=\"#438-找到字符串中所有字母异位词\" id=\"markdown-toc-438-找到字符串中所有字母异位词\">438. 找到字符串中所有字母异位词</a></li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>滑动窗口是在数组上通过双指针同向移动而解决问题的方法。这样的问题我们不必为它们专门命名一个名字，它们的解法其实是很自然的。</p>\n\n<p>滑动窗口通常是暴力解法的优化，掌握这一类问题最好的办法就是练习，然后思考清楚为什么可以使用滑动窗口。</p>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></h2>\n\n<p>该题是最基本的滑动窗口问题，我们可以用两个指针\\(l\\)和\\(r\\)表示窗口的左右段，然后让指针\\(r\\)持续向右移动，同时用一个变量\\(sum\\)记录\\([l,r]\\)的区间和，若\\(sum\\)满足条件，则记录\\(l\\)和\\(r\\)的差作为答案，并移动指针\\(l\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">INT_MAX</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h2 id=\"713-乘积小于k的子数组\"><a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">713. 乘积小于K的子数组</a></h2>\n\n<p>这道题的解法与上道题非常相似，但求的不再是区间长度而是连续子区间数量。</p>\n\n<p>对于子区间数量，我们可以发现，若\\([l,r]\\)是一个符合条件的窗口，则\\([l+i,r],(0&lt;i≤r-l)\\)也必然是符合条件的窗口</p>\n\n<p>即对于任何符合条件的区间\\([l,r]\\)，以\\(r\\)结尾的子集个数永远是\\(r-l+1\\)，因此我们要在每次更新\\(r\\)之前为答案加上\\(r-l+1\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSubarrayProductLessThanK</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">/=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">3. 无重复字符的最长子串</a></h2>\n\n<p>与前面的连续子序列不同的是，这道题要求的是连续子串的长度，因此我们需要修改一下判定条件，若窗口区间内出现重复字符，则更新\\(l\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLongestSubstring</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h2 id=\"438-找到字符串中所有字母异位词\"><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">438. 找到字符串中所有字母异位词</a></h2>\n\n<p>这道题解法与上一题大同小异，是把字符的判据改为了字符串的比较。同时，该题的窗口长度始终保持不变，为\\(p\\)的长度</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">findAnagrams</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">target</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n                <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/19/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/'> <img src='https://api.dujin.org/bing/1920.php' alt='双指针问题（二）滑动窗口'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-19T21:41:33+08:00'>Oct 19, 2021</time> </span> </div><h2 class='article__title'>双指针问题（二）滑动窗口</h2> <p class='article__excerpt'>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/指针' class='article__tag'>指针</a>  <a href='/tag/链表' class='article__tag'>链表</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二分查找（Binary Search）",
      "category" : "",
      "tags"     : "算法",
      "url"      : "/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/",
      "date"     : "Oct 15, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#模板\" id=\"markdown-toc-模板\">模板</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#题目\" id=\"markdown-toc-题目\">题目</a>    <ol>\n      <li><a href=\"#34-在排序数组中查找元素的第一个和最后一个位置\" id=\"markdown-toc-34-在排序数组中查找元素的第一个和最后一个位置\">34. 在排序数组中查找元素的第一个和最后一个位置</a></li>\n      <li><a href=\"#74-搜索二维矩阵\" id=\"markdown-toc-74-搜索二维矩阵\">74. 搜索二维矩阵</a></li>\n      <li><a href=\"#33-搜索旋转排序数组\" id=\"markdown-toc-33-搜索旋转排序数组\">33. 搜索旋转排序数组</a></li>\n      <li><a href=\"#153-寻找旋转排序数组中的最小值\" id=\"markdown-toc-153-寻找旋转排序数组中的最小值\">153. 寻找旋转排序数组中的最小值</a></li>\n      <li><a href=\"#162-寻找峰值\" id=\"markdown-toc-162-寻找峰值\">162. 寻找峰值</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>二分查找是对已排好序的数组查找特定值的常用方法，二分查找不必遍历整个序列，只需关注序列的边界及中间值即可，因此时间复杂度可以达到\\(O(logn)\\)</p>\n\n<h3 id=\"模板\">模板</h3>\n\n<p>在一个有序序列中查找关键字\\(key\\)的模板代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h2 id=\"题目\">题目</h2>\n\n<p>二分的题目模板一般都是固定的，主要是能否想到的对什么进行二分，怎样二分。</p>\n\n<h3 id=\"34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3>\n\n<p>该题不仅要求元素出现的第一个位置，还要求出元素出现的最后一个位置。在模板代码中，若<code class=\"language-plaintext highlighter-rouge\">nums[i] &lt; key</code>，才会继续查找左边，如果我们想在已经找到元素后继续查找，则需要修改为<code class=\"language-plaintext highlighter-rouge\">nums[i] &lt;= key</code>。这样查找的结果是大于\\(key\\)的第一个元素的位置。因此该题的代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">searchRange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">),</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">};</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"74-搜索二维矩阵\"><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\">74. 搜索二维矩阵</a></h3>\n\n<p>依题可知待查找元素必大于或等于该行第一个元素，因此我们先对列进行一次二分查找，寻找不大于\\(target\\)的最大元素</p>\n\n<p>之后对该行进行基本的二分查找，即可得到结果。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">searchMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"c1\">// 先找小于target的第一个数的位置</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>  \t\t\t\t\t     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\t\t\t\t\t\t   <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"33-搜索旋转排序数组\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\">33. 搜索旋转排序数组</a></h3>\n\n<p>该题只保证了数组的局部有序，但对数组进行二分后，会发现总有一半的数组是有序的，此时可以继续对有序的数组进行二分查找，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"153-寻找旋转排序数组中的最小值\"><a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\">153. 寻找旋转排序数组中的最小值</a></h3>\n\n<p>该题要查找的是上一题中旋转的排序数组的最小值，也即旋转点的值，我们依然利用部分有序的性质，二分查找数组最小值，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findMin</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"162-寻找峰值\"><a href=\"https://leetcode-cn.com/problems/find-peak-element/\">162. 寻找峰值</a></h3>\n\n<p>我们可以用\\([l,r]\\)来存储可能存在峰值的区间，根据\\(mid\\)进行二分，若<code class=\"language-plaintext highlighter-rouge\">nums[mid] &lt; nums[mid + 1]</code>则说明在区间\\([mid+1,r]\\)存在峰值，反之则说明在区间[l,mid]存在峰值，因此代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findPeakElement</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 用l,r表示可能存在峰值的区间</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"c1\">//mid+1-r更大</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span><span class=\"c1\">//l-mid更大</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/'> <img src='/images/covers/blackrock2.jpg' alt='二分查找（Binary Search）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2021-10-15T20:51:55+08:00'>Oct 15, 2021</time> </span> </div><h2 class='article__title'>二分查找（Binary Search）</h2> <p class='article__excerpt'>二分查找是对已排好序的数组查找特定值的常用方法，二分查找不必遍历整个序列，只需关注序列的边界及中间值即可，因此时间复杂度可以达到 O(log n)</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（四）最长上升子序列（LIS）",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/10/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/",
      "date"     : "Oct 11, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#动态规划\" id=\"markdown-toc-动态规划\">动态规划</a></li>\n  <li><a href=\"#树状数组\" id=\"markdown-toc-树状数组\">树状数组</a></li>\n</ol>\n\n<p><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">300.最长递增子序列</a></p>\n\n<h2 id=\"动态规划\">动态规划</h2>\n<p>我们可以定义\\(dp[i]\\)为以\\(i\\)结尾的递增子序列长度的最大值（数组\\(dp\\)的常用套路），则我们可以写出状态转移方程为\n\\(dp[i]=max(dp[j])+1,(0≤j&lt;i, nums[j]&lt;nums[i])\\)</p>\n\n<p>最后，此题的结果便是\\(max(dp[i])\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>该解法时间复杂度为\\(O(n^2)\\)</p>\n\n<h2 id=\"树状数组\">树状数组</h2>\n<p>LIS问题的本质是偏序问题，我们之前在二维偏序问题中提到过，树状数组可以轻松的解决这类问题。但之前的问题中，我们求的是数对的数量，而不是序列的长度。为了能够求得序列长度，我们要对树状数组进行修改。</p>\n\n<p>我们可以用树状数组存储以\\(i\\)结尾的递增子序列最大值，修改树状数组结构如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>随后用和\\(dp\\)同样的方式进行遍历，可以得出正确结果，同时要注意数据的离散化，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Fenwick</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">lowbit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">Fenwick</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>该解法时间复杂度为\\(O(nlogn)\\)</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/10/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/'> <img src='/images/covers/village.jpg' alt='动态规划（四）最长上升子序列（LIS）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-11T21:19:19+08:00'>Oct 11, 2021</time> </span> </div><h2 class='article__title'>动态规划（四）最长上升子序列（LIS）</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二叉树基础（三） 线段树（Segment Tree）",
      "category" : "",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/",
      "date"     : "Oct 9, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#结构\" id=\"markdown-toc-结构\">结构</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#基本操作\" id=\"markdown-toc-基本操作\">基本操作</a>    <ol>\n      <li><a href=\"#线段树的建立\" id=\"markdown-toc-线段树的建立\">线段树的建立</a></li>\n      <li><a href=\"#区间查询\" id=\"markdown-toc-区间查询\">区间查询</a></li>\n      <li><a href=\"#区间修改\" id=\"markdown-toc-区间修改\">区间修改</a></li>\n      <li><a href=\"#懒惰标记\" id=\"markdown-toc-懒惰标记\">懒惰标记</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#整体代码\" id=\"markdown-toc-整体代码\">整体代码</a></li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>线段树是常用于<strong>维护区间信息</strong>的数据结构</p>\n\n<p>线段树可以在$O(logn)$的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作</p>\n\n<h3 id=\"结构\">结构</h3>\n\n<p>线段树将每个长度不为$1$的区间划分成左右两个区间递归求解，把整个线段划分为一个树形结构，通过合并左右两区间信息来求得该区间的信息。这种数据结构可以方便的进行大部分的区间操作。</p>\n\n<p>假设以线段树存储数组$a=[6,7,8,9,10]$，设线段树的根节点编号为$1$，用数组$node$来保存线段树，$node[i]$用来保存线段树上编号为$i$的节点的值</p>\n\n<p>该线段树的结构如下</p>\n\n<p><img src=\"/images/posts/segmenttree1.png\" alt=\"在这里插入图片描述\" />\n代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// 线段树下标从1开始</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// 辅助建树</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h2 id=\"基本操作\">基本操作</h2>\n<h3 id=\"线段树的建立\">线段树的建立</h3>\n\n<p>对于节点$i$，其子节点的编号为$2i$以及$2i+1$，若节点$i$存储的区间为$[a,b]$，则节点$2i$存储的区间应该是$[a,\\frac{a+b}{2}]$，相应地，节点$2i+1$存储的区间为$[\\frac{a+b}{2}+1,b]$。我们可以采用递归的方式建树，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i表示当前节点, l表示左边界, r表示右边界</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"区间查询\">区间查询</h3>\n<p>若查询的区间为$[1,5]$，我们只需直接返回$node[1]$，但如果我们查询的是$[3,5]$，则需要合并$[3,3]$和$[4,5]$的答案，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//i表示当前节点, [l,r]是查询区间, [s,t]表示当前节点包含区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接返回</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归查询存在交集的子区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询左字串</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询右字串</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"区间修改\">区间修改</h3>\n<p>和区间查询相同，若区间存在包含关系，我们可以为其直接加上所需要更新的值，而当区间存在交集时，进行递归更新，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接更新</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归更新存在交集的子区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新左字串</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新右字串</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"懒惰标记\">懒惰标记</h3>\n<p>当我们按照上面的方法对$[6,7,8,9,10]$的区间$[3,5]$加上$2$后，更新后的线段树结构如下\n<img src=\"/images/posts/segmenttree2.png\" alt=\"在这里插入图片描述\" />\n我们会发现，在进行递归更新时，递归执行到节点$3$时就已经结束了，因此节点$3$的两个子节点没有被更新</p>\n\n<p>遇到这种情况，我们需要给递归结束的节点打上一个标记，在下一次查询操作时将没有更新的子节点更新，这个标记被称为懒惰标记，这样更新时效果如图</p>\n\n<p><img src=\"/images/posts/segmenttree3.png\" alt=\"在这里插入图片描述\" /></p>\n\n<p>而查询后的效果如下</p>\n\n<p><img src=\"/images/posts/segmenttree4.png\" alt=\"在这里插入图片描述\" />\n我们可以用<code class=\"language-plaintext highlighter-rouge\">vector&lt;int&gt; lazy</code>来存储懒惰标记，下方懒惰标记的代码如下</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// 下放懒惰标记</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// 将懒惰标记的值加给子树</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>然后在查询和更新函数中调用<code class=\"language-plaintext highlighter-rouge\">push_down()</code>即可</p>\n\n<h2 id=\"整体代码\">整体代码</h2>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SegmentTree</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// 线段树下标从1开始</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lazy</span><span class=\"p\">;</span> <span class=\"c1\">// 懒惰标记</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// 辅助建树</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">SegmentTree</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">nums</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i表示当前节点, l表示左边界, r表示右边界</span>\n        <span class=\"n\">N</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// 下放懒惰标记</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// 将懒惰标记的值加给子树</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//i表示当前节点, [l,r]是查询区间, [s,t]表示当前节点包含区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接返回</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归查询存在交集的子区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询左字串</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询右字串</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接更新</span>\n            <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归更新存在交集的子区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新左字串</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新右字串</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/'> <img src='/images/covers/数据结构-cover1.png' alt='二叉树基础（三） 线段树（Segment Tree）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>9 min read <time class='article__date' datetime='2021-10-09T19:00:50+08:00'>Oct 9, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（三） 线段树（Segment Tree）</h2> <p class='article__excerpt'>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "双指针问题（一）对撞指针和快慢指针",
      "category" : "",
      "tags"     : "算法, 指针, 链表, and 数据结构",
      "url"      : "/2021/10/08/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/",
      "date"     : "Oct 8, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a></li>\n  <li><a href=\"#双指针问题\" id=\"markdown-toc-双指针问题\">双指针问题</a>    <ol>\n      <li><a href=\"#对撞指针\" id=\"markdown-toc-对撞指针\">对撞指针</a></li>\n      <li><a href=\"#快慢指针\" id=\"markdown-toc-快慢指针\">快慢指针</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p>\n\n<p>广义上来说，双指针是指用两个变量在线性结构上遍历而解决的问题。</p>\n\n<p>狭义上说：</p>\n\n<ul>\n  <li>对于数组，指两个变量在数组上相向移动解决的问题；</li>\n  <li>对于链表，指两个变量在链表上同向移动解决的问题，也称为「快慢指针」问题。</li>\n</ul>\n\n<h2 id=\"双指针问题\">双指针问题</h2>\n<h3 id=\"对撞指针\">对撞指针</h3>\n<p>对撞指针将最左侧的索引定义为左指针(left)，最右侧的定义为右指针(right)，从两头向中间进行数组遍历</p>\n\n<p>对撞指针适用于<strong>有序的数组和字符串</strong></p>\n\n<p>对撞指针的时间复杂度为\\(O(n)\\)</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/\">剑指 Offer 21</a></p>\n\n<p>此题要求分奇偶调整数组的顺序，我们可以用左指针寻找奇数，右指针寻找偶数，当左指针找到偶数且右指针找到奇数时，对调两数。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">exchange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\">剑指 Offer 57</a></p>\n\n<p>此题要求寻找和为\\(target\\)数对，由于此题数组已经做好排序，我们可以确定</p>\n\n<p>若数对\\((nums[i+1],nums[j])&lt;target\\)</p>\n\n<p>则必有\\((nums[i],nums[j])&lt;target\\)</p>\n\n<p>同理，若数对\\((nums[i],nums[j])&gt;target\\)</p>\n\n<p>则\\((nums[i+1],nums[j])&gt;target\\)</p>\n\n<p>因此这道题也可以用对撞指针求解，当\\(nums[l]+nums[r]&lt;target\\)时，\\(l\\)向右移动，反之，\\(nums[l]+nums[r]&gt;target\\)时，r向左移动，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">twoSum</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">target</span><span class=\"p\">){</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]);</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n            <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"快慢指针\">快慢指针</h3>\n<p>快慢指针在序列中定义了一对不同速度的指针，以进行单向序列问题的求解。</p>\n\n<p>快慢指针的时间复杂度为\\(O(n)\\)，空间复杂度为\\(O(1)\\)</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">141. 环形链表</a></p>\n\n<p>此题要判断链表是否有环，可以定义一个快指针和一个慢指针，随后进行移动，若快指针可以追上慢指针，则表示链表一定有环，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">hasCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">142. 环形链表 II</a></p>\n\n<p>此题需要在求出是否成环的同时找到入环的第一个节点，我们可以根据快指针速度始终是慢指针的两倍这一条件进行推理</p>\n\n<p><img src=\"/images/posts/doublepoint1.png\" alt=\"在这里插入图片描述\" /></p>\n\n<p>假设快慢指针在\\(bc\\)交点相遇，此时慢指针走的距离应该是\\(a+b\\)，而快指针已经走了\\(a+b+k(b+c)\\)\n又有快指针的速度是慢指针的两倍，因此</p>\n\n<p>\\(a+b+k(b+c)=2(a+b)\\)，</p>\n\n<p>即\\(a=k(b+c)-b=(k-1)(b+c)+c\\)</p>\n\n<p>因此，当快慢指针相遇时，相遇点距离入环节点的距离总是\\(a\\)，因此我们可以再用一个指针\\(cur\\)寻找入环节点，同时更新\\(cur\\)和慢指针，当二者相遇时，相遇节点即入环节点。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"nf\">detectCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">cur</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/08/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/'> <img src='https://api.dujin.org/bing/1920.php' alt='双指针问题（一）对撞指针和快慢指针'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2021-10-08T21:14:13+08:00'>Oct 8, 2021</time> </span> </div><h2 class='article__title'>双指针问题（一）对撞指针和快慢指针</h2> <p class='article__excerpt'>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/指针' class='article__tag'>指针</a>  <a href='/tag/链表' class='article__tag'>链表</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二叉树基础（二）二叉搜索树（BST）",
      "category" : "",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/",
      "date"     : "Oct 5, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#性质\" id=\"markdown-toc-性质\">性质</a></li>\n      <li><a href=\"#结构\" id=\"markdown-toc-结构\">结构</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#代码\" id=\"markdown-toc-代码\">代码</a>    <ol>\n      <li><a href=\"#基本操作\" id=\"markdown-toc-基本操作\">基本操作</a>        <ol>\n          <li><a href=\"#find\" id=\"markdown-toc-find\">$find()$</a></li>\n          <li><a href=\"#insert\" id=\"markdown-toc-insert\">$insert()$</a></li>\n          <li><a href=\"#delete\" id=\"markdown-toc-delete\">$delete()$</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p><strong>二叉搜索树（Binary Search Tree）</strong>（又：二叉查找树，二叉排序树），它或者是一棵空树，或者是具有下列性质的二叉树：\n若它的左子树非空，则左子树上所有结点的值均小于它的根结点的值； \n若它的右子树非空，则右子树上所有结点的值均大于它的根结点的值；\n它的左、右子树也分别是二叉搜索树。\n二叉搜索树作为一种经典的数据结构，既有快速插入与删除操作的特点，又有快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</p>\n<h3 id=\"性质\">性质</h3>\n<p>二叉搜索树有以下性质：</p>\n<ul>\n  <li>若左子树非空，则左子树上的所有节点值均小于根节点的值。</li>\n  <li>若右子树非空，则右子树上的所有节点值均小于根节点的值。</li>\n  <li>左右子树是二叉搜索树。</li>\n</ul>\n\n<h3 id=\"结构\">结构</h3>\n<p>BST是以二叉树来构建的，除了key和位置数据之外，每个结点还包含属性lchild、rchild，如果某个孩子结点不存在，则相应属性的值为空。</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                               <span class=\"c1\">// 数据</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span>  \t\t\t<span class=\"c1\">// 左右子树</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BST</span><span class=\"p\">,</span> <span class=\"n\">BSTNode</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<h2 id=\"代码\">代码</h2>\n<h3 id=\"基本操作\">基本操作</h3>\n\n<p>BST的构造和析构与普通二叉树相同，这里不多赘述。相比于普通二叉树，BST的主要功能增加了查找，插入和删除</p>\n\n<h4 id=\"find\">$find()$</h4>\n<p>$find()$函数的作用是查找某一个数据值已知的节点是否在树中，并返回节点值。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">BST</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">BST</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"insert\">$insert()$</h4>\n<p>$insert()$函数的作用是在树中插入一个节点。BST中所有的节点都是作为叶子节点插入的，因此在创建节点$p$后，要找到合适的父节点$f$并插入其中。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// 记录f为p的父节点</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// 查找data是否已经在树中</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BSTNode</span><span class=\"p\">));</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>             <span class=\"c1\">// 创建节点</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"delete\">$delete()$</h4>\n<p>二叉搜索树进行删除操作后，仍然要保证它的排序正确，因此我们的删除操作分为三种情况：</p>\n\n<ul>\n  <li>待删除节点无左孩子，则用右孩子代替其位置</li>\n  <li>待删除节点无右孩子，则用左孩子代替其位置</li>\n  <li>待删除节点拥有左右孩子，则用左子树最大节点或右子树最小节点代替其位置</li>\n</ul>\n\n<p>代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// 记录f为p的父节点</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// 查找data的位置</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>       <span class=\"c1\">// 若未找到，则返回false</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"c1\">// 情况1</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"nf\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">){</span>        <span class=\"c1\">// 情况2</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">{</span>                       <span class=\"c1\">// 情况3</span>\n        <span class=\"n\">BST</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">,</span><span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/'> <img src='/images/covers/数据结构-cover1.png' alt='二叉树基础（二）二叉搜索树（BST）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-05T01:14:28+08:00'>Oct 5, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（二）二叉搜索树（BST）</h2> <p class='article__excerpt'>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（三）股票问题系列",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 29, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#121-买卖股票的最佳时机\" id=\"markdown-toc-121-买卖股票的最佳时机\">121. 买卖股票的最佳时机</a>    <ol>\n      <li><a href=\"#状态转移方程\" id=\"markdown-toc-状态转移方程\">状态转移方程</a>        <ol>\n          <li><a href=\"#如何表示price_min\" id=\"markdown-toc-如何表示price_min\">如何表示$price_{min}$</a></li>\n          <li><a href=\"#边界条件\" id=\"markdown-toc-边界条件\">边界条件</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#代码\" id=\"markdown-toc-代码\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#122-买卖股票的最佳时机-ii\" id=\"markdown-toc-122-买卖股票的最佳时机-ii\">122. 买卖股票的最佳时机 II</a>    <ol>\n      <li><a href=\"#状态转移方程-1\" id=\"markdown-toc-状态转移方程-1\">状态转移方程</a></li>\n      <li><a href=\"#代码-1\" id=\"markdown-toc-代码-1\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#714-买卖股票的最佳时机含手续费\" id=\"markdown-toc-714-买卖股票的最佳时机含手续费\">714. 买卖股票的最佳时机含手续费</a>    <ol>\n      <li><a href=\"#状态转移方程-2\" id=\"markdown-toc-状态转移方程-2\">状态转移方程</a></li>\n      <li><a href=\"#代码-2\" id=\"markdown-toc-代码-2\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#309-最佳买卖股票时机含冷冻期\" id=\"markdown-toc-309-最佳买卖股票时机含冷冻期\">309. 最佳买卖股票时机含冷冻期</a>    <ol>\n      <li><a href=\"#状态转移方程-3\" id=\"markdown-toc-状态转移方程-3\">状态转移方程</a></li>\n      <li><a href=\"#代码-3\" id=\"markdown-toc-代码-3\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#123-买卖股票的最佳时机-iii\" id=\"markdown-toc-123-买卖股票的最佳时机-iii\">123. 买卖股票的最佳时机 III</a>    <ol>\n      <li><a href=\"#思路\" id=\"markdown-toc-思路\">思路</a></li>\n      <li><a href=\"#代码-4\" id=\"markdown-toc-代码-4\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#188-买卖股票的最佳时机-iv\" id=\"markdown-toc-188-买卖股票的最佳时机-iv\">188. 买卖股票的最佳时机 IV</a></li>\n  <li><a href=\"#股票问题的一般通解\" id=\"markdown-toc-股票问题的一般通解\">股票问题的一般通解</a>    <ol>\n      <li><a href=\"#状态转移方程-4\" id=\"markdown-toc-状态转移方程-4\">状态转移方程</a>        <ol>\n          <li><a href=\"#边界条件-1\" id=\"markdown-toc-边界条件-1\">边界条件</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#结束语\" id=\"markdown-toc-结束语\">结束语</a></li>\n</ol>\n\n<h2 id=\"121-买卖股票的最佳时机\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\">121. 买卖股票的最佳时机</a></h2>\n<h3 id=\"状态转移方程\">状态转移方程</h3>\n<p>我们可以用$dp[i]$来表示，在前$i$日我们可以得到的最大利润，那么我们第$i$日的操作有两种选择：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1.我们在第i日卖出得到的利润可能比之前的利润（dp[i-1]）更高\n2.我们之前的利润要比现在更高，不用进行任何操作\n</code></pre></div></div>\n\n<p>对于情况1，我们得到状态转移方程$dp[i]=prices[i]-price_{min}$\n而对于情况2，我们有$dp[i]=dp[i-1]$\n综合两种情况，也就得到此题的状态转移方程：</p>\n\n<p>$dp[i]=max(dp[i-1],prices[i]-price_{min})$</p>\n\n<p>那么剩下的问题就在于如何表示$price_{min}$。</p>\n\n<h4 id=\"如何表示price_min\">如何表示$price_{min}$</h4>\n<p>我们发现，$price_{min}$的计算也是一个无后效性的问题，我们同样可以通过动态规划来求解，用$dp_{price_{min}}[i]$来表示前i日股票的最低价格，则$dp_{price_{min}}[i]$的状态转移方程可以写成：</p>\n\n<p>$dp_{price_{min}}[i]$ = $min(prices[i],dp_{price_{min}}[i-1])$</p>\n\n<p>可能这时候你就要说了，你这不是脱了裤子放屁吗？那我们不妨换一个思维方式，还是上面的状态转移方程不变，<strong>我们用$dp[i][j]$表示前$i$天手上有$j$个股票时我们的最大利润。</strong> 这时候你不妨停下来思考一会，该如何写出状态转移方程呢？</p>\n\n<p>联立上面两个转移方程，得到$dp[i][j]$的状态转移方程：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(-prices[i], dp[i - 1][1]);$</p>\n\n<p>没错，此时的$dp[i][1]$就是之前我们的开销，用来辅助我们计算第$i$天的最大利润，也就是$dp[i][0]$</p>\n\n<h4 id=\"边界条件\">边界条件</h4>\n<p>$dp[0][0]$表示在第0天我们手上有0支股票时的最大利润，因此$dp[0][0]=0$</p>\n\n<p>$dp[0][1]$表示在第0天我们手上有1支股票时的最大利润，因此$dp[0][0]=-prices[0]$</p>\n\n<h3 id=\"代码\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> \n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>篇幅关系，空间复杂度的优化留给读者自己思考，我这里不作展开</p>\n\n<h2 id=\"122-买卖股票的最佳时机-ii\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\">122. 买卖股票的最佳时机 II</a></h2>\n<h3 id=\"状态转移方程-1\">状态转移方程</h3>\n<p>122.题与121.题的不同点在于，122.是可以无限进行购买操作的，相应的，我们的状态转移方程也有所改变。</p>\n\n<p>根据我们第一题的状态转移方程，在第一题里，一但我们前面卖出了股票，下次再想购买股票时，总利润便会变成$-prices[i]$，但在这道题中，由于我们不再受购买次数的限制，因此我们的利润就可以一直累计下去，如何理解这种累计呢？</p>\n\n<p>在前$i-1$天，我们的最大利润达到了$dp[i-1][0]$，而在第$i$天我们要购入股票，此时的利润就会变为$dp[i-1][0]-prices[i]$</p>\n\n<p>即$dp[i][1]$的状态转移方程变为：</p>\n\n<p>$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>读者应该也注意到，在我们把状态转移方程分成两部分后，我们对转移方程的解读方式也转变了，这里我再次阐述一遍，$dp[i][0]$表示手上没有股票时的最大利润，$dp[i][1]$表示手上有一枚股票时的最大利润。</p>\n\n<p>综上，状态转移方程为：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>边界条件与之前相同。</p>\n\n<h3 id=\"代码-1\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"714-买卖股票的最佳时机含手续费\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">714. 买卖股票的最佳时机含手续费</a></h2>\n<h3 id=\"状态转移方程-2\">状态转移方程</h3>\n<p>如果你认真阅读了题714.并理解了题122.那这道题你其实可以直接过的，因为这道题和题122.的不同之处就在于，它在售卖时多了手续费这个固定消耗，因此在决定卖出股票的第$i$天里，如果收益不足以抵消掉手续费，那我们会选择之前的利润作为最优解，即：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$</p>\n\n<p>整体的转移方程表示为：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$\n$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>边界条件仍与之前相同</p>\n\n<h3 id=\"代码-2\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">fee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">fee</span><span class=\"p\">),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"309-最佳买卖股票时机含冷冻期\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">309. 最佳买卖股票时机含冷冻期</a></h2>\n<h3 id=\"状态转移方程-3\">状态转移方程</h3>\n<p>这道题的变化在于，之前我们只有$(0)$卖出、$(1)$买入两种状态，但这道题引入了一个新的新的状态$(2)$冷冻期，而这个冷冻期状态是在卖出操作后出现，如果我们用$dp[i][2]$来表示当我们在第$i$天的冷冻期收益，则$dp[i][2]$可以用$dp$表示为：</p>\n\n<p>$dp[i][2] = dp[i-1][0]$</p>\n\n<p>买入状态的转移方程也有所变化，因为此题中买入状态必须由冷冻期状态进入，也就是：</p>\n\n<p>$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$</p>\n\n<p>最后，综合三式就可以得到我们新的状态转移方程：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])$\n$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$\n$dp[i][2] = dp[i - 1][0]$</p>\n\n<p>边界条件仍然不变</p>\n\n<h3 id=\"代码-3\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"c1\">//</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"123-买卖股票的最佳时机-iii\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\">123. 买卖股票的最佳时机 III</a></h2>\n<h3 id=\"思路\">思路</h3>\n<p>如果没有前面的铺垫直接来看这道题，难度瞬间就高起来了。但现在带着前面的经验再来对比这道题，我们会发现这道题和题121. 题122.有着很大的关联。</p>\n\n<p>假设在第$i$天卖出了股票，当我们是第一次或第二次操作时，我们的利润是可以积累的。但如果是在第三次操作，那么我们就要重新累计利润了。</p>\n\n<p>我们不妨将$dp$升到三维数组，用第三维来区分第一次操作和第二次操作，即得到代码如下：</p>\n<h3 id=\"代码-4\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>这个代码并不优雅，但对于问题的解决无疑是直接而有效的</p>\n\n<h2 id=\"188-买卖股票的最佳时机-iv\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/\">188. 买卖股票的最佳时机 IV</a></h2>\n\n<p>当问题扩充到$k$时，我们解决题123.的思路仍然有效，我们可以用初始化边界为$0$，再用一个$for$循环写出结果。</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">110</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span>  <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]),</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">];</span>\n <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"股票问题的一般通解\">股票问题的一般通解</h2>\n<h3 id=\"状态转移方程-4\">状态转移方程</h3>\n<p>股票问题的三个限定条件是</p>\n\n<ul>\n  <li>当前天数$i$</li>\n  <li>手持股票$j$</li>\n  <li>允许的最大操作次数$k$</li>\n</ul>\n\n<p>我们设在第$i$天，手持股票为$j$，操作次数为$k$时我们的利润为$dp[i][j][k]$，视每次购买股票为进行一次操作，则我们的状态转移方程为：</p>\n\n<p>$dp[i][0][k] = max(dp[i-1][1][k] + prices[i], dp[i-1][0][k])$\n$dp[i][1][k] = max(dp[i-1][0][k-1] - prices[i], dp[i-1][1][k])$</p>\n\n<h4 id=\"边界条件-1\">边界条件</h4>\n<p>$dp[0][1][k] = -prices[0]$\n其余值都为0</p>\n\n<h2 id=\"结束语\">结束语</h2>\n<p>股票问题系列和打家劫舍系列的不同点在于，股票问题的每一个系列问题都对状态转移方程进行了改动。面临一道动态规划问题时，要想迅速找到子问题并写出状态转移方程，关键还是要多了解不同的动归题型。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（三）股票问题系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2021-09-29T20:29:46+08:00'>Sep 29, 2021</time> </span> </div><h2 class='article__title'>动态规划（三）股票问题系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二叉树基础（一）二叉树的概念",
      "category" : "数据结构基础",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "Sep 28, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#二叉树的定义\" id=\"markdown-toc-二叉树的定义\">二叉树的定义</a></li>\n      <li><a href=\"#基本形态\" id=\"markdown-toc-基本形态\">基本形态</a></li>\n      <li><a href=\"#特殊类型\" id=\"markdown-toc-特殊类型\">特殊类型</a></li>\n      <li><a href=\"#相关术语\" id=\"markdown-toc-相关术语\">相关术语</a></li>\n      <li><a href=\"#性质\" id=\"markdown-toc-性质\">性质</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#二叉树的c实现\" id=\"markdown-toc-二叉树的c实现\">二叉树的C++实现</a>    <ol>\n      <li><a href=\"#二叉树的顺序存储\" id=\"markdown-toc-二叉树的顺序存储\">二叉树的顺序存储</a>        <ol>\n          <li><a href=\"#实现代码\" id=\"markdown-toc-实现代码\">实现代码</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#二叉树的链式存储\" id=\"markdown-toc-二叉树的链式存储\">二叉树的链式存储</a>        <ol>\n          <li><a href=\"#实现代码-1\" id=\"markdown-toc-实现代码-1\">实现代码</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#二叉树的递归遍历\" id=\"markdown-toc-二叉树的递归遍历\">二叉树的递归遍历</a>        <ol>\n          <li><a href=\"#先序遍历dlr\" id=\"markdown-toc-先序遍历dlr\">先序遍历（DLR）</a></li>\n          <li><a href=\"#中序遍历ldr\" id=\"markdown-toc-中序遍历ldr\">中序遍历（LDR）</a></li>\n          <li><a href=\"#后序遍历lrd\" id=\"markdown-toc-后序遍历lrd\">后序遍历（LRD）</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p>\n\n<h3 id=\"二叉树的定义\">二叉树的定义</h3>\n<p>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树</p>\n\n<h3 id=\"基本形态\">基本形态</h3>\n<p><img src=\"/images/posts/tree1.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n  <li>空二叉树</li>\n  <li>只有一个根节点的二叉树</li>\n  <li>根节点只有左子树的二叉树</li>\n  <li>根节点只有右子树的二叉树</li>\n  <li>根节点既有左子树，又有右子树的<strong>完全二叉树</strong>\n    <h3 id=\"特殊类型\">特殊类型</h3>\n  </li>\n  <li>满二叉树：只有度为0和2的节点，且度为0的结点在同一层上</li>\n  <li>完全二叉树：深度为k且每一个节点都与深度为k的满二叉树中编号从1到n的结点一一对应\n<img src=\"/images/posts/tree2.png\" alt=\"在这里插入图片描述\" />\n    <h3 id=\"相关术语\">相关术语</h3>\n  </li>\n  <li>节点：包含一个数据元素及若干指向子树分支的信息</li>\n  <li>节点的度：一个节点拥有子树的数目</li>\n  <li>叶节点：也称为终端节点，没有子树的节点或度为0的节点</li>\n  <li>分支节点：也称为非终端节点，度不为0的节点</li>\n  <li>树的度：树中所有节点度的最大值</li>\n  <li>节点的层次：从根节点开始，根节点为第0层，根节点的子节点为第1层，依此类推</li>\n  <li>树的深度：也称树的高度，树中所有节点层次的最大值</li>\n  <li>有序树：如果树中各棵子树的次序有先后次序，则该树为有序树</li>\n  <li>无序树：如果树中各棵子树的次序没有先后次序，则该树为无序树</li>\n  <li>森林：由m（m≥0）棵互不相交的树构成一片森林。如果把一棵非空的树的根结点删除，则该树就变成了一片森林，森林中的树由原来根结点的各棵子树构成\n    <h3 id=\"性质\">性质</h3>\n  </li>\n  <li>一棵二叉树的第i层最多有$2^i$个节点 $(i≥0)$</li>\n  <li>深度为k的二叉树最多有$2^{k+1}-1$个节点 $(k≥0)$</li>\n  <li>对于1棵二叉树，度为0的节点为$n_0$，度为2的节点为$n_2$，则$n_0=n_2+1$</li>\n  <li>满二叉树定理：非空满二叉树的叶子节点数等于分支节点数$+1$</li>\n  <li>满二叉树定理推论：在一棵具有$n$个结点的二叉树中,所有结点的空子树等于$n+1$</li>\n  <li>$n$个节点的完全二叉树高度为$log_2(n+1)$，深度为$log_2(n+1)-1$</li>\n</ul>\n\n<h2 id=\"二叉树的c实现\">二叉树的C++实现</h2>\n\n<h3 id=\"二叉树的顺序存储\">二叉树的顺序存储</h3>\n\n<p>我们可以使用一个数组来存储所有的节点，按数组下标进行存储，根节点存储在下标\\(0\\)处，\n其左孩子存储于下标\\(2*0+1\\)，右孩子存储于下标\\(2*0+2\\)….依此类推，对于下标为\\(i\\)的节点，左右孩子分别存储于下标为\\({2*i+1}\\)和\\({2*i+2}\\)处。</p>\n<h4 id=\"实现代码\">实现代码</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">BinaryTree</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"二叉树的链式存储\">二叉树的链式存储</h3>\n<p>二叉树的顺序存储结构一般适用于完全二叉树，通常我们使用链式存储结构表示二叉树。</p>\n<h4 id=\"实现代码-1\">实现代码</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                     <span class=\"c1\">// 数据</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"c1\">// 左右子树</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BinaryTree</span><span class=\"p\">,</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"o\">&amp;</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">input</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n    <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"二叉树的递归遍历\">二叉树的递归遍历</h3>\n<h4 id=\"先序遍历dlr\">先序遍历（DLR）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>访问当前节点</li>\n  <li>先序遍历左子树</li>\n  <li>先序遍历右子树</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">DLR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"中序遍历ldr\">中序遍历（LDR）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>中序遍历左子树</li>\n  <li>访问当前节点</li>\n  <li>中序遍历右子树</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LDR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"后序遍历lrd\">后序遍历（LRD）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>后序遍历左子树</li>\n  <li>后序遍历右子树</li>\n  <li>访问当前节点</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LRD</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/数据结构-cover1.png' alt='二叉树基础（一）二叉树的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2021-09-28T13:58:19+08:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（一）二叉树的概念</h2> <p class='article__excerpt'>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（二）最优子序列系列",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 28, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#动态规划核心思想\" id=\"markdown-toc-动态规划核心思想\">动态规划核心思想</a></li>\n  <li><a href=\"#198-打家劫舍\" id=\"markdown-toc-198-打家劫舍\">198. 打家劫舍</a></li>\n</ol>\n\n<h2 id=\"动态规划核心思想\">动态规划核心思想</h2>\n<p>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p>\n\n<p>动态规划基础</p>\n\n<p>我们可以举个例子：</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B ( 计算 ) : 8</p>\n\n  <p>A: 在上面等式的左边写上 “1+” 呢？</p>\n\n  <p>B (脱口而出): 9</p>\n\n  <p>A: 你怎么这么快就得到答案了？</p>\n\n  <p>B: 只要在8的基础上加1就好了</p>\n\n  <p>A: 所以你不用重新计算，因为你记住了第一个等式的值为8。动态规划算法也可以说是记住求过的解来节省时间</p>\n</blockquote>\n\n<h2 id=\"198-打家劫舍\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. 打家劫舍</a></h2>\n\n<ol>\n  <li>只有一间房屋时，我们选择偷这间房屋</li>\n  <li>存在两间房屋时，选择偷两间中较大的那间</li>\n  <li>如果房屋数量大于两间时，比如第三间，我们要考虑，第一间和第三间房屋的价值总和与第二间房屋的价值相比，哪个更大？如果第一间和第三间房屋的价值总和较大的话，我们会选择偷第一间和第三间；否则，我们则会选择不偷第一间和第三间，去偷第二间</li>\n  <li>将其推广到一般情况，对于前i间房子，我们偷窃的方案有两种：\n    <ol>\n      <li>偷窃第i间房子，得到的总金额是第i间房子的价值与偷窃前i-2间房子的总金额之和</li>\n      <li>不偷窃第i间房子，得到的总金额是偷窃前i-1间房子的总金额</li>\n    </ol>\n  </li>\n</ol>\n\n<p>我们总会选择1、2中可以得到更高金额的选项，这时我们用$d[i]$来表示偷窃前i间房子的总金额，并且用$d[i]$来表示选项1、2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n\n<p>hello</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（二）最优子序列系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-28T11:12:38+08:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>动态规划（二）最优子序列系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（一）打家劫舍系列",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 27, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#动态规划核心思想\" id=\"markdown-toc-动态规划核心思想\">动态规划核心思想</a></li>\n  <li><a href=\"#198-打家劫舍\" id=\"markdown-toc-198-打家劫舍\">198. 打家劫舍</a></li>\n</ol>\n\n<h2 id=\"动态规划核心思想\">动态规划核心思想</h2>\n<p>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p>\n\n<p>我们可以举个例子：</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B (计算) : 8</p>\n\n  <p>A: 在上面等式的左边写上 “1+” 呢？</p>\n\n  <p>B (脱口而出): 9</p>\n\n  <p>A: 你怎么这么快就得到答案了？</p>\n\n  <p>B: 只要在8的基础上加1就好了</p>\n\n  <p>A: 所以你不用重新计算，因为你记住了第一个等式的值为8。动态规划算法也可以说是记住求过的解来节省时间</p>\n</blockquote>\n\n<h2 id=\"198-打家劫舍\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. 打家劫舍</a></h2>\n\n<ol>\n  <li>只有一间房屋时，我们选择偷这间房屋</li>\n  <li>存在两间房屋时，选择偷两间中较大的那间</li>\n  <li>如果房屋数量大于两间时，比如第三间，我们要考虑，第一间和第三间房屋的价值总和与第二间房屋的价值相比，哪个更大？如果第一间和第三间房屋的价值总和较大的话，我们会选择偷第一间和第三间；否则，我们则会选择不偷第一间和第三间，去偷第二间</li>\n  <li>将其推广到一般情况，对于前i间房子，我们偷窃的方案有两种：\n    <ol>\n      <li>偷窃第i间房子，得到的总金额是第i间房子的价值与偷窃前i-2间房子的总金额之和</li>\n      <li>不偷窃第i间房子，得到的总金额是偷窃前i-1间房子的总金额</li>\n    </ol>\n  </li>\n</ol>\n\n<p>我们总会选择1、2中可以得到更高金额的选项，这时我们用\\(d[i]\\)来表示偷窃前i间房子的总金额，并且用\\(d[i]\\)来表示选项1、2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n\n<p>hello</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（一）打家劫舍系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-27T20:12:45+08:00'>Sep 27, 2021</time> </span> </div><h2 class='article__title'>动态规划（一）打家劫舍系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } 
  
]
