[
  
    {
      "title"    : "梯度消失和梯度爆炸",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/12/01/%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E5%92%8C%E6%A2%AF%E5%BA%A6%E7%88%86%E7%82%B8/",
      "date"     : "Dec 1, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是梯度消失与梯度爆炸\" id=\"markdown-toc-什么是梯度消失与梯度爆炸\">什么是梯度消失与梯度爆炸？</a>    <ol>\n      <li><a href=\"#梯度消失vanishing-gradient\" id=\"markdown-toc-梯度消失vanishing-gradient\">梯度消失（Vanishing Gradient）</a></li>\n      <li><a href=\"#梯度爆炸exploding-gradient\" id=\"markdown-toc-梯度爆炸exploding-gradient\">梯度爆炸（Exploding Gradient）</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#梯度消失与爆炸的数学原理\" id=\"markdown-toc-梯度消失与爆炸的数学原理\">梯度消失与爆炸的数学原理</a></li>\n  <li><a href=\"#cnn中的梯度消失与爆炸\" id=\"markdown-toc-cnn中的梯度消失与爆炸\">CNN中的梯度消失与爆炸</a>    <ol>\n      <li><a href=\"#卷积神经网络cnn简介\" id=\"markdown-toc-卷积神经网络cnn简介\">卷积神经网络（CNN）简介</a></li>\n      <li><a href=\"#cnn中的梯度问题\" id=\"markdown-toc-cnn中的梯度问题\">CNN中的梯度问题</a></li>\n      <li><a href=\"#解决策略\" id=\"markdown-toc-解决策略\">解决策略</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#rnn中的梯度消失与爆炸\" id=\"markdown-toc-rnn中的梯度消失与爆炸\">RNN中的梯度消失与爆炸</a>    <ol>\n      <li><a href=\"#循环神经网络rnn简介\" id=\"markdown-toc-循环神经网络rnn简介\">循环神经网络（RNN）简介</a></li>\n      <li><a href=\"#rnn中的梯度问题\" id=\"markdown-toc-rnn中的梯度问题\">RNN中的梯度问题</a></li>\n      <li><a href=\"#解决策略-1\" id=\"markdown-toc-解决策略-1\">解决策略</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#实践中的建议\" id=\"markdown-toc-实践中的建议\">实践中的建议</a></li>\n  <li><a href=\"#结语\" id=\"markdown-toc-结语\">结语</a></li>\n  <li><a href=\"#参考文献\" id=\"markdown-toc-参考文献\">参考文献</a></li>\n</ol>\n\n<p>在深度学习中，梯度消失（Vanishing Gradient）和梯度爆炸（Exploding Gradient）是两大常见且棘手的问题，尤其在训练深层神经网络如卷积神经网络（CNN）和循环神经网络（RNN）时尤为突出。这篇博客将详细解释这两个现象的原理、影响以及在CNN和RNN中应对它们的策略，并辅以数学公式以加深理解。</p>\n\n<h2 id=\"什么是梯度消失与梯度爆炸\">什么是梯度消失与梯度爆炸？</h2>\n\n<p>在神经网络的训练过程中，反向传播（Backpropagation）用于计算损失函数相对于各层参数的梯度。这些梯度用于更新网络参数，从而最小化损失函数。然而，当网络变得非常深或具有复杂的结构时，梯度在传播过程中可能会逐渐减小到接近于零（梯度消失）或逐渐增大到无限大（梯度爆炸）。</p>\n\n<h3 id=\"梯度消失vanishing-gradient\">梯度消失（Vanishing Gradient）</h3>\n\n<p>梯度消失指的是在反向传播过程中，梯度逐层传递时不断缩小，导致靠近输入层的参数几乎无法更新。这会导致网络难以学习到有效的特征，训练过程停滞不前。</p>\n\n<h3 id=\"梯度爆炸exploding-gradient\">梯度爆炸（Exploding Gradient）</h3>\n\n<p>梯度爆炸则是梯度在反向传播过程中逐层放大，最终导致梯度过大，参数更新不稳定，甚至导致数值溢出，使得训练过程无法进行。</p>\n\n<h2 id=\"梯度消失与爆炸的数学原理\">梯度消失与爆炸的数学原理</h2>\n\n<p>假设我们有一个简单的深层神经网络，损失函数 $ L $ 关于第 $ l $ 层参数 $ W^l $ 的梯度可以表示为：</p>\n\n<p>$\n\\frac{\\partial L}{\\partial W^l} = \\frac{\\partial L}{\\partial a^L} \\cdot \\prod_{k=l+1}^{L} \\frac{\\partial a^k}{\\partial a^{k-1}} \\cdot \\frac{\\partial a^l}{\\partial W^l}\n$</p>\n\n<p>其中，$ a^k $ 是第 $ k $ 层的激活值。可以看到，梯度是多个层间导数的乘积。如果这些导数的模值小于1，随着层数增加，整个乘积会趋近于零；反之，如果导数的模值大于1，乘积会迅速增大。这就是梯度消失和梯度爆炸的数学根源。</p>\n\n<h2 id=\"cnn中的梯度消失与爆炸\">CNN中的梯度消失与爆炸</h2>\n\n<h3 id=\"卷积神经网络cnn简介\">卷积神经网络（CNN）简介</h3>\n\n<p>CNN主要用于处理具有网格结构的数据，如图像。其核心在于卷积层，通过滤波器（卷积核）提取局部特征，并通过堆叠多个卷积层捕捉更高层次的特征。</p>\n\n<h3 id=\"cnn中的梯度问题\">CNN中的梯度问题</h3>\n\n<p>虽然CNN相比RNN在处理长依赖关系时较少遇到梯度消失和爆炸的问题，但在非常深的网络结构中，这些问题仍然可能出现。例如，经典的VGG网络拥有超过十层的卷积层，训练过程中可能面临梯度消失。</p>\n\n<h3 id=\"解决策略\">解决策略</h3>\n\n<ol>\n  <li>\n    <p><strong>使用适当的激活函数</strong>：ReLU（Rectified Linear Unit）及其变种在一定程度上缓解了梯度消失的问题，因为其导数在正区间恒为1，不会导致梯度逐层缩小。</p>\n\n    <p>$\n\\text{ReLU}(x) = \\max(0, x)\n$</p>\n  </li>\n  <li>\n    <p><strong>权重初始化</strong>：合理的权重初始化方法，如He初始化或Xavier初始化，能保持每层的激活值和梯度的方差一致，减少梯度消失或爆炸的风险。</p>\n\n    <ul>\n      <li>\n        <p><strong>Xavier初始化</strong>（适用于Sigmoid和Tanh激活函数）：</p>\n\n        <p>$\nW \\sim \\mathcal{N}\\left(0, \\frac{2}{n_{\\text{in}} + n_{\\text{out}}}\\right)\n$</p>\n      </li>\n      <li>\n        <p><strong>He初始化</strong>（适用于ReLU激活函数）：</p>\n\n        <p>$\nW \\sim \\mathcal{N}\\left(0, \\frac{2}{n_{\\text{in}}}\\right)\n$</p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>批归一化（Batch Normalization）</strong>：通过规范化每一层的输入，保持激活值在合理范围内，稳定梯度的传播。</p>\n\n    <p>$\n\\hat{x} = \\frac{x - \\mu}{\\sqrt{\\sigma^2 + \\epsilon}}\n$</p>\n\n    <p>其中，$ \\mu $ 和 $ \\sigma^2 $ 分别是批量数据的均值和方差，$ \\epsilon $ 是一个小常数，防止除零。</p>\n  </li>\n  <li>\n    <p><strong>残差连接（Residual Connections）</strong>：在深层网络中引入跳跃连接，允许梯度直接流过这些连接，缓解梯度消失问题。</p>\n\n    <p>$\ny = \\mathcal{F}(x, {W_i}) + x\n$</p>\n\n    <p>其中，$ \\mathcal{F} $ 是某些层的组合，$ x $ 是输入。</p>\n  </li>\n</ol>\n\n<h2 id=\"rnn中的梯度消失与爆炸\">RNN中的梯度消失与爆炸</h2>\n\n<h3 id=\"循环神经网络rnn简介\">循环神经网络（RNN）简介</h3>\n\n<p>RNN适用于处理序列数据，如自然语言处理和时间序列预测。其核心在于通过循环连接保持序列的上下文信息。然而，这种结构使得RNN在处理长序列时极易遭遇梯度消失和爆炸的问题。</p>\n\n<h3 id=\"rnn中的梯度问题\">RNN中的梯度问题</h3>\n\n<p>在标准RNN中，隐藏状态 $ h_t $ 由以下递归公式定义：</p>\n\n<p>$\nh_t = \\tanh(W_h h_{t-1} + W_x x_t + b)\n$</p>\n\n<p>反向传播通过时间（BPTT）计算梯度时，涉及到多个时间步的梯度累乘，导致梯度指数级地减小或增大。</p>\n\n<h3 id=\"解决策略-1\">解决策略</h3>\n\n<ol>\n  <li>\n    <p><strong>梯度裁剪（Gradient Clipping）</strong>：限制梯度的范数，防止梯度爆炸。例如，当梯度的L2范数超过某个阈值时，将其缩放到该阈值。</p>\n\n    <p>$\ng \\leftarrow \\frac{g}{|g|_2} \\cdot \\text{threshold}\n$</p>\n  </li>\n  <li>\n    <p><strong>使用更复杂的RNN单元</strong>：如长短期记忆网络（LSTM）和门控循环单元（GRU），它们通过引入门机制，控制信息的流动，缓解梯度消失问题。</p>\n\n    <ul>\n      <li><strong>LSTM单元</strong>包含输入门、遗忘门和输出门，公式如下：</li>\n    </ul>\n  </li>\n</ol>\n\n\\[\\begin{aligned}\nf_t &amp;= \\sigma\\left(W_f \\cdot \\left[ h_{t-1},\\ x_t \\right] + b_f\\right) \\\\\ni_t &amp;= \\sigma\\left(W_i \\cdot \\left[ h_{t-1},\\ x_t \\right] + b_i\\right) \\\\\n\\tilde{C}_t &amp;= \\tanh\\left(W_C \\cdot \\left[ h_{t-1},\\ x_t \\right] + b_C\\right) \\\\\nC_t &amp;= f_t \\cdot C_{t-1} + i_t \\cdot \\tilde{C}_t \\\\\no_t &amp;= \\sigma\\left(W_o \\cdot \\left[ h_{t-1},\\ x_t \\right] + b_o\\right) \\\\\nh_t &amp;= o_t \\cdot \\tanh\\left(C_t\\right)\n\\end{aligned}\\]\n\n<ul>\n  <li>通过这些门，LSTM能够有效地保持长期依赖，减少梯度消失的风险。</li>\n</ul>\n\n<ol>\n  <li>\n    <p><strong>权重初始化和正则化</strong>：类似于CNN，合理的权重初始化和正则化技术也能在一定程度上缓解RNN中的梯度问题。</p>\n  </li>\n  <li>\n    <p><strong>使用不同的激活函数</strong>：如ReLU，尽管在RNN中不如LSTM或GRU常用，但某些变种RNN也尝试使用不同的激活函数来改善梯度传播。</p>\n  </li>\n</ol>\n\n<h2 id=\"实践中的建议\">实践中的建议</h2>\n\n<ol>\n  <li>\n    <p><strong>选择合适的网络架构</strong>：对于需要处理长依赖关系的任务，优先选择LSTM或GRU而非标准RNN。</p>\n  </li>\n  <li>\n    <p><strong>合理初始化权重</strong>：根据所使用的激活函数选择合适的初始化方法，如He或Xavier初始化。</p>\n  </li>\n  <li>\n    <p><strong>应用批归一化</strong>：在CNN中广泛应用批归一化，可以显著提高训练的稳定性和速度。</p>\n  </li>\n  <li>\n    <p><strong>使用梯度裁剪</strong>：尤其在训练RNN时，梯度裁剪是防止梯度爆炸的有效手段。</p>\n  </li>\n  <li>\n    <p><strong>监控梯度</strong>：在训练过程中，定期检查梯度的分布，及时发现并处理梯度消失或爆炸的问题。</p>\n  </li>\n</ol>\n\n<h2 id=\"结语\">结语</h2>\n\n<p>梯度消失与梯度爆炸是深度学习中不可忽视的问题，理解其原理并采取有效的应对策略，对于构建稳定且高效的神经网络至关重要。通过合理选择网络架构、激活函数、权重初始化方法以及应用批归一化和梯度裁剪等技术，可以有效缓解这些问题，提升模型的表现和训练效率。希望本文能帮助你更好地理解和应对梯度消失与爆炸，构建更强大的深度学习模型。</p>\n\n<h1 id=\"参考文献\">参考文献</h1>\n\n<ol>\n  <li><a href=\"http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf\">Understanding the difficulty of training deep feedforward neural networks</a> - Glorot &amp; Bengio</li>\n  <li><a href=\"https://arxiv.org/abs/1512.03385\">Deep Residual Learning for Image Recognition</a> - He et al.</li>\n  <li><a href=\"https://www.bioinf.jku.at/publications/older/2604.pdf\">Long Short-Term Memory</a> - Hochreiter &amp; Schmidhuber</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/12/01/%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E5%92%8C%E6%A2%AF%E5%BA%A6%E7%88%86%E7%82%B8/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='梯度消失和梯度爆炸'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-12-01T17:32:37+11:00'>Dec 1, 2024</time> </span> </div><h2 class='article__title'>梯度消失和梯度爆炸</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "长短期记忆网络（LSTM）",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/30/%E9%95%BF%E7%9F%AD%E6%9C%9F%E8%AE%B0%E5%BF%86%E7%BD%91%E7%BB%9C-LSTM/",
      "date"     : "Nov 30, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#lstm的基本原理\" id=\"markdown-toc-lstm的基本原理\">LSTM的基本原理</a>    <ol>\n      <li><a href=\"#什么是lstm\" id=\"markdown-toc-什么是lstm\">什么是LSTM？</a></li>\n      <li><a href=\"#lstm的结构\" id=\"markdown-toc-lstm的结构\">LSTM的结构</a></li>\n      <li><a href=\"#lstm的优势\" id=\"markdown-toc-lstm的优势\">LSTM的优势</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#在pytorch中使用lstm\" id=\"markdown-toc-在pytorch中使用lstm\">在PyTorch中使用LSTM</a>    <ol>\n      <li><a href=\"#1-基本lstm的使用\" id=\"markdown-toc-1-基本lstm的使用\">1. 基本LSTM的使用</a></li>\n      <li><a href=\"#2-多层lstm\" id=\"markdown-toc-2-多层lstm\">2. 多层LSTM</a></li>\n      <li><a href=\"#3-使用lstmcell\" id=\"markdown-toc-3-使用lstmcell\">3. 使用LSTMCell</a></li>\n      <li><a href=\"#4-多层lstmcell\" id=\"markdown-toc-4-多层lstmcell\">4. 多层LSTMCell</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#实战示例文本分类任务\" id=\"markdown-toc-实战示例文本分类任务\">实战示例：文本分类任务</a>    <ol>\n      <li><a href=\"#数据准备\" id=\"markdown-toc-数据准备\">数据准备</a></li>\n      <li><a href=\"#定义模型损失函数和优化器\" id=\"markdown-toc-定义模型损失函数和优化器\">定义模型、损失函数和优化器</a></li>\n      <li><a href=\"#训练过程\" id=\"markdown-toc-训练过程\">训练过程</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n  <li><a href=\"#参考文献\" id=\"markdown-toc-参考文献\">参考文献</a></li>\n</ol>\n\n<p>长短期记忆网络（Long Short-Term Memory Network，LSTM）是循环神经网络（RNN）的一个重要变种，旨在解决传统RNN在处理长序列数据时的梯度消失和梯度爆炸问题。LSTM通过引入门控机制，有效地捕捉长距离的依赖关系，使其在自然语言处理、时间序列预测等任务中表现出色。</p>\n\n<h2 id=\"lstm的基本原理\">LSTM的基本原理</h2>\n\n<h3 id=\"什么是lstm\">什么是LSTM？</h3>\n\n<p>传统的RNN在处理长序列时容易遭遇梯度消失或梯度爆炸的问题，导致模型难以捕捉远距离的依赖关系。LSTM通过引入三个门（输入门、遗忘门、输出门）和一个单元状态，有效地控制信息的流动，从而缓解了上述问题。LSTM的设计使其能够在较长的序列中保持和传递关键信息，提高了模型的记忆能力。</p>\n\n<h3 id=\"lstm的结构\">LSTM的结构</h3>\n\n<p>LSTM的核心是一个LSTM单元，每个单元包含以下几个关键组件：</p>\n\n<ol>\n  <li><strong>单元状态（Cell State）</strong>：贯穿整个序列，起到信息传递的主线。</li>\n  <li><strong>遗忘门（Forget Gate）</strong>：决定保留多少过去的信息。</li>\n  <li><strong>输入门（Input Gate）</strong>：决定添加多少新的信息到单元状态。</li>\n  <li><strong>输出门（Output Gate）</strong>：决定输出多少当前单元状态的信息。</li>\n</ol>\n\n<p>假设我们有一个长度为$ T $的输入序列 $ {x_1, x_2, \\ldots, x_T} $，LSTM在每个时间步 $ t $ 的计算过程如下：</p>\n\n<ol>\n  <li>\n    <p><strong>遗忘门</strong>：\n\\(f_t = \\sigma(W_f \\cdot [h_{t-1}, x_t] + b_f)\\)</p>\n\n    <p>其中：</p>\n    <ul>\n      <li>$ f_t $ 是遗忘门的输出。</li>\n      <li>$ W_f $ 是遗忘门的权重矩阵。</li>\n      <li>$ h_{t-1} $ 是前一时刻的隐藏状态。</li>\n      <li>$ x_t $ 是当前时刻的输入。</li>\n      <li>$ b_f $ 是遗忘门的偏置项。</li>\n      <li>$ \\sigma $ 是Sigmoid激活函数。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>输入门</strong>：\n\\(i_t = \\sigma(W_i \\cdot [h_{t-1}, x_t] + b_i)\\)\n\\(\\tilde{C}_t = \\tanh(W_C \\cdot [h_{t-1}, x_t] + b_C)\\)</p>\n\n    <p>其中：</p>\n    <ul>\n      <li>$ i_t $ 是输入门的输出。</li>\n      <li>$ \\tilde{C}_t $ 是候选单元状态。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>单元状态更新</strong>：\n\\(C_t = f_t \\odot C_{t-1} + i_t \\odot \\tilde{C}_t\\)</p>\n\n    <p>其中：</p>\n    <ul>\n      <li>$ C_t $ 是当前时刻的单元状态。</li>\n      <li>$ \\odot $ 表示逐元素相乘。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>输出门</strong>：\n\\(o_t = \\sigma(W_o \\cdot [h_{t-1}, x_t] + b_o)\\)\n\\(h_t = o_t \\odot \\tanh(C_t)\\)</p>\n\n    <p>其中：</p>\n    <ul>\n      <li>$ o_t $ 是输出门的输出。</li>\n      <li>$ h_t $ 是当前时刻的隐藏状态。</li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"lstm的优势\">LSTM的优势</h3>\n\n<ul>\n  <li><strong>长距离依赖</strong>：通过门控机制，LSTM能够有效捕捉长距离的依赖关系。</li>\n  <li><strong>信息选择性</strong>：遗忘门和输入门使得模型能够选择性地保留或丢弃信息，提高了信息处理的效率。</li>\n  <li><strong>稳定的梯度传播</strong>：LSTM的设计缓解了梯度消失和梯度爆炸的问题，使其在训练过程中更加稳定。</li>\n</ul>\n\n<h2 id=\"在pytorch中使用lstm\">在PyTorch中使用LSTM</h2>\n\n<p>PyTorch提供了强大的LSTM模块，方便用户构建和训练LSTM模型。下面将通过代码示例介绍如何在PyTorch中使用LSTM、构建多层LSTM、使用LSTMCell以及多层LSTMCell。</p>\n\n<h3 id=\"1-基本lstm的使用\">1. 基本LSTM的使用</h3>\n\n<p>首先，我们来看一个基本的LSTM模型的实现。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.nn</span> <span class=\"k\">as</span> <span class=\"n\">nn</span>\n\n<span class=\"c1\"># 定义LSTM模型\n</span><span class=\"k\">class</span> <span class=\"nc\">SimpleLSTM</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">SimpleLSTM</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"c1\"># 定义LSTM层\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstm</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">LSTM</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 定义输出层\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"c1\"># 初始化隐藏状态和细胞状态，形状为 (num_layers, batch, hidden_size)\n</span>        <span class=\"n\">h0</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 前向传播LSTM\n</span>        <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">hn</span><span class=\"p\">,</span> <span class=\"n\">cn</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">lstm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">h0</span><span class=\"p\">,</span> <span class=\"n\">c0</span><span class=\"p\">))</span>\n        <span class=\"c1\"># 取最后一个时间步的输出\n</span>        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">input_size</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">SimpleLSTM</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 打印模型结构\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SimpleLSTM<span class=\"o\">(</span>\n  <span class=\"o\">(</span>lstm<span class=\"o\">)</span>: LSTM<span class=\"o\">(</span>10, 20, <span class=\"nv\">batch_first</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"2-多层lstm\">2. 多层LSTM</h3>\n\n<p>单层LSTM可能无法捕捉复杂的序列特征，因此多层LSTM（也称为深层LSTM）应运而生。通过堆叠多个LSTM层，可以提升模型的表达能力。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MultiLayerLSTM</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">MultiLayerLSTM</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"n\">num_layers</span>\n        <span class=\"c1\"># 定义多层LSTM\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstm</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">LSTM</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">,</span> <span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">h0</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">hn</span><span class=\"p\">,</span> <span class=\"n\">cn</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">lstm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">h0</span><span class=\"p\">,</span> <span class=\"n\">c0</span><span class=\"p\">))</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerLSTM</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MultiLayerLSTM<span class=\"o\">(</span>\n  <span class=\"o\">(</span>lstm<span class=\"o\">)</span>: LSTM<span class=\"o\">(</span>10, 20, <span class=\"nv\">num_layers</span><span class=\"o\">=</span>3, <span class=\"nv\">batch_first</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"3-使用lstmcell\">3. 使用LSTMCell</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">nn.LSTMCell</code>提供了更细粒度的控制，使用户可以手动处理每个时间步的计算。这在需要自定义循环过程时非常有用。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">LSTMWithCell</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">LSTMWithCell</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstm_cell</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">LSTMCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">):</span>\n            <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">lstm_cell</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">))</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">LSTMWithCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>LSTMWithCell<span class=\"o\">(</span>\n  <span class=\"o\">(</span>lstm_cell<span class=\"o\">)</span>: LSTMCell<span class=\"o\">(</span>10, 20<span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"4-多层lstmcell\">4. 多层LSTMCell</h3>\n\n<p>与<code class=\"language-plaintext highlighter-rouge\">nn.LSTM</code>类似，<code class=\"language-plaintext highlighter-rouge\">nn.LSTMCell</code>也支持多层结构。我们可以通过堆叠多个LSTMCell来实现多层LSTMCell。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MultiLayerLSTMCell</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">MultiLayerLSTMCell</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"n\">num_layers</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"c1\"># 创建多层LSTMCell\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">ModuleList</span><span class=\"p\">([</span>\n            <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">LSTMCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">)</span> \n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">num_layers</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">)]</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">)]</span>\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">):</span>\n            <span class=\"n\">input_t</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">):</span>\n                <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">cells</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">](</span><span class=\"n\">input_t</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">]))</span>\n                <span class=\"n\">input_t</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">]</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerLSTMCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MultiLayerLSTMCell<span class=\"o\">(</span>\n  <span class=\"o\">(</span>cells<span class=\"o\">)</span>: ModuleList<span class=\"o\">(</span>\n    <span class=\"o\">(</span>0<span class=\"o\">)</span>: LSTMCell<span class=\"o\">(</span>10, 20<span class=\"o\">)</span>\n    <span class=\"o\">(</span>1<span class=\"o\">)</span>: LSTMCell<span class=\"o\">(</span>20, 20<span class=\"o\">)</span>\n    <span class=\"o\">(</span>2<span class=\"o\">)</span>: LSTMCell<span class=\"o\">(</span>20, 20<span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"实战示例文本分类任务\">实战示例：文本分类任务</h2>\n\n<p>为了更好地理解LSTM的应用，下面我们通过一个简单的文本分类任务来演示如何使用LSTM模型。</p>\n\n<h3 id=\"数据准备\">数据准备</h3>\n\n<p>假设我们有一个文本分类数据集，每条文本已经被转换为固定长度的序列，每个词被表示为一个词向量。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 示例数据\n</span><span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">seq_len</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">input_size</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># 词向量维度\n</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n<span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\"># 二分类\n</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># 随机生成输入数据和标签\n</span><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,))</span>\n</code></pre></div></div>\n\n<h3 id=\"定义模型损失函数和优化器\">定义模型、损失函数和优化器</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerLSTM</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">)</span>\n<span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"训练过程\">训练过程</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num_epochs</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">num_epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n    <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n    <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n    \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Epoch [</span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">num_epochs</span><span class=\"si\">}</span><span class=\"s\">], Loss: </span><span class=\"si\">{</span><span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Epoch <span class=\"o\">[</span>1/100], Loss: 0.6932\nEpoch <span class=\"o\">[</span>2/100], Loss: 0.6796\nEpoch <span class=\"o\">[</span>3/100], Loss: 0.6660\nEpoch <span class=\"o\">[</span>4/100], Loss: 0.6512\nEpoch <span class=\"o\">[</span>5/100], Loss: 0.6342\nEpoch <span class=\"o\">[</span>6/100], Loss: 0.6139\nEpoch <span class=\"o\">[</span>7/100], Loss: 0.5893\nEpoch <span class=\"o\">[</span>8/100], Loss: 0.5595\nEpoch <span class=\"o\">[</span>9/100], Loss: 0.5239\nEpoch <span class=\"o\">[</span>10/100], Loss: 0.4827\n</code></pre></div></div>\n\n<p>由于 LSTM 包含多个门控机制，梯度需要通过这些门进行反向传播。这增加了每个参数更新所需的计算量，因此收敛速度可能不及RNN。但得益于其门控机制，也极大程度缓解了 RNN 的梯度消失和爆炸的问题。</p>\n\n<h2 id=\"注意事项\">注意事项</h2>\n\n<ol>\n  <li>\n    <p><strong>批量维度</strong>：在使用PyTorch的LSTM模块时，建议将<code class=\"language-plaintext highlighter-rouge\">batch_first=True</code>，这样输入和输出的形状为 <code class=\"language-plaintext highlighter-rouge\">(batch, seq, feature)</code>，更符合常见的使用习惯。</p>\n  </li>\n  <li>\n    <p><strong>隐藏状态和细胞状态初始化</strong>：在训练过程中，需要在每个batch开始前初始化隐藏状态和细胞状态，通常初始化为零向量。对于多层LSTM，隐藏状态和细胞状态的形状为 <code class=\"language-plaintext highlighter-rouge\">(num_layers, batch, hidden_size)</code>。</p>\n  </li>\n  <li>\n    <p><strong>梯度截断</strong>：为防止梯度爆炸，可以使用梯度截断（gradient clipping）技术。例如，在训练过程中添加 <code class=\"language-plaintext highlighter-rouge\">torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm)</code>。</p>\n  </li>\n  <li>\n    <p><strong>序列长度不一致</strong>：在处理变长序列时，可以使用<code class=\"language-plaintext highlighter-rouge\">pack_padded_sequence</code>和<code class=\"language-plaintext highlighter-rouge\">pad_packed_sequence</code>来提高计算效率。</p>\n  </li>\n  <li>\n    <p><strong>双向LSTM</strong>：PyTorch的LSTM模块支持双向（bidirectional）设置，通过设置<code class=\"language-plaintext highlighter-rouge\">bidirectional=True</code>，模型将同时考虑前向和后向的上下文信息。</p>\n  </li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstm</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">LSTM</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">,</span> <span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">bidirectional</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>本文介绍了LSTM的基本原理及其在PyTorch中的实现方法。通过理论公式和代码示例，我们展示了如何构建单层和多层LSTM，如何使用<code class=\"language-plaintext highlighter-rouge\">LSTMCell</code>实现更灵活的循环结构。LSTM作为处理序列数据的强大工具，凭借其出色的记忆能力，在许多应用中表现优异。尽管近年来Transformer等新兴模型在某些任务上取得了突破性进展，LSTM凭借其简单性和有效性，依然在许多实际项目中被广泛使用。</p>\n\n<h1 id=\"参考文献\">参考文献</h1>\n\n<ul>\n  <li><a href=\"https://pytorch.org/docs/stable/generated/torch.nn.LSTM.html\">PyTorch官方文档 - LSTM</a></li>\n  <li><a href=\"https://colah.github.io/posts/2015-08-Understanding-LSTMs/\">Understanding LSTM Networks</a></li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/30/%E9%95%BF%E7%9F%AD%E6%9C%9F%E8%AE%B0%E5%BF%86%E7%BD%91%E7%BB%9C-LSTM/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='长短期记忆网络（LSTM）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>10 min read <time class='article__date' datetime='2024-11-30T23:03:28+11:00'>Nov 30, 2024</time> </span> </div><h2 class='article__title'>长短期记忆网络（LSTM）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "循环神经网络（RNN）",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/29/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-RNN/",
      "date"     : "Nov 29, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#rnn的基本原理\" id=\"markdown-toc-rnn的基本原理\">RNN的基本原理</a>    <ol>\n      <li><a href=\"#什么是rnn\" id=\"markdown-toc-什么是rnn\">什么是RNN？</a></li>\n      <li><a href=\"#rnn的结构\" id=\"markdown-toc-rnn的结构\">RNN的结构</a></li>\n      <li><a href=\"#rnn的梯度消失与梯度爆炸问题\" id=\"markdown-toc-rnn的梯度消失与梯度爆炸问题\">RNN的梯度消失与梯度爆炸问题</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#在pytorch中使用rnn\" id=\"markdown-toc-在pytorch中使用rnn\">在PyTorch中使用RNN</a>    <ol>\n      <li><a href=\"#1-基本rnn的使用\" id=\"markdown-toc-1-基本rnn的使用\">1. 基本RNN的使用</a></li>\n      <li><a href=\"#2-多层rnn\" id=\"markdown-toc-2-多层rnn\">2. 多层RNN</a></li>\n      <li><a href=\"#3-使用rnncell\" id=\"markdown-toc-3-使用rnncell\">3. 使用RNNCell</a></li>\n      <li><a href=\"#4-多层rnncell\" id=\"markdown-toc-4-多层rnncell\">4. 多层RNNCell</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#实战示例文本分类任务\" id=\"markdown-toc-实战示例文本分类任务\">实战示例：文本分类任务</a>    <ol>\n      <li><a href=\"#数据准备\" id=\"markdown-toc-数据准备\">数据准备</a></li>\n      <li><a href=\"#定义模型损失函数和优化器\" id=\"markdown-toc-定义模型损失函数和优化器\">定义模型、损失函数和优化器</a></li>\n      <li><a href=\"#训练过程\" id=\"markdown-toc-训练过程\">训练过程</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n  <li><a href=\"#参考文献\" id=\"markdown-toc-参考文献\">参考文献</a></li>\n</ol>\n\n<p>循环神经网络（Recurrent Neural Network，简称RNN）在处理序列数据（如自然语言处理、时间序列预测等）方面表现出色。本文将详细介绍RNN的原理，并展示如何在PyTorch中使用RNN、构建多层RNN、使用RNNCell以及多层RNNCell。我们将通过公式解析RNN的内部机制，并结合代码示例，帮助您全面掌握RNN的使用。</p>\n\n<h2 id=\"rnn的基本原理\">RNN的基本原理</h2>\n\n<h3 id=\"什么是rnn\">什么是RNN？</h3>\n\n<p>传统的前馈神经网络在处理独立样本时表现优异，但在处理序列数据时无法有效捕捉时间依赖关系。RNN通过在网络中引入“循环连接”，使得前一时刻的输出能够影响当前时刻的计算，从而捕捉序列中的时序信息。</p>\n\n<h3 id=\"rnn的结构\">RNN的结构</h3>\n\n<p>RNN的核心是一个循环单元，能够在时间步之间传递信息。每个时间步的计算依赖于当前输入和前一时刻的隐藏状态。假设我们有一个长度为$ T $的输入序列 $ {x_1, x_2, \\ldots, x_T} $，RNN在每个时间步 $ t $ 的计算过程如下：</p>\n\n<ol>\n  <li>\n    <p><strong>隐藏状态更新</strong>：\n\\(h_t = \\tanh(W_{xh} x_t + W_{hh} h_{t-1} + b_h)\\)</p>\n\n    <p>其中：</p>\n    <ul>\n      <li>$ h_t $ 是当前时刻的隐藏状态。</li>\n      <li>$ x_t $ 是当前时刻的输入。</li>\n      <li>$ W_{xh} $ 和 $ W_{hh} $ 分别是输入到隐藏状态和隐藏状态到隐藏状态的权重矩阵。</li>\n      <li>$ b_h $ 是偏置项。</li>\n      <li>$ \\tanh $ 是激活函数，常用的还有ReLU等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>输出计算</strong>（可选）：\n\\(y_t = W_{hy} h_t + b_y\\)</p>\n\n    <p>其中：</p>\n    <ul>\n      <li>$ y_t $ 是当前时刻的输出。</li>\n      <li>$ W_{hy} $ 是隐藏状态到输出的权重矩阵。</li>\n      <li>$ b_y $ 是输出层的偏置项。</li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"rnn的梯度消失与梯度爆炸问题\">RNN的梯度消失与梯度爆炸问题</h3>\n\n<p>RNN在训练过程中面临梯度消失和梯度爆炸的问题，特别是在处理长序列时。这是因为在反向传播时，梯度需要通过每个时间步的权重矩阵进行累乘，导致梯度指数级衰减或增长。为了解决这一问题，提出了长短期记忆网络（LSTM）和门控循环单元（GRU）等改进结构。</p>\n\n<h2 id=\"在pytorch中使用rnn\">在PyTorch中使用RNN</h2>\n\n<p>PyTorch提供了强大的RNN模块，方便用户构建和训练RNN模型。下面将通过代码示例介绍如何在PyTorch中使用RNN、构建多层RNN、使用RNNCell以及多层RNNCell。</p>\n\n<h3 id=\"1-基本rnn的使用\">1. 基本RNN的使用</h3>\n\n<p>首先，我们来看一个基本的RNN模型的实现。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.nn</span> <span class=\"k\">as</span> <span class=\"n\">nn</span>\n\n<span class=\"c1\"># 定义RNN模型\n</span><span class=\"k\">class</span> <span class=\"nc\">SimpleRNN</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">SimpleRNN</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"c1\"># 定义RNN层\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">rnn</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">RNN</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 定义输出层\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"c1\"># 初始化隐藏状态，形状为 (num_layers, batch, hidden_size)\n</span>        <span class=\"n\">h0</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 前向传播RNN\n</span>        <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">hn</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">rnn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">h0</span><span class=\"p\">)</span>\n        <span class=\"c1\"># 取最后一个时间步的输出\n</span>        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">input_size</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">SimpleRNN</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 打印模型结构\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SimpleRNN<span class=\"o\">(</span>\n  <span class=\"o\">(</span>rnn<span class=\"o\">)</span>: RNN<span class=\"o\">(</span>10, 20, <span class=\"nv\">batch_first</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"2-多层rnn\">2. 多层RNN</h3>\n\n<p>单层RNN可能无法捕捉复杂的序列特征，因此多层RNN（也称为深层RNN）应运而生。通过堆叠多个RNN层，可以提升模型的表达能力。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MultiLayerRNN</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">MultiLayerRNN</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"n\">num_layers</span>\n        <span class=\"c1\"># 定义多层RNN\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">rnn</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">RNN</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">,</span> <span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">h0</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">hn</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">rnn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">h0</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">:])</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">input_size</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerRNN</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MultiLayerRNN<span class=\"o\">(</span>\n  <span class=\"o\">(</span>rnn<span class=\"o\">)</span>: RNN<span class=\"o\">(</span>10, 20, <span class=\"nv\">num_layers</span><span class=\"o\">=</span>3, <span class=\"nv\">batch_first</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"3-使用rnncell\">3. 使用RNNCell</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">nn.RNNCell</code>提供了更细粒度的控制，使用户可以手动处理每个时间步的计算。这在需要自定义循环过程时非常有用。主要区别看 <code class=\"language-plaintext highlighter-rouge\">forward()</code> 函数：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">RNNWithCell</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">RNNWithCell</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">rnn_cell</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">RNNCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">):</span>\n            <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">rnn_cell</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">RNNWithCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>RNNWithCell<span class=\"o\">(</span>\n  <span class=\"o\">(</span>rnn_cell<span class=\"o\">)</span>: RNNCell<span class=\"o\">(</span>10, 20<span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"4-多层rnncell\">4. 多层RNNCell</h3>\n\n<p>与<code class=\"language-plaintext highlighter-rouge\">nn.RNN</code>类似，<code class=\"language-plaintext highlighter-rouge\">nn.RNNCell</code>也支持多层结构。我们可以通过堆叠多个RNNCell来实现多层RNNCell。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MultiLayerRNNCell</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">MultiLayerRNNCell</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"n\">num_layers</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"n\">hidden_size</span>\n        <span class=\"c1\"># 创建多层RNNCell\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">ModuleList</span><span class=\"p\">([</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">RNNCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">num_layers</span><span class=\"p\">)])</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">()</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">hidden_size</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">)]</span>\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">seq_len</span><span class=\"p\">):</span>\n            <span class=\"n\">input_t</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num_layers</span><span class=\"p\">):</span>\n                <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">cells</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">](</span><span class=\"n\">input_t</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">])</span>\n                <span class=\"n\">input_t</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">]</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n<span class=\"c1\"># 示例参数\n</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerRNNCell</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MultiLayerRNNCell<span class=\"o\">(</span>\n  <span class=\"o\">(</span>cells<span class=\"o\">)</span>: ModuleList<span class=\"o\">(</span>\n    <span class=\"o\">(</span>0<span class=\"o\">)</span>: RNNCell<span class=\"o\">(</span>10, 20<span class=\"o\">)</span>\n    <span class=\"o\">(</span>1<span class=\"o\">)</span>: RNNCell<span class=\"o\">(</span>20, 20<span class=\"o\">)</span>\n    <span class=\"o\">(</span>2<span class=\"o\">)</span>: RNNCell<span class=\"o\">(</span>20, 20<span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"nb\">fc</span><span class=\"o\">)</span>: Linear<span class=\"o\">(</span><span class=\"nv\">in_features</span><span class=\"o\">=</span>20, <span class=\"nv\">out_features</span><span class=\"o\">=</span>1, <span class=\"nv\">bias</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"实战示例文本分类任务\">实战示例：文本分类任务</h2>\n\n<p>为了更好地理解RNN的应用，下面我们通过一个简单的文本分类任务来演示如何使用RNN模型。</p>\n\n<h3 id=\"数据准备\">数据准备</h3>\n\n<p>假设我们有一个文本分类数据集，每条文本已经被转换为固定长度的序列，每个词被表示为一个词向量。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 示例数据\n</span><span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">seq_len</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">input_size</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># 词向量维度\n</span><span class=\"n\">hidden_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n<span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\"># 二分类\n</span><span class=\"n\">num_layers</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># 随机生成输入数据和标签\n</span><span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">seq_len</span><span class=\"p\">,</span> <span class=\"n\">input_size</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,))</span>\n</code></pre></div></div>\n\n<h3 id=\"定义模型损失函数和优化器\">定义模型、损失函数和优化器</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerRNN</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"n\">num_layers</span><span class=\"p\">)</span>\n<span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"训练过程\">训练过程</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num_epochs</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">num_epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n    <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n    <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n    \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Epoch [</span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">num_epochs</span><span class=\"si\">}</span><span class=\"s\">], Loss: </span><span class=\"si\">{</span><span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Epoch <span class=\"o\">[</span>1/10], Loss: 0.6801\nEpoch <span class=\"o\">[</span>2/10], Loss: 0.5558\nEpoch <span class=\"o\">[</span>3/10], Loss: 0.4489\nEpoch <span class=\"o\">[</span>4/10], Loss: 0.3517\nEpoch <span class=\"o\">[</span>5/10], Loss: 0.2624\nEpoch <span class=\"o\">[</span>6/10], Loss: 0.1833\nEpoch <span class=\"o\">[</span>7/10], Loss: 0.1187\nEpoch <span class=\"o\">[</span>8/10], Loss: 0.0716\nEpoch <span class=\"o\">[</span>9/10], Loss: 0.0409\nEpoch <span class=\"o\">[</span>10/10], Loss: 0.0228\n</code></pre></div></div>\n\n<h2 id=\"注意事项\">注意事项</h2>\n\n<ol>\n  <li>\n    <p><strong>批量维度</strong>：在使用PyTorch的RNN模块时，建议将<code class=\"language-plaintext highlighter-rouge\">batch_first=True</code>，这样输入和输出的形状为 <code class=\"language-plaintext highlighter-rouge\">(batch, seq, feature)</code>，更符合常见的使用习惯。</p>\n  </li>\n  <li>\n    <p><strong>隐藏状态初始化</strong>：在训练过程中，需要在每个batch开始前初始化隐藏状态，通常初始化为零向量。对于多层RNN，隐藏状态的形状为 <code class=\"language-plaintext highlighter-rouge\">(num_layers, batch, hidden_size)</code>。</p>\n  </li>\n  <li>\n    <p><strong>梯度截断</strong>：为防止梯度爆炸，可以使用梯度截断（gradient clipping）技术。例如，在训练过程中添加 <code class=\"language-plaintext highlighter-rouge\">torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm)</code>。</p>\n  </li>\n  <li>\n    <p><strong>序列长度不一致</strong>：在处理变长序列时，可以使用<code class=\"language-plaintext highlighter-rouge\">pack_padded_sequence</code>和<code class=\"language-plaintext highlighter-rouge\">pad_packed_sequence</code>来提高计算效率。</p>\n  </li>\n</ol>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>本文介绍了RNN的基本原理及其在PyTorch中的实现方法。通过理论公式和代码示例，我们展示了如何构建单层和多层RNN，如何使用<code class=\"language-plaintext highlighter-rouge\">RNNCell</code>实现更灵活的循环结构。RNN作为处理序列数据的基础模型，其简单性和有效性使其在许多应用中依然广泛使用。</p>\n\n<h1 id=\"参考文献\">参考文献</h1>\n\n<ul>\n  <li><a href=\"https://pytorch.org/docs/stable/generated/torch.nn.RNN.html\">PyTorch官方文档 - RNN</a></li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/29/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-RNN/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='循环神经网络（RNN）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>9 min read <time class='article__date' datetime='2024-11-29T22:28:53+11:00'>Nov 29, 2024</time> </span> </div><h2 class='article__title'>循环神经网络（RNN）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "数据增强",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/28/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/",
      "date"     : "Nov 28, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是数据增强\" id=\"markdown-toc-什么是数据增强\">什么是数据增强</a></li>\n  <li><a href=\"#torchvisiontransforms-简介\" id=\"markdown-toc-torchvisiontransforms-简介\">torchvision.transforms 简介</a></li>\n  <li><a href=\"#常用的数据增强方法\" id=\"markdown-toc-常用的数据增强方法\">常用的数据增强方法</a>    <ol>\n      <li><a href=\"#随机裁剪-random-crop\" id=\"markdown-toc-随机裁剪-random-crop\">随机裁剪 (Random Crop)</a></li>\n      <li><a href=\"#随机水平翻转-random-horizontal-flip\" id=\"markdown-toc-随机水平翻转-random-horizontal-flip\">随机水平翻转 (Random Horizontal Flip)</a></li>\n      <li><a href=\"#随机旋转-random-rotation\" id=\"markdown-toc-随机旋转-random-rotation\">随机旋转 (Random Rotation)</a></li>\n      <li><a href=\"#颜色变换-color-jitter\" id=\"markdown-toc-颜色变换-color-jitter\">颜色变换 (Color Jitter)</a></li>\n      <li><a href=\"#归一化-normalization\" id=\"markdown-toc-归一化-normalization\">归一化 (Normalization)</a></li>\n      <li><a href=\"#转为-tensor-to-tensor\" id=\"markdown-toc-转为-tensor-to-tensor\">转为 Tensor (To Tensor)</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#数据增强的综合示例\" id=\"markdown-toc-数据增强的综合示例\">数据增强的综合示例</a></li>\n  <li><a href=\"#进阶自定义数据增强\" id=\"markdown-toc-进阶自定义数据增强\">进阶：自定义数据增强</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<p>在深度学习中，数据增强（Data Augmentation）是提高模型泛化能力、减少过拟合的重要手段。PyTorch 作为当前流行的深度学习框架，其附属库 <code class=\"language-plaintext highlighter-rouge\">torchvision</code> 提供了丰富的数据增强工具，方便开发者在训练过程中对图像数据进行多种变换。本文将详细介绍如何使用 <code class=\"language-plaintext highlighter-rouge\">torchvision.transforms</code> 进行数据增强，并通过代码示例加以说明。</p>\n\n<h2 id=\"什么是数据增强\">什么是数据增强</h2>\n\n<p>数据增强是通过对训练数据进行各种变换，生成新的样本，从而扩充训练集的一种技术。常见的数据增强方法包括旋转、缩放、平移、翻转、调整亮度和对比度等。这些变换能够帮助模型更好地泛化到未见过的数据，提高其在实际应用中的表现。</p>\n\n<h2 id=\"torchvisiontransforms-简介\">torchvision.transforms 简介</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">torchvision.transforms</code> 是 <code class=\"language-plaintext highlighter-rouge\">torchvision</code> 库中用于图像预处理和数据增强的模块。它提供了一系列的类和函数，可以方便地对图像进行各种变换操作。常用的 <code class=\"language-plaintext highlighter-rouge\">transforms</code> 包括：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.Compose</code>：将多个变换组合在一起</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.RandomCrop</code>：随机裁剪图像</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.RandomHorizontalFlip</code>：随机水平翻转图像</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.RandomRotation</code>：随机旋转图像</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.ColorJitter</code>：随机改变图像的亮度、对比度、饱和度和色调</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.Normalize</code>：对图像进行归一化处理</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">transforms.ToTensor</code>：将图像转换为 Tensor</li>\n</ul>\n\n<h2 id=\"常用的数据增强方法\">常用的数据增强方法</h2>\n\n<h3 id=\"随机裁剪-random-crop\">随机裁剪 (Random Crop)</h3>\n\n<p>随机裁剪是指从原始图像中随机选择一个区域进行裁剪。这样可以让模型学习到图像的不同部分，增强其对局部特征的敏感度。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torchvision.transforms</span> <span class=\"k\">as</span> <span class=\"n\">transforms</span>\n\n<span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomCrop</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">224</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"随机水平翻转-random-horizontal-flip\">随机水平翻转 (Random Horizontal Flip)</h3>\n\n<p>随机水平翻转通过以一定概率将图像水平翻转，增加模型对左右对称特征的鲁棒性。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomHorizontalFlip</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"随机旋转-random-rotation\">随机旋转 (Random Rotation)</h3>\n\n<p>随机旋转图像一定的角度范围，帮助模型适应不同角度的图像。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomRotation</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>  <span class=\"c1\"># 随机旋转±30度\n</span></code></pre></div></div>\n\n<h3 id=\"颜色变换-color-jitter\">颜色变换 (Color Jitter)</h3>\n\n<p>颜色变换可以随机调整图像的亮度、对比度、饱和度和色调，增强模型对颜色变化的适应能力。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ColorJitter</span><span class=\"p\">(</span>\n    <span class=\"n\">brightness</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"n\">saturation</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"归一化-normalization\">归一化 (Normalization)</h3>\n\n<p>归一化将图像的像素值调整到一个标准范围内（通常是均值为0，标准差为1），加速模型的收敛。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Normalize</span><span class=\"p\">(</span>\n    <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.485</span><span class=\"p\">,</span> <span class=\"mf\">0.456</span><span class=\"p\">,</span> <span class=\"mf\">0.406</span><span class=\"p\">],</span>  <span class=\"c1\"># ImageNet 数据集的均值\n</span>    <span class=\"n\">std</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.229</span><span class=\"p\">,</span> <span class=\"mf\">0.224</span><span class=\"p\">,</span> <span class=\"mf\">0.225</span><span class=\"p\">]</span>    <span class=\"c1\"># ImageNet 数据集的标准差\n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"转为-tensor-to-tensor\">转为 Tensor (To Tensor)</h3>\n\n<p>将 PIL 图像或 NumPy 数组转换为 PyTorch 的 Tensor，并将像素值缩放到 [0, 1] 范围。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ToTensor</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h2 id=\"数据增强的综合示例\">数据增强的综合示例</h2>\n\n<p>下面是一个综合示例，展示如何使用 <code class=\"language-plaintext highlighter-rouge\">torchvision.transforms</code> 进行多种数据增强操作，并将其应用于数据加载过程中。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">from</span> <span class=\"n\">torchvision</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">transforms</span>\n<span class=\"kn\">import</span> <span class=\"n\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"c1\"># 定义数据增强的变换\n</span><span class=\"n\">data_transforms</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Compose</span><span class=\"p\">([</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomResizedCrop</span><span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">),</span>          <span class=\"c1\"># 随机裁剪并调整大小\n</span>    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomHorizontalFlip</span><span class=\"p\">(),</span>          <span class=\"c1\"># 随机水平翻转\n</span>    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomRotation</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">),</span>              <span class=\"c1\"># 随机旋转±30度\n</span>    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ColorJitter</span><span class=\"p\">(</span><span class=\"n\">brightness</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>       <span class=\"c1\"># 随机调整亮度\n</span>                           <span class=\"n\">contrast</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>         <span class=\"c1\"># 随机调整对比度\n</span>                           <span class=\"n\">saturation</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>       <span class=\"c1\"># 随机调整饱和度\n</span>                           <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">),</span>             <span class=\"c1\"># 随机调整色调\n</span>    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ToTensor</span><span class=\"p\">(),</span>                      <span class=\"c1\"># 转为 Tensor\n</span>    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Normalize</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.485</span><span class=\"p\">,</span> <span class=\"mf\">0.456</span><span class=\"p\">,</span> <span class=\"mf\">0.406</span><span class=\"p\">],</span>  <span class=\"c1\"># 归一化\n</span>                         <span class=\"n\">std</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.229</span><span class=\"p\">,</span> <span class=\"mf\">0.224</span><span class=\"p\">,</span> <span class=\"mf\">0.225</span><span class=\"p\">])</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># 加载数据集并应用数据增强\n</span><span class=\"n\">train_dataset</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"nc\">CIFAR10</span><span class=\"p\">(</span>\n    <span class=\"n\">root</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">./data</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">download</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">data_transforms</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nc\">DataLoader</span><span class=\"p\">(</span>\n    <span class=\"n\">train_dataset</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n    <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">num_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># 可视化一些增强后的图像\n</span><span class=\"k\">def</span> <span class=\"nf\">imshow</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">显示一个张量图像</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">inp</span> <span class=\"o\">=</span> <span class=\"n\">inp</span><span class=\"p\">.</span><span class=\"nf\">numpy</span><span class=\"p\">().</span><span class=\"nf\">transpose</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"n\">mean</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.485</span><span class=\"p\">,</span> <span class=\"mf\">0.456</span><span class=\"p\">,</span> <span class=\"mf\">0.406</span><span class=\"p\">]</span>  <span class=\"c1\"># 与归一化时的均值相同\n</span>    <span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.229</span><span class=\"p\">,</span> <span class=\"mf\">0.224</span><span class=\"p\">,</span> <span class=\"mf\">0.225</span><span class=\"p\">]</span>   <span class=\"c1\"># 与归一化时的标准差相同\n</span>    <span class=\"n\">inp</span> <span class=\"o\">=</span> <span class=\"n\">std</span> <span class=\"o\">*</span> <span class=\"n\">inp</span> <span class=\"o\">+</span> <span class=\"n\">mean</span>\n    <span class=\"n\">inp</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">clamp</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">imshow</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">title</span><span class=\"p\">:</span>\n        <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"nf\">pause</span><span class=\"p\">(</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>  <span class=\"c1\"># 暂停以更新图像\n</span>\n<span class=\"c1\"># 获取一批训练数据\n</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">(</span><span class=\"n\">train_loader</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 显示图像\n</span><span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">torchvision</span><span class=\"p\">.</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"nf\">make_grid</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"nf\">imshow</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">train_dataset</span><span class=\"p\">.</span><span class=\"n\">classes</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">classes</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">]])</span>\n</code></pre></div></div>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n  <li>\n    <p><strong>数据变换定义</strong>：使用 <code class=\"language-plaintext highlighter-rouge\">transforms.Compose</code> 将多个变换组合在一起。首先进行随机裁剪并调整大小，然后进行随机水平翻转、随机旋转和颜色变换，最后将图像转换为 Tensor 并进行归一化。</p>\n  </li>\n  <li>\n    <p><strong>加载数据集</strong>：使用 <code class=\"language-plaintext highlighter-rouge\">datasets.CIFAR10</code> 加载 CIFAR-10 数据集，并应用上述定义的数据增强变换。</p>\n  </li>\n  <li>\n    <p><strong>数据加载器</strong>：创建一个数据加载器 <code class=\"language-plaintext highlighter-rouge\">train_loader</code>，设置批量大小为32，并启用多线程加载数据。</p>\n  </li>\n  <li>\n    <p><strong>可视化</strong>：定义一个 <code class=\"language-plaintext highlighter-rouge\">imshow</code> 函数，用于显示经过数据增强后的图像。获取一批训练数据，并显示其中的前4张图像及其对应的类别。</p>\n  </li>\n</ol>\n\n<h2 id=\"进阶自定义数据增强\">进阶：自定义数据增强</h2>\n\n<p>除了 <code class=\"language-plaintext highlighter-rouge\">torchvision.transforms</code> 提供的内置变换外，有时我们可能需要自定义数据增强方法。以下是一个示例，展示如何创建一个自定义的变换类。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"n\">random</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RandomErasing</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">随机擦除图像中的某个区域</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">sl</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"n\">sh</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">r1</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">probability</span> <span class=\"o\">=</span> <span class=\"n\">probability</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">sl</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">sh</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">r1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">probability</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">img</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n            <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n            <span class=\"n\">target_area</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">uniform</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">sl</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">sh</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">area</span>\n            <span class=\"n\">aspect_ratio</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">uniform</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">r1</span><span class=\"p\">)</span>\n\n            <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nf\">round</span><span class=\"p\">((</span><span class=\"n\">target_area</span> <span class=\"o\">*</span> <span class=\"n\">aspect_ratio</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span><span class=\"p\">))</span>\n            <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nf\">round</span><span class=\"p\">((</span><span class=\"n\">target_area</span> <span class=\"o\">/</span> <span class=\"n\">aspect_ratio</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span><span class=\"p\">))</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">h</span> <span class=\"o\">&lt;</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n                <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n                <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"nf\">paste</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">y1</span> <span class=\"o\">+</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">img</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">img</span>\n\n<span class=\"c1\"># 使用自定义的 RandomErasing\n</span><span class=\"n\">data_transforms</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Compose</span><span class=\"p\">([</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomResizedCrop</span><span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">),</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">RandomHorizontalFlip</span><span class=\"p\">(),</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ToTensor</span><span class=\"p\">(),</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Normalize</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.485</span><span class=\"p\">,</span> <span class=\"mf\">0.456</span><span class=\"p\">,</span> <span class=\"mf\">0.406</span><span class=\"p\">],</span>\n                         <span class=\"n\">std</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.229</span><span class=\"p\">,</span> <span class=\"mf\">0.224</span><span class=\"p\">,</span> <span class=\"mf\">0.225</span><span class=\"p\">]),</span>\n    <span class=\"nc\">RandomErasing</span><span class=\"p\">(</span><span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">sl</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"n\">sh</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">r1</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n  <li>\n    <p><strong>自定义变换类</strong>：<code class=\"language-plaintext highlighter-rouge\">RandomErasing</code> 类实现了随机擦除图像中的某个区域的功能。擦除区域的大小和比例由参数控制。</p>\n  </li>\n  <li>\n    <p><strong>集成到数据变换中</strong>：将自定义的 <code class=\"language-plaintext highlighter-rouge\">RandomErasing</code> 添加到 <code class=\"language-plaintext highlighter-rouge\">transforms.Compose</code> 中，与其他变换一起使用。</p>\n  </li>\n</ol>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>数据增强是提升深度学习模型性能的有效手段，<code class=\"language-plaintext highlighter-rouge\">torchvision.transforms</code> 提供了丰富且易用的工具，使得在 PyTorch 中实施数据增强变得简单。通过组合不同的变换，可以有效扩展训练数据集，增强模型的泛化能力。此外，<code class=\"language-plaintext highlighter-rouge\">torchvision</code> 也支持自定义数据增强方法，满足更复杂的需求。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/28/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='数据增强'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2024-11-28T23:28:53+11:00'>Nov 28, 2024</time> </span> </div><h2 class='article__title'>数据增强</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "经典卷积网络",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/28/%E7%BB%8F%E5%85%B8%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C/",
      "date"     : "Nov 28, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#经典卷积神经网络的发展\" id=\"markdown-toc-经典卷积神经网络的发展\">经典卷积神经网络的发展</a>    <ol>\n      <li><a href=\"#lenet-5神经网络的先驱\" id=\"markdown-toc-lenet-5神经网络的先驱\">LeNet-5：神经网络的先驱</a></li>\n      <li><a href=\"#alexnet深度学习的崛起\" id=\"markdown-toc-alexnet深度学习的崛起\">AlexNet：深度学习的崛起</a></li>\n      <li><a href=\"#vgg结构的极致简化\" id=\"markdown-toc-vgg结构的极致简化\">VGG：结构的极致简化</a></li>\n      <li><a href=\"#googlenetinception-模块的引入\" id=\"markdown-toc-googlenetinception-模块的引入\">GoogLeNet：Inception 模块的引入</a></li>\n      <li><a href=\"#resnet深度网络的革命\" id=\"markdown-toc-resnet深度网络的革命\">ResNet：深度网络的革命</a></li>\n      <li><a href=\"#densenet进一步优化信息流\" id=\"markdown-toc-densenet进一步优化信息流\">DenseNet：进一步优化信息流</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h3 id=\"经典卷积神经网络的发展\">经典卷积神经网络的发展</h3>\n\n<p>在本篇博客中，我们将结合现代深度学习中一些经典卷积神经网络架构，简要梳理它们的背景和创新点，帮助大家了解卷积网络的演变过程及其核心理念。</p>\n\n<hr />\n\n<h4 id=\"lenet-5神经网络的先驱\">LeNet-5：神经网络的先驱</h4>\n<p><strong>背景</strong>：LeNet-5 是由 Yann LeCun 等人在 1998 年提出的，是卷积神经网络的早期代表作。它主要用于手写数字识别任务（如 MNIST 数据集）。</p>\n\n<p><strong>创新点</strong>：</p>\n<ul>\n  <li><strong>层级式结构</strong>：包括卷积层、池化层和全连接层的结合，奠定了现代卷积网络的基本框架。</li>\n  <li><strong>参数共享</strong>：通过卷积操作实现参数的显著减少。</li>\n  <li><strong>使用 Sigmoid 激活函数</strong>：增强非线性建模能力。</li>\n</ul>\n\n<p><strong>成果</strong>：在手写数字识别任务中，LeNet-5 达到了 99.2% 的准确率，展现了神经网络的潜力。</p>\n\n<hr />\n\n<h4 id=\"alexnet深度学习的崛起\">AlexNet：深度学习的崛起</h4>\n<p><strong>背景</strong>：2012 年，由 Alex Krizhevsky 提出的 AlexNet 在 ImageNet 竞赛中大放异彩。其表现远超传统方法，是深度学习的里程碑。</p>\n\n<p><strong>创新点</strong>：</p>\n<ul>\n  <li><strong>使用 GPU 加速训练</strong>：显著缩短了训练时间，标志着深度学习时代的开启。</li>\n  <li><strong>更深的网络结构</strong>：包含 8 层，比 LeNet-5 更深。</li>\n  <li><strong>ReLU 激活函数</strong>：替代 Sigmoid，大幅缓解了梯度消失问题。</li>\n  <li><strong>Dropout</strong>：有效防止过拟合。</li>\n</ul>\n\n<hr />\n\n<h4 id=\"vgg结构的极致简化\">VGG：结构的极致简化</h4>\n<p><strong>背景</strong>：2014 年，VGG 网络由牛津大学提出，其核心理念是通过简单的堆叠卷积层来增加网络深度。</p>\n\n<p><strong>创新点</strong>：</p>\n<ul>\n  <li><strong>统一的卷积核尺寸</strong>：采用 3x3 和 1x1 的卷积核，提升了模型的表达能力。</li>\n  <li><strong>深度与性能的关系</strong>：验证了网络深度的增加可以有效提高性能。</li>\n  <li><strong>多种深度版本</strong>：从 11 层到 19 层的网络结构满足不同需求。</li>\n</ul>\n\n<hr />\n\n<h4 id=\"googlenetinception-模块的引入\">GoogLeNet：Inception 模块的引入</h4>\n<p><strong>背景</strong>：同样在 2014 年，GoogLeNet 在 ILSVRC 比赛中获得冠军。它引入了革命性的 Inception 模块。</p>\n\n<p><strong>创新点</strong>：</p>\n<ul>\n  <li><strong>Inception 模块</strong>：同时使用不同大小的卷积核（1x1、3x3、5x5），实现多尺度特征提取。</li>\n  <li><strong>参数优化</strong>：通过 1x1 卷积降低计算成本和参数量。</li>\n  <li><strong>深度结构</strong>：22 层深度，但由于模块化设计，其计算效率得到了极大提升。</li>\n</ul>\n\n<hr />\n\n<h4 id=\"resnet深度网络的革命\">ResNet：深度网络的革命</h4>\n<p><strong>背景</strong>：随着网络深度的增加，梯度消失和训练困难问题开始显现。ResNet 于 2015 年由何恺明等人提出，突破了这些限制。</p>\n\n<p><strong>创新点</strong>：</p>\n<ul>\n  <li><strong>残差连接</strong>：通过引入跳跃连接，避免梯度消失并促进特征传递。</li>\n  <li><strong>极深网络的可行性</strong>：ResNet 成功训练了超过 1000 层的网络。</li>\n  <li><strong>模块化设计</strong>：残差块的引入方便了网络的扩展和修改。</li>\n</ul>\n\n<hr />\n\n<h4 id=\"densenet进一步优化信息流\">DenseNet：进一步优化信息流</h4>\n<p><strong>背景</strong>：在 ResNet 的基础上，DenseNet 提出了新的思路，通过密集连接实现特征复用。</p>\n\n<p><strong>创新点</strong>：</p>\n<ul>\n  <li><strong>密集连接</strong>：所有层之间直接相连，确保信息和梯度在整个网络中的高效传递。</li>\n  <li><strong>参数效率</strong>：尽管连接增加，但由于特征共享，总参数量并未显著上升。</li>\n  <li><strong>计算效率</strong>：提高了训练和推理的效率。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"总结\">总结</h3>\n<p>从 LeNet 到 ResNet 和 DenseNet，卷积神经网络在深度和复杂度上不断发展，每一步都带来了显著的性能提升。这些经典网络不仅为计算机视觉奠定了坚实的基础，还启发了其他领域模型的设计。如果说 LeNet 是起点，那么 ResNet 和 DenseNet 则是里程碑，为深度学习的发展提供了更多可能性。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/28/%E7%BB%8F%E5%85%B8%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='经典卷积网络'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-11-28T11:38:25+11:00'>Nov 28, 2024</time> </span> </div><h2 class='article__title'>经典卷积网络</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "卷积神经网络（CNN）",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/27/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-CNN/",
      "date"     : "Nov 27, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是卷积\" id=\"markdown-toc-什么是卷积\">什么是卷积</a></li>\n  <li><a href=\"#卷积神经网络\" id=\"markdown-toc-卷积神经网络\">卷积神经网络</a></li>\n  <li><a href=\"#池化层下采样和上采样\" id=\"markdown-toc-池化层下采样和上采样\">池化层，下采样和上采样</a>    <ol>\n      <li><a href=\"#池化层\" id=\"markdown-toc-池化层\">池化层</a></li>\n      <li><a href=\"#下采样和上采样\" id=\"markdown-toc-下采样和上采样\">下采样和上采样</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#batchnorm\" id=\"markdown-toc-batchnorm\">BatchNorm</a></li>\n</ol>\n\n<h2 id=\"什么是卷积\">什么是卷积</h2>\n\n<p>卷积是一种数学运算，应用于信号处理和图像分析中，用于提取特征。在深度学习中，卷积层用以提取输入数据的局部特征。</p>\n\n<p><strong>核心概念：</strong></p>\n<ol>\n  <li><strong>卷积核（Kernel/Filter）</strong>：一个小矩阵，用于扫描输入数据。</li>\n  <li><strong>感受野（Receptive Field）</strong>：卷积核覆盖的区域。</li>\n  <li><strong>参数共享</strong>：通过共享卷积核的权重减少参数数量，提高效率。</li>\n</ol>\n\n<p><strong>卷积公式：</strong>\n$ (f * g)(t) = \\int_{-\\infty}^{\\infty} f(\\tau)g(t - \\tau) d\\tau $</p>\n\n<p><strong>代码示例：</strong></p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.nn</span> <span class=\"k\">as</span> <span class=\"n\">nn</span>\n\n<span class=\"c1\"># 定义一个简单的2D卷积\n</span><span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Conv2d</span><span class=\"p\">(</span><span class=\"n\">in_channels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">input_tensor</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># 批次大小=1, 通道数=1, 高=5, 宽=5\n</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"nf\">conv</span><span class=\"p\">(</span><span class=\"n\">input_tensor</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">卷积输出大小:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<ol>\n  <li><strong>nn.Conv2d</strong>：定义一个二维卷积层。\n    <ul>\n      <li>in_channels=1：输入的特征图通道数为1（例如灰度图像）。</li>\n      <li>out_channels=1：输出的特征图通道数为1。</li>\n      <li>kernel_size=3：卷积核大小为3x3。</li>\n      <li>stride=1：步幅为1，卷积核每次移动1个像素。</li>\n      <li>padding=1：在输入特征图四周填充1圈0值，确保输出大小与输入一致。</li>\n    </ul>\n  </li>\n  <li><strong>input_tensor</strong>:\n    <ul>\n      <li>模拟一个输入张量（形状为[batch_size, channels, height, width]）。</li>\n      <li>这里是一个5x5的单通道特征图，批次大小为1。</li>\n    </ul>\n  </li>\n  <li><strong>卷积操作</strong>：\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">conv(input_tensor)</code>对输入执行卷积，生成一个输出特征图。</li>\n      <li>输出大小公式 $\n\\text{outputsize} = \\frac{\\text{inputsize} + 2 × \\text{padding} - \\text{kernelsize}}{\\text{stride}} + 1\n$\n代入参数：$\n\\frac{5 + 2 × 1 - 3}{1} + 1 = 5\n$</li>\n    </ul>\n  </li>\n</ol>\n\n<p>输出结果将是大小为[1, 1, 5, 5]的特征图。</p>\n\n<h2 id=\"卷积神经网络\">卷积神经网络</h2>\n\n<p>卷积神经网络（CNN）是一种专门处理网格数据（如图像）的深度学习模型。CNN通过层叠卷积层、激活函数和池化层来学习多层特征表示。</p>\n\n<p><strong>主要组成部分：</strong></p>\n<ol>\n  <li><strong>卷积层（Convolutional Layer）</strong>：用于提取特征。</li>\n  <li><strong>激活函数（Activation Function）</strong>：如ReLU，用于引入非线性。</li>\n  <li><strong>全连接层（Fully Connected Layer）</strong>：连接特征到输出。</li>\n</ol>\n\n<p><strong>代码示例：</strong></p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SimpleCNN</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">SimpleCNN</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">conv1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># 卷积层：将输入从1个通道映射到16个通道。\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">relu</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">ReLU</span><span class=\"p\">()</span> <span class=\"c1\"># 使用ReLU激活函数：引入非线性特性\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">*</span> <span class=\"mi\">28</span> <span class=\"o\">*</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># 将16个28x28的特征映射到10类\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">conv1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># 将输入图像卷积为16个特征图\n</span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># 对卷积输出进行非线性变换，帮助模型学习复杂特征\n</span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># 将二维特征图变为一维向量以输入全连接层\n</span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># 将展平后的特征映射到分类标签\n</span>        <span class=\"k\">return</span> <span class=\"n\">x</span>\n</code></pre></div></div>\n\n<ul>\n  <li>输入图像大小为[28, 28]，适用于MNIST等数据集。</li>\n  <li>输出为10个分类的分数。</li>\n</ul>\n\n<h2 id=\"池化层下采样和上采样\">池化层，下采样和上采样</h2>\n\n<h3 id=\"池化层\">池化层</h3>\n\n<p>池化用于减少特征图尺寸，常见的操作有<strong>最大池化（Max Pooling）</strong>和<strong>平均池化（Average Pooling）</strong>。它们有助于降低计算成本并增加特征不变性。</p>\n\n<p><strong>代码示例：</strong></p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">input_tensor</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"nf\">pool</span><span class=\"p\">(</span><span class=\"n\">input_tensor</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">池化后大小:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span> <span class=\"c1\"># torch.Size([1, 16, 14, 14])\n</span></code></pre></div></div>\n\n<p><strong>nn.MaxPool2d</strong>：</p>\n<ul>\n  <li>定义一个最大池化层。</li>\n  <li>参数：\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">kernel_size=2</code>：池化窗口为2x2。</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">stride=2</code>：窗口每次移动2个像素，防止重叠。</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"下采样和上采样\">下采样和上采样</h3>\n\n<p><strong>下采样（Downsampling）</strong>通过池化或调整分辨率减少特征图尺寸。</p>\n\n<p><strong>上采样（Upsampling）</strong>用于增大特征图尺寸，常用于生成模型和语义分割。</p>\n\n<p><strong>代码示例：</strong></p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"n\">F</span>\n\n<span class=\"c1\"># 下采样\n</span><span class=\"n\">downsampled</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">interpolate</span><span class=\"p\">(</span><span class=\"n\">input_tensor</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bilinear</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 上采样\n</span><span class=\"n\">upsampled</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">interpolate</span><span class=\"p\">(</span><span class=\"n\">input_tensor</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bilinear</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">下采样后大小:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">downsampled</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">上采样后大小:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">upsampled</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<ol>\n  <li><strong>下采样</strong>：\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">scale_factor=0.5</code>：将特征图尺寸缩小一半。</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">mode='bilinear'</code>：使用双线性插值，适合连续值特征。</li>\n    </ul>\n  </li>\n  <li><strong>上采样</strong>：\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">scale_factor=2</code>：将特征图尺寸扩大两倍。</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">mode='bilinear'</code>：平滑地填充像素值。</li>\n    </ul>\n  </li>\n</ol>\n\n<hr />\n\n<h2 id=\"batchnorm\">BatchNorm</h2>\n\n<p>批归一化（Batch Normalization）是用于加速模型收敛并提高性能的技术。它通过调整激活分布的均值和标准差，使模型更稳定，允许使用更大的学习率。</p>\n\n<p><strong>主要优点：</strong></p>\n<ol>\n  <li>加速收敛。</li>\n  <li>降低过拟合。</li>\n  <li>提高模型稳定性。</li>\n</ol>\n\n<p><strong>代码示例：</strong></p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">x.shape =</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"n\">num_features</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nf\">layer</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">out.shape =</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">layer.weight.shape =</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">.</span><span class=\"n\">weight</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">layer.bias.shape =</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">.</span><span class=\"n\">bias</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x.shape <span class=\"o\">=</span> torch.Size<span class=\"o\">([</span>1, 16, 7, 7]<span class=\"o\">)</span>\nout.shape <span class=\"o\">=</span> torch.Size<span class=\"o\">([</span>1, 16, 7, 7]<span class=\"o\">)</span>\nlayer.weight.shape <span class=\"o\">=</span> torch.Size<span class=\"o\">([</span>16]<span class=\"o\">)</span>\nlayer.bias.shape <span class=\"o\">=</span> torch.Size<span class=\"o\">([</span>16]<span class=\"o\">)</span>\nvars<span class=\"o\">(</span>layer<span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n\t<span class=\"s1\">'training'</span>: True,\n\t<span class=\"s1\">'_parameters'</span>: OrderedDict<span class=\"o\">([(</span><span class=\"s1\">'weight'</span>, Parameter containing:\n\t\ttensor<span class=\"o\">([</span>1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n\t\t\trequires_grad <span class=\"o\">=</span> True<span class=\"o\">))</span>, <span class=\"o\">(</span><span class=\"s1\">'bias'</span>, Parameter containing:\n\t\ttensor<span class=\"o\">([</span>0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n\t\t\trequires_grad <span class=\"o\">=</span> True<span class=\"o\">))])</span>,\n\t<span class=\"s1\">'_buffers'</span>: OrderedDict<span class=\"o\">([(</span><span class=\"s1\">'running_mean'</span>, tensor<span class=\"o\">([</span>0.0283, 0.0018, <span class=\"nt\">-0</span>.0207, <span class=\"nt\">-0</span>.0116, <span class=\"nt\">-0</span>.0092, <span class=\"nt\">-0</span>.0127, 0.0054, <span class=\"nt\">-0</span>.0146, <span class=\"nt\">-0</span>.0152, <span class=\"nt\">-0</span>.0171, <span class=\"nt\">-0</span>.0153, 0.0133, 0.0122, <span class=\"nt\">-0</span>.0066, 0.0116, 0.0064]<span class=\"o\">))</span>, <span class=\"o\">(</span><span class=\"s1\">'running_var'</span>, tensor<span class=\"o\">([</span>0.9926, 0.9942, 0.9708, 0.9982, 1.0170, 0.9690, 1.0005, 1.0011, 0.9939,\n\t\t0.9892, 0.9577, 0.9949, 1.0047, 0.9766, 0.9797, 1.0248\n\t<span class=\"o\">]))</span>, <span class=\"o\">(</span><span class=\"s1\">'num_batches_tracked'</span>, tensor<span class=\"o\">(</span>1<span class=\"o\">))])</span>,\n\t<span class=\"s1\">'_non_persistent_buffers_set'</span>: <span class=\"nb\">set</span><span class=\"o\">()</span>,\n\t<span class=\"s1\">'_backward_hooks'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'_is_full_backward_hook'</span>: None,\n\t<span class=\"s1\">'_forward_hooks'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'_forward_pre_hooks'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'_state_dict_hooks'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'_load_state_dict_pre_hooks'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'_load_state_dict_post_hooks'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'_modules'</span>: OrderedDict<span class=\"o\">()</span>,\n\t<span class=\"s1\">'num_features'</span>: 16,\n\t<span class=\"s1\">'eps'</span>: 1e-05,\n\t<span class=\"s1\">'momentum'</span>: 0.1,\n\t<span class=\"s1\">'affine'</span>: True,\n\t<span class=\"s1\">'track_running_stats'</span>: True\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<ol>\n  <li><strong><code class=\"language-plaintext highlighter-rouge\">nn.BatchNorm2d</code></strong>：\n    <ul>\n      <li>定义一个批归一化层，用于二维特征图。</li>\n      <li>参数：\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">num_features=16</code>：特征图的通道数。</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>输入张量</strong>：\n    <ul>\n      <li>模拟一个批次大小为1，通道数为16，大小为28x28的特征图。</li>\n    </ul>\n  </li>\n  <li><strong>批归一化操作</strong>：\n    <ul>\n      <li>将每个通道的特征标准化为均值为0，方差为1的分布。</li>\n      <li>使用可训练参数重新缩放和偏移：\n$\ny = \\gamma \\cdot \\frac{x - \\mu}{\\sigma} + \\beta\n$</li>\n      <li>有助于模型在训练时加速收敛并提高稳定性。</li>\n    </ul>\n  </li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/27/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-CNN/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='卷积神经网络（CNN）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-11-27T05:12:59+11:00'>Nov 27, 2024</time> </span> </div><h2 class='article__title'>卷积神经网络（CNN）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "深度学习的其他概念",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%85%B6%E4%BB%96%E6%A6%82%E5%BF%B5/",
      "date"     : "Nov 26, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#过拟合与欠拟合\" id=\"markdown-toc-过拟合与欠拟合\">过拟合与欠拟合</a>    <ol>\n      <li><a href=\"#什么是过拟合与欠拟合\" id=\"markdown-toc-什么是过拟合与欠拟合\">什么是过拟合与欠拟合？</a></li>\n      <li><a href=\"#如何检测过拟合与欠拟合\" id=\"markdown-toc-如何检测过拟合与欠拟合\">如何检测过拟合与欠拟合？</a></li>\n      <li><a href=\"#解决过拟合与欠拟合的方法\" id=\"markdown-toc-解决过拟合与欠拟合的方法\">解决过拟合与欠拟合的方法</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#pytorch的交叉验证\" id=\"markdown-toc-pytorch的交叉验证\">PyTorch的交叉验证</a>    <ol>\n      <li><a href=\"#什么是交叉验证\" id=\"markdown-toc-什么是交叉验证\">什么是交叉验证？</a></li>\n      <li><a href=\"#在pytorch中实现交叉验证\" id=\"markdown-toc-在pytorch中实现交叉验证\">在PyTorch中实现交叉验证</a></li>\n      <li><a href=\"#示例代码\" id=\"markdown-toc-示例代码\">示例代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#pytorch的正则化regularization\" id=\"markdown-toc-pytorch的正则化regularization\">PyTorch的正则化（Regularization）</a>    <ol>\n      <li><a href=\"#什么是正则化\" id=\"markdown-toc-什么是正则化\">什么是正则化？</a></li>\n      <li><a href=\"#在pytorch中实现正则化\" id=\"markdown-toc-在pytorch中实现正则化\">在PyTorch中实现正则化</a></li>\n      <li><a href=\"#示例代码-1\" id=\"markdown-toc-示例代码-1\">示例代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#动量与学习率衰减\" id=\"markdown-toc-动量与学习率衰减\">动量与学习率衰减</a>    <ol>\n      <li><a href=\"#什么是动量\" id=\"markdown-toc-什么是动量\">什么是动量？</a></li>\n      <li><a href=\"#什么是学习率衰减\" id=\"markdown-toc-什么是学习率衰减\">什么是学习率衰减？</a></li>\n      <li><a href=\"#在pytorch中实现动量与学习率衰减\" id=\"markdown-toc-在pytorch中实现动量与学习率衰减\">在PyTorch中实现动量与学习率衰减</a></li>\n      <li><a href=\"#示例代码-2\" id=\"markdown-toc-示例代码-2\">示例代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#early-stopping与dropout\" id=\"markdown-toc-early-stopping与dropout\">Early Stopping与Dropout</a>    <ol>\n      <li><a href=\"#什么是early-stopping\" id=\"markdown-toc-什么是early-stopping\">什么是Early Stopping？</a></li>\n      <li><a href=\"#什么是dropout\" id=\"markdown-toc-什么是dropout\">什么是Dropout？</a></li>\n      <li><a href=\"#在pytorch中实现early-stopping与dropout\" id=\"markdown-toc-在pytorch中实现early-stopping与dropout\">在PyTorch中实现Early Stopping与Dropout</a></li>\n      <li><a href=\"#示例代码-3\" id=\"markdown-toc-示例代码-3\">示例代码</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>本文将详细介绍五个关键概念：过拟合与欠拟合、PyTorch的交叉验证、正则化（Regularization）、动量与学习率衰减、以及Early Stopping与Dropout，并通过PyTorch代码示例帮助您更好地掌握这些知识。</p>\n\n<h2 id=\"过拟合与欠拟合\">过拟合与欠拟合</h2>\n\n<h3 id=\"什么是过拟合与欠拟合\">什么是过拟合与欠拟合？</h3>\n\n<ul>\n  <li><strong>过拟合（Overfitting）</strong>：模型在训练数据上表现良好，但在验证或测试数据上表现不佳，说明模型过于复杂，捕捉到了数据中的噪声。</li>\n  <li><strong>欠拟合（Underfitting）</strong>：模型在训练数据和验证数据上都表现不佳，说明模型过于简单，无法捕捉数据的潜在模式。</li>\n</ul>\n\n<h3 id=\"如何检测过拟合与欠拟合\">如何检测过拟合与欠拟合？</h3>\n\n<p>通过观察训练集和验证集的损失曲线，可以判断模型是否存在过拟合或欠拟合：</p>\n\n<ul>\n  <li><strong>过拟合</strong>：训练损失持续下降，而验证损失在某个点后开始上升。</li>\n  <li><strong>欠拟合</strong>：训练损失和验证损失都停滞在较高的水平。</li>\n</ul>\n\n<h3 id=\"解决过拟合与欠拟合的方法\">解决过拟合与欠拟合的方法</h3>\n\n<ul>\n  <li><strong>防止过拟合</strong>：\n    <ul>\n      <li>增加数据量</li>\n      <li>使用正则化技术（如L1、L2正则化）</li>\n      <li>使用Dropout</li>\n      <li>采用Early Stopping</li>\n    </ul>\n  </li>\n  <li><strong>防止欠拟合</strong>：\n    <ul>\n      <li>增加模型复杂度（更多的层或神经元）</li>\n      <li>减少正则化力度</li>\n      <li>更长时间的训练</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"pytorch的交叉验证\">PyTorch的交叉验证</h2>\n\n<h3 id=\"什么是交叉验证\">什么是交叉验证？</h3>\n\n<p>交叉验证是一种评估模型性能的技术，通过将数据集划分为多个折叠（fold），在不同的训练集和验证集组合上多次训练和验证模型，以获得更稳健的性能评估。</p>\n\n<h3 id=\"在pytorch中实现交叉验证\">在PyTorch中实现交叉验证</h3>\n\n<p>PyTorch本身没有直接提供交叉验证的工具，但可以结合<code class=\"language-plaintext highlighter-rouge\">sklearn</code>的<code class=\"language-plaintext highlighter-rouge\">KFold</code>或<code class=\"language-plaintext highlighter-rouge\">StratifiedKFold</code>来实现。</p>\n\n<h3 id=\"示例代码\">示例代码</h3>\n\n<p>以下示例展示如何使用<code class=\"language-plaintext highlighter-rouge\">KFold</code>在PyTorch中实现交叉验证。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.nn</span> <span class=\"k\">as</span> <span class=\"n\">nn</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.optim</span> <span class=\"k\">as</span> <span class=\"n\">optim</span>\n<span class=\"kn\">from</span> <span class=\"n\">torch.utils.data</span> <span class=\"kn\">import</span> <span class=\"n\">DataLoader</span><span class=\"p\">,</span> <span class=\"n\">Subset</span>\n<span class=\"kn\">from</span> <span class=\"n\">torchvision</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">transforms</span>\n<span class=\"kn\">from</span> <span class=\"n\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">KFold</span>\n<span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"c1\"># 定义数据转换\n</span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Compose</span><span class=\"p\">([</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ToTensor</span><span class=\"p\">(),</span>\n    <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">Normalize</span><span class=\"p\">((</span><span class=\"mf\">0.1307</span><span class=\"p\">,),</span> <span class=\"p\">(</span><span class=\"mf\">0.3081</span><span class=\"p\">,))</span>\n<span class=\"p\">])</span>\n\n\n<span class=\"c1\"># 定义简单的神经网络\n</span><span class=\"k\">class</span> <span class=\"nc\">SimpleNet</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">SimpleNet</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">flatten</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Flatten</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"mi\">28</span> <span class=\"o\">*</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">relu</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">ReLU</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">flatten</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c1\"># 定义KFold\n</span><span class=\"n\">k_folds</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">kfold</span> <span class=\"o\">=</span> <span class=\"nc\">KFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">k_folds</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 准备数据\n</span><span class=\"n\">full_dataset</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"nc\">MNIST</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">download</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">transform</span><span class=\"p\">)</span>\n<span class=\"n\">num_samples</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">full_dataset</span><span class=\"p\">)</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">num_samples</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 存储每个fold的结果\n</span><span class=\"n\">fold_results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">fold</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">train_idx</span><span class=\"p\">,</span> <span class=\"n\">val_idx</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">kfold</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"s\">Fold </span><span class=\"si\">{</span><span class=\"n\">fold</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">k_folds</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 创建数据加载器\n</span>    <span class=\"n\">train_subsampler</span> <span class=\"o\">=</span> <span class=\"nc\">Subset</span><span class=\"p\">(</span><span class=\"n\">full_dataset</span><span class=\"p\">,</span> <span class=\"n\">train_idx</span><span class=\"p\">)</span>\n    <span class=\"n\">val_subsampler</span> <span class=\"o\">=</span> <span class=\"nc\">Subset</span><span class=\"p\">(</span><span class=\"n\">full_dataset</span><span class=\"p\">,</span> <span class=\"n\">val_idx</span><span class=\"p\">)</span>\n\n    <span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"nc\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">train_subsampler</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">val_loader</span> <span class=\"o\">=</span> <span class=\"nc\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">val_subsampler</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 初始化模型\n</span>    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">SimpleNet</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n    <span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n    <span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># 训练模型\n</span>    <span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n        <span class=\"n\">running_loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">for</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"ow\">in</span> <span class=\"n\">train_loader</span><span class=\"p\">:</span>\n\n            <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n            <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n            <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n            <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n            <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n\n            <span class=\"n\">running_loss</span> <span class=\"o\">+=</span> <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">images</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">epoch_loss</span> <span class=\"o\">=</span> <span class=\"n\">running_loss</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">train_subsampler</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Epoch </span><span class=\"si\">{</span><span class=\"n\">epoch</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">epochs</span><span class=\"si\">}</span><span class=\"s\">, Loss: </span><span class=\"si\">{</span><span class=\"n\">epoch_loss</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 验证模型\n</span>    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">eval</span><span class=\"p\">()</span>\n    <span class=\"n\">correct</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">no_grad</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"ow\">in</span> <span class=\"n\">val_loader</span><span class=\"p\">:</span>\n            <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">predicted</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">labels</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">correct</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">predicted</span> <span class=\"o\">==</span> <span class=\"n\">labels</span><span class=\"p\">).</span><span class=\"nf\">sum</span><span class=\"p\">().</span><span class=\"nf\">item</span><span class=\"p\">()</span>\n\n    <span class=\"n\">accuracy</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">correct</span> <span class=\"o\">/</span> <span class=\"n\">total</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Fold </span><span class=\"si\">{</span><span class=\"n\">fold</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\"> Accuracy: </span><span class=\"si\">{</span><span class=\"n\">accuracy</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">fold_results</span><span class=\"p\">[</span><span class=\"n\">fold</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">accuracy</span>\n\n<span class=\"c1\"># 输出每个fold的准确率\n</span><span class=\"k\">for</span> <span class=\"n\">fold</span><span class=\"p\">,</span> <span class=\"n\">accuracy</span> <span class=\"ow\">in</span> <span class=\"n\">fold_results</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">Fold </span><span class=\"si\">{</span><span class=\"n\">fold</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\"> 的准确率: </span><span class=\"si\">{</span><span class=\"n\">accuracy</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 输出平均准确率\n</span><span class=\"n\">avg_accuracy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">fold_results</span><span class=\"p\">.</span><span class=\"nf\">values</span><span class=\"p\">()))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">平均 K-Fold 准确率: </span><span class=\"si\">{</span><span class=\"n\">avg_accuracy</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Fold 1 的准确率: 97.42%\nFold 2 的准确率: 97.39%\nFold 3 的准确率: 97.19%\nFold 4 的准确率: 97.39%\nFold 5 的准确率: 97.03%\n平均 K-Fold 准确率: 97.28%\n</code></pre></div></div>\n\n<h2 id=\"pytorch的正则化regularization\">PyTorch的正则化（Regularization）</h2>\n\n<h3 id=\"什么是正则化\">什么是正则化？</h3>\n\n<p>正则化是一种防止模型过拟合的技术，通过在损失函数中加入额外的约束项，限制模型的复杂度。常见的正则化方法包括L1正则化和L2正则化。</p>\n\n<h3 id=\"在pytorch中实现正则化\">在PyTorch中实现正则化</h3>\n\n<p>在PyTorch中，正则化通常通过在优化器中设置权重衰减（weight decay）参数来实现，主要对应于L2正则化。此外，也可以手动添加L1正则化。</p>\n\n<h3 id=\"示例代码-1\">示例代码</h3>\n\n<p>以下示例展示如何在PyTorch中应用L2正则化和L1正则化。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 使用L2正则化（通过weight_decay）\n</span><span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 手动添加L1正则化\n</span><span class=\"k\">def</span> <span class=\"nf\">train_with_l1</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">train_loader</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">criterion</span><span class=\"p\">,</span> <span class=\"n\">l1_lambda</span><span class=\"o\">=</span><span class=\"mf\">1e-5</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n    <span class=\"n\">running_loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">for</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"ow\">in</span> <span class=\"n\">train_loader</span><span class=\"p\">:</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># 添加L1正则化\n</span>        <span class=\"n\">l1_norm</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nf\">abs</span><span class=\"p\">().</span><span class=\"nf\">sum</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">())</span>\n        <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"n\">loss</span> <span class=\"o\">+</span> <span class=\"n\">l1_lambda</span> <span class=\"o\">*</span> <span class=\"n\">l1_norm</span>\n        \n        <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n        <span class=\"n\">running_loss</span> <span class=\"o\">+=</span> <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">running_loss</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">train_loader</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">avg_train_loss</span> <span class=\"o\">=</span> <span class=\"nf\">train_with_l1</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">train_loader</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">criterion</span><span class=\"p\">,</span> <span class=\"n\">l1_lambda</span><span class=\"o\">=</span><span class=\"mf\">1e-5</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch [</span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">epochs</span><span class=\"si\">}</span><span class=\"s\">], Train Loss: </span><span class=\"si\">{</span><span class=\"n\">avg_train_loss</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"动量与学习率衰减\">动量与学习率衰减</h2>\n\n<h3 id=\"什么是动量\">什么是动量？</h3>\n\n<p>动量是一种优化技术，通过在梯度更新中引入之前的梯度方向，提高收敛速度并减少震荡。常见的带动量的优化器有SGD带动量（SGD with momentum）和Adam。</p>\n\n<h3 id=\"什么是学习率衰减\">什么是学习率衰减？</h3>\n\n<p>学习率衰减（Learning Rate Decay）是在训练过程中逐步降低学习率，有助于模型在接近最优解时更稳定地收敛。</p>\n\n<h3 id=\"在pytorch中实现动量与学习率衰减\">在PyTorch中实现动量与学习率衰减</h3>\n\n<p>PyTorch提供了多种优化器和学习率调度器，可以方便地实现动量和学习率衰减。</p>\n\n<h3 id=\"示例代码-2\">示例代码</h3>\n\n<p>以下示例展示如何使用带动量的SGD优化器和学习率调度器。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 使用带动量的SGD优化器\n</span><span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 定义学习率调度器，每10个epoch将学习率降低为原来的0.1倍\n</span><span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"n\">lr_scheduler</span><span class=\"p\">.</span><span class=\"nc\">StepLR</span><span class=\"p\">(</span><span class=\"n\">optimizer</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n<span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n    <span class=\"n\">running_loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">for</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"ow\">in</span> <span class=\"n\">train_loader</span><span class=\"p\">:</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n        <span class=\"n\">running_loss</span> <span class=\"o\">+=</span> <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span>\n    <span class=\"n\">avg_train_loss</span> <span class=\"o\">=</span> <span class=\"n\">running_loss</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">train_loader</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># 更新学习率\n</span>    <span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n    <span class=\"n\">current_lr</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"nf\">get_last_lr</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch [</span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">epochs</span><span class=\"si\">}</span><span class=\"s\">], Train Loss: </span><span class=\"si\">{</span><span class=\"n\">avg_train_loss</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">, Learning Rate: </span><span class=\"si\">{</span><span class=\"n\">current_lr</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"early-stopping与dropout\">Early Stopping与Dropout</h2>\n\n<h3 id=\"什么是early-stopping\">什么是Early Stopping？</h3>\n\n<p>Early Stopping是一种防止模型过拟合的技术，通过在验证集上的性能不再提升时提前停止训练，从而避免模型在训练集上过度拟合。</p>\n\n<h3 id=\"什么是dropout\">什么是Dropout？</h3>\n\n<p>Dropout是一种正则化技术，通过在训练过程中随机忽略部分神经元，防止模型过度依赖特定神经元，从而提升模型的泛化能力。</p>\n\n<h3 id=\"在pytorch中实现early-stopping与dropout\">在PyTorch中实现Early Stopping与Dropout</h3>\n\n<p>PyTorch没有内置的Early Stopping机制，但可以通过自定义实现。同时，Dropout层可以直接在模型中添加。</p>\n\n<h3 id=\"示例代码-3\">示例代码</h3>\n\n<p>以下示例展示如何在PyTorch中实现Early Stopping和使用Dropout。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">copy</span>\n\n<span class=\"c1\"># 修改模型，添加Dropout层\n</span><span class=\"k\">class</span> <span class=\"nc\">DropoutNet</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">dropout_prob</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">DropoutNet</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"o\">*</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"n\">hidden_size</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">relu</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">ReLU</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Dropout</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">dropout_prob</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"o\">*</span><span class=\"mi\">28</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">relu</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">dropout</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c1\"># 定义Early Stopping类\n</span><span class=\"k\">class</span> <span class=\"nc\">EarlyStopping</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">patience</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">patience</span> <span class=\"o\">=</span> <span class=\"n\">patience</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"n\">verbose</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"n\">delta</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_loss</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">early_stop</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_model</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">__call__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">val_loss</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_loss</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_loss</span> <span class=\"o\">=</span> <span class=\"n\">val_loss</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_model</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">state_dict</span><span class=\"p\">())</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val_loss</span> <span class=\"o\">&lt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_loss</span> <span class=\"o\">-</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">delta</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_loss</span> <span class=\"o\">=</span> <span class=\"n\">val_loss</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">best_model</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">state_dict</span><span class=\"p\">())</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">&gt;=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">patience</span><span class=\"p\">:</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">early_stop</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">verbose</span><span class=\"p\">:</span>\n                    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Early stopping triggered</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 初始化模型、优化器和Early Stopping\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">DropoutNet</span><span class=\"p\">(</span><span class=\"n\">hidden_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">dropout_prob</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n<span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"n\">early_stopping</span> <span class=\"o\">=</span> <span class=\"nc\">EarlyStopping</span><span class=\"p\">(</span><span class=\"n\">patience</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 训练\n</span>    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n    <span class=\"n\">running_loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">for</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"ow\">in</span> <span class=\"n\">train_loader</span><span class=\"p\">:</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n        <span class=\"n\">running_loss</span> <span class=\"o\">+=</span> <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span>\n    <span class=\"n\">avg_train_loss</span> <span class=\"o\">=</span> <span class=\"n\">running_loss</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">train_loader</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># 验证\n</span>    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">eval</span><span class=\"p\">()</span>\n    <span class=\"n\">val_running_loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">no_grad</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span> <span class=\"ow\">in</span> <span class=\"n\">val_loader</span><span class=\"p\">:</span>\n            <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>\n            <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n            <span class=\"n\">val_running_loss</span> <span class=\"o\">+=</span> <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span>\n    <span class=\"n\">avg_val_loss</span> <span class=\"o\">=</span> <span class=\"n\">val_running_loss</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">val_loader</span><span class=\"p\">)</span>\n    \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch [</span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">epochs</span><span class=\"si\">}</span><span class=\"s\">], Train Loss: </span><span class=\"si\">{</span><span class=\"n\">avg_train_loss</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">, Val Loss: </span><span class=\"si\">{</span><span class=\"n\">avg_val_loss</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># 检查Early Stopping\n</span>    <span class=\"nf\">early_stopping</span><span class=\"p\">(</span><span class=\"n\">avg_val_loss</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">early_stopping</span><span class=\"p\">.</span><span class=\"n\">early_stop</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Stopping training</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n\n<span class=\"c1\"># 加载最佳模型\n</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">load_state_dict</span><span class=\"p\">(</span><span class=\"n\">early_stopping</span><span class=\"p\">.</span><span class=\"n\">best_model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%85%B6%E4%BB%96%E6%A6%82%E5%BF%B5/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='深度学习的其他概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>12 min read <time class='article__date' datetime='2024-11-26T20:45:33+11:00'>Nov 26, 2024</time> </span> </div><h2 class='article__title'>深度学习的其他概念</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "分类问题",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/25/%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/",
      "date"     : "Nov 25, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#使用-pytorch-进行分类问题\" id=\"markdown-toc-使用-pytorch-进行分类问题\">使用 PyTorch 进行分类问题</a>    <ol>\n      <li><a href=\"#1-逻辑回归\" id=\"markdown-toc-1-逻辑回归\">1. 逻辑回归</a></li>\n      <li><a href=\"#2-交叉熵\" id=\"markdown-toc-2-交叉熵\">2. 交叉熵</a></li>\n      <li><a href=\"#3-多分类问题\" id=\"markdown-toc-3-多分类问题\">3. 多分类问题</a></li>\n      <li><a href=\"#4-全连接层\" id=\"markdown-toc-4-全连接层\">4. 全连接层</a></li>\n      <li><a href=\"#5-激活函数选择\" id=\"markdown-toc-5-激活函数选择\">5. 激活函数选择</a></li>\n      <li><a href=\"#6-mnist-实战\" id=\"markdown-toc-6-mnist-实战\">6. MNIST 实战</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h3 id=\"使用-pytorch-进行分类问题\">使用 PyTorch 进行分类问题</h3>\n\n<p>分类问题是机器学习中的核心任务之一，利用 PyTorch，我们可以实现从逻辑回归到多层神经网络的完整解决方案。本文将从以下六个方面系统讲解 PyTorch 在分类问题中的应用：</p>\n\n<hr />\n\n<h4 id=\"1-逻辑回归\">1. 逻辑回归</h4>\n\n<p>逻辑回归是解决二分类问题的基础工具。其核心是通过逻辑函数（Sigmoid）将线性回归的输出映射到 $[0, 1]$ 区间，表示概率值。</p>\n\n<p><strong>核心公式</strong>：</p>\n<ul>\n  <li>连续值预测：$ y = xw + b $</li>\n  <li>概率输出：$ y = \\sigma(xw + b) $，其中 $ \\sigma(x) $ 是 Sigmoid 函数。</li>\n</ul>\n\n<p><strong>实现要点</strong>：</p>\n<ul>\n  <li>输出值通过 Sigmoid 激活函数。</li>\n  <li>损失函数通常选用二分类交叉熵。</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.nn</span> <span class=\"k\">as</span> <span class=\"n\">nn</span>\n<span class=\"kn\">import</span> <span class=\"n\">torch.optim</span> <span class=\"k\">as</span> <span class=\"n\">optim</span>\n\n<span class=\"c1\"># 数据准备\n</span><span class=\"n\">x_data</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">y_data</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 定义逻辑回归模型\n</span><span class=\"k\">class</span> <span class=\"nc\">LogisticRegressionModel</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">LogisticRegressionModel</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">linear</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># 输入特征1，输出特征1\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">linear</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">LogisticRegressionModel</span><span class=\"p\">()</span>\n<span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">BCELoss</span><span class=\"p\">()</span>  <span class=\"c1\"># 二分类交叉熵\n</span><span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">):</span>\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">x_data</span><span class=\"p\">)</span>  <span class=\"c1\"># 模型预测\n</span>    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">y_data</span><span class=\"p\">)</span>  <span class=\"c1\"># 计算损失\n</span>    <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>  <span class=\"c1\"># 梯度清零\n</span>    <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>  <span class=\"c1\"># 反向传播\n</span>    <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>  <span class=\"c1\"># 更新参数\n</span>\n    <span class=\"c1\"># 每100个epoch输出一次日志\n</span>    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">epoch</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2000</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch </span><span class=\"si\">{</span><span class=\"n\">epoch</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">, Loss: </span><span class=\"si\">{</span><span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 打印训练结束后的参数\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Training complete.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Model parameters:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">named_parameters</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">param</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 测试模型\n</span><span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">no_grad</span><span class=\"p\">():</span>\n    <span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">4.0</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n    <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">test_data</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Test Predictions:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">pred</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Input: </span><span class=\"si\">{</span><span class=\"n\">test_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"nf\">item</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s\">, Predicted Probability: </span><span class=\"si\">{</span><span class=\"n\">pred</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">, Predicted Class: </span><span class=\"si\">{</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">pred</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mf\">0.5</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Epoch 2000, Loss: 0.3870\nEpoch 4000, Loss: 0.2911\nEpoch 6000, Loss: 0.2380\nEpoch 8000, Loss: 0.2034\nEpoch 10000, Loss: 0.1786\nTraining complete.\nModel parameters:\nlinear.weight: tensor<span class=\"o\">([[</span>2.5076]]<span class=\"o\">)</span>\nlinear.bias: tensor<span class=\"o\">([</span><span class=\"nt\">-6</span>.0840]<span class=\"o\">)</span>\nTest Predictions:\nInput: 1.0, Predicted Probability: 0.0272, Predicted Class: 0\nInput: 2.0, Predicted Probability: 0.2556, Predicted Class: 0\nInput: 3.0, Predicted Probability: 0.8083, Predicted Class: 1\nInput: 4.0, Predicted Probability: 0.9810, Predicted Class: 1\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"2-交叉熵\">2. 交叉熵</h4>\n\n<p>交叉熵是分类问题的常用损失函数，特别适用于概率分布的比较。</p>\n\n<p><strong>核心概念</strong>：</p>\n<ul>\n  <li>衡量两个概率分布的差异。</li>\n  <li>对于一热编码：$ H(p, q) = -\\sum p(x) \\log q(x) $。</li>\n</ul>\n\n<p><strong>与 MSE 比较</strong>：</p>\n<ul>\n  <li>MSE 在分类问题中容易导致梯度消失。</li>\n  <li>交叉熵更适合梯度优化。</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"c1\"># 输出 logits，而非 softmax 激活后的值\n</span><span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n<span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"3-多分类问题\">3. 多分类问题</h4>\n\n<p>多分类问题扩展了二分类问题，模型需要预测 $ N $ 个类别的概率。</p>\n\n<p><strong>核心步骤</strong>：</p>\n<ol>\n  <li>使用 Softmax 将模型输出转为概率分布。</li>\n  <li>选择交叉熵损失函数。</li>\n</ol>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"n\">F</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MultiClassModel</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">num_classes</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">MultiClassModel</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">num_classes</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># 不需要 softmax ，因为 CrossEntropyLoss 期望接收的是原始 logits 而不是概率分布。\n</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">MultiClassModel</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">num_classes</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"4-全连接层\">4. 全连接层</h4>\n\n<p>全连接层是神经网络的核心模块，用于将输入特征映射到输出空间。</p>\n\n<p><strong>实现方式</strong>：</p>\n<ul>\n  <li>通过 <code class=\"language-plaintext highlighter-rouge\">nn.Linear</code> 定义全连接层。</li>\n  <li>在 <code class=\"language-plaintext highlighter-rouge\">forward</code> 函数中调用层对象。</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">FullyConnectedModel</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">(</span><span class=\"n\">FullyConnectedModel</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">).</span><span class=\"nf\">__init__</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"mi\">28</span> <span class=\"o\">*</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fc2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">Linear</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">relu</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>  <span class=\"c1\"># 激活函数选择\n</span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fc2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"5-激活函数选择\">5. 激活函数选择</h4>\n\n<p>激活函数为神经网络提供非线性变换，以下是常用激活函数：</p>\n<ul>\n  <li><strong>ReLU</strong>：高效且收敛快，但容易出现“神经元死亡”问题。</li>\n  <li><strong>Leaky ReLU</strong>：改进了 ReLU 的问题。</li>\n  <li><strong>Softplus</strong>：平滑的 ReLU 替代。</li>\n  <li><strong>SELU</strong>：适用于特殊归一化条件。</li>\n</ul>\n\n<p><strong>代码对比</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">])</span>\n<span class=\"n\">relu</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">leaky_relu</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">leaky_relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">softplus</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">softplus</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"6-mnist-实战\">6. MNIST 实战</h4>\n\n<p>MNIST 数据集是图像分类的经典任务，用于识别手写数字。</p>\n\n<p><strong>核心流程</strong>：</p>\n<ol>\n  <li>加载数据集。</li>\n  <li>定义模型（包含全连接层和激活函数）。</li>\n  <li>训练与测试。</li>\n</ol>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 数据预处理和加载\n</span><span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">transforms</span><span class=\"p\">.</span><span class=\"nc\">ToTensor</span><span class=\"p\">()</span>\n<span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"nc\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"nc\">MNIST</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">download</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">transform</span><span class=\"p\">),</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"nc\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"nc\">MNIST</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">transform</span><span class=\"p\">),</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 初始化设备、模型、损失函数和优化器\n</span><span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">device</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">cuda</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">.</span><span class=\"nf\">is_available</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">cpu</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nc\">FullyConnectedModel</span><span class=\"p\">().</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n<span class=\"n\">criterion</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"nc\">CrossEntropyLoss</span><span class=\"p\">()</span>\n<span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">.</span><span class=\"nc\">Adam</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练模型\n</span><span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">train</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">train_loader</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">),</span> <span class=\"n\">target</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">zero_grad</span><span class=\"p\">()</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"nf\">criterion</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n        <span class=\"n\">optimizer</span><span class=\"p\">.</span><span class=\"nf\">step</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch </span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\">, Loss: </span><span class=\"si\">{</span><span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 测试模型\n</span><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">eval</span><span class=\"p\">()</span>\n<span class=\"n\">correct</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">no_grad</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"ow\">in</span> <span class=\"n\">test_loader</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">),</span> <span class=\"n\">target</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">correct</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">pred</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">).</span><span class=\"nf\">sum</span><span class=\"p\">().</span><span class=\"nf\">item</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">测试准确率: </span><span class=\"si\">{</span><span class=\"mf\">100.</span> <span class=\"o\">*</span> <span class=\"n\">correct</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">test_loader</span><span class=\"p\">.</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Epoch 1, Loss: 0.1609\nEpoch 2, Loss: 0.1509\nEpoch 3, Loss: 0.0351\nEpoch 4, Loss: 0.1062\nEpoch 5, Loss: 0.0408\n测试准确率: 97.61%\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/25/%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='分类问题'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2024-11-25T08:17:42+11:00'>Nov 25, 2024</time> </span> </div><h2 class='article__title'>分类问题</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "感知机",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/24/%E6%84%9F%E7%9F%A5%E6%9C%BA/",
      "date"     : "Nov 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#感知机原理及实现\" id=\"markdown-toc-感知机原理及实现\">感知机原理及实现</a>    <ol>\n      <li><a href=\"#单一输出感知机\" id=\"markdown-toc-单一输出感知机\">单一输出感知机</a>        <ol>\n          <li><a href=\"#数学公式\" id=\"markdown-toc-数学公式\">数学公式</a></li>\n          <li><a href=\"#梯度计算\" id=\"markdown-toc-梯度计算\">梯度计算</a></li>\n          <li><a href=\"#python代码示例\" id=\"markdown-toc-python代码示例\">Python代码示例</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#多输出感知机\" id=\"markdown-toc-多输出感知机\">多输出感知机</a>        <ol>\n          <li><a href=\"#数学公式-1\" id=\"markdown-toc-数学公式-1\">数学公式</a></li>\n          <li><a href=\"#梯度计算-1\" id=\"markdown-toc-梯度计算-1\">梯度计算</a></li>\n          <li><a href=\"#python代码示例-1\" id=\"markdown-toc-python代码示例-1\">Python代码示例</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#链式法则\" id=\"markdown-toc-链式法则\">链式法则</a>        <ol>\n          <li><a href=\"#链式法则公式\" id=\"markdown-toc-链式法则公式\">链式法则公式</a></li>\n          <li><a href=\"#python代码示例-2\" id=\"markdown-toc-python代码示例-2\">Python代码示例</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#反向传播算法\" id=\"markdown-toc-反向传播算法\">反向传播算法</a>        <ol>\n          <li><a href=\"#公式推导\" id=\"markdown-toc-公式推导\">公式推导</a></li>\n          <li><a href=\"#python代码示例-3\" id=\"markdown-toc-python代码示例-3\">Python代码示例</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h3 id=\"感知机原理及实现\">感知机原理及实现</h3>\n\n<p>感知机是机器学习中的基础概念，也是神经网络的基石。本文将通过单一输出感知机、多输出感知机、链式法则以及反向传播算法，深入探讨感知机的原理和实现。</p>\n\n<hr />\n\n<h4 id=\"单一输出感知机\">单一输出感知机</h4>\n\n<p>单一输出感知机是最简单的神经网络。其核心是利用一个线性方程 $ y = XW + b $ 将输入映射到输出。</p>\n\n<h5 id=\"数学公式\">数学公式</h5>\n\n<ul>\n  <li>激活函数：$\ny = \\sigma(\\mathbf{X} \\cdot \\mathbf{W} + b)\n$\n其中 $\\sigma$ 为激活函数（通常是Sigmoid函数）。</li>\n  <li>损失函数（平方误差）：$\nE = \\frac{1}{2}(O - t)^2\n$</li>\n</ul>\n\n<h5 id=\"梯度计算\">梯度计算</h5>\n\n<p>通过梯度下降优化感知机的权重，计算过程如下：\n$\n\\frac{\\partial E}{\\partial w_j} = (O - t) \\cdot O \\cdot (1 - O) \\cdot x_j\n$</p>\n\n<h5 id=\"python代码示例\">Python代码示例</h5>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"c1\"># 激活函数\n</span><span class=\"k\">def</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 前向传播\n</span><span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 损失函数\n</span><span class=\"k\">def</span> <span class=\"nf\">loss</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">((</span><span class=\"n\">O</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 梯度更新\n</span><span class=\"k\">def</span> <span class=\"nf\">update_weights</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n    <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">O</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">O</span><span class=\"p\">)</span>\n    <span class=\"n\">dW</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">delta</span><span class=\"p\">)</span>\n    <span class=\"n\">W</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">dW</span>\n    <span class=\"n\">b</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">db</span>\n    <span class=\"k\">return</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># 目标输出\n</span><span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># 初始化权重和偏置\n</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练参数\n</span><span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n<span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">训练前的输出:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">current_loss</span> <span class=\"o\">=</span> <span class=\"nf\">loss</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n    <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nf\">update_weights</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">epoch</span> <span class=\"o\">%</span> <span class=\"mi\">2000</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch </span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"si\">}</span><span class=\"s\">, Loss: </span><span class=\"si\">{</span><span class=\"n\">current_loss</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 测试结果\n</span><span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">训练后的输出:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>训练前的输出:\n<span class=\"o\">[[</span>1]\n <span class=\"o\">[</span>1]\n <span class=\"o\">[</span>1]\n <span class=\"o\">[</span>1]]\nEpoch 0, Loss: 0.7340890587930462\nEpoch 2000, Loss: 0.031960823202117496\nEpoch 4000, Loss: 0.01475373398032874\nEpoch 6000, Loss: 0.009359312487717476\nEpoch 8000, Loss: 0.006791321484745856\n训练后的输出:\n<span class=\"o\">[[</span>0]\n <span class=\"o\">[</span>0]\n <span class=\"o\">[</span>0]\n <span class=\"o\">[</span>1]]\n</code></pre></div></div>\n<hr />\n\n<h4 id=\"多输出感知机\">多输出感知机</h4>\n\n<p>多输出感知机扩展了单一输出的模型，允许多个输出节点，用于多分类任务。</p>\n\n<h5 id=\"数学公式-1\">数学公式</h5>\n\n<ul>\n  <li>多输出公式：$\ny_k = \\sigma(\\mathbf{X} \\cdot \\mathbf{W_k} + b_k)\n$</li>\n  <li>总误差：$\nE = \\frac{1}{2} \\sum_k (O_k - t_k)^2\n$</li>\n</ul>\n\n<h5 id=\"梯度计算-1\">梯度计算</h5>\n\n<p>$\n\\frac{\\partial E}{\\partial w_{jk}} = (O_k - t_k) \\cdot O_k \\cdot (1 - O_k) \\cdot x_j\n$</p>\n\n<h5 id=\"python代码示例-1\">Python代码示例</h5>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">from</span> <span class=\"n\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n<span class=\"kn\">from</span> <span class=\"n\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">OneHotEncoder</span>\n<span class=\"kn\">from</span> <span class=\"n\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"n\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">StandardScaler</span>\n\n<span class=\"c1\"># 激活函数\n</span><span class=\"k\">def</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 前向传播\n</span><span class=\"k\">def</span> <span class=\"nf\">forward_multi</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 交叉熵损失函数\n</span><span class=\"k\">def</span> <span class=\"nf\">loss_multi</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">):</span>\n    <span class=\"n\">epsilon</span> <span class=\"o\">=</span> <span class=\"mf\">1e-15</span>\n    <span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">clip</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">epsilon</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">epsilon</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">O</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># 多输出梯度更新（修正后的）\n</span><span class=\"k\">def</span> <span class=\"nf\">update_weights_multi</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n    <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">O</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">O</span><span class=\"p\">)</span>\n    <span class=\"n\">dW</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">delta</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">W</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">dW</span>\n    <span class=\"n\">b</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">db</span>\n    <span class=\"k\">return</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n\n<span class=\"c1\"># 加载鸢尾花数据集\n</span><span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"nf\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"p\">.</span><span class=\"n\">data</span>  <span class=\"c1\"># 特征\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># 类别\n</span>\n<span class=\"c1\"># One-Hot 编码\n</span><span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"nc\">OneHotEncoder</span><span class=\"p\">(</span><span class=\"n\">sparse</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"p\">.</span><span class=\"nf\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 数据标准化\n</span><span class=\"n\">scaler</span> <span class=\"o\">=</span> <span class=\"nc\">StandardScaler</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">scaler</span><span class=\"p\">.</span><span class=\"nf\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 划分训练集和测试集\n</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">T_train</span><span class=\"p\">,</span> <span class=\"n\">T_test</span> <span class=\"o\">=</span> <span class=\"nf\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 初始化权重和偏置\n</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">input_dim</span> <span class=\"o\">=</span> <span class=\"n\">X_train</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">output_dim</span> <span class=\"o\">=</span> <span class=\"n\">T_train</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">output_dim</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">output_dim</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练参数\n</span><span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">forward_multi</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">current_loss</span> <span class=\"o\">=</span> <span class=\"nf\">loss_multi</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T_train</span><span class=\"p\">)</span>\n    <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nf\">update_weights_multi</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">O</span><span class=\"p\">,</span> <span class=\"n\">T_train</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">epoch</span> <span class=\"o\">%</span> <span class=\"mi\">2000</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch </span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"si\">}</span><span class=\"s\">, Loss: </span><span class=\"si\">{</span><span class=\"n\">current_loss</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 测试结果\n</span><span class=\"n\">O_test</span> <span class=\"o\">=</span> <span class=\"nf\">forward_multi</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">(</span><span class=\"n\">O_test</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">true_labels</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">(</span><span class=\"n\">T_test</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">accuracy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">predictions</span> <span class=\"o\">==</span> <span class=\"n\">true_labels</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">测试集准确率: </span><span class=\"si\">{</span><span class=\"n\">accuracy</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Epoch 0, Loss: 2.0055848558408393\nEpoch 2000, Loss: 0.2695123992451301\nEpoch 4000, Loss: 0.26755760116702415\nEpoch 6000, Loss: 0.2668457531681846\nEpoch 8000, Loss: 0.26653101686497677\n\n测试集准确率: 100.00%\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"链式法则\">链式法则</h4>\n\n<p>链式法则是计算复杂神经网络梯度的核心工具，它将误差通过网络的各层逐层传播。</p>\n\n<h5 id=\"链式法则公式\">链式法则公式</h5>\n\n<p>$\n\\frac{\\partial y}{\\partial x} = \\frac{\\partial y}{\\partial u} \\cdot \\frac{\\partial u}{\\partial x}\n$</p>\n\n<p>在神经网络中：\n$\n\\frac{\\partial E}{\\partial w_j} = \\frac{\\partial E}{\\partial O_k} \\cdot \\frac{\\partial O_k}{\\partial x} \\cdot \\frac{\\partial x}{\\partial w_j}\n$</p>\n\n<h5 id=\"python代码示例-2\">Python代码示例</h5>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 链式法则梯度传播\n</span><span class=\"k\">def</span> <span class=\"nf\">chain_rule_grad</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n    <span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">O</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">O</span><span class=\"p\">)</span>  <span class=\"c1\"># 误差传播\n</span>    <span class=\"n\">dW</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">delta</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">W</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">dW</span>\n    <span class=\"n\">b</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">db</span>\n    <span class=\"k\">return</span> <span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n\n<hr />\n\n<h4 id=\"反向传播算法\">反向传播算法</h4>\n\n<p>反向传播（Backpropagation）将链式法则应用于多层神经网络中。</p>\n\n<h5 id=\"公式推导\">公式推导</h5>\n\n<ul>\n  <li>输出层：\n$\n\\delta_k = (O_k - t_k) \\cdot O_k \\cdot (1 - O_k)\n$</li>\n  <li>隐藏层：\n$\n\\delta_j = (\\sum_k \\delta_k \\cdot w_{jk}) \\cdot O_j \\cdot (1 - O_j)\n$</li>\n</ul>\n\n<h5 id=\"python代码示例-3\">Python代码示例</h5>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"c1\"># 激活函数及其导数\n</span><span class=\"k\">def</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sigmoid_derivative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 反向传播函数\n</span><span class=\"k\">def</span> <span class=\"nf\">backprop</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 前向传播\n</span>    <span class=\"n\">Z1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b1</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">Z1</span><span class=\"p\">)</span>\n    <span class=\"n\">Z2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b2</span>\n    <span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">Z2</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 反向传播\n</span>    <span class=\"n\">delta_output</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nf\">sigmoid_derivative</span><span class=\"p\">(</span><span class=\"n\">Z2</span><span class=\"p\">)</span>\n    <span class=\"n\">delta_hidden</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">delta_output</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nf\">sigmoid_derivative</span><span class=\"p\">(</span><span class=\"n\">Z1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 梯度更新\n</span>    <span class=\"n\">W2</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">delta_output</span><span class=\"p\">)</span>\n    <span class=\"n\">b2</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">delta_output</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">W1</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">delta_hidden</span><span class=\"p\">)</span>\n    <span class=\"n\">b1</span> <span class=\"o\">-=</span> <span class=\"n\">lr</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">delta_hidden</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 计算损失\n</span>    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">((</span><span class=\"n\">O</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">W1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">loss</span>\n\n<span class=\"c1\"># 数据集：XOR 问题\n</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># 初始化权重和偏置\n</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">input_dim</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">hidden_dim</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\"># 隐藏层神经元数量\n</span><span class=\"n\">output_dim</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">W1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">hidden_dim</span><span class=\"p\">)</span>\n<span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">hidden_dim</span><span class=\"p\">)</span>\n<span class=\"n\">W2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">hidden_dim</span><span class=\"p\">,</span> <span class=\"n\">output_dim</span><span class=\"p\">)</span>\n<span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">output_dim</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 训练参数\n</span><span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n<span class=\"c1\"># 训练过程\n</span><span class=\"k\">for</span> <span class=\"n\">epoch</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"n\">W1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">current_loss</span> <span class=\"o\">=</span> <span class=\"nf\">backprop</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">epoch</span> <span class=\"o\">%</span> <span class=\"mi\">2000</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Epoch </span><span class=\"si\">{</span><span class=\"n\">epoch</span><span class=\"si\">}</span><span class=\"s\">, Loss: </span><span class=\"si\">{</span><span class=\"n\">current_loss</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 测试结果\n</span><span class=\"n\">Z1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">W1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b1</span>\n<span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">Z1</span><span class=\"p\">)</span>\n<span class=\"n\">Z2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">dot</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">W2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b2</span>\n<span class=\"n\">O</span> <span class=\"o\">=</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">Z2</span><span class=\"p\">)</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">O</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span><span class=\"p\">).</span><span class=\"nf\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">训练后的输出:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Epoch 0, Loss: 0.5887016577000074\nEpoch 2000, Loss: 0.4070781963562403\nEpoch 4000, Loss: 0.09266207200904633\nEpoch 6000, Loss: 0.016896752153564412\nEpoch 8000, Loss: 0.008292971056384607\n\n训练后的输出:\n<span class=\"o\">[[</span>0]\n <span class=\"o\">[</span>1]\n <span class=\"o\">[</span>1]\n <span class=\"o\">[</span>0]]\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/24/%E6%84%9F%E7%9F%A5%E6%9C%BA/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='感知机'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>13 min read <time class='article__date' datetime='2024-11-24T12:32:17+11:00'>Nov 24, 2024</time> </span> </div><h2 class='article__title'>感知机</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "loss函数及梯度",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/23/loss%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A2%AF%E5%BA%A6/",
      "date"     : "Nov 23, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是梯度\" id=\"markdown-toc-什么是梯度\">什么是梯度？</a></li>\n  <li><a href=\"#常见函数及其梯度\" id=\"markdown-toc-常见函数及其梯度\">常见函数及其梯度</a></li>\n  <li><a href=\"#激活函数及其梯度\" id=\"markdown-toc-激活函数及其梯度\">激活函数及其梯度</a></li>\n  <li><a href=\"#loss-函数及其梯度\" id=\"markdown-toc-loss-函数及其梯度\">Loss 函数及其梯度</a></li>\n  <li><a href=\"#结语\" id=\"markdown-toc-结语\">结语</a></li>\n</ol>\n\n<h3 id=\"什么是梯度\">什么是梯度？</h3>\n<p>梯度是函数在特定点的变化率，表征了在多维空间中函数变化最快的方向。通过梯度，我们能够找到函数的最小值或最大值，在机器学习中尤为关键，因为梯度驱动了模型优化。</p>\n\n<p><strong>关键概念</strong>：</p>\n<ul>\n  <li><strong>导数（Derivative）</strong>：一维函数的斜率。</li>\n  <li><strong>偏导数（Partial Derivative）</strong>：多维函数在特定变量上的变化率。</li>\n  <li><strong>梯度（Gradient）</strong>：多维函数在所有变量方向上的偏导数向量，指向函数值增长最快的方向。</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n\n<span class=\"c1\"># 示例：计算简单函数 y = x^2 的梯度\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">2.0</span><span class=\"p\">],</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">y</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># 输出梯度：dy/dx = 2x = 4\n</span></code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tensor<span class=\"o\">([</span>4.]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>梯度下降是一种常用优化算法，其目标是通过更新参数向梯度的负方向移动，从而逐步减小 Loss 函数值。</p>\n\n<h3 id=\"常见函数及其梯度\">常见函数及其梯度</h3>\n<p>在机器学习中，模型的预测值通常是输入变量通过参数化函数的输出。常见函数及其梯度的推导是优化的基础。</p>\n\n<p><strong>函数示例</strong>：\n线性函数：$ y = wx + b $</p>\n<ul>\n  <li>梯度：$ \\frac{\\partial y}{\\partial w} = x ,  \\frac{\\partial y}{\\partial b} = 1 $</li>\n</ul>\n\n<p>二次函数：$ y = (wx + b)^2 $</p>\n<ul>\n  <li>梯度：$ \\frac{\\partial y}{\\partial w} = 2(wx + b)x $, $ \\frac{\\partial y}{\\partial b} = 2(wx + b) $</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 使用 PyTorch 自动求导计算梯度\n</span><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">2.0</span><span class=\"p\">],</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">3.0</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">y</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># 输出 w 的梯度\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># 输出 b 的梯度\n</span></code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tensor<span class=\"o\">([</span>42.]<span class=\"o\">)</span>\ntensor<span class=\"o\">([</span>14.]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"激活函数及其梯度\">激活函数及其梯度</h3>\n<p>激活函数在神经网络中引入非线性。常见的激活函数包括 Sigmoid、Tanh 和 ReLU，其梯度决定了网络的学习能力。</p>\n\n<p><strong>激活函数及其梯度</strong>：\nSigmoid：</p>\n<ul>\n  <li>函数：$ \\sigma(x) = \\frac{1}{1 + e^{-x}} $</li>\n  <li>梯度：$ \\sigma'(x) = \\sigma(x)(1 - \\sigma(x)) $</li>\n</ul>\n\n<p>Tanh：</p>\n<ul>\n  <li>函数：$ \\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}} $</li>\n  <li>梯度：$ \\tanh'(x) = 1 - \\tanh^2(x) $</li>\n</ul>\n\n<p>ReLU：</p>\n<ul>\n  <li>函数：$ \\text{ReLU}(x) = \\max(0, x) $</li>\n  <li>梯度：$ \\text{ReLU}'(x) = 1 $（当 $ x &gt; 0 $）; $ 0 $（当 $ x \\leq 0 $）</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"n\">F</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 激活函数\n</span><span class=\"n\">y_sigmoid</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">y_relu</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">.</span><span class=\"nf\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 计算梯度\n</span><span class=\"n\">y_sigmoid</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">().</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># Sigmoid 梯度\n</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">.</span><span class=\"nf\">zero_</span><span class=\"p\">()</span>  <span class=\"c1\"># 重置梯度\n</span><span class=\"n\">y_relu</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">().</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># ReLU 梯度\n</span></code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tensor<span class=\"o\">([</span>0.1966, 0.2500, 0.1966]<span class=\"o\">)</span>\ntensor<span class=\"o\">([</span>0., 0., 1.]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"loss-函数及其梯度\">Loss 函数及其梯度</h3>\n<p>Loss 函数用于衡量模型预测值与真实值之间的差距。常见的 Loss 函数包括均方误差（MSE）和交叉熵（Cross-Entropy）。</p>\n\n<p><strong>典型 Loss 函数</strong>：\n<strong>均方误差（MSE）</strong>：</p>\n<ul>\n  <li>函数：$ \\text{MSE} = \\frac{1}{n} \\sum (y - \\hat{y})^2 $</li>\n  <li>梯度：$ \\frac{\\partial \\text{MSE}}{\\partial \\hat{y}} = -2(y - \\hat{y}) $</li>\n</ul>\n\n<p><strong>交叉熵（Cross-Entropy）</strong>：</p>\n<ul>\n  <li>函数（多分类）：$ \\text{CE} = -\\sum y \\log(\\hat{y}) $</li>\n  <li>梯度：$ \\frac{\\partial \\text{CE}}{\\partial \\hat{y}} = -\\frac{y}{\\hat{y}} $</li>\n</ul>\n\n<p><strong>代码示例</strong>：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># MSE Loss 梯度\n</span><span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">])</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">],</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">functional</span><span class=\"p\">.</span><span class=\"nf\">mse_loss</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"p\">)</span>\n<span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># 输出 MSE 梯度\n# 交叉熵 Loss 梯度\n</span><span class=\"n\">y_pred</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">.</span><span class=\"nf\">zero_</span><span class=\"p\">()</span>\n<span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">functional</span><span class=\"p\">.</span><span class=\"nf\">cross_entropy</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"p\">)</span>\n<span class=\"n\">loss</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># 输出交叉熵梯度\n</span></code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tensor<span class=\"o\">([</span><span class=\"nt\">-0</span>.1000,  0.1000]<span class=\"o\">)</span>\ntensor<span class=\"o\">([</span><span class=\"nt\">-0</span>.3100,  0.3100]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"结语\">结语</h3>\n<p>在深度学习中，理解梯度和 Loss 函数是优化模型的核心。通过 Python 框架（如 PyTorch）提供的自动求导工具，我们能够高效地计算梯度并更新参数，为构建复杂模型打下坚实基础。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/23/loss%E5%87%BD%E6%95%B0%E5%8F%8A%E6%A2%AF%E5%BA%A6/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='loss函数及梯度'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-11-23T22:03:11+11:00'>Nov 23, 2024</time> </span> </div><h2 class='article__title'>loss函数及梯度</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Tensor进阶操作",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/22/Tensor%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/",
      "date"     : "Nov 22, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#拼接与分割灵活的数据处理\" id=\"markdown-toc-拼接与分割灵活的数据处理\">拼接与分割：灵活的数据处理</a>    <ol>\n      <li><a href=\"#concatenate-cat\" id=\"markdown-toc-concatenate-cat\">Concatenate (Cat)</a></li>\n      <li><a href=\"#stack\" id=\"markdown-toc-stack\">Stack</a></li>\n      <li><a href=\"#split\" id=\"markdown-toc-split\">Split</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#数学运算基础与进阶\" id=\"markdown-toc-数学运算基础与进阶\">数学运算：基础与进阶</a>    <ol>\n      <li><a href=\"#基本运算\" id=\"markdown-toc-基本运算\">基本运算</a></li>\n      <li><a href=\"#高级数学运算\" id=\"markdown-toc-高级数学运算\">高级数学运算</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#统计属性深入数据分析\" id=\"markdown-toc-统计属性深入数据分析\">统计属性：深入数据分析</a></li>\n  <li><a href=\"#高阶操作条件选择与检索\" id=\"markdown-toc-高阶操作条件选择与检索\">高阶操作：条件选择与检索</a></li>\n</ol>\n\n<h2 id=\"拼接与分割灵活的数据处理\">拼接与分割：灵活的数据处理</h2>\n\n<p>在数据处理中，我们经常需要对Tensor进行拼接（cat）和分割（split）操作。这些方法让我们能够更灵活地处理多维数据。</p>\n\n<h3 id=\"concatenate-cat\">Concatenate (Cat)</h3>\n<p>拼接操作允许我们沿特定维度合并Tensor。例如，合并不同班级的学生成绩数据：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n\n<span class=\"c1\"># 假设有两个班级的成绩数据\n</span><span class=\"n\">class1_4_scores</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">]])</span>\n<span class=\"n\">class5_9_scores</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">88</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># 沿第0维拼接\n</span><span class=\"n\">combined_scores</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">cat</span><span class=\"p\">([</span><span class=\"n\">class1_4_scores</span><span class=\"p\">,</span> <span class=\"n\">class5_9_scores</span><span class=\"p\">],</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>class1_4_scores: tensor<span class=\"o\">([[</span>80, 85],\n        <span class=\"o\">[</span>90, 92]]<span class=\"o\">)</span>\nclass5_9_scores: tensor<span class=\"o\">([[</span>75, 88],\n        <span class=\"o\">[</span>82, 95]]<span class=\"o\">)</span>\ncombined_scores: tensor<span class=\"o\">([[</span>80, 85],\n        <span class=\"o\">[</span>90, 92],\n        <span class=\"o\">[</span>75, 88],\n        <span class=\"o\">[</span>82, 95]]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"stack\">Stack</h3>\n<p>Stack操作会创建一个新的维度，与Cat略有不同：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Stack会创建一个新的维度\n</span><span class=\"n\">stacked_scores</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">stack</span><span class=\"p\">([</span><span class=\"n\">class1_4_scores</span><span class=\"p\">,</span> <span class=\"n\">class5_9_scores</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>stacked_scores: tensor<span class=\"o\">([[[</span>80, 85],\n         <span class=\"o\">[</span>90, 92]],\n\n        <span class=\"o\">[[</span>75, 88],\n         <span class=\"o\">[</span>82, 95]]]<span class=\"o\">)</span>\ncombined_scores shape: torch.Size<span class=\"o\">([</span>4, 2]<span class=\"o\">)</span>\nstacked_scores shape: torch.Size<span class=\"o\">([</span>2, 2, 2]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"split\">Split</h3>\n<p>Split方法可以按长度或数量将Tensor分割：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 按长度分割\n</span><span class=\"n\">split_by_len</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">combined_scores</span><span class=\"p\">,</span> <span class=\"n\">split_size_or_sections</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 按数量分割\n</span><span class=\"n\">split_by_chunk</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">chunk</span><span class=\"p\">(</span><span class=\"n\">combined_scores</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>split_by_len: <span class=\"o\">(</span>tensor<span class=\"o\">([[</span>80, 85],\n        <span class=\"o\">[</span>90, 92]]<span class=\"o\">)</span>, tensor<span class=\"o\">([[</span>75, 88],\n        <span class=\"o\">[</span>82, 95]]<span class=\"o\">))</span>\nsplit_by_chunk: <span class=\"o\">(</span>tensor<span class=\"o\">([[</span>80, 85],\n        <span class=\"o\">[</span>90, 92]]<span class=\"o\">)</span>, tensor<span class=\"o\">([[</span>75, 88],\n        <span class=\"o\">[</span>82, 95]]<span class=\"o\">))</span>\n</code></pre></div></div>\n\n<h2 id=\"数学运算基础与进阶\">数学运算：基础与进阶</h2>\n\n<p>Tensor支持丰富的数学运算，从基本的加减乘除到复杂的矩阵运算。</p>\n\n<h3 id=\"基本运算\">基本运算</h3>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 加减乘除\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"n\">add_result</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">sub_result</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span>\n<span class=\"n\">mul_result</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">div_result</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span>\n\n<span class=\"c1\"># 矩阵乘法\n</span><span class=\"n\">matrix_a</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"n\">matrix_b</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]])</span>\n<span class=\"n\">matmul_result</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">matmul</span><span class=\"p\">(</span><span class=\"n\">matrix_a</span><span class=\"p\">,</span> <span class=\"n\">matrix_b</span><span class=\"p\">)</span>  <span class=\"c1\"># 或使用 @\n</span></code></pre></div></div>\n\n<h3 id=\"高级数学运算\">高级数学运算</h3>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 幂运算与近似\n</span><span class=\"n\">power_result</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">sqrt_result</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 取整操作\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">1.7</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span><span class=\"p\">])</span>\n<span class=\"n\">floor_result</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">floor</span><span class=\"p\">()</span>    <span class=\"c1\"># [1, 2, -2]\n</span><span class=\"n\">ceil_result</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">ceil</span><span class=\"p\">()</span>      <span class=\"c1\"># [2, 3, -1]\n</span><span class=\"n\">round_result</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">round</span><span class=\"p\">()</span>    <span class=\"c1\"># [2, 2, -2]\n</span></code></pre></div></div>\n\n<h2 id=\"统计属性深入数据分析\">统计属性：深入数据分析</h2>\n\n<p>Tensor提供了丰富的统计方法，帮助我们快速分析数据。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 范数计算\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">l2_norm</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">norm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># L2范数\n</span>\n<span class=\"c1\"># 统计操作\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]])</span>\n<span class=\"n\">mean_value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">sum_value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">()</span>\n<span class=\"n\">max_value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">max</span><span class=\"p\">()</span>\n<span class=\"n\">min_value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">min</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 获取最大/最小值的索引\n</span><span class=\"n\">argmax_index</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">argmax</span><span class=\"p\">()</span>\n<span class=\"n\">argmin_index</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">argmin</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># TopK操作\n</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">topk</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"高阶操作条件选择与检索\">高阶操作：条件选择与检索</h2>\n\n<p>高阶操作如<code class=\"language-plaintext highlighter-rouge\">where</code>和<code class=\"language-plaintext highlighter-rouge\">gather</code>为我们提供了更复杂的数据处理能力。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Where操作：条件选择\n</span><span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"bp\">True</span><span class=\"p\">])</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"c1\"># [1, 5, 3]\n</span>\n<span class=\"c1\"># Gather操作：根据索引检索\n</span><span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]])</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">gathered</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"nf\">unsqueeze</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>  <span class=\"c1\"># [[1], [4], [6]]\n</span></code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>result: tensor<span class=\"o\">([</span>1, 5, 3]<span class=\"o\">)</span>\ngathered: tensor<span class=\"o\">([[</span>1],\n        <span class=\"o\">[</span>4],\n        <span class=\"o\">[</span>6]]<span class=\"o\">)</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/22/Tensor%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='Tensor进阶操作'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2024-11-22T17:21:30+11:00'>Nov 22, 2024</time> </span> </div><h2 class='article__title'>Tensor进阶操作</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Tensor基本操作",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/21/Tensor%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
      "date"     : "Nov 21, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#tensor数据类型\" id=\"markdown-toc-tensor数据类型\">Tensor数据类型</a>    <ol>\n      <li><a href=\"#计算效率\" id=\"markdown-toc-计算效率\">计算效率</a></li>\n      <li><a href=\"#自动微分支持\" id=\"markdown-toc-自动微分支持\">自动微分支持</a></li>\n      <li><a href=\"#数据表示的灵活性\" id=\"markdown-toc-数据表示的灵活性\">数据表示的灵活性</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#创建tensor\" id=\"markdown-toc-创建tensor\">创建Tensor</a>    <ol>\n      <li><a href=\"#初始化策略的意义\" id=\"markdown-toc-初始化策略的意义\">初始化策略的意义</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#索引与切片\" id=\"markdown-toc-索引与切片\">索引与切片</a>    <ol>\n      <li><a href=\"#为什么需要复杂的索引机制\" id=\"markdown-toc-为什么需要复杂的索引机制\">为什么需要复杂的索引机制？</a></li>\n      <li><a href=\"#索引的优势\" id=\"markdown-toc-索引的优势\">索引的优势</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#维度变换解耦计算复杂性\" id=\"markdown-toc-维度变换解耦计算复杂性\">维度变换：解耦计算复杂性</a>    <ol>\n      <li><a href=\"#为什么需要维度变换\" id=\"markdown-toc-为什么需要维度变换\">为什么需要维度变换？</a></li>\n      <li><a href=\"#维度变换的设计哲学\" id=\"markdown-toc-维度变换的设计哲学\">维度变换的设计哲学</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#broadcast机制智能的tensor运算\" id=\"markdown-toc-broadcast机制智能的tensor运算\">Broadcast机制：智能的Tensor运算</a>    <ol>\n      <li><a href=\"#broadcast的设计原理\" id=\"markdown-toc-broadcast的设计原理\">Broadcast的设计原理</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#结语\" id=\"markdown-toc-结语\">结语</a></li>\n</ol>\n\n<h2 id=\"tensor数据类型\">Tensor数据类型</h2>\n\n<p>在深度学习中，传统的数据类型如Python原生的列表或NumPy数组已经不能满足复杂计算的需求。PyTorch的Tensor应运而生，具有以下关键优势：</p>\n\n<h3 id=\"计算效率\">计算效率</h3>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n\n<span class=\"c1\"># 对比NumPy和Tensor的计算\n</span><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"c1\"># NumPy计算\n</span><span class=\"n\">np_start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n<span class=\"n\">np_array</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">rand</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"n\">np_result</span> <span class=\"o\">=</span> <span class=\"n\">np_array</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"n\">np_end</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Tensor计算\n</span><span class=\"n\">torch_start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n<span class=\"n\">torch_tensor</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">rand</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"n\">torch_result</span> <span class=\"o\">=</span> <span class=\"n\">torch_tensor</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"n\">torch_end</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">NumPy计算耗时: </span><span class=\"si\">{</span><span class=\"n\">np_end</span> <span class=\"o\">-</span> <span class=\"n\">np_start</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Tensor计算耗时: </span><span class=\"si\">{</span><span class=\"n\">torch_end</span> <span class=\"o\">-</span> <span class=\"n\">torch_start</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>NumPy计算耗时: 0.9036829471588135\nTensor计算耗时: 0.49999094009399414\n</code></pre></div></div>\n\n<h3 id=\"自动微分支持\">自动微分支持</h3>\n<p>Tensor最大的优势在于内置的自动微分机制，这是深度学习框架的核心特性：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">tensor</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"n\">z</span><span class=\"p\">.</span><span class=\"nf\">backward</span><span class=\"p\">()</span>  <span class=\"c1\"># 自动计算梯度\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">grad</span><span class=\"p\">)</span>  <span class=\"c1\"># 输出梯度值\n</span></code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tensor<span class=\"o\">([</span>6.]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"数据表示的灵活性\">数据表示的灵活性</h3>\n<ul>\n  <li><strong>One-Hot编码</strong>：对于分类问题，将离散数据转换为向量</li>\n  <li><strong>Embedding</strong>：将文本转换为dense向量，捕捉语义信息</li>\n</ul>\n\n<h2 id=\"创建tensor\">创建Tensor</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 随机初始化策略\n</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">manual_seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>  <span class=\"c1\"># 固定随机数种子\n</span>\n<span class=\"c1\"># 不同分布的随机初始化\n</span><span class=\"n\">uniform_tensor</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># 均匀分布\n</span><span class=\"n\">normal_tensor</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># 正态分布\n</span>\n<span class=\"c1\"># 针对深度学习的初始化\n# Kaiming初始化\n</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"nf\">kaiming_uniform_</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">empty</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>uniform_tensor: tensor<span class=\"o\">([[</span>0.8823, 0.9150, 0.3829],\n        <span class=\"o\">[</span>0.9593, 0.3904, 0.6009],\n        <span class=\"o\">[</span>0.2566, 0.7936, 0.9408]]<span class=\"o\">)</span>\nnormal_tensor: tensor<span class=\"o\">([[</span> 1.5231,  0.6647, <span class=\"nt\">-1</span>.0324],\n        <span class=\"o\">[</span><span class=\"nt\">-0</span>.2770, <span class=\"nt\">-0</span>.1671, <span class=\"nt\">-0</span>.1079],\n        <span class=\"o\">[</span><span class=\"nt\">-1</span>.4285, <span class=\"nt\">-0</span>.2810,  0.7489]]<span class=\"o\">)</span>\nweight: tensor<span class=\"o\">([[</span><span class=\"nt\">-1</span>.3968,  1.2772, <span class=\"nt\">-1</span>.2013],\n        <span class=\"o\">[</span> 1.0918,  0.2354, <span class=\"nt\">-0</span>.4592],\n        <span class=\"o\">[</span> 0.8739,  0.2204,  1.1426]]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"初始化策略的意义\">初始化策略的意义</h3>\n<ul>\n  <li><strong>均匀分布</strong>：适合简单随机初始化</li>\n  <li><strong>正态分布</strong>：模拟自然数据分布</li>\n  <li><strong>特定初始化方法</strong>：解决深度网络训练中的梯度消失/爆炸问题</li>\n</ul>\n\n<h2 id=\"索引与切片\">索引与切片</h2>\n\n<h3 id=\"为什么需要复杂的索引机制\">为什么需要复杂的索引机制？</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 复杂的数据选择\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 高维数据的灵活选择\n</span><span class=\"n\">selected_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randperm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))[:</span><span class=\"mi\">1</span><span class=\"p\">]]</span>  <span class=\"c1\"># 随机选择1个样本\n</span>\n<span class=\"c1\"># 条件选择\n</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">positive_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">masked_select</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">data: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">selected data shape: </span><span class=\"si\">{</span><span class=\"n\">selected_data</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">positive data shape: </span><span class=\"si\">{</span><span class=\"n\">positive_data</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data: tensor<span class=\"o\">([[</span><span class=\"nt\">-0</span>.5881,  1.7358,  0.6639],\n        <span class=\"o\">[</span> 0.6067,  0.9153, <span class=\"nt\">-2</span>.4359],\n        <span class=\"o\">[</span> 1.4119, <span class=\"nt\">-0</span>.4828, <span class=\"nt\">-2</span>.3674]]<span class=\"o\">)</span>\nselected data shape: tensor<span class=\"o\">([[</span> 0.6067,  0.9153, <span class=\"nt\">-2</span>.4359]]<span class=\"o\">)</span>\npositive data shape: tensor<span class=\"o\">([</span>1.7358, 0.6639, 0.6067, 0.9153, 1.4119]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"索引的优势\">索引的优势</h3>\n<ul>\n  <li>支持高维数据的精确操作</li>\n  <li>可以进行复杂的条件选择</li>\n  <li>内存效率高，避免不必要的数据复制</li>\n</ul>\n\n<h2 id=\"维度变换解耦计算复杂性\">维度变换：解耦计算复杂性</h2>\n\n<h3 id=\"为什么需要维度变换\">为什么需要维度变换？</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 典型的维度变换场景\n</span><span class=\"n\">batch_data</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">)</span>  <span class=\"c1\"># 图像批次\n</span>\n<span class=\"c1\"># 全连接层前的维度调整\n</span><span class=\"n\">flatten_data</span> <span class=\"o\">=</span> <span class=\"n\">batch_data</span><span class=\"p\">.</span><span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># 展平\n</span>\n<span class=\"c1\"># CNN中的维度重排\n</span><span class=\"n\">transposed_data</span> <span class=\"o\">=</span> <span class=\"n\">batch_data</span><span class=\"p\">.</span><span class=\"nf\">permute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">batch_data shape: </span><span class=\"si\">{</span><span class=\"n\">batch_data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">flatten_data shape: </span><span class=\"si\">{</span><span class=\"n\">flatten_data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">transposed_data shape: </span><span class=\"si\">{</span><span class=\"n\">transposed_data</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>batch_data shape: torch.Size<span class=\"o\">([</span>32, 3, 224, 224]<span class=\"o\">)</span>\nflatten_data shape: torch.Size<span class=\"o\">([</span>32, 150528]<span class=\"o\">)</span>\ntransposed_data shape: torch.Size<span class=\"o\">([</span>32, 224, 224, 3]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"维度变换的设计哲学\">维度变换的设计哲学</h3>\n<ul>\n  <li><strong>解耦</strong>：将复杂的多维数据转换为便于处理的形式</li>\n  <li><strong>灵活性</strong>：支持网络架构的多样性</li>\n  <li><strong>内存效率</strong>：避免不必要的数据复制</li>\n</ul>\n\n<h2 id=\"broadcast机制智能的tensor运算\">Broadcast机制：智能的Tensor运算</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Broadcast的实际应用\n</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">14</span>\n<span class=\"n\">feature_maps</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">)</span>\n<span class=\"n\">bias</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">randn</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"p\">)</span>  <span class=\"c1\"># 每个通道一个偏置\n</span>\n<span class=\"c1\"># 自动Broadcast\n</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">feature_maps</span> <span class=\"o\">+</span> <span class=\"n\">bias</span><span class=\"p\">.</span><span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">feature_maps shape: </span><span class=\"si\">{</span><span class=\"n\">feature_maps</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">bias shape: </span><span class=\"si\">{</span><span class=\"n\">bias</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">output shape: </span><span class=\"si\">{</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>feature_maps shape: torch.Size<span class=\"o\">([</span>4, 32, 14, 14]<span class=\"o\">)</span>\nbias shape: torch.Size<span class=\"o\">([</span>32]<span class=\"o\">)</span>\noutput shape: torch.Size<span class=\"o\">([</span>4, 32, 14, 14]<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"broadcast的设计原理\">Broadcast的设计原理</h3>\n<ul>\n  <li><strong>内存效率</strong>：避免显式的数据复制</li>\n  <li><strong>代码简洁</strong>：减少繁琐的维度匹配代码</li>\n  <li><strong>计算优化</strong>：底层可以进行高效的并行计算</li>\n</ul>\n\n<h2 id=\"结语\">结语</h2>\n\n<p>Tensor不仅仅是一种数据结构，更是深度学习中连接数学、算法和计算的桥梁。它的每一个设计都反映了对计算效率、灵活性和开发者体验的深入思考。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/21/Tensor%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='Tensor基本操作'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-11-21T03:00:59+11:00'>Nov 21, 2024</time> </span> </div><h2 class='article__title'>Tensor基本操作</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Pytorch简介",
      "category" : "Algorithm",
      "tags"     : "Algorithm, Python, and Pytorch",
      "url"      : "/zh-cn/algorithm/2024/11/21/Pytorch%E7%AE%80%E4%BB%8B/",
      "date"     : "Nov 21, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#pytorch的发展历程\" id=\"markdown-toc-pytorch的发展历程\">PyTorch的发展历程</a>    <ol>\n      <li><a href=\"#torch的早期岁月\" id=\"markdown-toc-torch的早期岁月\">Torch的早期岁月</a></li>\n      <li><a href=\"#pytorch的诞生与成长\" id=\"markdown-toc-pytorch的诞生与成长\">PyTorch的诞生与成长</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#pytorch的独特优势\" id=\"markdown-toc-pytorch的独特优势\">PyTorch的独特优势</a>    <ol>\n      <li><a href=\"#动态图计算\" id=\"markdown-toc-动态图计算\">动态图计算</a></li>\n      <li><a href=\"#动态图特点\" id=\"markdown-toc-动态图特点\">动态图特点</a></li>\n      <li><a href=\"#静态图特点\" id=\"markdown-toc-静态图特点\">静态图特点</a></li>\n      <li><a href=\"#代码示例解释\" id=\"markdown-toc-代码示例解释\">代码示例解释</a></li>\n      <li><a href=\"#核心功能\" id=\"markdown-toc-核心功能\">核心功能</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#开发环境搭建详解\" id=\"markdown-toc-开发环境搭建详解\">开发环境搭建详解</a>    <ol>\n      <li><a href=\"#cuda配置指南\" id=\"markdown-toc-cuda配置指南\">CUDA配置指南</a>        <ol>\n          <li><a href=\"#硬件要求\" id=\"markdown-toc-硬件要求\">硬件要求</a></li>\n          <li><a href=\"#安装步骤\" id=\"markdown-toc-安装步骤\">安装步骤</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#pytorch安装\" id=\"markdown-toc-pytorch安装\">PyTorch安装</a>        <ol>\n          <li><a href=\"#推荐方式\" id=\"markdown-toc-推荐方式\">推荐方式</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#生态系统\" id=\"markdown-toc-生态系统\">生态系统</a></li>\n  <li><a href=\"#结语\" id=\"markdown-toc-结语\">结语</a></li>\n</ol>\n\n<h2 id=\"pytorch的发展历程\">PyTorch的发展历程</h2>\n\n<h3 id=\"torch的早期岁月\">Torch的早期岁月</h3>\n<p>PyTorch的故事要从2002年的Torch框架说起。最初，Torch使用Lua语言编写，是一个科学计算框架。到2011年，Torch7版本的发布进一步奠定了其在机器学习领域的地位。</p>\n\n<h3 id=\"pytorch的诞生与成长\">PyTorch的诞生与成长</h3>\n<p>2016年10月，PyTorch正式发布0.1版本，采用THNN后端。这标志着深度学习框架迎来了一个全新的里程碑。紧接着：</p>\n\n<ul>\n  <li>2018年12月：发布1.0版本，引入CAFFE2后端</li>\n  <li>2019年5月：发布1.1版本</li>\n</ul>\n\n<p>值得注意的是，PyTorch由Facebook AI Research（现Meta AI）开发，这为其背书带来了极大的可信度。</p>\n\n<h2 id=\"pytorch的独特优势\">PyTorch的独特优势</h2>\n\n<h3 id=\"动态图计算\">动态图计算</h3>\n<p>与TensorFlow早期的静态图相比，PyTorch最大的特点是动态图计算。这意味着：</p>\n\n<ul>\n  <li>计算图可以动态构建</li>\n  <li>调试更加灵活</li>\n  <li>代码更加直观和”Pythonic”</li>\n</ul>\n\n<p>我将用 PyTorch（动态图）和 TensorFlow（静态图）的代码示例来展示它们的区别。</p>\n\n<h3 id=\"动态图特点\">动态图特点</h3>\n<ol>\n  <li>计算图在运行时动态构建</li>\n  <li>可以随时修改计算逻辑</li>\n  <li>代码更接近普通Python编程</li>\n  <li>调试更加直观和灵活</li>\n</ol>\n\n<h3 id=\"静态图特点\">静态图特点</h3>\n<ol>\n  <li>计算图需要预先完整定义</li>\n  <li>运行前必须确定完整计算流程</li>\n  <li>需要显式创建会话(Session)</li>\n  <li>性能可能更高，但灵活性较差</li>\n</ol>\n\n<h3 id=\"代码示例解释\">代码示例解释</h3>\n<ul>\n  <li>PyTorch版本：\n    <ul>\n      <li>直接在函数内部可以根据条件动态改变计算逻辑</li>\n      <li>代码更加简洁和直观</li>\n    </ul>\n  </li>\n  <li>TensorFlow 1.x版本：\n    <ul>\n      <li>需要使用 <code class=\"language-plaintext highlighter-rouge\">tf.placeholder</code> 和 <code class=\"language-plaintext highlighter-rouge\">tf.cond</code></li>\n      <li>计算图需要预先定义</li>\n      <li>需要通过会话(Session)运行</li>\n    </ul>\n  </li>\n</ul>\n\n<p>值得注意的是，TensorFlow 2.x已经引入了更多动态图特性，更接近PyTorch的编程范式。</p>\n\n<h3 id=\"核心功能\">核心功能</h3>\n\n<ol>\n  <li><strong>GPU加速</strong>：高效利用显卡计算资源</li>\n  <li><strong>自动求导</strong>：简化梯度计算过程</li>\n  <li><strong>丰富的网络层</strong>：提供多种常用神经网络层，如：\n    <ul>\n      <li>线性层：<code class=\"language-plaintext highlighter-rouge\">nn.Linear</code></li>\n      <li>卷积层：<code class=\"language-plaintext highlighter-rouge\">nn.Conv2d</code></li>\n      <li>循环神经网络层：<code class=\"language-plaintext highlighter-rouge\">nn.LSTM</code></li>\n      <li>激活函数：<code class=\"language-plaintext highlighter-rouge\">nn.ReLU</code>、<code class=\"language-plaintext highlighter-rouge\">nn.Sigmoid</code>、<code class=\"language-plaintext highlighter-rouge\">nn.Softmax</code></li>\n      <li>损失函数：<code class=\"language-plaintext highlighter-rouge\">nn.CrossEntropyLoss</code>、<code class=\"language-plaintext highlighter-rouge\">nn.MSE</code></li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"开发环境搭建详解\">开发环境搭建详解</h2>\n\n<h3 id=\"cuda配置指南\">CUDA配置指南</h3>\n\n<h4 id=\"硬件要求\">硬件要求</h4>\n<ul>\n  <li>必须拥有NVIDIA显卡</li>\n  <li>建议检查CUDA是否正确安装</li>\n</ul>\n\n<h4 id=\"安装步骤\">安装步骤</h4>\n<ol>\n  <li>下载并安装CUDA 10.0</li>\n  <li>添加CUDA路径到系统PATH</li>\n  <li>验证安装：可使用命令行测试</li>\n</ol>\n\n<h3 id=\"pytorch安装\">PyTorch安装</h3>\n\n<h4 id=\"推荐方式\">推荐方式</h4>\n<ul>\n  <li>使用Anaconda管理虚拟环境</li>\n  <li>在命令行中（建议以管理员身份）执行安装</li>\n</ul>\n\n<h2 id=\"生态系统\">生态系统</h2>\n\n<p>PyTorch拥有丰富的生态系统，其中TorchVision就是一个典型代表，提供了计算机视觉领域的丰富工具和预训练模型。</p>\n\n<h2 id=\"结语\">结语</h2>\n\n<p>在深度学习框架的竞争中，PyTorch在以下维度表现出色：</p>\n<ul>\n  <li>性能</li>\n  <li>生态系统</li>\n  <li>学术界接受度</li>\n  <li>易用性</li>\n  <li>发展前景</li>\n</ul>\n\n<p>作为新一代深度学习框架，PyTorch凭借其灵活的动态图、丰富的功能和强大的生态系统，正在迅速成为研究者和开发者的首选工具。对于想要入门深度学习的同学来说，PyTorch无疑是一个极佳的选择。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/21/Pytorch%E7%AE%80%E4%BB%8B/'> <img src='https://about.fb.com/wp-content/uploads/2022/09/PyTorch-Foundation-Launch_Header.jpg' alt='Pytorch简介'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-11-21T02:41:05+11:00'>Nov 21, 2024</time> </span> </div><h2 class='article__title'>Pytorch简介</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a>  <a href='/zh-cn/tag/Pytorch' class='article__tag'>Pytorch</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "使用射线法判断点是否在多边形内",
      "category" : "Algorithm",
      "tags"     : "Algorithm and Python",
      "url"      : "/zh-cn/algorithm/2024/11/12/%E5%B0%84%E7%BA%BF%E6%B3%95%E5%88%A4%E6%96%AD%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85/",
      "date"     : "Nov 12, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#引言\" id=\"markdown-toc-引言\">引言</a></li>\n  <li><a href=\"#射线法概述\" id=\"markdown-toc-射线法概述\">射线法概述</a></li>\n  <li><a href=\"#初始实现\" id=\"markdown-toc-初始实现\">初始实现</a></li>\n  <li><a href=\"#测试与问题发现\" id=\"markdown-toc-测试与问题发现\">测试与问题发现</a></li>\n  <li><a href=\"#代码修正\" id=\"markdown-toc-代码修正\">代码修正</a></li>\n  <li><a href=\"#测试结果\" id=\"markdown-toc-测试结果\">测试结果</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"引言\">引言</h2>\n\n<p>在计算几何中，判断一个点是否位于多边形内部是一个常见的问题。今天，我在实际项目中需要用到这一功能，选择了射线法（Ray Casting Algorithm）来实现这一判断。本文将详细介绍我在实现过程中遇到的问题及其解决方法，并分享相关代码。</p>\n\n<h2 id=\"射线法概述\">射线法概述</h2>\n\n<p>射线法是一种经典的点在多边形内判断算法。其基本思想是从目标点向任意方向发出一条射线，统计射线与多边形边界的交点数量。如果交点数量为奇数，则点在多边形内；如果为偶数，则在多边形外。</p>\n\n<h2 id=\"初始实现\">初始实现</h2>\n\n<p>在实现射线法时，我主要参考了腾讯云开发者社区的一篇博客：<a href=\"https://cloud.tencent.com/developer/article/1515808\">射线法判断点是否在多边形内</a>。根据该博客的思路，我编写了以下Python代码：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">pointInPolygon</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">edgesX</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">polyX</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">edgesY</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">polyY</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">edgesX</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">edgesX</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">edgesY</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">edgesY</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"k\">assert</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">edgesX</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">edgesY</span><span class=\"p\">)</span>\n    <span class=\"n\">sinsc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># 交点计数\n</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">edgesX</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>  <span class=\"c1\"># 遍历所有边\n</span>        <span class=\"n\">startPoint</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">edgesX</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">edgesY</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"n\">endPoint</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">edgesX</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">edgesY</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nf\">isRayIntersectsSegment</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">startPoint</span><span class=\"p\">,</span> <span class=\"n\">endPoint</span><span class=\"p\">):</span>\n            <span class=\"n\">sinsc</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># 交点数加一\n</span>    <span class=\"k\">return</span> <span class=\"bp\">True</span> <span class=\"k\">if</span> <span class=\"n\">sinsc</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n\n<p>这段代码的逻辑与原博客中的实现基本一致：遍历多边形的每一条边，判断射线是否与该边相交，最终根据交点数量的奇偶性判断点的位置。</p>\n\n<h2 id=\"测试与问题发现\">测试与问题发现</h2>\n\n<p>为了验证代码的正确性，我在牛客网（Nowcoder）上测试了多个案例：</p>\n\n<ul>\n  <li><a href=\"https://www.nowcoder.com/questionTerminal/f9c4290baed0406cbbe2c23dd687732c\">[编程题]判断一个点是否在三角形内部</a></li>\n  <li><a href=\"https://www.nowcoder.com/questionTerminal/fcb839e841a74daab2e442f4dba5b707\">[编程题]判断点是否在四边形内</a></li>\n  <li><a href=\"https://www.nowcoder.com/questionTerminal/6369cbb6898c41d0bef179a6a80f5fde\">[编程题]判断一个点是否在矩形内部</a></li>\n</ul>\n\n<p>在测试过程中，我发现代码无法通过部分测试案例。为了更直观地理解问题，我使用Python绘制了无法通过案例的示意图：</p>\n\n<p><img src=\"/images/posts/image-20241112213902213.png\" alt=\"示意图\" /></p>\n\n<p>通过分析示意图，我发现原作者为了进行可能性的剪枝，在<code class=\"language-plaintext highlighter-rouge\">isRayIntersectsSegment</code>函数中加入了以下判断：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">s_poi</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">poi</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">e_poi</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">poi</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>  <span class=\"c1\"># 线段在射线左边\n</span>    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n\n<p>然而，这部分代码存在逻辑疏漏：仅判断线段的起点x坐标小于目标点x坐标且终点y坐标小于目标点y坐标，并不能确保线段一定在射线的左边。例如，图中的反例就证明了这一点。</p>\n\n<h2 id=\"代码修正\">代码修正</h2>\n\n<p>为了修正上述问题，我对剪枝条件进行了增强，增加了对<code class=\"language-plaintext highlighter-rouge\">s_poi[1]</code>和<code class=\"language-plaintext highlighter-rouge\">e_poi[0]</code>的判断。修改后的<code class=\"language-plaintext highlighter-rouge\">isRayIntersectsSegment</code>函数如下：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">isRayIntersectsSegment</span><span class=\"p\">(</span><span class=\"n\">pointOfInterest</span><span class=\"p\">,</span> <span class=\"n\">startPoint</span><span class=\"p\">,</span> <span class=\"n\">endPoint</span><span class=\"p\">):</span>  <span class=\"c1\"># [x, y] [lng, lat]\n</span>    <span class=\"c1\"># 输入：待检查点，线段起点，线段终点，均为 [lng, lat] 格式数组\n</span>    <span class=\"k\">if</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>  <span class=\"c1\"># 排除与射线平行或重合的情况，或线段端点重合\n</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>  <span class=\"c1\"># 线段在射线上方\n</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>  <span class=\"c1\"># 线段在射线下方\n</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>  <span class=\"c1\"># 交点在起点对应的下端点\n</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>  <span class=\"c1\"># 交点在终点对应的下端点\n</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"ow\">and</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"ow\">and</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"ow\">and</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"c1\"># 计算交点的x坐标\n</span>    <span class=\"n\">xIntersection</span> <span class=\"o\">=</span> <span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">endPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">startPoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">xIntersection</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointOfInterest</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>  <span class=\"c1\"># 交点在射线起点左侧\n</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>  <span class=\"c1\"># 其他情况，射线与线段相交\n</span></code></pre></div></div>\n\n<p>在新增的剪枝条件中，增加了对线段终点x坐标和起点y坐标的判断，确保线段确实位于射线的左侧，从而避免误判。</p>\n\n<h2 id=\"测试结果\">测试结果</h2>\n\n<p>经过上述修正，所有测试案例均已通过，证明修正后的算法更加健壮且准确。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>在实现射线法判断点是否在多边形内的过程中，细节处理至关重要。尽管原始算法在大多数情况下表现良好，但在某些边缘情况下可能会出现错误。通过深入分析测试案例并优化剪枝条件，最终实现了一个可靠的点内判定算法。</p>\n\n<p>虽然代码在初始阶段存在一些瑕疵，但通过调试和改进，最终达到了预期效果。希望本文能为有类似需求的开发者提供参考和帮助。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/algorithm/2024/11/12/%E5%B0%84%E7%BA%BF%E6%B3%95%E5%88%A4%E6%96%AD%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%86%85/'> <img src='https://www.simplilearn.com/ice9/free_resources_article_thumb/what_is_Computer_Vision.jpg' alt='使用射线法判断点是否在多边形内'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-11-12T14:06:48+11:00'>Nov 12, 2024</time> </span> </div><h2 class='article__title'>使用射线法判断点是否在多边形内</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Algorithm' class='article__tag'>Algorithm</a>  <a href='/zh-cn/tag/Python' class='article__tag'>Python</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（七）应用层",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%B8%83-%E5%BA%94%E7%94%A8%E5%B1%82/",
      "date"     : "Oct 25, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#域名系统-dns\" id=\"markdown-toc-域名系统-dns\">域名系统 (DNS)</a>    <ol>\n      <li><a href=\"#查询机制\" id=\"markdown-toc-查询机制\">查询机制</a>        <ol>\n          <li><a href=\"#1-递归查询\" id=\"markdown-toc-1-递归查询\">1. 递归查询</a></li>\n          <li><a href=\"#2-迭代查询\" id=\"markdown-toc-2-迭代查询\">2. 迭代查询</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#dns查询的潜在挑战\" id=\"markdown-toc-dns查询的潜在挑战\">DNS查询的潜在挑战</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#http超文本传输协议\" id=\"markdown-toc-http超文本传输协议\">HTTP（超文本传输协议）</a>    <ol>\n      <li><a href=\"#http连接类型\" id=\"markdown-toc-http连接类型\">HTTP连接类型</a>        <ol>\n          <li><a href=\"#1-非持久http\" id=\"markdown-toc-1-非持久http\">1. 非持久HTTP</a></li>\n          <li><a href=\"#2-持久http\" id=\"markdown-toc-2-持久http\">2. 持久HTTP</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#连接建立过程\" id=\"markdown-toc-连接建立过程\">连接建立过程</a></li>\n      <li><a href=\"#cookies\" id=\"markdown-toc-cookies\">Cookies</a>        <ol>\n          <li><a href=\"#cookies优势\" id=\"markdown-toc-cookies优势\">Cookies优势</a></li>\n          <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#电子邮件协议\" id=\"markdown-toc-电子邮件协议\">电子邮件协议</a>    <ol>\n      <li><a href=\"#关键组件\" id=\"markdown-toc-关键组件\">关键组件</a></li>\n      <li><a href=\"#主要协议\" id=\"markdown-toc-主要协议\">主要协议</a>        <ol>\n          <li><a href=\"#1-smtp简单邮件传输协议\" id=\"markdown-toc-1-smtp简单邮件传输协议\">1. SMTP（简单邮件传输协议）</a></li>\n          <li><a href=\"#2-最终投递协议\" id=\"markdown-toc-2-最终投递协议\">2. 最终投递协议</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#多媒体数据传输\" id=\"markdown-toc-多媒体数据传输\">多媒体数据传输</a>    <ol>\n      <li><a href=\"#简单下载的局限性\" id=\"markdown-toc-简单下载的局限性\">简单下载的局限性</a></li>\n      <li><a href=\"#多媒体协议\" id=\"markdown-toc-多媒体协议\">多媒体协议</a></li>\n      <li><a href=\"#感知编码\" id=\"markdown-toc-感知编码\">感知编码</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"域名系统-dns\">域名系统 (DNS)</h2>\n\n<h3 id=\"查询机制\">查询机制</h3>\n\n<h4 id=\"1-递归查询\">1. 递归查询</h4>\n<ul>\n  <li>服务器代表客户端获取映射，而不是返回部分答案</li>\n  <li>DNS客户端通常向本地名称服务器发出递归查询</li>\n  <li>本地名称服务器随后发出一系列迭代查询来解析域名</li>\n</ul>\n\n<h4 id=\"2-迭代查询\">2. 迭代查询</h4>\n<ul>\n  <li>被联系的服务器回复要联系的服务器名称</li>\n  <li>如果被查询的服务器对于被查询的域不具有权威，查询发出者将接受对其他名称服务器的引用</li>\n</ul>\n\n<h3 id=\"dns查询的潜在挑战\">DNS查询的潜在挑战</h3>\n<ul>\n  <li>单点故障</li>\n  <li>流量拥塞</li>\n  <li>远程查询</li>\n  <li>服务维护问题</li>\n  <li>查询响应速度可能受限</li>\n  <li>前端扩展存在计算挑战</li>\n</ul>\n\n<h2 id=\"http超文本传输协议\">HTTP（超文本传输协议）</h2>\n\n<h3 id=\"http连接类型\">HTTP连接类型</h3>\n\n<h4 id=\"1-非持久http\">1. 非持久HTTP</h4>\n<ul>\n  <li>每个TCP连接仅传输一个对象</li>\n  <li>对每个请求/响应对都建立新的TCP连接</li>\n</ul>\n\n<h4 id=\"2-持久http\">2. 持久HTTP</h4>\n<ul>\n  <li>单个TCP连接可发送多个对象</li>\n  <li>优点：\n    <ul>\n      <li>减少建立连接的开销</li>\n      <li>缩短响应时间</li>\n      <li>降低服务器负载</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"连接建立过程\">连接建立过程</h3>\n<ul>\n  <li>第一个RTT：TCP三次握手建立连接</li>\n  <li>第二个RTT：发送HTTP请求并接收响应</li>\n</ul>\n\n<h3 id=\"cookies\">Cookies</h3>\n<ul>\n  <li>HTTP服务器本质上是无状态的</li>\n  <li>Cookies在用户计算机上存储少量信息（&lt;4KB）</li>\n</ul>\n\n<h4 id=\"cookies优势\">Cookies优势</h4>\n<ul>\n  <li>授权</li>\n  <li>用户会话状态管理</li>\n  <li>购物车功能</li>\n  <li>个性化推荐</li>\n</ul>\n\n<h4 id=\"注意事项\">注意事项</h4>\n<ul>\n  <li>可能存在用户追踪的争议</li>\n</ul>\n\n<h2 id=\"电子邮件协议\">电子邮件协议</h2>\n\n<h3 id=\"关键组件\">关键组件</h3>\n<ul>\n  <li>用户代理：允许用户阅读和发送电子邮件（如Microsoft Outlook）</li>\n  <li>消息传输代理：将消息从源传输到目的地</li>\n  <li>消息传输协议</li>\n</ul>\n\n<h3 id=\"主要协议\">主要协议</h3>\n<h4 id=\"1-smtp简单邮件传输协议\">1. SMTP（简单邮件传输协议）</h4>\n<ul>\n  <li>用于邮件提交和传输</li>\n  <li>在用户代理和消息传输代理之间传输</li>\n</ul>\n\n<h4 id=\"2-最终投递协议\">2. 最终投递协议</h4>\n<ul>\n  <li>POP3（邮政协议3）：下载到单一设备</li>\n  <li>IMAP（互联网消息访问协议）：支持多设备访问</li>\n</ul>\n\n<h2 id=\"多媒体数据传输\">多媒体数据传输</h2>\n\n<h3 id=\"简单下载的局限性\">简单下载的局限性</h3>\n<ul>\n  <li>播放前必须完整下载媒体文件</li>\n  <li>用户需等待下载完成</li>\n  <li>主要假设点对点数据分发</li>\n</ul>\n\n<h3 id=\"多媒体协议\">多媒体协议</h3>\n<ul>\n  <li>HTTP：应用层协议</li>\n  <li>RTSP（实时流媒体协议）：应用层协议</li>\n  <li>RTP（实时传输协议）：传输层协议，基于UDP</li>\n  <li>MPEG-4：媒体压缩</li>\n</ul>\n\n<h3 id=\"感知编码\">感知编码</h3>\n<ul>\n  <li>利用人类感知系统的局限性进行有损压缩</li>\n  <li>例如：\n    <ul>\n      <li>频率掩蔽：某些频率可以隐藏其他声音</li>\n      <li>时间掩蔽：响亮声音后人耳暂时无法感知轻柔声音</li>\n    </ul>\n  </li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%B8%83-%E5%BA%94%E7%94%A8%E5%B1%82/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（七）应用层'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-10-25T17:43:27+11:00'>Oct 25, 2024</time> </span> </div><h2 class='article__title'>计算机网络（七）应用层</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（六）传输层",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%85%AD-%E4%BC%A0%E8%BE%93%E5%B1%82/",
      "date"     : "Oct 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#transport-layer作用\" id=\"markdown-toc-transport-layer作用\"><strong>Transport Layer作用</strong></a></li>\n  <li><a href=\"#transport-protocol-data-unit\" id=\"markdown-toc-transport-protocol-data-unit\"><strong>Transport Protocol Data Unit</strong></a></li>\n  <li><a href=\"#three-way-handshake\" id=\"markdown-toc-three-way-handshake\"><strong>Three-Way Handshake</strong></a>    <ol>\n      <li><a href=\"#什么是三次握手\" id=\"markdown-toc-什么是三次握手\">什么是三次握手？</a></li>\n      <li><a href=\"#为什么不能用两次握手\" id=\"markdown-toc-为什么不能用两次握手\">为什么不能用两次握手？</a></li>\n      <li><a href=\"#图中的问题\" id=\"markdown-toc-图中的问题\">图中的问题</a></li>\n      <li><a href=\"#示例\" id=\"markdown-toc-示例\">示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#connection-release\" id=\"markdown-toc-connection-release\"><strong>Connection Release</strong></a>    <ol>\n      <li><a href=\"#示例-1\" id=\"markdown-toc-示例-1\">示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#port--socket\" id=\"markdown-toc-port--socket\"><strong>Port &amp; Socket</strong></a></li>\n  <li><a href=\"#user-datagram-protocol-udp\" id=\"markdown-toc-user-datagram-protocol-udp\"><strong>User Datagram Protocol (UDP)</strong></a>    <ol>\n      <li><a href=\"#示例-2\" id=\"markdown-toc-示例-2\">示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#remote-procedure-call-rpc\" id=\"markdown-toc-remote-procedure-call-rpc\"><strong>Remote Procedure Call (RPC)</strong></a></li>\n  <li><a href=\"#transmission-control-protocol-tcp\" id=\"markdown-toc-transmission-control-protocol-tcp\"><strong>Transmission Control Protocol (TCP)</strong></a>    <ol>\n      <li><a href=\"#tcp连接的特性\" id=\"markdown-toc-tcp连接的特性\">TCP连接的特性</a></li>\n      <li><a href=\"#tcp-header字段解析\" id=\"markdown-toc-tcp-header字段解析\">TCP Header字段解析</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#tcp-window-management\" id=\"markdown-toc-tcp-window-management\"><strong>TCP Window Management</strong></a></li>\n  <li><a href=\"#congestion-control-拥塞控制\" id=\"markdown-toc-congestion-control-拥塞控制\"><strong>Congestion Control (拥塞控制)</strong></a></li>\n  <li><a href=\"#qos\" id=\"markdown-toc-qos\"><strong>QoS</strong></a></li>\n  <li><a href=\"#flow-control-vs-congestion-control\" id=\"markdown-toc-flow-control-vs-congestion-control\"><strong>Flow Control vs. Congestion Control</strong></a></li>\n</ol>\n\n<h3 id=\"transport-layer作用\"><strong>Transport Layer作用</strong></h3>\n<p>为应用层的进程提供高效、可靠且具有成本效益的数据传输服务，同时独立于物理层或数据链路层。</p>\n\n<p>通过调用网络层提供的服务来实现这一目标。</p>\n\n<h3 id=\"transport-protocol-data-unit\"><strong>Transport Protocol Data Unit</strong></h3>\n<ul>\n  <li>发送至传输实体和从传输实体发送的消息的抽象表示。</li>\n  <li><strong>Transport Protocol Data Unit (TPDU)</strong> = 段 (Segment)。</li>\n  <li>将段封装为数据包和帧。</li>\n</ul>\n\n<h3 id=\"three-way-handshake\"><strong>Three-Way Handshake</strong></h3>\n<p>三次握手的作用是保护通信免受以下问题的影响：</p>\n<ul>\n  <li><strong>Duplicate CR (Connect Request)</strong>: 重复的连接请求。</li>\n  <li><strong>Duplicate CR and DATA</strong>: 重复的连接请求及数据。相同的数据加上错误的 ACK 会被拒绝。</li>\n</ul>\n\n<h4 id=\"什么是三次握手\">什么是三次握手？</h4>\n<p>假设你想和一个朋友玩游戏，你需要确保对方已经准备好，而对方也需要确认你的准备。以下是三次握手的具体过程：</p>\n<ol>\n  <li>你向对方发出信号：“你准备好了吗？”</li>\n  <li>对方回应：“我准备好了，你呢？”</li>\n  <li>你确认收到对方的回复：“我也准备好了，可以开始了！”</li>\n</ol>\n\n<p>通过来回确认，确保双方都已准备好。</p>\n\n<h4 id=\"为什么不能用两次握手\">为什么不能用两次握手？</h4>\n<p>如果只使用两次握手，有可能产生误解。例如，延迟或丢包可能导致通信双方错误地认为对方未准备好，从而导致通信混乱。</p>\n\n<h4 id=\"图中的问题\">图中的问题</h4>\n<p>在图中可能出现重复的旧消息（旧重复消息），这会导致通信双方的误解。例如：</p>\n<ul>\n  <li>重复的连接请求被误认为是新的消息。</li>\n  <li>通过三次握手可以避免这种误解，因为每次通信都需要新的消息确认。</li>\n</ul>\n\n<h4 id=\"示例\">示例</h4>\n<p>如果使用双向握手而非三次握手，可能会出现死锁。例如：</p>\n<ul>\n  <li>A 收到一个数据包并确认，但确认消息丢失。</li>\n  <li>A 和 B 都处于开放状态，但序列号不同，通信陷入僵局。\n必须引入超时机制来避免死锁。</li>\n</ul>\n\n<h3 id=\"connection-release\"><strong>Connection Release</strong></h3>\n<ol>\n  <li><strong>Asymmetric Disconnection</strong>: 任意一方可以发出 DISCONNECT 命令，导致双向传输结束。\n    <ul>\n      <li>可能导致数据丢失。</li>\n    </ul>\n  </li>\n  <li><strong>Symmetric Disconnection</strong>: 双方各自关闭一个方向的传输（四次挥手），更灵活地保持接收模式。</li>\n</ol>\n\n<p>正常断开序列：</p>\n<ul>\n  <li>主机1发出 DR (Disconnect Request)，双方都确认对方的 DR。</li>\n</ul>\n\n<h4 id=\"示例-1\">示例</h4>\n<p>如果初始 DR 和所有后续重传都丢失，主机1会超时并释放连接，而主机2可能保持连接状态，导致数据丢失和资源浪费。</p>\n\n<h3 id=\"port--socket\"><strong>Port &amp; Socket</strong></h3>\n<ol>\n  <li>应用层和传输层需要指定连接的远程进程。</li>\n  <li>在传输层，寻址通常使用 <strong>Transport Service Access Points (TSAPs)</strong>。\n    <ul>\n      <li>在互联网中，TSAP 通常称为 <strong>Port</strong>（如端口80）。</li>\n    </ul>\n  </li>\n  <li>在网络层，寻址通常使用 <strong>Network Service Access Points (NSAPs)</strong>。\n    <ul>\n      <li>在互联网中，NSAP 通常对应 <strong>IP地址</strong>。</li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"user-datagram-protocol-udp\"><strong>User Datagram Protocol (UDP)</strong></h3>\n<ol>\n  <li>提供一种无连接的协议，允许应用程序发送封装的 IP 数据报。</li>\n  <li><strong>优点</strong>：\n    <ul>\n      <li>提供支持多路复用的 IP 接口，提高传输效率。</li>\n    </ul>\n  </li>\n  <li><strong>缺点</strong>：\n    <ul>\n      <li>不支持流量控制、错误控制或坏段重传。</li>\n    </ul>\n  </li>\n</ol>\n\n<h4 id=\"示例-2\">示例</h4>\n<p>UDP 类似于寄快递：</p>\n<ul>\n  <li><strong>Datagrams</strong>：数据被分成小块传输。</li>\n  <li><strong>Connectionless</strong>：无需建立连接直接发送。</li>\n  <li><strong>效率高</strong>：适用于对速度要求高的场景，如直播和网络游戏。</li>\n</ul>\n\n<h3 id=\"remote-procedure-call-rpc\"><strong>Remote Procedure Call (RPC)</strong></h3>\n<ol>\n  <li><strong>RPC</strong> 是 <strong>UDP</strong> 的一种应用（也有基于 TCP 的 RPC）。</li>\n  <li>核心思想：让远程调用看起来像本地调用一样。</li>\n  <li>通过客户端和服务器端绑定 <strong>Stub</strong>，实现“连接”的效果。</li>\n</ol>\n\n<h3 id=\"transmission-control-protocol-tcp\"><strong>Transmission Control Protocol (TCP)</strong></h3>\n<h4 id=\"tcp连接的特性\">TCP连接的特性</h4>\n<ol>\n  <li><strong>Full Duplex (全双工)</strong>：支持数据同时双向传输。</li>\n  <li><strong>Point to Point (点对点)</strong>：精确的发送者和接收者对。</li>\n  <li><strong>Byte Streams (字节流)</strong>：数据以字节为单位流动，不保留消息边界。</li>\n  <li><strong>Buffer Capable (缓冲能力)</strong>：\n    <ul>\n      <li>可选择缓冲数据或立即发送。</li>\n      <li><strong>URGENT flag</strong>：立即发送。</li>\n      <li><strong>PUSH flag</strong>：禁止延迟。</li>\n    </ul>\n  </li>\n</ol>\n\n<h4 id=\"tcp-header字段解析\">TCP Header字段解析</h4>\n<ol>\n  <li><strong>Source Port 和 Destination Port</strong>：源端口和目标端口，用于标识发送方和接收方。</li>\n  <li><strong>Sequence Number</strong>：序列号，用于标记数据包顺序。</li>\n  <li><strong>Acknowledgement Number</strong>：确认号，标记接收方已收到的包。</li>\n  <li><strong>Flags</strong>：控制数据行为的开关（如 SYN、ACK、FIN）。</li>\n  <li><strong>Window Size</strong>：接收方窗口大小，表示一次能接收的数据量。</li>\n  <li><strong>Checksum</strong>：校验和，用于检查数据完整性。</li>\n  <li><strong>Urgent Pointer</strong>：指示紧急数据。</li>\n  <li><strong>Options 和 Data</strong>：可选项和数据内容。</li>\n</ol>\n\n<h3 id=\"tcp-window-management\"><strong>TCP Window Management</strong></h3>\n<ul>\n  <li>TCP 通过确认机制确保段的正确接收。</li>\n  <li>接收方根据缓冲区空间调整窗口大小。</li>\n</ul>\n\n<h3 id=\"congestion-control-拥塞控制\"><strong>Congestion Control (拥塞控制)</strong></h3>\n<ul>\n  <li><strong>Slow Start</strong>: 初始阶段逐步探测网络拥塞程度，逐渐增加发送窗口。</li>\n  <li><strong>Additive Increase</strong>: 缓慢增加发送窗口。</li>\n  <li><strong>Fast Recovery</strong>: 丢包时通过快速恢复继续增加窗口。</li>\n</ul>\n\n<h3 id=\"qos\"><strong>QoS</strong></h3>\n<p>不同应用层对 QoS 的要求：</p>\n<ol>\n  <li><strong>Over-Provisioning</strong>：需要足够的缓冲区、路由器 CPU 和带宽。</li>\n  <li><strong>Buffering</strong>：缓冲接收的数据流以减少抖动，但会增加延迟。</li>\n  <li><strong>Traffic Shaping</strong>：控制传输速率和突发流量（如 <strong>Leaky Bucket</strong>）。</li>\n  <li><strong>Admission Control</strong>：路由器根据流量情况决定是否接收。</li>\n</ol>\n\n<h3 id=\"flow-control-vs-congestion-control\"><strong>Flow Control vs. Congestion Control</strong></h3>\n<ol>\n  <li><strong>流量控制</strong>：点对点流量问题，防止发送方速度快于接收方。</li>\n  <li><strong>拥塞控制</strong>：涉及子网整体的流量承载能力。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%85%AD-%E4%BC%A0%E8%BE%93%E5%B1%82/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（六）传输层'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-10-24T08:15:09+11:00'>Oct 24, 2024</time> </span> </div><h2 class='article__title'>计算机网络（六）传输层</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（五）路由算法",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BA%94-%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95/",
      "date"     : "Oct 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#路由算法分类\" id=\"markdown-toc-路由算法分类\">路由算法分类</a></li>\n  <li><a href=\"#非自适应算法non-adaptive-algorithms\" id=\"markdown-toc-非自适应算法non-adaptive-algorithms\">非自适应算法（Non-Adaptive Algorithms）</a></li>\n  <li><a href=\"#自适应算法adaptive-algorithms\" id=\"markdown-toc-自适应算法adaptive-algorithms\">自适应算法（Adaptive Algorithms）</a></li>\n  <li><a href=\"#其他路由算法\" id=\"markdown-toc-其他路由算法\">其他路由算法</a></li>\n  <li><a href=\"#示例题目与解答\" id=\"markdown-toc-示例题目与解答\">示例题目与解答</a>    <ol>\n      <li><a href=\"#为什么网络层需要路由算法路由算法的主要类别有哪些\" id=\"markdown-toc-为什么网络层需要路由算法路由算法的主要类别有哪些\">为什么网络层需要路由算法？路由算法的主要类别有哪些？</a></li>\n      <li><a href=\"#dijkstra算法的基本步骤\" id=\"markdown-toc-dijkstra算法的基本步骤\">Dijkstra算法的基本步骤</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h3 id=\"路由算法分类\">路由算法分类</h3>\n\n<ol>\n  <li><strong>非自适应算法（Non-Adaptive Algorithms）</strong>\n    <ul>\n      <li>静态决策过程，算法在设计时已经决定路由，不会根据网络的实际情况进行调整。</li>\n      <li>示例：静态路由（Static Routing）。</li>\n    </ul>\n  </li>\n  <li><strong>自适应算法（Adaptive Algorithms）</strong>\n    <ul>\n      <li>动态决策过程，算法根据网络拓扑、流量负载等动态变化调整路由。</li>\n      <li>示例：动态路由（Dynamic Routing）。</li>\n    </ul>\n  </li>\n</ol>\n\n<hr />\n\n<h3 id=\"非自适应算法non-adaptive-algorithms\">非自适应算法（Non-Adaptive Algorithms）</h3>\n\n<ol>\n  <li><strong>Shortest Path Routing（最短路径路由）</strong>\n    <ul>\n      <li>使用Dijkstra算法计算网络中两点之间的最短路径。</li>\n      <li>Dijkstra算法基于权重（如距离、延迟、费用等）最小化原理，逐步更新路径，直到所有节点的最短路径计算完成。</li>\n    </ul>\n  </li>\n  <li><strong>Flooding（泛洪）</strong>\n    <ul>\n      <li>每当一个节点收到数据包时，它会向除发送者外的所有邻居节点发送该数据包。</li>\n      <li>特点：\n        <ul>\n          <li>简单直接，无需复杂的路由表。</li>\n          <li>缺点：产生大量重复数据包，浪费带宽资源。</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ol>\n\n<hr />\n\n<h3 id=\"自适应算法adaptive-algorithms\">自适应算法（Adaptive Algorithms）</h3>\n\n<ol>\n  <li><strong>Distance Vector Routing（距离向量路由）</strong>\n    <ul>\n      <li>每个路由器维护一张表，记录其到所有其他节点的估计距离（称为距离向量表）。</li>\n      <li>路由器会周期性地向邻居通告自己的距离向量表，并根据收到的邻居距离向量表更新自己的表。</li>\n      <li>示例：J估计到C的延迟\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>JAC: 25 + 8 = 33  \nJIC: 18 + 10 = 28  \nJHC: 19 + 12 = 31  \nJKC: 36 + 6 = 42  \n因此，J -&gt; I -&gt; C 的延迟最低，为28。\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>Link State Routing（链路状态路由）</strong>\n    <ul>\n      <li>通过广播链路状态信息，所有路由器共享整个网络的拓扑图，并使用Dijkstra算法计算最短路径。</li>\n      <li>基本步骤：\n        <ol>\n          <li>发现直接连接的邻居节点。</li>\n          <li>确定链路成本（如延迟或带宽的反比）。</li>\n          <li>构建链路状态包（LSP）。</li>\n          <li>将LSP发送给网络中的其他所有路由器。</li>\n          <li>使用Dijkstra算法计算到其他节点的最短路径。</li>\n        </ol>\n      </li>\n    </ul>\n  </li>\n</ol>\n\n<hr />\n\n<h3 id=\"其他路由算法\">其他路由算法</h3>\n\n<ol>\n  <li><strong>Hierarchical Routing（分层路由）</strong>\n    <ul>\n      <li>将网络划分为多个区域或层次，每个路由器只需维护所在区域的详细路由信息和其他区域的汇总信息。</li>\n      <li>优点：\n        <ul>\n          <li>路由表规模减小，内存需求降低。</li>\n          <li>计算路由最优解所需的时间减少。</li>\n        </ul>\n      </li>\n      <li>缺点：\n        <ul>\n          <li>路径可能不是全局最优路径，但接近最优。</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>Broadcasting Routing（广播路由）</strong>\n    <ul>\n      <li>目标：将数据包发送给网络中的所有主机。</li>\n      <li>基础方法：\n        <ul>\n          <li>Flooding：发送给所有邻居，可能产生大量重复包。</li>\n        </ul>\n      </li>\n      <li>改进方法：Reverse Path Forwarding（RPF）\n        <ul>\n          <li>检查数据包是否从最佳路径到达源。</li>\n          <li>如果是，则转发给其他节点；否则丢弃重复包。</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>Multicasting Routing（组播路由）</strong>\n    <ul>\n      <li>将网络中的节点划分为组，每个组构建生成树（Spanning Tree），组内的节点共享数据包。</li>\n      <li>适用于需要向特定小组传递信息的场景，例如视频会议或组播通信。</li>\n    </ul>\n  </li>\n</ol>\n\n<hr />\n\n<h3 id=\"示例题目与解答\">示例题目与解答</h3>\n\n<h4 id=\"为什么网络层需要路由算法路由算法的主要类别有哪些\">为什么网络层需要路由算法？路由算法的主要类别有哪些？</h4>\n\n<p>路由算法用于帮助网络层决定传入的数据包应该通过哪条输出线路传输，确保数据包能够正确高效地到达目的地。</p>\n<ul>\n  <li><strong>主要分类</strong>：\n    <ul>\n      <li>非自适应算法（如Shortest Path Routing和Flooding）。</li>\n      <li>自适应算法（如Distance Vector Routing和Link State Routing）。</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"dijkstra算法的基本步骤\">Dijkstra算法的基本步骤</h4>\n\n<p>Dijkstra算法用于计算从一个节点到网络中所有其他节点的最短路径。\n基本步骤：</p>\n<ol>\n  <li>初始化：为每个节点设置一个初始距离（通常为无穷大），将起点的距离设置为0。</li>\n  <li>选择当前未访问节点中距离最小的节点，将其标记为已访问。</li>\n  <li>更新邻居节点的距离，如果通过当前节点的路径更短，则更新邻居节点的最短路径值。</li>\n  <li>重复步骤2和3，直到所有节点都被访问。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BA%94-%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（五）路由算法'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-10-24T01:50:30+11:00'>Oct 24, 2024</time> </span> </div><h2 class='article__title'>计算机网络（五）路由算法</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（四）网络层",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9B%9B-%E7%BD%91%E7%BB%9C%E5%B1%82/",
      "date"     : "Oct 22, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#无连接-vs-面向连接\" id=\"markdown-toc-无连接-vs-面向连接\"><strong>无连接 vs. 面向连接</strong></a>    <ol>\n      <li><a href=\"#无连接datagram\" id=\"markdown-toc-无连接datagram\"><strong>无连接（Datagram）</strong></a></li>\n      <li><a href=\"#面向连接virtual-circuit\" id=\"markdown-toc-面向连接virtual-circuit\"><strong>面向连接（Virtual-Circuit）</strong></a></li>\n    </ol>\n  </li>\n  <li><a href=\"#tunneling\" id=\"markdown-toc-tunneling\"><strong>Tunneling</strong></a></li>\n  <li><a href=\"#fragmentation分片\" id=\"markdown-toc-fragmentation分片\"><strong>Fragmentation（分片）</strong></a></li>\n  <li><a href=\"#ipv4-datagram结构\" id=\"markdown-toc-ipv4-datagram结构\"><strong>IPv4 Datagram结构</strong></a></li>\n  <li><a href=\"#ip地址和子网\" id=\"markdown-toc-ip地址和子网\"><strong>IP地址和子网</strong></a>    <ol>\n      <li><a href=\"#ip地址\" id=\"markdown-toc-ip地址\"><strong>IP地址</strong></a></li>\n      <li><a href=\"#子网掩码\" id=\"markdown-toc-子网掩码\"><strong>子网掩码</strong></a></li>\n      <li><a href=\"#类地址classful-addressing\" id=\"markdown-toc-类地址classful-addressing\"><strong>类地址（Classful Addressing）</strong></a></li>\n      <li><a href=\"#cidrclassless-inter-domain-routing\" id=\"markdown-toc-cidrclassless-inter-domain-routing\"><strong>CIDR（Classless Inter-Domain Routing）</strong></a></li>\n    </ol>\n  </li>\n  <li><a href=\"#nat网络地址转换\" id=\"markdown-toc-nat网络地址转换\"><strong>NAT（网络地址转换）</strong></a></li>\n  <li><a href=\"#icpinternet-control-protocols\" id=\"markdown-toc-icpinternet-control-protocols\"><strong>ICP（Internet Control Protocols）</strong></a></li>\n</ol>\n\n<p><strong>网络层的作用</strong></p>\n<ul>\n  <li><strong>连接不同网络（互联）</strong>：使多个网络之间能够进行通信。</li>\n  <li><strong>路由</strong>：确定数据传输的最佳路径。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"无连接-vs-面向连接\"><strong>无连接 vs. 面向连接</strong></h3>\n\n<h4 id=\"无连接datagram\"><strong>无连接（Datagram）</strong></h4>\n<ul>\n  <li>类似于寄信，每个数据包都是独立的，走自己的路径。</li>\n  <li>不需要预先建立路径，数据包可能无序到达。</li>\n  <li>示例：互联网的数据传输。</li>\n</ul>\n\n<h4 id=\"面向连接virtual-circuit\"><strong>面向连接（Virtual-Circuit）</strong></h4>\n<ul>\n  <li>类似于打电话，通信开始前先建立稳定的路径。</li>\n  <li>所有数据包走同一路径，保证顺序到达。</li>\n  <li>示例：视频会议或VoIP通话。</li>\n</ul>\n\n<table>\n  <thead>\n    <tr>\n      <th><strong>比较</strong></th>\n      <th><strong>Datagram</strong></th>\n      <th><strong>Virtual-Circuit</strong></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>路径建立</strong></td>\n      <td>不需要建立连接。</td>\n      <td>需要建立连接。</td>\n    </tr>\n    <tr>\n      <td><strong>地址</strong></td>\n      <td>每个数据包都需要完整的地址信息。</td>\n      <td>数据包仅需简短的虚电路标识符。</td>\n    </tr>\n    <tr>\n      <td><strong>路由</strong></td>\n      <td>每个数据包独立决定路径。</td>\n      <td>预先确定好路径。</td>\n    </tr>\n    <tr>\n      <td><strong>路由器故障的影响</strong></td>\n      <td>仅影响当前的数据包传输。</td>\n      <td>会中断正在进行的通信。</td>\n    </tr>\n    <tr>\n      <td><strong>服务质量</strong></td>\n      <td>难以保证服务质量。</td>\n      <td>服务质量较容易保证。</td>\n    </tr>\n    <tr>\n      <td><strong>拥塞控制</strong></td>\n      <td>难以管理拥塞。</td>\n      <td>资源预留后更易控制拥塞。</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>总结</strong>：</p>\n<ul>\n  <li>Virtual-Circuit提供更好的QoS和拥塞控制。</li>\n  <li>Datagram灵活无需连接，但需要较大的路由表和额外开销。</li>\n  <li><strong>IP协议使用Datagram网络。</strong></li>\n</ul>\n\n<hr />\n\n<h3 id=\"tunneling\"><strong>Tunneling</strong></h3>\n<ul>\n  <li>当源和目标处于同一网络，但中间有其他网络时使用。</li>\n  <li>源数据包被封装在另一个数据包中进行传输。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"fragmentation分片\"><strong>Fragmentation（分片）</strong></h3>\n<ul>\n  <li>将大数据包拆分成较小的片段，以适应网络的最大传输单元（MTU）。</li>\n</ul>\n\n<p><strong>分片类型</strong>：</p>\n<ol>\n  <li><strong>Transparent（透明分片）</strong>：每经过一个网络，都会分片和重组。</li>\n  <li><strong>Non-Transparent（非透明分片）</strong>：仅在目的地重组数据包。</li>\n</ol>\n\n<hr />\n\n<h3 id=\"ipv4-datagram结构\"><strong>IPv4 Datagram结构</strong></h3>\n\n<table>\n  <thead>\n    <tr>\n      <th><strong>字段</strong></th>\n      <th><strong>描述</strong></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>Version</strong></td>\n      <td>4位，表示协议版本（IPv4）。</td>\n    </tr>\n    <tr>\n      <td><strong>IHL</strong></td>\n      <td>头部长度，单位为32位（最小5，最大15）。</td>\n    </tr>\n    <tr>\n      <td><strong>Differentiated Services</strong></td>\n      <td>8位，用于定义QoS或优先级。</td>\n    </tr>\n    <tr>\n      <td><strong>Total Length</strong></td>\n      <td>16位，数据包总大小（最大65535字节）。</td>\n    </tr>\n    <tr>\n      <td><strong>Identification</strong></td>\n      <td>16位，标识数据包，用于分片重组。</td>\n    </tr>\n    <tr>\n      <td><strong>Flags (DF, MF)</strong></td>\n      <td>控制分片行为。</td>\n    </tr>\n    <tr>\n      <td><strong>Fragment Offset</strong></td>\n      <td>13位，当前分片在数据包中的位置。</td>\n    </tr>\n    <tr>\n      <td><strong>TTL</strong></td>\n      <td>8位，数据包的生存时间（跳数或秒）。</td>\n    </tr>\n    <tr>\n      <td><strong>Protocol</strong></td>\n      <td>8位，指明协议（例如TCP或UDP）。</td>\n    </tr>\n    <tr>\n      <td><strong>Header Checksum</strong></td>\n      <td>16位，仅验证头部的完整性。</td>\n    </tr>\n    <tr>\n      <td><strong>Source Address</strong></td>\n      <td>32位，发送方的IP地址。</td>\n    </tr>\n    <tr>\n      <td><strong>Destination Address</strong></td>\n      <td>32位，接收方的IP地址。</td>\n    </tr>\n    <tr>\n      <td><strong>Options</strong></td>\n      <td>可选字段，例如时间戳或路由控制。</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li><strong>头部大小</strong>：\n    <ul>\n      <li>最小：20字节（IHL=5）。</li>\n      <li>最大：60字节（IHL=15，包含选项）。</li>\n    </ul>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"ip地址和子网\"><strong>IP地址和子网</strong></h3>\n\n<h4 id=\"ip地址\"><strong>IP地址</strong></h4>\n<ul>\n  <li>表示网络中设备的位置，例如 <code class=\"language-plaintext highlighter-rouge\">192.168.0.1</code>。</li>\n</ul>\n\n<h4 id=\"子网掩码\"><strong>子网掩码</strong></h4>\n<ul>\n  <li>区分网络部分和主机部分，例如 <code class=\"language-plaintext highlighter-rouge\">192.168.1.0/24</code> 表示网络部分为24位。</li>\n</ul>\n\n<h4 id=\"类地址classful-addressing\"><strong>类地址（Classful Addressing）</strong></h4>\n<ul>\n  <li>按固定的块划分IP地址：\n    <ul>\n      <li><strong>Class A</strong>：大规模网络。</li>\n      <li><strong>Class B</strong>：中等规模网络。</li>\n      <li><strong>Class C</strong>：小规模网络。</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"cidrclassless-inter-domain-routing\"><strong>CIDR（Classless Inter-Domain Routing）</strong></h4>\n<ul>\n  <li>允许灵活分配地址块，例如 <code class=\"language-plaintext highlighter-rouge\">/24</code>。</li>\n</ul>\n\n<p><strong>示例</strong>：</p>\n<ul>\n  <li>子网 <code class=\"language-plaintext highlighter-rouge\">135.46.56.0/21</code> 最多可容纳 ( 2^{11} = 2048 ) 个地址。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"nat网络地址转换\"><strong>NAT（网络地址转换）</strong></h3>\n<ul>\n  <li>用一个外部IP地址表示多个内部IP地址，节约IP地址空间。</li>\n</ul>\n\n<p><strong>与五层架构的冲突</strong>：</p>\n<ul>\n  <li>打破层次透明性：NAT修改了网络层（IP地址）和传输层（端口号）数据。</li>\n  <li>源地址和端口被改变，影响端到端的通信透明性。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"icpinternet-control-protocols\"><strong>ICP（Internet Control Protocols）</strong></h3>\n\n<ol>\n  <li><strong>ICMP（互联网控制消息协议）</strong>：\n    <ul>\n      <li>报告错误和诊断（如ping和traceroute）。</li>\n    </ul>\n  </li>\n  <li><strong>ARP（地址解析协议）</strong>：\n    <ul>\n      <li>将IP地址映射到MAC地址，用于本地通信。</li>\n    </ul>\n  </li>\n  <li><strong>DHCP（动态主机配置协议）</strong>：\n    <ul>\n      <li>动态分配IP地址给设备，使其接入网络。</li>\n    </ul>\n  </li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9B%9B-%E7%BD%91%E7%BB%9C%E5%B1%82/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（四）网络层'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-10-22T10:01:45+11:00'>Oct 22, 2024</time> </span> </div><h2 class='article__title'>计算机网络（四）网络层</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（三）MAC层",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%B8%89-MAC%E5%B1%82/",
      "date"     : "Oct 21, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#媒体访问控制mac层\" id=\"markdown-toc-媒体访问控制mac层\">媒体访问控制（MAC）层</a></li>\n  <li><a href=\"#静态信道分配\" id=\"markdown-toc-静态信道分配\">静态信道分配</a></li>\n  <li><a href=\"#aloha-协议\" id=\"markdown-toc-aloha-协议\">ALOHA 协议</a>    <ol>\n      <li><a href=\"#纯-aloha\" id=\"markdown-toc-纯-aloha\">纯 ALOHA</a></li>\n      <li><a href=\"#时隙-aloha\" id=\"markdown-toc-时隙-aloha\">时隙 ALOHA</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#载波侦听多路访问csma\" id=\"markdown-toc-载波侦听多路访问csma\">载波侦听多路访问（CSMA）</a>    <ol>\n      <li><a href=\"#持久性-csma\" id=\"markdown-toc-持久性-csma\">持久性 CSMA</a></li>\n      <li><a href=\"#非持久性-csma\" id=\"markdown-toc-非持久性-csma\">非持久性 CSMA</a></li>\n      <li><a href=\"#p-持久性-csma\" id=\"markdown-toc-p-持久性-csma\">p-持久性 CSMA</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#无碰撞协议\" id=\"markdown-toc-无碰撞协议\">无碰撞协议</a>    <ol>\n      <li><a href=\"#位图协议\" id=\"markdown-toc-位图协议\">位图协议</a></li>\n      <li><a href=\"#二进制倒计时协议\" id=\"markdown-toc-二进制倒计时协议\">二进制倒计时协议</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#有限竞争协议\" id=\"markdown-toc-有限竞争协议\">有限竞争协议</a>    <ol>\n      <li><a href=\"#自适应树遍历\" id=\"markdown-toc-自适应树遍历\">自适应树遍历</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#maca-协议\" id=\"markdown-toc-maca-协议\">MACA 协议</a></li>\n  <li><a href=\"#以太网帧格式与性能\" id=\"markdown-toc-以太网帧格式与性能\">以太网帧格式与性能</a>    <ol>\n      <li><a href=\"#帧格式\" id=\"markdown-toc-帧格式\">帧格式：</a></li>\n      <li><a href=\"#性能\" id=\"markdown-toc-性能\">性能：</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h3 id=\"媒体访问控制mac层\">媒体访问控制（MAC）层</h3>\n\n<p>媒体访问控制（MAC）层负责管理广播网络中共享通信信道的访问，确定多个用户如何高效共享信道，最小化冲突并最大化吞吐量。</p>\n\n<hr />\n\n<h3 id=\"静态信道分配\">静态信道分配</h3>\n<p>静态信道分配将信道固定分配给不同用户，适用于用户数量已知且稳定的场景。</p>\n\n<ul>\n  <li><strong>方法：</strong>\n    <ul>\n      <li><strong>时分多路复用（TDM）：</strong> 将时间分成固定时隙，每个时隙分配给特定用户。</li>\n      <li><strong>频分多路复用（FDM）：</strong> 将信道分成固定的频率段，每个用户分配一个频段。</li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>示例：</strong>\n调频广播（FM Radio）使用静态信道分配，因为信道数量稳定且每个频段永久分配。</p>\n\n<p><strong>优点：</strong></p>\n<ul>\n  <li>简单易用</li>\n  <li>分配公平且预测性强</li>\n</ul>\n\n<p><strong>缺点：</strong></p>\n<ul>\n  <li>负载变化或突发流量下效率低下</li>\n  <li>缺乏动态调整能力</li>\n</ul>\n\n<hr />\n\n<h3 id=\"aloha-协议\">ALOHA 协议</h3>\n<p>ALOHA 协议无需中央控制，通过冲突后重传的方式动态分配信道，效率因流量负载而异。</p>\n\n<h4 id=\"纯-aloha\">纯 ALOHA</h4>\n<ul>\n  <li>用户有数据时随时传输。</li>\n  <li>如果发生冲突，随机延迟后重传。</li>\n  <li>在低负载下简单有效，但高流量下因碰撞频繁而效率低。</li>\n</ul>\n\n<h4 id=\"时隙-aloha\">时隙 ALOHA</h4>\n<ul>\n  <li>将时间分成固定时隙，必须在时隙开始时传输。</li>\n  <li>通过减少碰撞概率提高吞吐量，相比纯 ALOHA 效率更高。</li>\n</ul>\n\n<p><strong>对比：</strong></p>\n<ul>\n  <li>纯 ALOHA 在低负载时延迟较小，但碰撞率较高。</li>\n  <li>时隙 ALOHA 通过同步传输减少碰撞，但会引入一定延迟。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"载波侦听多路访问csma\">载波侦听多路访问（CSMA）</h3>\n<p>CSMA 通过在传输前侦听信道减少碰撞，具体包括以下几种变体：</p>\n\n<h4 id=\"持久性-csma\">持久性 CSMA</h4>\n<ul>\n  <li>持续监测信道。</li>\n  <li>信道空闲时立即传输，若发生冲突，随机延迟后重试。</li>\n</ul>\n\n<h4 id=\"非持久性-csma\">非持久性 CSMA</h4>\n<ul>\n  <li>周期性检测信道；信道忙时等待随机时间后重试。</li>\n  <li>减少碰撞，但可能增加信道空闲时间。</li>\n</ul>\n\n<h4 id=\"p-持久性-csma\">p-持久性 CSMA</h4>\n<ul>\n  <li>适用于分时信道：\n    <ul>\n      <li>信道空闲时以概率 $ p $ 传输；</li>\n      <li>以 $ 1-p $ 的概率推迟到下一时隙再检测。</li>\n    </ul>\n  </li>\n  <li>在持久性和冲突风险之间寻找平衡。</li>\n</ul>\n\n<p><strong>关键观察：</strong></p>\n<ul>\n  <li>CSMA 在各种负载下均优于 ALOHA，尤其在高流量下。</li>\n  <li>非持久性和低概率持久性变体在高负载条件下表现更优。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"无碰撞协议\">无碰撞协议</h3>\n<p>无碰撞协议通过有序访问信道完全避免冲突。</p>\n\n<h4 id=\"位图协议\">位图协议</h4>\n<ul>\n  <li>每个站点通过一个位（bit）声明是否有数据要发送。</li>\n  <li>根据站点顺序依次传输数据。</li>\n  <li>效率：$ \\text{利用率} = \\frac{d}{d+N} $，其中 $ d $ 为帧长度，$ N $ 为站点数量。</li>\n</ul>\n\n<h4 id=\"二进制倒计时协议\">二进制倒计时协议</h4>\n<ul>\n  <li>站点按二进制地址优先级排序，逐位解决冲突。</li>\n  <li>效率：$ \\text{利用率} = \\frac{d}{d+\\log N} $。</li>\n</ul>\n\n<p><strong>形象类比：</strong>\n二进制倒计时类似“举手规则”，优先权较高的参与者更早获得发言权。</p>\n\n<hr />\n\n<h3 id=\"有限竞争协议\">有限竞争协议</h3>\n<p>结合竞争协议和无碰撞协议的优点：</p>\n\n<ul>\n  <li>低负载时表现出色，延迟短（类似竞争协议）。</li>\n  <li>高负载时无需处理碰撞，提高效率（类似无碰撞协议）。</li>\n</ul>\n\n<h4 id=\"自适应树遍历\">自适应树遍历</h4>\n<ul>\n  <li>采用分层结构，将冲突站点分成更小的组逐层解决。</li>\n  <li>站点按“树”结构下移，直到只剩一个站点成功传输。</li>\n</ul>\n\n<p><strong>示例流程：</strong></p>\n<ul>\n  <li>初始发生冲突的站点分组，逐层减少冲突，直到所有站点成功传输。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"maca-协议\">MACA 协议</h3>\n<p>MACA（多路访问冲突避免）通过控制消息解决隐蔽终端和暴露终端问题：</p>\n\n<ul>\n  <li><strong>隐蔽终端问题：</strong> 节点间因彼此不可见而造成冲突。</li>\n  <li><strong>暴露终端问题：</strong> 节点错误地认为不能同时传输，导致效率降低。</li>\n</ul>\n\n<p><strong>解决方法：</strong></p>\n<ol>\n  <li>发送方发送“发送请求（RTS）”。</li>\n  <li>接收方回复“发送许可（CTS）”，通知附近节点。</li>\n  <li>数据传输完成后，通过“确认（ACK）”释放信道。</li>\n</ol>\n\n<p><strong>优势：</strong></p>\n<ul>\n  <li>避免隐蔽节点的碰撞。</li>\n  <li>允许暴露节点同时传输，提高效率。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"以太网帧格式与性能\">以太网帧格式与性能</h3>\n<p>以太网利用 MAC 层进行信道访问，因其简单和可扩展性广泛应用。</p>\n\n<h4 id=\"帧格式\">帧格式：</h4>\n<ul>\n  <li><strong>前导码：</strong> 用于同步。</li>\n  <li><strong>目标/源地址：</strong> 标识发送方和接收方。</li>\n  <li><strong>载荷：</strong> 传输数据。</li>\n  <li><strong>CRC 校验：</strong> 检测传输错误。</li>\n</ul>\n\n<h4 id=\"性能\">性能：</h4>\n<ul>\n  <li><strong>CSMA/CD（冲突检测）：</strong> 通过检测和解决冲突高效利用信道。</li>\n  <li>吞吐量依赖流量负载，在中等负载条件下表现最佳。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"总结\">总结</h3>\n<p>MAC 层在共享信道访问中起着关键作用。根据流量模式、负载和网络需求选择合适的协议（静态、ALOHA、CSMA 等），在简单性、效率和公平性之间寻求平衡。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%B8%89-MAC%E5%B1%82/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（三）MAC层'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-10-21T21:22:11+11:00'>Oct 21, 2024</time> </span> </div><h2 class='article__title'>计算机网络（三）MAC层</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（二）Data Link层",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BA%8C-Data-Link%E5%B1%82/",
      "date"     : "Oct 20, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#数据链路层的功能-functions-of-the-data-link-layer\" id=\"markdown-toc-数据链路层的功能-functions-of-the-data-link-layer\">数据链路层的功能 (Functions of the Data Link Layer)</a></li>\n  <li><a href=\"#成帧-framing\" id=\"markdown-toc-成帧-framing\">成帧 (Framing)</a>    <ol>\n      <li><a href=\"#什么是成帧-what-is-framing\" id=\"markdown-toc-什么是成帧-what-is-framing\">什么是成帧？ (What is Framing)</a></li>\n      <li><a href=\"#成帧方法-framing-methods\" id=\"markdown-toc-成帧方法-framing-methods\">成帧方法 (Framing Methods)</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#差错检测与修复-error-detection-and-correction\" id=\"markdown-toc-差错检测与修复-error-detection-and-correction\">差错检测与修复 (Error Detection and Correction)</a>    <ol>\n      <li><a href=\"#差错修复-error-correction\" id=\"markdown-toc-差错修复-error-correction\">差错修复 (Error Correction)</a></li>\n      <li><a href=\"#差错检测-error-detection\" id=\"markdown-toc-差错检测-error-detection\">差错检测 (Error Detection)</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#汉明距离-hamming-distance\" id=\"markdown-toc-汉明距离-hamming-distance\">汉明距离 (Hamming Distance)</a></li>\n  <li><a href=\"#差错修复方法汉明码-hamming-code\" id=\"markdown-toc-差错修复方法汉明码-hamming-code\">差错修复方法：汉明码 (Hamming Code)</a></li>\n  <li><a href=\"#差错检测方法-error-detection-methods\" id=\"markdown-toc-差错检测方法-error-detection-methods\">差错检测方法 (Error Detection Methods)</a></li>\n  <li><a href=\"#差错检测方法的比较-comparison-of-error-detection-methods\" id=\"markdown-toc-差错检测方法的比较-comparison-of-error-detection-methods\">差错检测方法的比较 (Comparison of Error Detection Methods)</a></li>\n  <li><a href=\"#流量控制-flow-control\" id=\"markdown-toc-流量控制-flow-control\">流量控制 (Flow Control)</a>    <ol>\n      <li><a href=\"#流量控制问题\" id=\"markdown-toc-流量控制问题\">流量控制问题</a></li>\n      <li><a href=\"#流量控制方法\" id=\"markdown-toc-流量控制方法\">流量控制方法</a></li>\n      <li><a href=\"#停等协议-stop-and-wait-protocol\" id=\"markdown-toc-停等协议-stop-and-wait-protocol\">停等协议 (Stop and Wait Protocol)</a></li>\n      <li><a href=\"#滑动窗口协议-sliding-window-protocol\" id=\"markdown-toc-滑动窗口协议-sliding-window-protocol\">滑动窗口协议 (Sliding Window Protocol)</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#链路利用率-link-utilization\" id=\"markdown-toc-链路利用率-link-utilization\">链路利用率 (Link Utilization)</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<p>数据链路层的主要目的是在两台相邻机器之间实现“帧”的可靠和高效通信。</p>\n<ul>\n  <li><strong>处理传输错误</strong>：确保数据传输的完整性。</li>\n  <li><strong>流量控制</strong>：调节发送方与接收方的速度差异，避免缓冲区溢出或传输中断。</li>\n</ul>\n\n<h2 id=\"数据链路层的功能-functions-of-the-data-link-layer\">数据链路层的功能 (Functions of the Data Link Layer)</h2>\n\n<ol>\n  <li><strong>为网络层提供定义良好的服务接口</strong>\n    <ul>\n      <li>接收来自网络层的分组 (packet)，构造数据帧 (frame) 并传输。</li>\n      <li>确保网络层能够在可靠的基础上传输数据。</li>\n    </ul>\n  </li>\n  <li><strong>处理传输错误</strong>\n    <ul>\n      <li>检测和纠正物理层可能引入的错误，确保数据帧的完整性。</li>\n    </ul>\n  </li>\n  <li><strong>数据流调节 (Flow Regulation)</strong>\n    <ul>\n      <li>调节发送方与接收方之间的数据流量，避免数据丢失或缓冲区溢出。</li>\n    </ul>\n  </li>\n  <li><strong>其他具体功能</strong>\n    <ul>\n      <li>流量控制：控制帧的传输速度以适配接收方能力。</li>\n      <li>差错检测与修复：发现并纠正传输中的错误。</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"成帧-framing\">成帧 (Framing)</h2>\n\n<h3 id=\"什么是成帧-what-is-framing\">什么是成帧？ (What is Framing)</h3>\n<p>成帧是将连续的比特流分割为独立的、可管理的数据单元“帧”的过程。<br />\n<strong>目的</strong>：在不可靠的物理层基础上，为数据传输提供可靠性。</p>\n\n<h3 id=\"成帧方法-framing-methods\">成帧方法 (Framing Methods)</h3>\n\n<ol>\n  <li><strong>字符计数法 (Character Count)</strong>\n    <ul>\n      <li>在帧头中记录帧的字符数量。</li>\n      <li>缺点：如果帧头数据损坏，会导致后续数据帧无法正确解析（连锁反应）。</li>\n    </ul>\n  </li>\n  <li><strong>字节填充法 (Byte Stuffing)</strong>\n    <ul>\n      <li>使用特殊的“标志字节”标记每个帧的开始和结束。</li>\n      <li>如果标志字节出现在数据中，则进行字节填充以避免混淆。</li>\n    </ul>\n  </li>\n  <li><strong>位填充法 (Bit Stuffing)</strong>\n    <ul>\n      <li>帧以特殊位模式 (01111110) 开始和结束。</li>\n      <li>若数据中出现连续5个1，则插入一个0，以避免与标志冲突。</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"差错检测与修复-error-detection-and-correction\">差错检测与修复 (Error Detection and Correction)</h2>\n\n<h3 id=\"差错修复-error-correction\">差错修复 (Error Correction)</h3>\n<ul>\n  <li>适用于噪声较大的传输介质（如无线信道）。</li>\n  <li>能够在不需要重传的情况下修复数据，适合不可靠的连接环境。</li>\n</ul>\n\n<h3 id=\"差错检测-error-detection\">差错检测 (Error Detection)</h3>\n<ul>\n  <li>适用于错误率较低的传输介质（如高质量的有线连接）。</li>\n  <li>更高效但需要重传数据。</li>\n</ul>\n\n<p>差错检测和修复的关键在于假设错误发生的最大次数。</p>\n\n<h2 id=\"汉明距离-hamming-distance\">汉明距离 (Hamming Distance)</h2>\n\n<p>汉明距离是指两个字符串在相应位置上不同字符的数量。</p>\n\n<ul>\n  <li>数据长度为 $ n $ 位，通过编码增加 $ k $ 位校验码，形成 $ n+k $ 位的码字。</li>\n  <li><strong>d+1</strong>：可以检测最多 d 个错误。</li>\n  <li><strong>2d+1</strong>：可以修复最多 d 个错误。</li>\n</ul>\n\n<h2 id=\"差错修复方法汉明码-hamming-code\">差错修复方法：汉明码 (Hamming Code)</h2>\n\n<ul>\n  <li>校验位的数量与数据位长度相关，至少需要 $ k $ 位校验位。</li>\n  <li>根据特定规则分配校验位，仅能修复 1 位错误。</li>\n</ul>\n\n<h2 id=\"差错检测方法-error-detection-methods\">差错检测方法 (Error Detection Methods)</h2>\n\n<ol>\n  <li><strong>奇偶校验 (Parity Check)</strong>\n    <ul>\n      <li>统计数据中 1 的数量，添加一个奇偶校验位。</li>\n      <li>汉明距离为 2，能检测 1 位错误但无法修复。</li>\n    </ul>\n  </li>\n  <li><strong>互联网校验和 (Internet Checksum)</strong>\n    <ul>\n      <li>基于 16 位字的校验和。</li>\n      <li>汉明距离为 2，适合检测 1 位错误。</li>\n    </ul>\n  </li>\n  <li><strong>循环冗余校验 (CRC)</strong>\n    <ul>\n      <li>功能更强大的检测方法，通常使用 32 位 CRC。</li>\n      <li>汉明距离约为 4，能够检测甚至部分修复多个错误。</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"差错检测方法的比较-comparison-of-error-detection-methods\">差错检测方法的比较 (Comparison of Error Detection Methods)</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>方法</th>\n      <th>校验位长度</th>\n      <th>汉明距离</th>\n      <th>能力</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>奇偶校验 (Parity)</td>\n      <td>1 位</td>\n      <td>2</td>\n      <td>检测 1 位错误</td>\n    </tr>\n    <tr>\n      <td>校验和 (Checksum)</td>\n      <td>16 位</td>\n      <td>2</td>\n      <td>检测 1 位错误</td>\n    </tr>\n    <tr>\n      <td>CRC</td>\n      <td>32 位</td>\n      <td>4</td>\n      <td>检测多位错误并可能部分修复</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"流量控制-flow-control\">流量控制 (Flow Control)</h2>\n\n<h3 id=\"流量控制问题\">流量控制问题</h3>\n<p>当发送方速度快于接收方处理速度时，可能导致缓冲区溢出或数据丢失。</p>\n\n<h3 id=\"流量控制方法\">流量控制方法</h3>\n<ol>\n  <li><strong>基于反馈的流量控制 (Feedback-based Flow Control)</strong>\n    <ul>\n      <li>接收方向发送方发送控制信号以调节流量。</li>\n    </ul>\n  </li>\n  <li><strong>基于速率的流量控制 (Rate-based Flow Control)</strong>\n    <ul>\n      <li>发送方按预设速率发送数据，无需接收方反馈。</li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"停等协议-stop-and-wait-protocol\">停等协议 (Stop and Wait Protocol)</h3>\n<ul>\n  <li>每发送一帧后，发送方需等待接收方的确认（ACK）。</li>\n</ul>\n\n<h3 id=\"滑动窗口协议-sliding-window-protocol\">滑动窗口协议 (Sliding Window Protocol)</h3>\n<p>允许发送方同时发送多帧数据，提高传输效率。</p>\n\n<ol>\n  <li><strong>回退 N (Go-Back-N)</strong>\n    <ul>\n      <li>发送方窗口大小为 $ N $，接收方窗口大小为 1。</li>\n      <li>出现错误时，重传错误帧及其后的所有帧。</li>\n    </ul>\n  </li>\n  <li><strong>选择性重传 (Selective Repeat)</strong>\n    <ul>\n      <li>接收方窗口可以接收任意位置的帧，出错时只重传丢失的特定帧。</li>\n      <li>使用负确认（NAK）指示具体错误位置。</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"链路利用率-link-utilization\">链路利用率 (Link Utilization)</h2>\n\n<ul>\n  <li><strong>传输时间 (Tf)</strong>：与帧大小和带宽相关。</li>\n  <li><strong>传播时间 (Tp)</strong>：与物理距离相关。</li>\n</ul>\n\n<p>优化链路利用率需要平衡这些因素，例如 $ Tf = 2Tp $ 时达到最大利用率。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>数据链路层在计算机网络中扮演着关键角色：</p>\n<ul>\n  <li>提供可靠的帧传输服务。</li>\n  <li>实现有效的差错检测与修复。</li>\n  <li>管理相邻节点间的通信。</li>\n  <li>为网络层提供稳健接口，提升整个网络的通信效率与可靠性。</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BA%8C-Data-Link%E5%B1%82/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（二）Data Link层'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-10-20T15:34:56+11:00'>Oct 20, 2024</time> </span> </div><h2 class='article__title'>计算机网络（二）Data Link层</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "计算机网络（一）物理层",
      "category" : "Computer Network",
      "tags"     : "Computer Network",
      "url"      : "/zh-cn/computer%20network/2024/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%B8%80-%E7%89%A9%E7%90%86%E5%B1%82/",
      "date"     : "Oct 19, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#物理层的作用\" id=\"markdown-toc-物理层的作用\"><strong>物理层的作用</strong></a></li>\n  <li><a href=\"#bandwidth-和-delay\" id=\"markdown-toc-bandwidth-和-delay\"><strong>Bandwidth 和 Delay</strong></a>    <ol>\n      <li><a href=\"#bandwidth-带宽\" id=\"markdown-toc-bandwidth-带宽\"><strong>Bandwidth (带宽)</strong></a></li>\n      <li><a href=\"#delay-延迟\" id=\"markdown-toc-delay-延迟\"><strong>Delay (延迟)</strong></a></li>\n    </ol>\n  </li>\n  <li><a href=\"#传输介质\" id=\"markdown-toc-传输介质\"><strong>传输介质</strong></a>    <ol>\n      <li><a href=\"#wired-transmission\" id=\"markdown-toc-wired-transmission\"><strong>Wired Transmission</strong></a></li>\n      <li><a href=\"#wireless-transmission\" id=\"markdown-toc-wireless-transmission\"><strong>Wireless Transmission</strong></a></li>\n    </ol>\n  </li>\n  <li><a href=\"#link-类型\" id=\"markdown-toc-link-类型\"><strong>Link 类型</strong></a></li>\n  <li><a href=\"#multiplexing-复用\" id=\"markdown-toc-multiplexing-复用\"><strong>Multiplexing (复用)</strong></a></li>\n  <li><a href=\"#modulation-调制\" id=\"markdown-toc-modulation-调制\"><strong>Modulation (调制)</strong></a></li>\n  <li><a href=\"#baud-rate-和-bit-rate\" id=\"markdown-toc-baud-rate-和-bit-rate\"><strong>Baud Rate 和 Bit Rate</strong></a></li>\n  <li><a href=\"#nyquist-定理\" id=\"markdown-toc-nyquist-定理\"><strong>Nyquist 定理</strong></a></li>\n  <li><a href=\"#shannon-定理\" id=\"markdown-toc-shannon-定理\"><strong>Shannon 定理</strong></a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h3 id=\"物理层的作用\"><strong>物理层的作用</strong></h3>\n<p>物理层负责原始数据比特流在不同物理媒介上的传输。它提供电气、机械、功能和程序化接口，支持设备间的通信。物理层还定义了信号编码、传输速率、传输方向、拓扑等。</p>\n\n<p><strong>示例</strong>:</p>\n<ul>\n  <li>在光纤中，物理层使用光信号传输数据。</li>\n  <li>在双绞线上，使用电信号传输数据。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"bandwidth-和-delay\"><strong>Bandwidth 和 Delay</strong></h3>\n\n<h4 id=\"bandwidth-带宽\"><strong>Bandwidth (带宽)</strong></h4>\n<ul>\n  <li>带宽表示信道能够传输的最大数据速率，单位为比特/秒（bps）。</li>\n  <li>高带宽意味着更多数据可以在同一时间传输。</li>\n</ul>\n\n<p><strong>示例</strong>:</p>\n<ul>\n  <li><strong>语音传输</strong>: 通话需要1 Kbps左右的带宽。</li>\n  <li><strong>单模光纤</strong>: 提供高达1 Tbit/sec的带宽，适合远距离高速通信。</li>\n</ul>\n\n<h4 id=\"delay-延迟\"><strong>Delay (延迟)</strong></h4>\n<ul>\n  <li>延迟指的是数据从发送方到接收方所需的时间。</li>\n  <li><strong>延迟公式</strong>:\n$\n\\text{Latency} = T\\text{-delay} + P\\text{-delay}\n$\n    <ul>\n      <li><strong>Transmission delay (T-delay)</strong>: 消息长度（位）/ 传输速率（位/秒）</li>\n      <li><strong>Propagation delay (P-delay)</strong>: 信道长度（米）/ 信号速度（米/秒）</li>\n    </ul>\n  </li>\n</ul>\n\n<p><strong>示例1</strong>:\n家庭计算机通过56 Kbps调制解调器连接到ISP服务器：</p>\n<ul>\n  <li>帧大小 = 5600位，信号速度 = $ \\frac{2}{3}C = 200,000 $公里/秒，链路长度 = 5公里。</li>\n  <li>$ T\\text{-delay} = \\frac{5600}{56,000} \\approx 0.1 $ 秒。</li>\n  <li>$ P\\text{-delay} = \\frac{5}{200,000} \\approx 25 $微秒。</li>\n</ul>\n\n<p><strong>示例2</strong>:\n全国光宽带链路:</p>\n<ul>\n  <li>链路长度 = 1000公里，带宽 = 100 Mbps。</li>\n  <li>$ T\\text{-delay} = \\frac{5600}{100,000,000} = 0.000056 $ 秒。</li>\n  <li>$ P\\text{-delay} = \\frac{1000}{300,000} \\approx 3.33 $毫秒。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"传输介质\"><strong>传输介质</strong></h3>\n\n<h4 id=\"wired-transmission\"><strong>Wired Transmission</strong></h4>\n<ul>\n  <li><strong>类型</strong>: 双绞线、同轴电缆、光纤。</li>\n  <li><strong>优缺点</strong>:\n    <ul>\n      <li><strong>双绞线</strong>: 成本低、带宽低、抗干扰弱。</li>\n      <li><strong>同轴电缆</strong>: 带宽高、抗干扰能力强。</li>\n      <li><strong>光纤</strong>: 带宽高、延迟低、安全性高，但价格昂贵。</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"wireless-transmission\"><strong>Wireless Transmission</strong></h4>\n<ul>\n  <li><strong>类型</strong>: 电磁波、卫星。</li>\n  <li><strong>优缺点</strong>:\n    <ul>\n      <li><strong>无线电波</strong>: 移动性强，但带宽有限，延迟波动大。</li>\n      <li><strong>卫星</strong>: 覆盖广泛，但延迟高，信号易受干扰。</li>\n    </ul>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"link-类型\"><strong>Link 类型</strong></h3>\n\n<ul>\n  <li><strong>Simplex (单工)</strong>: 数据只能单向传输（如广播）。</li>\n  <li><strong>Half-Duplex (半双工)</strong>: 数据可以双向传输，但不能同时进行（如对讲机）。</li>\n  <li><strong>Full-Duplex (全双工)</strong>: 数据可以双向同时传输（如电话）。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"multiplexing-复用\"><strong>Multiplexing (复用)</strong></h3>\n\n<ul>\n  <li><strong>TDM (时分复用)</strong>: 在时间上划分时隙，用户轮流使用信道。</li>\n  <li><strong>FDM (频分复用)</strong>: 不同用户使用不同的频段。</li>\n  <li><strong>CDMA (码分多址)</strong>: 使用不同的码来区分用户。</li>\n</ul>\n\n<p><strong>示例</strong>:</p>\n<ul>\n  <li><strong>TDM</strong>: 时隙分配给每个用户，避免冲突。</li>\n  <li><strong>FDM</strong>: 调频广播分配不同频段给各电台。</li>\n  <li><strong>CDMA</strong>: 手机通信中的重要技术。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"modulation-调制\"><strong>Modulation (调制)</strong></h3>\n\n<p>调制是将数字信号转换为适合传输的模拟信号。</p>\n\n<ul>\n  <li><strong>基带信号 (Baseband)</strong>: 未经调制的低频信号。</li>\n  <li><strong>通带信号 (Passband)</strong>: 调制后的高频信号。</li>\n</ul>\n\n<p><strong>调制方式</strong>:</p>\n<ol>\n  <li><strong>ASK (振幅键控)</strong>: 使用不同振幅表示0和1。</li>\n  <li><strong>FSK (频移键控)</strong>: 使用不同频率表示0和1。</li>\n  <li><strong>PSK (相移键控)</strong>: 使用不同相位表示0和1。</li>\n</ol>\n\n<hr />\n\n<h3 id=\"baud-rate-和-bit-rate\"><strong>Baud Rate 和 Bit Rate</strong></h3>\n\n<ul>\n  <li><strong>Symbol Rate (Baud Rate)</strong>: 每秒传输的符号数。</li>\n  <li><strong>Bit Rate</strong>: 每秒传输的比特数。</li>\n</ul>\n\n<p>关系公式:\n$\n\\text{Bit Rate} = \\text{Baud Rate} \\times \\text{每符号位数}\n$</p>\n\n<p><strong>示例</strong>:</p>\n<ul>\n  <li>每秒1200个符号，每符号携带2比特，则比特率为2400 bps。</li>\n</ul>\n\n<hr />\n\n<h3 id=\"nyquist-定理\"><strong>Nyquist 定理</strong></h3>\n\n<ul>\n  <li>在无噪声信道中，最大数据速率:\n$\n\\text{Max Data Rate} = 2B \\cdot \\log_2(V)\n$</li>\n  <li>$ B $: 信道带宽。</li>\n  <li>$ V $: 信号级数。</li>\n</ul>\n\n<p><strong>示例</strong>:\n信道带宽为3000 Hz，信号级数为8，则最大数据速率:\n$\n2 \\cdot 3000 \\cdot \\log_2(8) = 18,000 \\text{ bps}\n$</p>\n\n<hr />\n\n<h3 id=\"shannon-定理\"><strong>Shannon 定理</strong></h3>\n\n<p>在有噪声信道中，最大数据速率:\n$\n\\text{Max Data Rate} = B \\cdot \\log_2(1 + \\frac{S}{N})\n$</p>\n<ul>\n  <li>$ S/N $: 信噪比。</li>\n</ul>\n\n<p><strong>示例</strong>:\n信道带宽为3000 Hz，信噪比为100，则最大数据速率:\n$\n3000 \\cdot \\log_2(1 + 100) \\approx 19,931 \\text{ bps}\n$</p>\n\n<hr />\n\n<h3 id=\"总结\">总结</h3>\n<p>物理层在通信系统中起着至关重要的作用，它连接硬件和网络层次的其他协议，确保数据在传输介质上可靠、高效地传递。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/computer%20network/2024/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%B8%80-%E7%89%A9%E7%90%86%E5%B1%82/'> <img src='https://www.koombea.com/wp-content/uploads/2024/02/Essentials-of-Enterprise-Networking-1100x616.webp' alt='计算机网络（一）物理层'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-10-19T06:45:23+11:00'>Oct 19, 2024</time> </span> </div><h2 class='article__title'>计算机网络（一）物理层</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Computer Network' class='article__tag'>Computer Network</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Redux词汇表",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/16/redux-2/",
      "date"     : "Sep 16, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#state\" id=\"markdown-toc-state\"><strong>State</strong></a></li>\n  <li><a href=\"#action\" id=\"markdown-toc-action\"><strong>Action</strong></a></li>\n  <li><a href=\"#reducer\" id=\"markdown-toc-reducer\"><strong>Reducer</strong></a></li>\n  <li><a href=\"#dispatch-function\" id=\"markdown-toc-dispatch-function\"><strong>Dispatch Function</strong></a></li>\n  <li><a href=\"#action-creator\" id=\"markdown-toc-action-creator\"><strong>Action Creator</strong></a></li>\n  <li><a href=\"#async-action\" id=\"markdown-toc-async-action\"><strong>Async Action</strong></a></li>\n  <li><a href=\"#middleware\" id=\"markdown-toc-middleware\"><strong>Middleware</strong></a></li>\n  <li><a href=\"#store\" id=\"markdown-toc-store\"><strong>Store</strong></a></li>\n  <li><a href=\"#store-creator\" id=\"markdown-toc-store-creator\"><strong>Store Creator</strong></a></li>\n  <li><a href=\"#store-enhancer\" id=\"markdown-toc-store-enhancer\"><strong>Store Enhancer</strong></a></li>\n</ol>\n\n<h3 id=\"state\"><strong>State</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type State = any</code></p>\n\n<p><strong>解释：</strong>\nState（状态）代表应用的整体数据结构，由 Redux 的 store 管理。它通常是一个多层嵌套的对象，保持应用的所有状态信息。确保 State 可序列化，以便于调试和持久化。</p>\n\n<h3 id=\"action\"><strong>Action</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type Action = Object</code></p>\n\n<p><strong>解释：</strong>\nAction 是一个描述“发生了什么”的简单对象，必须包含一个 <code class=\"language-plaintext highlighter-rouge\">type</code> 字段，用于标识具体的操作类型。Action 是改变 State 的唯一途径，通过 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 将其发送到 store。</p>\n\n<h3 id=\"reducer\"><strong>Reducer</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type Reducer&lt;S, A&gt; = (state: S, action: A) =&gt; S</code></p>\n\n<p><strong>解释：</strong>\nReducer 是一个纯函数，接收当前的 State 和 Action，返回一个新的 State。它根据 Action 的类型决定如何更新 State，确保 State 的不可变性。</p>\n\n<h3 id=\"dispatch-function\"><strong>Dispatch Function</strong></h3>\n<p><strong>类型签名：</strong></p>\n<pre><code class=\"language-flow\">type BaseDispatch = (a: Action) =&gt; Action\ntype Dispatch = (a: Action | AsyncAction) =&gt; any\n</code></pre>\n\n<p><strong>解释：</strong>\n<code class=\"language-plaintext highlighter-rouge\">dispatch</code> 是用于发送 Action 的函数。基础的 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 只能处理同步的普通 Action，而通过 Middleware 可以扩展 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 以处理异步 Action。</p>\n\n<h3 id=\"action-creator\"><strong>Action Creator</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type ActionCreator&lt;A, P extends any[] = any[]&gt; = (...args: P) =&gt; Action | AsyncAction</code></p>\n\n<p><strong>解释：</strong>\nAction Creator 是一个函数，用于创建 Action 对象。它封装了 Action 的创建逻辑，确保 Action 结构的一致性，通常与 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 一起使用。</p>\n\n<h3 id=\"async-action\"><strong>Async Action</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type AsyncAction = any</code></p>\n\n<p><strong>解释：</strong>\n异步 Action 是需要经过 Middleware 处理的 Action，通常用于处理异步操作如 API 请求。Middleware 会将异步 Action 转换为一个或多个普通 Action，以便 Reducer 处理。</p>\n\n<h3 id=\"middleware\"><strong>Middleware</strong></h3>\n<p><strong>类型签名：</strong></p>\n<pre><code class=\"language-flow\">type MiddlewareAPI = { dispatch: Dispatch, getState: () =&gt; State }\ntype Middleware = (api: MiddlewareAPI) =&gt; (next: Dispatch) =&gt; Dispatch\n</code></pre>\n\n<p><strong>解释：</strong>\nMiddleware 是扩展 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 功能的工具，允许在 Action 被发送到 Reducer 之前进行拦截、修改或执行副作用。常用于处理异步操作、日志记录等。</p>\n\n<h3 id=\"store\"><strong>Store</strong></h3>\n<p><strong>类型签名：</strong></p>\n<pre><code class=\"language-flow\">type Store = {\n  dispatch: Dispatch\n  getState: () =&gt; State\n  subscribe: (listener: () =&gt; void) =&gt; () =&gt; void\n  replaceReducer: (reducer: Reducer) =&gt; void\n}\n</code></pre>\n\n<p><strong>解释：</strong>\nStore 是保存应用 State 的容器，提供了 <code class=\"language-plaintext highlighter-rouge\">dispatch</code>、<code class=\"language-plaintext highlighter-rouge\">getState</code>、<code class=\"language-plaintext highlighter-rouge\">subscribe</code> 和 <code class=\"language-plaintext highlighter-rouge\">replaceReducer</code> 等方法，用于管理和访问 State，以及响应 State 的变化。</p>\n\n<h3 id=\"store-creator\"><strong>Store Creator</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type StoreCreator = (reducer: Reducer, preloadedState: ?State) =&gt; Store</code></p>\n\n<p><strong>解释：</strong>\nStore Creator 是一个函数，用于创建 Redux Store。它接收一个 Reducer 和初始 State，返回一个配置好的 Store 实例。</p>\n\n<h3 id=\"store-enhancer\"><strong>Store Enhancer</strong></h3>\n<p><strong>类型签名：</strong> <code class=\"language-plaintext highlighter-rouge\">type StoreEnhancer = (next: StoreCreator) =&gt; StoreCreator</code></p>\n\n<p><strong>解释：</strong>\nStore Enhancer 是用于增强 Store 创建过程的高阶函数，可以扩展 Store 的功能，如添加 Middleware 支持、增强调试能力等。常见的如 <code class=\"language-plaintext highlighter-rouge\">applyMiddleware</code>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/16/redux-2/'> <img src='/images/covers/react.png' alt='Redux词汇表'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-09-16T12:08:53+10:00'>Sep 16, 2024</time> </span> </div><h2 class='article__title'>Redux词汇表</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Redux三大原则",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/16/redux-1/",
      "date"     : "Sep 16, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#redux设计思想\" id=\"markdown-toc-redux设计思想\">Redux设计思想</a></li>\n  <li><a href=\"#单一数据源\" id=\"markdown-toc-单一数据源\">单一数据源</a></li>\n  <li><a href=\"#state-是只读的\" id=\"markdown-toc-state-是只读的\">State 是只读的</a></li>\n  <li><a href=\"#使用纯函数来执行修改\" id=\"markdown-toc-使用纯函数来执行修改\">使用纯函数来执行修改</a></li>\n</ol>\n\n<h2 id=\"redux设计思想\">Redux设计思想</h2>\n\n<p>随着 JavaScript 单页应用开发日趋复杂，我们的编码要管理的 state（状态）比以往任何时候都要多。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p>\n\n<p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，这个变化反过来又可能引起另一个 view 的变化。当这些连锁反应到一定程度之后，你根本搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。</p>\n\n<p>如果以上还不够糟糕，那想想前端开发领域里变得越来越普遍的新需求。作为一名前端开发者，我们可能要最优化更新、服务端渲染，在路由变化之前请求到数据等等。我们要掌管以前从未有过的复杂工作，难免会问一句：是时候放弃了吗？ 答案当然是否定的。</p>\n\n<p>复杂度很难降下来，因为 我们总是混淆了两个概念，这两个概念对我们来说很难理解：Mutation 和异步。我把它们比作曼妥思和可乐。两者如果分开都是极好的，但是混在一起就是一团糟。有一些库，比如React 尝试在视图层面通过禁止异步操作和直接的 DOM 操作来解决这个问题。但美中不足的是 React 把 state 管理这件事情交给了开发者自己，这就是 Redux 的用武之地。</p>\n\n<p>跟随 Flux、CQRS 和 Event Sourcing 的脚步，通过限制更新操作的发生时间和方式，Redux 试图让 state 的变化变得可预测。这些限制条件体现在 Redux 的三大原则中：</p>\n\n<ul>\n  <li><strong>单一数据源</strong>：应用的整个状态被存储在一个单一的对象树中，便于管理和调试。</li>\n  <li><strong>状态只读</strong>：唯一改变状态的方法是触发一个动作（action），确保了状态的可预测性。</li>\n  <li><strong>使用纯函数</strong>：通过纯函数（reducer）来描述如何根据动作改变状态，使得状态变更过程透明且易于测试。</li>\n</ul>\n\n<p>Redux 的设计灵感部分来源于 Flux 架构和 Elm 编程语言的架构模式，但它通过简化和优化，使得状态管理更加直观和高效。自发布以来，Redux 已成为前端开发中广泛使用的状态管理库，并且拥有庞大的社区和丰富的生态系统支持。</p>\n\n<h2 id=\"单一数据源\">单一数据源</h2>\n\n<blockquote>\n  <p>整个应用的 全局 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p>\n</blockquote>\n\n<p>这条原则简化了同构应用的开发，因为在服务端的 state 可以序列化并注入到客户端，不需要做其他的一些事情。一个单一数据源 state tree 也简化了应用的调试和和监控；它也让你在开发中能将应用数据持久化到本地，从而加速开发周期。此外，有一些功能以前很难实现，比如“撤销/重做”，在单一数据源的原则下，使用 Redux 实现将非常容易。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nf\">getState</span><span class=\"p\">())</span>\n<span class=\"cm\">/* 输出\n{\n  visibilityFilter: 'SHOW_ALL',\n  todos: [\n    {\n      text: 'Consider using Redux',\n      completed: true,\n    },\n    {\n      text: 'Keep all state in a single tree',\n      completed: false\n    }\n  ]\n}\n*/</span>\n</code></pre></div></div>\n\n<h2 id=\"state-是只读的\">State 是只读的</h2>\n\n<blockquote>\n  <p>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p>\n</blockquote>\n\n<p>这条原则确保了视图行为和网络请求回调都不能直接修改 state，相反它们只能表达出想要修改 state 的意图。因为所有的修改都被集中化处理，且严格按照顺序一个接一个地执行，因此不用担心竞态条件（race condition）的出现。 Action 就是普通对象而已，因此它们可以被日志打印、序列化、储存、后期调试或测试时回放出来。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">({</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">COMPLETE_TODO</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">index</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">({</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">SET_VISIBILITY_FILTER</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">filter</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">SHOW_COMPLETED</span><span class=\"dl\">'</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<h2 id=\"使用纯函数来执行修改\">使用纯函数来执行修改</h2>\n\n<blockquote>\n  <p>为了描述 action 如何改变 state tree，你需要编写纯的 reducers。</p>\n</blockquote>\n\n<p>Reducer 是纯函数，它接收之前的 state 和 action，并返回新的 state。记住，一定要返回一个新的对象，而不是修改之前的 state。你一开始可以只有单个 reducer，但随着应用复杂度的增长，你可以把大的 reducer 划分为一个个小的 reducers，分别管理着 state tree 的不同部分。由于 reducer 只是函数，你可以控制它们被调用的顺序，传入附加数据，甚至编写可复用的 reducer 来处理一些通用任务，如分页器。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">visibilityFilter</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">SHOW_ALL</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch </span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">'</span><span class=\"s1\">SET_VISIBILITY_FILTER</span><span class=\"dl\">'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">filter</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">todos</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch </span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">'</span><span class=\"s1\">ADD_TODO</span><span class=\"dl\">'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n          <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">,</span>\n          <span class=\"na\">completed</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"k\">case</span> <span class=\"dl\">'</span><span class=\"s1\">COMPLETE_TODO</span><span class=\"dl\">'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">todo</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">===</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nf\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">todo</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">completed</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n          <span class=\"p\">})</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nx\">todo</span>\n      <span class=\"p\">})</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">combineReducers</span><span class=\"p\">,</span> <span class=\"nx\">createStore</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">redux</span><span class=\"dl\">'</span>\n<span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"nf\">combineReducers</span><span class=\"p\">({</span> <span class=\"nx\">visibilityFilter</span><span class=\"p\">,</span> <span class=\"nx\">todos</span> <span class=\"p\">})</span>\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nf\">createStore</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">)</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/16/redux-1/'> <img src='/images/covers/react.png' alt='Redux三大原则'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-09-16T11:10:27+10:00'>Sep 16, 2024</time> </span> </div><h2 class='article__title'>Redux三大原则</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React Hook（六） —— useReducer",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/15/react-hook-6/",
      "date"     : "Sep 15, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#作用\" id=\"markdown-toc-作用\">作用</a></li>\n  <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a>    <ol>\n      <li><a href=\"#1-reducer-函数必须是纯函数\" id=\"markdown-toc-1-reducer-函数必须是纯函数\">1. Reducer 函数必须是纯函数</a></li>\n      <li><a href=\"#2-初始化状态\" id=\"markdown-toc-2-初始化状态\">2. 初始化状态</a></li>\n      <li><a href=\"#3-dispatch-函数不会立即更新状态\" id=\"markdown-toc-3-dispatch-函数不会立即更新状态\">3. <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 函数不会立即更新状态</a></li>\n      <li><a href=\"#4-避免在渲染期间调用-dispatch\" id=\"markdown-toc-4-避免在渲染期间调用-dispatch\">4. 避免在渲染期间调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code></a></li>\n    </ol>\n  </li>\n  <li><a href=\"#可以做的事情\" id=\"markdown-toc-可以做的事情\">可以做的事情</a></li>\n  <li><a href=\"#不可以做的事情\" id=\"markdown-toc-不可以做的事情\">不可以做的事情</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"作用\">作用</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useReducer</code> 是 React 提供的一个 Hook，用于在函数组件中引入 Reducer（类似于 Redux 中的 Reducer），以管理组件内部复杂的状态逻辑。与 <code class=\"language-plaintext highlighter-rouge\">useState</code> 相比，<code class=\"language-plaintext highlighter-rouge\">useReducer</code> 更适合处理涉及多个子值的复杂状态，或者当下一个状态依赖于之前的状态时。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useReducer</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch </span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">'</span><span class=\"s1\">increment</span><span class=\"dl\">'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Unknown action type</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">});</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">increment</span><span class=\"dl\">'</span> <span class=\"p\">})</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n        增加\n      <span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>当前计数：<span class=\"si\">{</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，<code class=\"language-plaintext highlighter-rouge\">useReducer</code> 接受一个 Reducer 函数和初始状态，返回当前状态和 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 函数。通过调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code>，可以触发状态更新。</p>\n\n<h2 id=\"注意事项\">注意事项</h2>\n\n<h3 id=\"1-reducer-函数必须是纯函数\">1. Reducer 函数必须是纯函数</h3>\n\n<p>Reducer 函数应该是一个纯函数，接收当前的 <code class=\"language-plaintext highlighter-rouge\">state</code> 和 <code class=\"language-plaintext highlighter-rouge\">action</code>，返回新的状态。它不应该产生副作用，不应直接修改传入的 <code class=\"language-plaintext highlighter-rouge\">state</code>，而是返回新的状态对象。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ❌ 不要直接修改 state</span>\n  <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>正确示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ✅ 返回新的状态对象</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"2-初始化状态\">2. 初始化状态</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useReducer</code> 的第二个参数是初始状态。可以直接传递初始状态值，也可以通过第三个参数 <code class=\"language-plaintext highlighter-rouge\">init</code> 提供一个惰性初始化函数，以避免初始状态的重复计算。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nx\">initialCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">initialCount</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">Counter</span><span class=\"p\">({</span> <span class=\"nx\">initialCount</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"nx\">initialCount</span><span class=\"p\">,</span> <span class=\"nx\">init</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"3-dispatch-函数不会立即更新状态\">3. <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 函数不会立即更新状态</h3>\n\n<p>调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 后，状态的更新会在下一次渲染时才生效。如果在调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 后立即读取状态，仍然会得到更新前的状态值。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">increment</span><span class=\"dl\">'</span> <span class=\"p\">});</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">);</span> <span class=\"c1\">// 可能还是旧的 count 值</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"4-避免在渲染期间调用-dispatch\">4. 避免在渲染期间调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code></h3>\n\n<p>在渲染过程中调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 会导致错误，出现“Too many re-renders”的报错。应该在事件处理函数或副作用中调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code>。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">});</span>\n  <span class=\"c1\">// ❌ 不要在渲染期间调用 dispatch</span>\n  <span class=\"nf\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">increment</span><span class=\"dl\">'</span> <span class=\"p\">});</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"可以做的事情\">可以做的事情</h2>\n\n<ul>\n  <li>\n    <p><strong>管理复杂状态逻辑</strong>：当状态逻辑较为复杂，包含多个子值，或者下一个状态依赖于之前的状态时，使用 <code class=\"language-plaintext highlighter-rouge\">useReducer</code> 可以使代码更清晰。</p>\n  </li>\n  <li>\n    <p><strong>将状态更新逻辑集中在 Reducer 中</strong>：可以将所有状态更新的逻辑集中在 Reducer 函数中，方便管理和测试。</p>\n  </li>\n  <li>\n    <p><strong>优化性能</strong>：在某些情况下，<code class=\"language-plaintext highlighter-rouge\">useReducer</code> 可以防止由于回调函数重新创建导致的子组件不必要的重新渲染。</p>\n  </li>\n  <li>\n    <p><strong>使用惰性初始化</strong>：通过提供 <code class=\"language-plaintext highlighter-rouge\">init</code> 函数，可以在初始渲染时避免昂贵的计算。</p>\n  </li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nx\">initialValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">initialValue</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch </span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">'</span><span class=\"s1\">reset</span><span class=\"dl\">'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"nx\">initialValue</span><span class=\"p\">,</span> <span class=\"nx\">init</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h2 id=\"不可以做的事情\">不可以做的事情</h2>\n\n<ul>\n  <li>\n    <p><strong>不要直接修改状态</strong>：Reducer 函数必须返回新的状态对象，不能直接修改传入的 <code class=\"language-plaintext highlighter-rouge\">state</code>。</p>\n  </li>\n  <li>\n    <p><strong>不要在 Reducer 中执行副作用</strong>：Reducer 应该是纯函数，不应在其中执行如网络请求、日志记录等副作用操作。</p>\n  </li>\n  <li>\n    <p><strong>不要在组件内部重新定义 Reducer 函数</strong>：避免在组件内每次渲染时重新创建 Reducer 函数，可以将其定义在组件外部，或者使用 <code class=\"language-plaintext highlighter-rouge\">useCallback</code>。</p>\n  </li>\n  <li>\n    <p><strong>不要在渲染过程中调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code></strong>：这会导致无限循环渲染，应该在事件处理函数或 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 中调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code>。</p>\n  </li>\n</ul>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useReducer</code> 是一个强大的 Hook，适用于管理复杂状态逻辑的场景。通过使用 Reducer，我们可以将状态更新的逻辑集中管理，使组件更易于维护和测试。在使用 <code class=\"language-plaintext highlighter-rouge\">useReducer</code> 时，需要注意以下几点：</p>\n\n<ul>\n  <li>\n    <p><strong>Reducer 必须是纯函数</strong>：不要直接修改状态，也不要在其中执行副作用。</p>\n  </li>\n  <li>\n    <p><strong>正确初始化状态</strong>：根据需要，使用初始值或惰性初始化函数。</p>\n  </li>\n  <li>\n    <p><strong>理解 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 的工作方式</strong>：状态更新是异步的，调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code> 后，状态在下一次渲染时才会更新。</p>\n  </li>\n  <li>\n    <p><strong>遵守 Hooks 的使用规则</strong>：不要在循环、条件或嵌套函数中使用 <code class=\"language-plaintext highlighter-rouge\">useReducer</code>，不要在渲染过程中调用 <code class=\"language-plaintext highlighter-rouge\">dispatch</code>。</p>\n  </li>\n</ul>\n\n<p>通过合理地使用 <code class=\"language-plaintext highlighter-rouge\">useReducer</code>，我们可以更好地管理组件的状态逻辑，编写出性能更佳、结构更清晰的 React 应用。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/15/react-hook-6/'> <img src='/images/covers/react.png' alt='React Hook（六） —— useReducer'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2024-09-15T13:15:36+10:00'>Sep 15, 2024</time> </span> </div><h2 class='article__title'>React Hook（六） —— useReducer</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React Hook（五） —— useContext",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/15/react-hook-5/",
      "date"     : "Sep 15, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#作用\" id=\"markdown-toc-作用\">作用</a></li>\n  <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a>    <ol>\n      <li><a href=\"#1-必须与-contextprovider-配合使用\" id=\"markdown-toc-1-必须与-contextprovider-配合使用\">1. 必须与 Context.Provider 配合使用</a></li>\n      <li><a href=\"#2-usecontext-订阅的是上下文的变化\" id=\"markdown-toc-2-usecontext-订阅的是上下文的变化\">2. <code class=\"language-plaintext highlighter-rouge\">useContext</code> 订阅的是上下文的变化</a></li>\n      <li><a href=\"#3-usecontext-不可在组件内部创建新的-context\" id=\"markdown-toc-3-usecontext-不可在组件内部创建新的-context\">3. <code class=\"language-plaintext highlighter-rouge\">useContext</code> 不可在组件内部创建新的 Context</a></li>\n      <li><a href=\"#4-避免多次渲染导致的性能问题\" id=\"markdown-toc-4-避免多次渲染导致的性能问题\">4. 避免多次渲染导致的性能问题</a></li>\n      <li><a href=\"#5-多个-context-的使用\" id=\"markdown-toc-5-多个-context-的使用\">5. 多个 Context 的使用</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#可以做的事情\" id=\"markdown-toc-可以做的事情\">可以做的事情</a></li>\n  <li><a href=\"#不可以做的事情\" id=\"markdown-toc-不可以做的事情\">不可以做的事情</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"作用\">作用</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useContext</code> 是 React 提供的一个 Hook，用于在函数组件中订阅 React 上下文（Context）。它使得我们可以在组件树中深层嵌套的组件中，方便地获取到上层组件通过 Context 提供的数据，而不需要手动通过每一层组件的 props 进行传递。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">useContext</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ThemeContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">light</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">ThemedButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">theme</span> <span class=\"o\">=</span> <span class=\"nf\">useContext</span><span class=\"p\">(</span><span class=\"nx\">ThemeContext</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">theme</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>按钮<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，<code class=\"language-plaintext highlighter-rouge\">ThemedButton</code> 组件使用了 <code class=\"language-plaintext highlighter-rouge\">useContext</code>，从 <code class=\"language-plaintext highlighter-rouge\">ThemeContext</code> 中获取当前的主题，并应用于按钮的样式。</p>\n\n<h2 id=\"注意事项\">注意事项</h2>\n\n<h3 id=\"1-必须与-contextprovider-配合使用\">1. 必须与 Context.Provider 配合使用</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useContext</code> 所获取的值，来源于组件树中距离当前组件最近的上层 <code class=\"language-plaintext highlighter-rouge\">&lt;Context.Provider&gt;</code> 所提供的 <code class=\"language-plaintext highlighter-rouge\">value</code>。如果组件树中没有对应的 Provider，<code class=\"language-plaintext highlighter-rouge\">useContext</code> 会返回 <code class=\"language-plaintext highlighter-rouge\">createContext</code> 时提供的默认值。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">ThemeContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">light</span><span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">// 默认值为 'light'</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">ThemeContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"s\">\"dark\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Toolbar</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nc\">ThemeContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"2-usecontext-订阅的是上下文的变化\">2. <code class=\"language-plaintext highlighter-rouge\">useContext</code> 订阅的是上下文的变化</h3>\n\n<p>当 Context 的 <code class=\"language-plaintext highlighter-rouge\">value</code> 发生变化时，使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 的组件会重新渲染。<code class=\"language-plaintext highlighter-rouge\">useContext</code> 会使用 <code class=\"language-plaintext highlighter-rouge\">Object.is</code> 比较新旧值。</p>\n\n<h3 id=\"3-usecontext-不可在组件内部创建新的-context\">3. <code class=\"language-plaintext highlighter-rouge\">useContext</code> 不可在组件内部创建新的 Context</h3>\n\n<p>如果在调用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 的组件内部创建或提供新的 Context，会导致 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 获取不到预期的值。<code class=\"language-plaintext highlighter-rouge\">useContext</code> 只能订阅到组件树中高于当前组件的 Provider。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">MyContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">();</span> <span class=\"c1\">// ❌ 不要在组件内部创建 Context</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nf\">useContext</span><span class=\"p\">(</span><span class=\"nx\">MyContext</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"4-避免多次渲染导致的性能问题\">4. 避免多次渲染导致的性能问题</h3>\n\n<p>如果通过 Context 传递的 <code class=\"language-plaintext highlighter-rouge\">value</code> 是一个新的对象或函数，会导致使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 的组件每次在 Provider 更新时都重新渲染。为避免不必要的重新渲染，可以使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 或 <code class=\"language-plaintext highlighter-rouge\">useCallback</code> 优化。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">setUser</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">contextValue</span> <span class=\"o\">=</span> <span class=\"nf\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span> <span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">setUser</span> <span class=\"p\">}),</span> <span class=\"p\">[</span><span class=\"nx\">user</span><span class=\"p\">]);</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">UserContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">contextValue</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">MyComponent</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nc\">UserContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"5-多个-context-的使用\">5. 多个 Context 的使用</h3>\n\n<p>在复杂的应用中，可能需要使用多个 Context。每个 Context 都需要有对应的 Provider，并且在使用时需要分别调用 <code class=\"language-plaintext highlighter-rouge\">useContext</code>。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">ThemeContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">light</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">AuthContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">theme</span> <span class=\"o\">=</span> <span class=\"nf\">useContext</span><span class=\"p\">(</span><span class=\"nx\">ThemeContext</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">auth</span> <span class=\"o\">=</span> <span class=\"nf\">useContext</span><span class=\"p\">(</span><span class=\"nx\">AuthContext</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"可以做的事情\">可以做的事情</h2>\n\n<ul>\n  <li>\n    <p><strong>跨组件树传递数据</strong>：可以使用 Context 在组件树中深层传递数据，避免了逐层通过 props 传递的麻烦。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 在顶层组件提供 Context</span>\n<span class=\"p\">&lt;</span><span class=\"nc\">ThemeContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"s\">\"dark\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nc\">ThemeContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span><span class=\"p\">&gt;</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>订阅 Context 的变化</strong>：当 Context 的 <code class=\"language-plaintext highlighter-rouge\">value</code> 发生变化时，使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 的组件会自动重新渲染。</p>\n  </li>\n  <li>\n    <p><strong>结合 <code class=\"language-plaintext highlighter-rouge\">useState</code> 或 <code class=\"language-plaintext highlighter-rouge\">useReducer</code></strong>：可以在 Context 中传递状态和更新函数，实现全局状态管理的效果。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">AuthContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">();</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">auth</span><span class=\"p\">,</span> <span class=\"nx\">setAuth</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nc\">AuthContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span> <span class=\"na\">value</span><span class=\"p\">=&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">MyComponent</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nc\">AuthContext</span><span class=\"p\">.</span><span class=\"nc\">Provider</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"不可以做的事情\">不可以做的事情</h2>\n\n<ul>\n  <li>\n    <p><strong>不要在组件内部创建 Context</strong>：Context 应该在组件外部创建，否则会导致每次渲染时创建新的 Context，导致子组件无法正确订阅。</p>\n\n    <p><strong>错误示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">MyContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">createContext</span><span class=\"p\">();</span> <span class=\"c1\">// ❌ 不要在组件内部创建 Context</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nf\">useContext</span><span class=\"p\">(</span><span class=\"nx\">MyContext</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>不要滥用 Context</strong>：Context 适用于全局的、跨越多层组件的数据传递。如果只是父子组件之间的数据传递，使用 props 更为合适。</p>\n  </li>\n  <li>\n    <p><strong>避免传递频繁变化的值</strong>：如果 Context 的 <code class=\"language-plaintext highlighter-rouge\">value</code> 频繁变化，会导致使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 的组件频繁重新渲染，可能会影响性能。应尽量避免在 Context 中传递变化频繁的数据。</p>\n  </li>\n  <li>\n    <p><strong>不要在循环或条件中使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code></strong>：<code class=\"language-plaintext highlighter-rouge\">useContext</code> 必须在组件的顶层调用，不能在循环、条件或嵌套函数中调用。</p>\n\n    <p><strong>错误示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nf\">useContext</span><span class=\"p\">(</span><span class=\"nx\">MyContext</span><span class=\"p\">);</span> <span class=\"c1\">// ❌ 不要在条件语句中使用</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useContext</code> 是 React 中用于订阅 Context 的 Hook，能够让我们方便地在组件树中共享数据，避免了手动通过 props 层层传递。但在使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 时，需要注意以下几点：</p>\n\n<ul>\n  <li>\n    <p><strong>正确使用 Provider</strong>：确保在组件树中，通过 <code class=\"language-plaintext highlighter-rouge\">&lt;Context.Provider&gt;</code> 提供了对应的 <code class=\"language-plaintext highlighter-rouge\">value</code>，并且 Provider 位于使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code> 的组件之上。</p>\n  </li>\n  <li>\n    <p><strong>避免性能问题</strong>：对于传递对象或函数的 Context，使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 或 <code class=\"language-plaintext highlighter-rouge\">useCallback</code> 来优化，避免不必要的重新渲染。</p>\n  </li>\n  <li>\n    <p><strong>合理使用 Context</strong>：Context 适用于全局的、跨越多层组件的数据传递。对于局部状态，仍应使用组件的状态或 props。</p>\n  </li>\n  <li>\n    <p><strong>遵守 Hooks 规则</strong>：<code class=\"language-plaintext highlighter-rouge\">useContext</code> 必须在组件的顶层调用，不能在循环、条件或嵌套函数中调用。</p>\n  </li>\n</ul>\n\n<p>通过合理地使用 <code class=\"language-plaintext highlighter-rouge\">useContext</code>，我们可以在 React 应用中更高效地管理和共享数据，提高代码的可维护性和可读性。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/15/react-hook-5/'> <img src='/images/covers/react.png' alt='React Hook（五） —— useContext'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2024-09-15T09:08:47+10:00'>Sep 15, 2024</time> </span> </div><h2 class='article__title'>React Hook（五） —— useContext</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React Hook（四） —— useEffect",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/14/react-hook-4/",
      "date"     : "Sep 14, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#作用\" id=\"markdown-toc-作用\">作用</a></li>\n  <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a>    <ol>\n      <li><a href=\"#1-依赖项数组\" id=\"markdown-toc-1-依赖项数组\">1. 依赖项数组</a></li>\n      <li><a href=\"#2-清理函数\" id=\"markdown-toc-2-清理函数\">2. 清理函数</a></li>\n      <li><a href=\"#3-避免副作用中直接更新状态\" id=\"markdown-toc-3-避免副作用中直接更新状态\">3. 避免副作用中直接更新状态</a></li>\n      <li><a href=\"#4-不要在条件语句或循环中使用-useeffect\" id=\"markdown-toc-4-不要在条件语句或循环中使用-useeffect\">4. 不要在条件语句或循环中使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code></a></li>\n      <li><a href=\"#5-react-严格模式下的双调用\" id=\"markdown-toc-5-react-严格模式下的双调用\">5. React 严格模式下的双调用</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#do\" id=\"markdown-toc-do\">DO</a></li>\n  <li><a href=\"#dont-do\" id=\"markdown-toc-dont-do\">DONT DO</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"作用\">作用</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useEffect</code> 是 React 提供的一个 Hook，用于让我们在函数组件中执行副作用操作。它可以帮助组件与外部系统（如浏览器 API、订阅、计时器、网络请求等）进行同步。当组件渲染完成后，React 会执行传给 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 的函数，以实现副作用。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 执行副作用操作，如订阅或数据获取</span>\n    <span class=\"k\">return </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 清理副作用，如取消订阅</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">dependencies</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，<code class=\"language-plaintext highlighter-rouge\">useEffect</code> 接受一个函数，该函数可以返回一个清理函数。<code class=\"language-plaintext highlighter-rouge\">dependencies</code> 是一个依赖项数组，当其中的值发生变化时，<code class=\"language-plaintext highlighter-rouge\">useEffect</code> 会重新执行。</p>\n\n<h2 id=\"注意事项\">注意事项</h2>\n\n<h3 id=\"1-依赖项数组\">1. 依赖项数组</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useEffect</code> 的第二个参数是依赖项数组，必须包含所有在副作用中使用的外部变量（props、state 以及在组件内部定义的函数和变量）。遗漏依赖项可能导致副作用不能及时更新，或者引发无限循环。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 使用了 propA 和 stateB</span>\n<span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">propA</span><span class=\"p\">,</span> <span class=\"nx\">stateB</span><span class=\"p\">]);</span>\n</code></pre></div></div>\n\n<h3 id=\"2-清理函数\">2. 清理函数</h3>\n\n<p>如果副作用需要在组件卸载或更新前进行清理，可以在 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 的返回函数中进行清理操作。React 会在组件卸载或依赖项变化前调用清理函数。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">subscription</span> <span class=\"o\">=</span> <span class=\"nf\">subscribeToSomething</span><span class=\"p\">();</span>\n  <span class=\"k\">return </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">subscription</span><span class=\"p\">.</span><span class=\"nf\">unsubscribe</span><span class=\"p\">();</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n</code></pre></div></div>\n\n<h3 id=\"3-避免副作用中直接更新状态\">3. 避免副作用中直接更新状态</h3>\n\n<p>在副作用中更新状态时，需要注意避免引发无限循环。应确保状态更新不会导致副作用重复执行，除非这是有意的。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// 使用函数式更新</span>\n<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n</code></pre></div></div>\n\n<h3 id=\"4-不要在条件语句或循环中使用-useeffect\">4. 不要在条件语句或循环中使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code></h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useEffect</code> 必须在组件顶层调用，不能在条件语句、循环或嵌套函数中调用。这是 React Hooks 的规则之一，确保每次渲染时 Hook 的调用顺序一致。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ❌ 不要在条件语句中使用</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"5-react-严格模式下的双调用\">5. React 严格模式下的双调用</h3>\n\n<p>在严格模式下，React 会在初次渲染时调用两次 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 的执行函数和清理函数。这是为了帮助开发者发现副作用中的问题。需要确保副作用函数和清理函数是幂等的。</p>\n\n<h2 id=\"do\">DO</h2>\n\n<ul>\n  <li>\n    <p><strong>订阅和清理</strong>：可以使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 订阅事件或数据流，并在返回的清理函数中取消订阅。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">handleResize</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 处理窗口大小变化</span>\n  <span class=\"p\">};</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nf\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">resize</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">handleResize</span><span class=\"p\">);</span>\n  <span class=\"k\">return </span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nf\">removeEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">resize</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">handleResize</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>数据获取</strong>：可以在 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 中执行异步操作，如从服务器获取数据。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">fetchData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/api/data</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nf\">setData</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nf\">fetchData</span><span class=\"p\">();</span>\n<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>操作 DOM</strong>：在副作用中，可以直接操作 DOM，但通常推荐使用 <code class=\"language-plaintext highlighter-rouge\">useRef</code>。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"s2\">`您有 </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> 条新消息`</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">]);</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"dont-do\">DONT DO</h2>\n\n<ul>\n  <li>\n    <p><strong>不要在渲染过程中执行副作用</strong>：React 要求渲染过程是纯函数，不应有副作用。应将副作用放在 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 中。</p>\n\n    <p><strong>错误示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ❌ 不要在渲染中执行副作用</span>\n  <span class=\"nf\">fetchData</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>内容<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>不要忽略依赖项数组</strong>：如果副作用中使用了外部变量，却未在依赖项数组中声明，可能导致副作用不能正确执行。</p>\n\n    <p><strong>错误示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 使用了 count，但未在依赖项中声明</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"s2\">`您有 </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> 条新消息`</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">[]);</span> <span class=\"c1\">// ❌ 错误的依赖项</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>不要在条件或循环中使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code></strong>：这违反了 Hooks 的使用规则，会导致渲染错误。</p>\n  </li>\n  <li>\n    <p><strong>不要在副作用中直接更新依赖项</strong>：这可能导致无限循环。</p>\n\n    <p><strong>错误示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// ❌ 导致无限循环</span>\n<span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">]);</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useEffect</code> 是 React 中处理副作用的关键 Hook，用于在组件渲染后执行异步操作、订阅、操作 DOM 等。在使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 时，需要注意以下几点：</p>\n\n<ul>\n  <li>\n    <p><strong>正确指定依赖项数组</strong>：确保所有在副作用中使用的外部变量都在依赖项数组中声明。</p>\n  </li>\n  <li>\n    <p><strong>使用清理函数</strong>：当副作用需要在组件卸载或更新前清理时，返回一个清理函数。</p>\n  </li>\n  <li>\n    <p><strong>避免在副作用中引发无限循环</strong>：谨慎更新状态，避免导致副作用重复执行。</p>\n  </li>\n  <li>\n    <p><strong>遵守 Hooks 的使用规则</strong>：不要在条件、循环或嵌套函数中使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code>。</p>\n  </li>\n</ul>\n\n<p>通过合理地使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code>，我们可以让组件与外部系统有效地同步，编写出高效、稳定的 React 应用。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/14/react-hook-4/'> <img src='/images/covers/react.png' alt='React Hook（四） —— useEffect'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-09-14T13:32:18+10:00'>Sep 14, 2024</time> </span> </div><h2 class='article__title'>React Hook（四） —— useEffect</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React Hook（三） —— useMemo",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/13/react-hook-3/",
      "date"     : "Sep 13, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#作用\" id=\"markdown-toc-作用\">作用</a></li>\n  <li><a href=\"#注意事项\" id=\"markdown-toc-注意事项\">注意事项</a>    <ol>\n      <li><a href=\"#1-仅用于性能优化\" id=\"markdown-toc-1-仅用于性能优化\">1. 仅用于性能优化</a></li>\n      <li><a href=\"#2-依赖项数组必须准确\" id=\"markdown-toc-2-依赖项数组必须准确\">2. 依赖项数组必须准确</a></li>\n      <li><a href=\"#3-计算函数应为纯函数\" id=\"markdown-toc-3-计算函数应为纯函数\">3. 计算函数应为纯函数</a></li>\n      <li><a href=\"#4-缓存的值可能会被丢弃\" id=\"markdown-toc-4-缓存的值可能会被丢弃\">4. 缓存的值可能会被丢弃</a></li>\n      <li><a href=\"#5-在严格模式下可能调用两次\" id=\"markdown-toc-5-在严格模式下可能调用两次\">5. 在严格模式下可能调用两次</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#do\" id=\"markdown-toc-do\">DO</a></li>\n  <li><a href=\"#dont-do\" id=\"markdown-toc-dont-do\">DONT DO</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"作用\">作用</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useMemo</code> 是 React 提供的一个 Hook，用于在组件的重新渲染之间缓存计算结果。它接受一个“创建函数”和依赖项数组，当依赖项发生变化时，重新计算值；否则，返回缓存的值。主要用于优化性能，避免在每次渲染时都进行耗时的计算。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useMemo</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">({</span> <span class=\"nx\">items</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">processedItems</span> <span class=\"o\">=</span> <span class=\"nf\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"cm\">/* ...复杂计算... */</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">items</span><span class=\"p\">]);</span>\n  \n  <span class=\"k\">return</span> <span class=\"cm\">/* 使用 processedItems 渲染组件 */</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，<code class=\"language-plaintext highlighter-rouge\">processedItems</code> 只会在 <code class=\"language-plaintext highlighter-rouge\">items</code> 发生变化时重新计算，否则将使用缓存的结果。</p>\n\n<h2 id=\"注意事项\">注意事项</h2>\n\n<h3 id=\"1-仅用于性能优化\">1. 仅用于性能优化</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useMemo</code> 应仅用于性能优化。如果不使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code>，代码仍然应该能够正常工作。不要依赖 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 来实现组件的正确性。</p>\n\n<h3 id=\"2-依赖项数组必须准确\">2. 依赖项数组必须准确</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useMemo</code> 的第二个参数是依赖项数组，必须包含所有在计算函数中使用的外部变量。遗漏或错误地包含依赖项可能导致缓存失效或错误的结果。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">memoizedValue</span> <span class=\"o\">=</span> <span class=\"nf\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">computeExpensiveValue</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">]);</span>\n</code></pre></div></div>\n\n<p>确保 <code class=\"language-plaintext highlighter-rouge\">a</code> 和 <code class=\"language-plaintext highlighter-rouge\">b</code> 都在依赖项数组中。</p>\n\n<h3 id=\"3-计算函数应为纯函数\">3. 计算函数应为纯函数</h3>\n\n<p>传递给 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 的计算函数应该是纯函数，不应有副作用。它只应根据输入返回一个值，而不应修改外部状态。</p>\n\n<h3 id=\"4-缓存的值可能会被丢弃\">4. 缓存的值可能会被丢弃</h3>\n\n<p>React 可能会在某些情况下丢弃缓存的值，例如在开发模式下组件重新渲染时。因此，不要依赖缓存值的持久性。</p>\n\n<h3 id=\"5-在严格模式下可能调用两次\">5. 在严格模式下可能调用两次</h3>\n\n<p>在严格模式下，React 可能会调用计算函数两次。这是为了帮助发现意外的副作用，因此计算函数必须是纯函数。</p>\n\n<h2 id=\"do\">DO</h2>\n\n<ul>\n  <li>\n    <p><strong>缓存昂贵的计算结果</strong>：对于需要大量计算的值，可以使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 来缓存结果，提高性能。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">expensiveResult</span> <span class=\"o\">=</span> <span class=\"nf\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 进行昂贵的计算</span>\n  <span class=\"k\">return</span> <span class=\"nf\">computeExpensiveValue</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">]);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>避免不必要的子组件重新渲染</strong>：结合 <code class=\"language-plaintext highlighter-rouge\">React.memo</code>，可以防止子组件在未必要时重新渲染。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">MemoizedChild</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">memo</span><span class=\"p\">(</span><span class=\"nx\">ChildComponent</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">ParentComponent</span><span class=\"p\">({</span> <span class=\"nx\">propA</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">memoizedValue</span> <span class=\"o\">=</span> <span class=\"nf\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">computeValue</span><span class=\"p\">(</span><span class=\"nx\">propA</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"nx\">propA</span><span class=\"p\">]);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">MemoizedChild</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">memoizedValue</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>记忆化函数</strong>：可以使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 或 <code class=\"language-plaintext highlighter-rouge\">useCallback</code> 来记忆化函数，防止在依赖项未变化时重新创建。</p>\n\n    <p><strong>示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">memoizedCallback</span> <span class=\"o\">=</span> <span class=\"nf\">useCallback</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nf\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">]);</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"dont-do\">DONT DO</h2>\n\n<ul>\n  <li>\n    <p><strong>不要在每个渲染中都使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code></strong>：不必要地使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 可能会增加代码复杂性，没有明显的性能提升。</p>\n  </li>\n  <li>\n    <p><strong>不要遗漏依赖项</strong>：故意遗漏依赖项来避免重新计算是错误的做法，可能导致不可预测的结果。</p>\n  </li>\n  <li>\n    <p><strong>不要在循环或条件语句中使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code></strong>：<code class=\"language-plaintext highlighter-rouge\">useMemo</code> 必须在组件顶层调用，不能在循环、条件或嵌套函数中使用。</p>\n\n    <p><strong>错误示例：</strong></p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">memoizedValue</span> <span class=\"o\">=</span> <span class=\"nf\">useMemo</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">computeValue</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"nx\">a</span><span class=\"p\">]);</span> <span class=\"c1\">// ❌</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>不要在计算函数中产生副作用</strong>：计算函数应该是纯函数，不应修改组件的状态或引发副作用。</p>\n  </li>\n  <li>\n    <p><strong>不要依赖缓存值的持久性</strong>：缓存值可能会在某些情况下被丢弃，不应假设其会一直存在。</p>\n  </li>\n</ul>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useMemo</code> 是一个强大的工具，可以帮助我们优化 React 应用的性能。然而，滥用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 可能会导致代码复杂性增加，甚至引入错误。在使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code> 时，应遵循以下原则：</p>\n\n<ul>\n  <li>\n    <p><strong>仅在必要时使用</strong>：当计算开销较大且依赖项不经常变化时，才使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code>。</p>\n  </li>\n  <li>\n    <p><strong>确保依赖项完整</strong>：所有在计算函数中使用的外部变量都应包含在依赖项数组中。</p>\n  </li>\n  <li>\n    <p><strong>保持计算函数纯净</strong>：避免在计算函数中引入副作用。</p>\n  </li>\n  <li>\n    <p><strong>理解其作用</strong>：<code class=\"language-plaintext highlighter-rouge\">useMemo</code> 是用于性能优化的工具，不应依赖它来确保组件的正确性。</p>\n  </li>\n</ul>\n\n<p>通过合理地使用 <code class=\"language-plaintext highlighter-rouge\">useMemo</code>，我们可以在确保代码可读性和维护性的同时，提升应用的性能。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/13/react-hook-3/'> <img src='/images/covers/react.png' alt='React Hook（三） —— useMemo'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-09-13T19:43:54+10:00'>Sep 13, 2024</time> </span> </div><h2 class='article__title'>React Hook（三） —— useMemo</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React Hook（二） —— useRef",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/13/react-hook-2/",
      "date"     : "Sep 13, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#useref的作用\" id=\"markdown-toc-useref的作用\"><code class=\"language-plaintext highlighter-rouge\">useRef</code>的作用</a></li>\n  <li><a href=\"#使用useref时的注意事项\" id=\"markdown-toc-使用useref时的注意事项\">使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>时的注意事项</a>    <ol>\n      <li><a href=\"#1-useref返回的对象在整个组件生命周期中保持不变\" id=\"markdown-toc-1-useref返回的对象在整个组件生命周期中保持不变\">1. <code class=\"language-plaintext highlighter-rouge\">useRef</code>返回的对象在整个组件生命周期中保持不变</a></li>\n      <li><a href=\"#2-更改refcurrent不会引发组件重新渲染\" id=\"markdown-toc-2-更改refcurrent不会引发组件重新渲染\">2. 更改<code class=\"language-plaintext highlighter-rouge\">ref.current</code>不会引发组件重新渲染</a></li>\n      <li><a href=\"#3-不要在渲染过程中读取或修改refcurrent\" id=\"markdown-toc-3-不要在渲染过程中读取或修改refcurrent\">3. 不要在渲染过程中读取或修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code></a></li>\n      <li><a href=\"#4-访问dom元素\" id=\"markdown-toc-4-访问dom元素\">4. 访问DOM元素</a></li>\n      <li><a href=\"#5-在初始化时避免重复创建\" id=\"markdown-toc-5-在初始化时避免重复创建\">5. 在初始化时避免重复创建</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#do\" id=\"markdown-toc-do\">DO</a></li>\n  <li><a href=\"#dont-do\" id=\"markdown-toc-dont-do\">DONT DO</a></li>\n  <li><a href=\"#示例\" id=\"markdown-toc-示例\">示例</a>    <ol>\n      <li><a href=\"#1-计数点击次数不需要重新渲染\" id=\"markdown-toc-1-计数点击次数不需要重新渲染\">1. 计数点击次数（不需要重新渲染）</a></li>\n      <li><a href=\"#2-操作dom元素\" id=\"markdown-toc-2-操作dom元素\">2. 操作DOM元素</a></li>\n      <li><a href=\"#3-在初始化时创建一次对象\" id=\"markdown-toc-3-在初始化时创建一次对象\">3. 在初始化时创建一次对象</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"useref的作用\"><code class=\"language-plaintext highlighter-rouge\">useRef</code>的作用</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useRef</code>是React提供的一个Hook，它让我们可以创建一个可变的ref对象，该对象的<code class=\"language-plaintext highlighter-rouge\">.current</code>属性可以保存任何可变值。最常见的用途是访问DOM元素，但它也可以用于存储任何在渲染之间需要保持不变的可变值，而不触发重新渲染。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useRef</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">inputRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，我们创建了一个<code class=\"language-plaintext highlighter-rouge\">inputRef</code>，初始值为<code class=\"language-plaintext highlighter-rouge\">null</code>，稍后我们可以将其关联到一个DOM元素或存储其他数据。</p>\n\n<h2 id=\"使用useref时的注意事项\">使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>时的注意事项</h2>\n\n<h3 id=\"1-useref返回的对象在整个组件生命周期中保持不变\">1. <code class=\"language-plaintext highlighter-rouge\">useRef</code>返回的对象在整个组件生命周期中保持不变</h3>\n\n<p>调用<code class=\"language-plaintext highlighter-rouge\">useRef</code>时，它返回一个包含<code class=\"language-plaintext highlighter-rouge\">current</code>属性的对象。这个对象在组件的整个生命周期中都保持不变。这意味着在每次渲染时，引用的对象都是同一个。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">refContainer</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"nx\">initialValue</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>无论组件重新渲染多少次，<code class=\"language-plaintext highlighter-rouge\">refContainer</code>都是同一个对象。</p>\n\n<h3 id=\"2-更改refcurrent不会引发组件重新渲染\">2. 更改<code class=\"language-plaintext highlighter-rouge\">ref.current</code>不会引发组件重新渲染</h3>\n\n<p>与状态变量不同，更新<code class=\"language-plaintext highlighter-rouge\">ref.current</code>的值不会导致组件重新渲染。这使得<code class=\"language-plaintext highlighter-rouge\">useRef</code>非常适合存储不影响UI的可变值，例如定时器ID、外部库实例等。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">Stopwatch</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">timerRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">startTimer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">timerRef</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nf\">setInterval</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 更新计时器</span>\n    <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">stopTimer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">clearInterval</span><span class=\"p\">(</span><span class=\"nx\">timerRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，我们使用<code class=\"language-plaintext highlighter-rouge\">timerRef</code>来存储<code class=\"language-plaintext highlighter-rouge\">setInterval</code>的返回值（即计时器ID），并在需要时清除计时器。</p>\n\n<h3 id=\"3-不要在渲染过程中读取或修改refcurrent\">3. 不要在渲染过程中读取或修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code></h3>\n\n<p>在渲染过程中读取或修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code>可能导致不可预测的行为，因为React期望渲染过程是纯函数，不应有副作用。应当避免在渲染过程中使用<code class=\"language-plaintext highlighter-rouge\">ref</code>，除非是为了初始化。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">countRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"nx\">countRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// ❌ 不要在渲染过程中修改 ref</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">countRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"4-访问dom元素\">4. 访问DOM元素</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useRef</code>最常见的用途之一是直接访问DOM元素。我们可以将<code class=\"language-plaintext highlighter-rouge\">ref</code>对象赋给JSX元素的<code class=\"language-plaintext highlighter-rouge\">ref</code>属性，React会在组件挂载时将对应的DOM元素赋给<code class=\"language-plaintext highlighter-rouge\">ref.current</code>。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">TextInputWithFocusButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">inputRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">inputRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nf\">focus</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">inputRef</span><span class=\"si\">}</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"text\"</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>聚焦输入框<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，点击按钮会调用<code class=\"language-plaintext highlighter-rouge\">handleClick</code>，然后通过<code class=\"language-plaintext highlighter-rouge\">inputRef.current.focus()</code>使输入框获得焦点。</p>\n\n<h3 id=\"5-在初始化时避免重复创建\">5. 在初始化时避免重复创建</h3>\n\n<p>如果需要在<code class=\"language-plaintext highlighter-rouge\">useRef</code>中存储一个复杂的对象或类实例，应该注意避免在每次渲染时都创建新的实例。可以在组件首次渲染时初始化<code class=\"language-plaintext highlighter-rouge\">ref.current</code>，并在后续渲染中保持不变。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">VideoPlayerComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">playerRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">playerRef</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">playerRef</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">VideoPlayer</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 使用 playerRef.current</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，我们只在<code class=\"language-plaintext highlighter-rouge\">playerRef.current</code>为<code class=\"language-plaintext highlighter-rouge\">null</code>时创建<code class=\"language-plaintext highlighter-rouge\">VideoPlayer</code>实例，避免了在每次渲染时都创建新实例。</p>\n\n<h2 id=\"do\">DO</h2>\n\n<ul>\n  <li>\n    <p><strong>存储可变值</strong>：可以使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>存储任何在渲染之间需要保持的可变值，例如计数器、定时器ID、外部库实例等。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">countRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>访问DOM元素</strong>：通过将<code class=\"language-plaintext highlighter-rouge\">ref</code>对象赋给JSX元素的<code class=\"language-plaintext highlighter-rouge\">ref</code>属性，可以直接访问DOM元素。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">inputRef</span><span class=\"si\">}</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"text\"</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>在事件处理程序或副作用中读取和修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code></strong>：可以在事件处理函数或<code class=\"language-plaintext highlighter-rouge\">useEffect</code>中安全地读取和修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code>。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nf\">computeExpensiveValue</span><span class=\"p\">();</span>\n<span class=\"p\">},</span> <span class=\"p\">[]);</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"dont-do\">DONT DO</h2>\n\n<ul>\n  <li>\n    <p><strong>不要在渲染过程中读取或修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code></strong>：这会破坏组件的纯函数特性，导致不可预测的行为。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">someValue</span><span class=\"p\">;</span> <span class=\"c1\">// ❌ 不要在渲染过程中修改 ref</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;;</span> <span class=\"c1\">// ❌ 不要在渲染过程中读取 ref</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>不要期望更改<code class=\"language-plaintext highlighter-rouge\">ref.current</code>会触发重新渲染</strong>：如果需要在UI中反映某个值的变化，应该使用状态变量<code class=\"language-plaintext highlighter-rouge\">useState</code>，而不是<code class=\"language-plaintext highlighter-rouge\">useRef</code>。</p>\n  </li>\n  <li>\n    <p><strong>不要将<code class=\"language-plaintext highlighter-rouge\">ref</code>直接赋给函数组件</strong>：默认情况下，不能对函数组件使用<code class=\"language-plaintext highlighter-rouge\">ref</code>。如果需要，可以使用<code class=\"language-plaintext highlighter-rouge\">React.forwardRef</code>来转发<code class=\"language-plaintext highlighter-rouge\">ref</code>。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">MyInput</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nf\">forwardRef</span><span class=\"p\">((</span><span class=\"nx\">props</span><span class=\"p\">,</span> <span class=\"nx\">ref</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">ref</span><span class=\"si\">}</span> <span class=\"si\">{</span><span class=\"p\">...</span><span class=\"nx\">props</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">));</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"示例\">示例</h2>\n\n<h3 id=\"1-计数点击次数不需要重新渲染\">1. 计数点击次数（不需要重新渲染）</h3>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useRef</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">ClickCounter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">clickCount</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">clickCount</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`按钮点击了</span><span class=\"p\">${</span><span class=\"nx\">clickCount</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">}</span><span class=\"s2\">次`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click me<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，我们使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>来跟踪按钮被点击的次数，因为这个值不需要用于渲染，所以使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>比<code class=\"language-plaintext highlighter-rouge\">useState</code>更合适。</p>\n\n<h3 id=\"2-操作dom元素\">2. 操作DOM元素</h3>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useRef</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">ScrollToTop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">divRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleScroll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">divRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">scrollTop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">ref</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">divRef</span><span class=\"si\">}</span> <span class=\"na\">style</span><span class=\"p\">=&gt;</span>\n      <span class=\"si\">{</span><span class=\"cm\">/* 内容 */</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleScroll</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>回到顶部<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，我们直接操作<code class=\"language-plaintext highlighter-rouge\">div</code>元素的滚动位置，使其回到顶部。</p>\n\n<h3 id=\"3-在初始化时创建一次对象\">3. 在初始化时创建一次对象</h3>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useRef</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">ExpensiveComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">dataRef</span> <span class=\"o\">=</span> <span class=\"nf\">useRef</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">dataRef</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">dataRef</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nf\">computeExpensiveData</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 使用 dataRef.current</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>通过在<code class=\"language-plaintext highlighter-rouge\">useRef</code>中存储计算密集型数据，我们避免了在每次渲染时重复计算。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useRef</code>是一个强大的Hook，允许我们在不触发重新渲染的情况下存储可变值。在使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>时，需要注意：</p>\n\n<ul>\n  <li>\n    <p><strong>不要在渲染过程中读取或修改<code class=\"language-plaintext highlighter-rouge\">ref.current</code></strong>。</p>\n  </li>\n  <li>\n    <p><strong>更改<code class=\"language-plaintext highlighter-rouge\">ref.current</code>不会引发重新渲染</strong>，因此不应将其用于需要在UI中展示的值。</p>\n  </li>\n  <li>\n    <p><strong>适合存储在渲染之间需要保持的可变值</strong>，例如计时器ID、外部库实例等。</p>\n  </li>\n  <li>\n    <p><strong>可以用于直接访问DOM元素</strong>，实现诸如手动聚焦、滚动等操作。</p>\n  </li>\n</ul>\n\n<p>通过正确地使用<code class=\"language-plaintext highlighter-rouge\">useRef</code>，我们可以管理组件中的可变值，提升代码的性能和可读性。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/13/react-hook-2/'> <img src='/images/covers/react.png' alt='React Hook（二） —— useRef'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-09-13T16:54:01+10:00'>Sep 13, 2024</time> </span> </div><h2 class='article__title'>React Hook（二） —— useRef</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React Hook（一） —— useState",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/12/react-hook-1/",
      "date"     : "Sep 12, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#usestate的作用\" id=\"markdown-toc-usestate的作用\"><code class=\"language-plaintext highlighter-rouge\">useState</code>的作用</a></li>\n  <li><a href=\"#使用usestate时的注意事项\" id=\"markdown-toc-使用usestate时的注意事项\">使用<code class=\"language-plaintext highlighter-rouge\">useState</code>时的注意事项</a>    <ol>\n      <li><a href=\"#1-只能在顶层调用usestate\" id=\"markdown-toc-1-只能在顶层调用usestate\">1. 只能在顶层调用<code class=\"language-plaintext highlighter-rouge\">useState</code></a></li>\n      <li><a href=\"#2-更新状态不会立即更新变量值\" id=\"markdown-toc-2-更新状态不会立即更新变量值\">2. 更新状态不会立即更新变量值</a></li>\n      <li><a href=\"#3-状态更新是异步且批量的\" id=\"markdown-toc-3-状态更新是异步且批量的\">3. 状态更新是异步且批量的</a></li>\n      <li><a href=\"#4-避免直接修改状态\" id=\"markdown-toc-4-避免直接修改状态\">4. 避免直接修改状态</a></li>\n      <li><a href=\"#5-usestate的初始值只在初次渲染时使用\" id=\"markdown-toc-5-usestate的初始值只在初次渲染时使用\">5. <code class=\"language-plaintext highlighter-rouge\">useState</code>的初始值只在初次渲染时使用</a></li>\n      <li><a href=\"#6-状态更新函数中的特殊行为\" id=\"markdown-toc-6-状态更新函数中的特殊行为\">6. 状态更新函数中的特殊行为</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#do\" id=\"markdown-toc-do\">DO</a></li>\n  <li><a href=\"#dont-do\" id=\"markdown-toc-dont-do\">DONT DO</a></li>\n  <li><a href=\"#使用示例\" id=\"markdown-toc-使用示例\">使用示例</a>    <ol>\n      <li><a href=\"#1-计数器\" id=\"markdown-toc-1-计数器\">1. 计数器</a></li>\n      <li><a href=\"#2-管理对象状态\" id=\"markdown-toc-2-管理对象状态\">2. 管理对象状态</a></li>\n      <li><a href=\"#3-基于前一个状态更新\" id=\"markdown-toc-3-基于前一个状态更新\">3. 基于前一个状态更新</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"usestate的作用\"><code class=\"language-plaintext highlighter-rouge\">useState</code>的作用</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useState</code>是React提供的一个Hook，它允许我们在函数组件中添加状态变量。使用它，我们可以声明一个状态变量，并获得一个可以更新该状态的函数。当状态更新时，React会重新渲染组件，反映最新的状态。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">setCount</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，我们声明了一个名为<code class=\"language-plaintext highlighter-rouge\">count</code>的状态变量，初始值为<code class=\"language-plaintext highlighter-rouge\">0</code>，并获得了一个更新函数<code class=\"language-plaintext highlighter-rouge\">setCount</code>。</p>\n\n<h2 id=\"使用usestate时的注意事项\">使用<code class=\"language-plaintext highlighter-rouge\">useState</code>时的注意事项</h2>\n\n<h3 id=\"1-只能在顶层调用usestate\">1. 只能在顶层调用<code class=\"language-plaintext highlighter-rouge\">useState</code></h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useState</code>必须在函数组件的顶层调用，不能在循环、条件语句或嵌套函数中调用。这是因为React需要按照Hooks的调用顺序来正确地管理状态。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">MyComponent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">someCondition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">setState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// ❌ 不能在条件语句中调用</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"2-更新状态不会立即更新变量值\">2. 更新状态不会立即更新变量值</h3>\n\n<p>调用状态更新函数后，新的状态值并不会立即在当前的执行上下文中更新。相反，React会在下一次渲染时使用新的状态值。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">);</span> <span class=\"c1\">// 这里的count仍然是旧值</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>如果需要在更新后立即使用新的状态值，可以使用函数式更新：</p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"3-状态更新是异步且批量的\">3. 状态更新是异步且批量的</h3>\n\n<p>React可能会对多个状态更新进行批量处理，以提高性能。这意味着即使多次调用状态更新函数，React可能只会进行一次重新渲染。</p>\n\n<h3 id=\"4-避免直接修改状态\">4. 避免直接修改状态</h3>\n\n<p>状态应该被视为不可变的。对于对象或数组类型的状态，应该创建其副本并进行修改，而不是直接修改原始状态。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">newValue</span><span class=\"p\">;</span> <span class=\"c1\">// ❌ 直接修改状态</span>\n\n<span class=\"nf\">setState</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">);</span> <span class=\"c1\">// 可能不会触发重新渲染</span>\n</code></pre></div></div>\n\n<p><strong>正确示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">setState</span><span class=\"p\">({</span>\n  <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n  <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">newValue</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<h3 id=\"5-usestate的初始值只在初次渲染时使用\">5. <code class=\"language-plaintext highlighter-rouge\">useState</code>的初始值只在初次渲染时使用</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useState</code>接受的初始状态参数只在组件的初次渲染时被使用，后续渲染会忽略该参数。如果初始状态需要通过计算获得，而且计算过程比较耗时，可以传递一个初始化函数。</p>\n\n<p><strong>示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">setState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">computeInitialState</span><span class=\"p\">());</span>\n</code></pre></div></div>\n\n<p>在这种情况下，<code class=\"language-plaintext highlighter-rouge\">computeInitialState</code>函数只会在初次渲染时被调用一次。</p>\n\n<h3 id=\"6-状态更新函数中的特殊行为\">6. 状态更新函数中的特殊行为</h3>\n\n<p>如果将函数作为状态更新函数的参数传递，React会将其视为更新函数而不是新的状态值。</p>\n\n<p><strong>错误示例：</strong></p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">setState</span><span class=\"p\">(</span><span class=\"nx\">functionValue</span><span class=\"p\">);</span> <span class=\"c1\">// 如果functionValue是一个函数，React会调用它</span>\n</code></pre></div></div>\n\n<p><strong>正确示例：</strong></p>\n\n<p>如果想要将一个函数保存到状态中，需要用一个函数包裹它：</p>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">setState</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">functionValue</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h2 id=\"do\">DO</h2>\n\n<ul>\n  <li>\n    <p><strong>声明多个状态变量</strong>：可以在一个组件中多次调用<code class=\"language-plaintext highlighter-rouge\">useState</code>来声明多个独立的状态变量。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">setAge</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">setName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Alice</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>使用函数式更新</strong>：当新的状态需要基于先前的状态计算时，使用函数式更新可以确保状态更新的正确性。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p><strong>初始化复杂状态</strong>：对于复杂的初始状态，可以传递一个初始化函数，以避免每次渲染都进行不必要的计算。</p>\n\n    <div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">setData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nf\">fetchData</span><span class=\"p\">());</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"dont-do\">DONT DO</h2>\n\n<ul>\n  <li>\n    <p><strong>不要在条件语句或循环中调用<code class=\"language-plaintext highlighter-rouge\">useState</code></strong>：这会导致Hooks的调用顺序不一致，React无法正确管理状态。</p>\n  </li>\n  <li>\n    <p><strong>不要直接修改状态变量（尤其是对象或数组）</strong>：直接修改状态会导致不可预测的行为，应始终返回新的状态对象或数组。</p>\n  </li>\n  <li>\n    <p><strong>不要期望状态更新后变量立即更新</strong>：状态更新是异步的，更新后的状态在下一次渲染中才可用。</p>\n  </li>\n</ul>\n\n<h2 id=\"使用示例\">使用示例</h2>\n\n<h3 id=\"1-计数器\">1. 计数器</h3>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">setCount</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleIncrement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>计数值：<span class=\"si\">{</span><span class=\"nx\">count</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleIncrement</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>增加<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"2-管理对象状态\">2. 管理对象状态</h3>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">Form</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">formData</span><span class=\"p\">,</span> <span class=\"nx\">setFormData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">''</span><span class=\"p\">,</span> <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"dl\">''</span> <span class=\"p\">});</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleNameChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setFormData</span><span class=\"p\">({</span>\n      <span class=\"p\">...</span><span class=\"nx\">formData</span><span class=\"p\">,</span>\n      <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleEmailChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setFormData</span><span class=\"p\">({</span>\n      <span class=\"p\">...</span><span class=\"nx\">formData</span><span class=\"p\">,</span>\n      <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"si\">}</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleNameChange</span><span class=\"si\">}</span> <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"姓名\"</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">formData</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"si\">}</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleEmailChange</span><span class=\"si\">}</span> <span class=\"na\">placeholder</span><span class=\"p\">=</span><span class=\"s\">\"邮箱\"</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"3-基于前一个状态更新\">3. 基于前一个状态更新</h3>\n\n<div class=\"language-jsx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nf\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">setCount</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nf\">handleMultipleIncrement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">prevCount</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">prevCount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>计数值：<span class=\"si\">{</span><span class=\"nx\">count</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleMultipleIncrement</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>增加3次<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>在这个例子中，如果不使用函数式更新，计数值只会增加1，而不是3。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">useState</code>是管理组件状态的基本工具，但在使用时需要注意：</p>\n\n<ul>\n  <li><strong>始终在组件顶层调用</strong>。</li>\n  <li><strong>不要直接修改状态，尤其是对象和数组</strong>。</li>\n  <li><strong>理解状态更新的异步性</strong>。</li>\n  <li><strong>在更新状态基于之前的状态时，使用函数式更新</strong>。</li>\n</ul>\n\n<p>通过遵循这些原则，可以避免常见的陷阱，编写出更可靠和可维护的React组件。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/12/react-hook-1/'> <img src='/images/covers/react.png' alt='React Hook（一） —— useState'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-09-12T23:12:18+10:00'>Sep 12, 2024</time> </span> </div><h2 class='article__title'>React Hook（一） —— useState</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React设计思想（二） —— React calls Components and Hooks",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/12/react-2/",
      "date"     : "Sep 12, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#do\" id=\"markdown-toc-do\">DO</a></li>\n  <li><a href=\"#dont-do\" id=\"markdown-toc-dont-do\">DONT DO</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h3 id=\"do\">DO</h3>\n\n<ol>\n  <li><strong>使用 JSX 调用组件</strong>：\n    <ul>\n      <li>组件只能在 JSX 中使用，React 会自动处理组件的渲染。<strong>不要直接调用组件函数</strong>，而应该通过 JSX 让 React 管理组件的调用。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">BlogPost</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">Layout</span><span class=\"o\">&gt;&lt;</span><span class=\"nx\">Article</span> <span class=\"o\">/&gt;&lt;</span><span class=\"sr\">/Layout&gt;; /</span><span class=\"o\">/</span> <span class=\"err\">✅</span> <span class=\"nx\">正确</span><span class=\"err\">：</span><span class=\"nx\">通过</span> <span class=\"nx\">JSX</span> <span class=\"nx\">使用组件</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>Hooks 应该只在组件或 Hooks 内部调用</strong>：\n    <ul>\n      <li><strong>Hooks 只能在函数组件或自定义 Hook 中调用</strong>，React 负责管理这些调用。不要将 Hooks 作为普通值传递或在其他地方使用。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nf\">useData</span><span class=\"p\">();</span> <span class=\"c1\">// ✅ 正确：在自定义 Hook 中调用 Hook</span>\n  <span class=\"c1\">// 其他逻辑</span>\n  <span class=\"k\">return</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>创建新的 Hook 版本来扩展功能</strong>：\n    <ul>\n      <li>如果需要扩展 Hook 的功能，<strong>可以创建一个新的 Hook</strong>，并将所需的逻辑内联到该 Hook 中，而不是动态改变已有的 Hook。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">ChatInput</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">();</span> <span class=\"c1\">// ✅ Good: Create a new version of the Hook</span>\n<span class=\"p\">}</span>\n     \n<span class=\"kd\">function</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ... Create a new version of the Hook and inline the logic here</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>内联 Hook 的调用</strong>：\n    <ul>\n      <li><strong>将 Hook 的调用直接嵌入组件内</strong>，不要将 Hook 作为 <code class=\"language-plaintext highlighter-rouge\">props</code> 传递。这样可以让组件更容易理解和调试。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">ChatInput</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"o\">/&gt;</span>\n<span class=\"p\">}</span>\n     \n<span class=\"kd\">function</span> <span class=\"nf\">Button</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">();</span> <span class=\"c1\">// ✅ Good: Use the Hook directly</span>\n<span class=\"p\">}</span>\n     \n<span class=\"kd\">function</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// If there's any conditional logic to change the Hook's behavior, it should be inlined into</span>\n  <span class=\"c1\">// the Hook</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"dont-do\">DONT DO</h3>\n\n<ol>\n  <li><strong>不要直接调用组件函数</strong>：\n    <ul>\n      <li>组件只能通过 JSX 渲染，<strong>不要将它们作为普通函数调用</strong>。直接调用组件可能会破坏 React 的优化机制，并违反 Hooks 的规则。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">BlogPost</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">Layout</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nc\">Article</span><span class=\"p\">()}</span><span class=\"o\">&lt;</span><span class=\"sr\">/Layout&gt;; /</span><span class=\"o\">/</span> <span class=\"err\">❌</span> <span class=\"nx\">错误</span><span class=\"err\">：</span><span class=\"nx\">直接调用组件函数</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>不要将 Hooks 作为常规值传递</strong>：\n    <ul>\n      <li><strong>Hooks 不应该作为普通值传递</strong>，而是应在组件或 Hook 中直接调用。将 Hook 传递为值会破坏 React 的自动优化，并导致难以调试。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">ChatInput</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"nx\">useData</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">useDataWithLogging</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;; /</span><span class=\"o\">/</span> <span class=\"err\">❌</span> <span class=\"nx\">错误</span><span class=\"err\">：</span><span class=\"nx\">将</span> <span class=\"nx\">Hook</span> <span class=\"nx\">作为</span> <span class=\"nx\">props</span> <span class=\"nx\">传递</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>不要动态改变 Hook</strong>：\n    <ul>\n      <li><strong>Hooks 应该保持静态，不应动态改变</strong>。不要创建高阶 Hook，或者在渲染时动态修改 Hook，而是应静态地定义 Hook 的行为。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">ChatInput</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">useDataWithLogging</span> <span class=\"o\">=</span> <span class=\"nf\">withLogging</span><span class=\"p\">(</span><span class=\"nx\">useData</span><span class=\"p\">);</span> <span class=\"c1\">// ❌ 错误：动态创建 Hook</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>不要动态使用 Hooks</strong>：\n    <ul>\n      <li><strong>不要根据条件动态调用 Hooks</strong>，React 要求 Hooks 在每次渲染时按相同的顺序调用。动态使用 Hooks 会导致意外错误和复杂的调试过程。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">Button</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">someCondition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nf\">useDataWithLogging</span><span class=\"p\">();</span> <span class=\"c1\">// ❌ 错误：动态调用 Hook</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">button</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">data</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/button&gt;</span><span class=\"err\">;\n</span><span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"总结\">总结</h3>\n\n<ul>\n  <li><strong>可以做的事情</strong>：通过 JSX 调用组件；在组件或 Hook 内部调用 Hook；创建新的 Hook 版本扩展功能；将 Hook 调用内联在组件中。</li>\n  <li><strong>不可以做的事情</strong>：不要直接调用组件函数；不要将 Hooks 作为普通值传递；不要动态改变 Hook；不要在条件下动态调用 Hooks。</li>\n</ul>\n\n<p>通过这些规则，React 可以管理组件和 Hooks 的渲染过程，确保应用程序的性能优化和调试过程更加高效。</p>\n\n<p>更多关于Hook的规则：https://react.dev/reference/rules/rules-of-hooks</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/12/react-2/'> <img src='/images/covers/react.png' alt='React设计思想（二） —— React calls Components and Hooks'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-09-12T18:39:42+10:00'>Sep 12, 2024</time> </span> </div><h2 class='article__title'>React设计思想（二） —— React calls Components and Hooks</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "React设计思想（一） —— Components and Hooks must be pure",
      "category" : "React",
      "tags"     : "React and JavaScript",
      "url"      : "/zh-cn/react/2024/09/12/react-1/",
      "date"     : "Sep 12, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#组件和-hook-必须保持纯粹性\" id=\"markdown-toc-组件和-hook-必须保持纯粹性\">组件和 Hook 必须保持纯粹性：</a></li>\n  <li><a href=\"#do\" id=\"markdown-toc-do\">DO</a></li>\n  <li><a href=\"#dont-do\" id=\"markdown-toc-dont-do\">DONT DO</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h3 id=\"组件和-hook-必须保持纯粹性\">组件和 Hook 必须保持纯粹性：</h3>\n\n<ol>\n  <li>\n    <p><strong>幂等性</strong>：组件和 Hook 应该是幂等的，即在给定相同的输入（如 <code class=\"language-plaintext highlighter-rouge\">props</code>、<code class=\"language-plaintext highlighter-rouge\">state</code> 和 <code class=\"language-plaintext highlighter-rouge\">context</code>）时，总是产生相同的输出。像 <code class=\"language-plaintext highlighter-rouge\">new Date()</code> 或 <code class=\"language-plaintext highlighter-rouge\">Math.random()</code> 这样的函数不能在渲染过程中使用，因为它们每次都会生成不同的结果。</p>\n  </li>\n  <li>\n    <p><strong>没有副作用</strong>：渲染过程中不应产生副作用（即不会对外部世界产生影响）。React 会多次渲染组件以优化用户体验，因此副作用（如 DOM 操作、数据获取）应该在 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 或事件处理程序中执行，而不是在渲染中。</p>\n  </li>\n  <li>\n    <p><strong>不可变的 Props 和 State</strong>：<code class=\"language-plaintext highlighter-rouge\">props</code> 和 <code class=\"language-plaintext highlighter-rouge\">state</code> 在 React 中是不可变的快照。不要直接修改它们，而是通过传递新的 <code class=\"language-plaintext highlighter-rouge\">props</code> 或使用 <code class=\"language-plaintext highlighter-rouge\">useState</code> 提供的 setter 函数来更新 <code class=\"language-plaintext highlighter-rouge\">state</code>。</p>\n  </li>\n  <li>\n    <p><strong>局部变更是可以接受的</strong>：虽然全局变更或影响到其他组件的变更是不允许的，但在组件内部局部的变更是可以接受的。例如，在渲染期间创建局部变量并对其进行修改是可以的，因为这些变量只在当前组件生命周期内存在，不会影响后续渲染。</p>\n  </li>\n  <li>\n    <p><strong>延迟初始化</strong>：在不影响其他组件的前提下，可以进行延迟初始化，例如调用某些外部函数来初始化数据，只要这些函数不会在渲染期间引发副作用。</p>\n  </li>\n  <li>\n    <p><strong>避免在 JSX 使用后修改值</strong>：在 JSX 表达式中使用的值一旦传递后，React 可能已经提前渲染了该部分 UI，因此不要在 JSX 创建之后修改这些值。</p>\n  </li>\n</ol>\n\n<h3 id=\"do\">DO</h3>\n\n<ol>\n  <li><strong>局部变更（Local Mutation）</strong>：\n    <ul>\n      <li><strong>可以局部修改变量</strong>，只要这些变量是在组件内部创建的。例如，在渲染期间可以创建本地数组并往里面添加元素，因为这些变量不会在下次渲染时保留。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">FriendList</span><span class=\"p\">({</span> <span class=\"nx\">friends</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n  <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">friend</span> <span class=\"k\">of</span> <span class=\"nx\">friends</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Friend</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">friend</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span> <span class=\"nx\">friend</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">friend</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul&gt;</span><span class=\"err\">;\n</span><span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>副作用在 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 中运行</strong>：\n    <ul>\n      <li><strong>可以在 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 中执行副作用</strong>，如数据获取、订阅或修改 DOM，这些操作应在渲染完成后执行，而不是在渲染过程中。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"s2\">`Clicked </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> times`</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">]);</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>事件处理程序中的操作</strong>：\n    <ul>\n      <li><strong>可以在事件处理程序中执行状态更新或其他操作</strong>，因为这些操作只在用户交互时触发，且不会影响渲染过程的纯粹性。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">setCount</span><span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>延迟初始化</strong>：\n    <ul>\n      <li><strong>可以使用延迟初始化</strong>，如在组件内部调用某些初始化函数，只要这些操作不会影响其他组件或全局状态。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">SuperCalculator</span><span class=\"p\">.</span><span class=\"nf\">initializeIfNotReady</span><span class=\"p\">();</span> <span class=\"c1\">// 只要它不会影响其他地方</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>使用 <code class=\"language-plaintext highlighter-rouge\">useState</code> 初始化状态</strong>：\n    <ul>\n      <li>可以通过 <code class=\"language-plaintext highlighter-rouge\">useState</code> 初始化组件的状态，这种操作只会在组件首次渲染时执行一次。</li>\n      <li>例子：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">time</span><span class=\"p\">,</span> <span class=\"nx\">setTime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">useState</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">());</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"dont-do\">DONT DO</h3>\n\n<ol>\n  <li><strong>在渲染过程中执行副作用</strong>：\n    <ul>\n      <li><strong>不要在渲染函数中执行副作用</strong>，如修改全局变量、发起网络请求或修改 DOM，因为渲染函数可能会被多次调用。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">ProductDetail</span><span class=\"p\">({</span> <span class=\"nx\">product</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"nx\">product</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span> <span class=\"c1\">// ❌ 错误：不应该在渲染中修改 DOM</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>修改 <code class=\"language-plaintext highlighter-rouge\">props</code> 或 <code class=\"language-plaintext highlighter-rouge\">state</code></strong>：\n    <ul>\n      <li><strong>不要直接修改 <code class=\"language-plaintext highlighter-rouge\">props</code> 或 <code class=\"language-plaintext highlighter-rouge\">state</code></strong>，因为它们是不可变的。如果直接修改，React 将无法知道这些变化，导致 UI 不更新。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// ❌ 错误：直接修改状态变量</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>修改非本地变量</strong>：\n    <ul>\n      <li><strong>不要修改在组件外部创建的变量</strong>，因为这些变量在组件重新渲染时会保留之前的值，从而导致意想不到的行为。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> <span class=\"c1\">// ❌ 错误：在组件外部创建</span>\n<span class=\"kd\">function</span> <span class=\"nf\">FriendList</span><span class=\"p\">({</span> <span class=\"nx\">friends</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"k\">for </span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">friend</span> <span class=\"k\">of</span> <span class=\"nx\">friends</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Friend</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">friend</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span> <span class=\"nx\">friend</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">friend</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/ul&gt;</span><span class=\"err\">;\n</span><span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>使用不幂等的函数（如 <code class=\"language-plaintext highlighter-rouge\">new Date()</code> 和 <code class=\"language-plaintext highlighter-rouge\">Math.random()</code>）</strong>：\n    <ul>\n      <li><strong>不要在渲染过程中使用不幂等的函数</strong>，如 <code class=\"language-plaintext highlighter-rouge\">new Date()</code> 或 <code class=\"language-plaintext highlighter-rouge\">Math.random()</code>，因为它们每次调用时返回的值都不同，这会破坏组件的幂等性。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">Clock</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Date</span><span class=\"p\">();</span> <span class=\"c1\">// ❌ 错误：每次渲染都会得到不同的结果</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">time</span><span class=\"p\">.</span><span class=\"nf\">toLocaleTimeString</span><span class=\"p\">()}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">;\n</span><span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li><strong>在 JSX 传递后修改值</strong>：\n    <ul>\n      <li><strong>不要在 JSX 被创建后修改与之相关的值</strong>，因为 React 可能会提前计算 JSX，并且不会跟踪之后的值变化。</li>\n      <li>错误示例：\n        <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nf\">Page</span><span class=\"p\">({</span> <span class=\"nx\">color</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">color</span><span class=\"p\">,</span> <span class=\"na\">size</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">large</span><span class=\"dl\">'</span> <span class=\"p\">};</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">header</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">Header</span> <span class=\"nx\">styles</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"err\">;\n</span>  <span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">small</span><span class=\"dl\">'</span><span class=\"p\">;</span> <span class=\"c1\">// ❌ 错误：在 JSX 创建后修改 styles</span>\n  <span class=\"k\">return </span><span class=\"p\">(</span>\n    <span class=\"o\">&lt;&gt;</span>\n      <span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"p\">}</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Footer</span> <span class=\"nx\">styles</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">styles</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"总结\">总结</h3>\n\n<ul>\n  <li><strong>可以做的事情</strong>：局部变更、使用 <code class=\"language-plaintext highlighter-rouge\">useEffect</code> 执行副作用、在事件处理程序中执行操作、使用延迟初始化和 <code class=\"language-plaintext highlighter-rouge\">useState</code>。</li>\n  <li><strong>不可以做的事情</strong>：在渲染期间执行副作用、直接修改 <code class=\"language-plaintext highlighter-rouge\">props</code> 或 <code class=\"language-plaintext highlighter-rouge\">state</code>、修改非本地变量、使用不幂等函数和在 JSX 创建后修改值。</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/react/2024/09/12/react-1/'> <img src='/images/covers/react.png' alt='React设计思想（一） —— Components and Hooks must be pure'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2024-09-12T11:10:34+10:00'>Sep 12, 2024</time> </span> </div><h2 class='article__title'>React设计思想（一） —— Components and Hooks must be pure</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/React' class='article__tag'>React</a>  <a href='/zh-cn/tag/JavaScript' class='article__tag'>JavaScript</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "K8s笔记（三）Master 和 Worker 的概念",
      "category" : "",
      "tags"     : "Kubernetes",
      "url"      : "/zh-cn/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%B8%89/",
      "date"     : "May 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#master-节点\" id=\"markdown-toc-master-节点\">Master 节点</a></li>\n  <li><a href=\"#worker-节点\" id=\"markdown-toc-worker-节点\">Worker 节点</a></li>\n</ol>\n\n<h2 id=\"master-节点\">Master 节点</h2>\n\n<p>Master节点是Kubernetes集群的控制中心，负责管理集群的状态、调度应用程序、处理集群事件和监控集群健康状态。Master节点通常包含以下核心组件：</p>\n\n<ul>\n  <li>\n    <p><strong>API Server（kube-apiserver）</strong>：作为Kubernetes集群的前端接口，所有的管理操作都通过API Server进行。它负责接收和处理来自用户、命令行工具和其他组件的请求，并将请求转发给合适的组件进行处理。</p>\n  </li>\n  <li>\n    <p><strong>Scheduler（kube-scheduler）</strong>：负责根据应用程序的资源需求和集群的状态，将Pod调度到可用的Worker节点上运行。调度器根据预定义的调度策略选择最佳的节点来运行Pod。</p>\n  </li>\n  <li>\n    <p><strong>Controller Manager（kube-controller-manager）</strong>：包含多个控制器，负责维护集群的期望状态。常见的控制器包括Replication Controller、Namespace Controller、Node Controller等，它们确保集群中的各种资源处于所期望的状态。</p>\n  </li>\n  <li>\n    <p><strong>etcd</strong>：一个分布式键值存储，用于存储 Kubernetes 集群的配置信息和状态。etcd作为Master节点的数据存储后端，提供持久化存储和高可用性。</p>\n  </li>\n</ul>\n\n<h2 id=\"worker-节点\">Worker 节点</h2>\n\n<p>Worker节点是Kubernetes集群中的工作节点，负责运行应用程序的容器实例。每个Worker节点上都运行着一个叫做kubelet的代理程序，它负责与Master节点通信，并管理节点上的Pod生命周期。此外，Worker节点还包含以下核心组件：</p>\n\n<ul>\n  <li>\n    <p><strong>kubelet</strong>：是一个运行在每个Worker节点上的代理程序，负责接收来自API Server的Pod创建请求，并确保Pod处于运行状态。管理节点上的容器，包括创建、启动、停止等操作，并与 Master 节点交互以获取 Pod 的调度信息。kubelet还负责监控节点上的容器，并将容器的状态报告给Master节点。</p>\n  </li>\n  <li>\n    <p><strong>Kube-proxy</strong>：负责为Pod提供网络代理和负载均衡服务。它维护着集群中的网络规则，并将请求路由到正确的Pod上。</p>\n  </li>\n  <li>\n    <p><strong>Container Runtime</strong>：负责在Worker节点上运行容器。常见的Container Runtime包括Docker、containerd等，它们负责管理容器的生命周期、文件系统和网络配置等。</p>\n  </li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%B8%89/'> <img src='/images/covers/k8s.png' alt='K8s笔记（三）Master 和 Worker 的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-05-24T20:18:52+10:00'>May 24, 2024</time> </span> </div><h2 class='article__title'>K8s笔记（三）Master 和 Worker 的概念</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Kubernetes' class='article__tag'>Kubernetes</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "K8s笔记（二）基本概念（二）",
      "category" : "",
      "tags"     : "Kubernetes",
      "url"      : "/zh-cn/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%BA%8C/",
      "date"     : "May 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#k8s概念补充\" id=\"markdown-toc-k8s概念补充\">k8s概念补充</a>    <ol>\n      <li><a href=\"#namespace\" id=\"markdown-toc-namespace\">Namespace</a></li>\n      <li><a href=\"#configmap-和-secret\" id=\"markdown-toc-configmap-和-secret\">ConfigMap 和 Secret</a>        <ol>\n          <li><a href=\"#configmap\" id=\"markdown-toc-configmap\">ConfigMap</a></li>\n          <li><a href=\"#secret\" id=\"markdown-toc-secret\">Secret</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#volume\" id=\"markdown-toc-volume\">Volume</a></li>\n      <li><a href=\"#statefulset\" id=\"markdown-toc-statefulset\">StatefulSet</a></li>\n      <li><a href=\"#daemonset\" id=\"markdown-toc-daemonset\">DaemonSet</a></li>\n      <li><a href=\"#service-accounts-和-rbac\" id=\"markdown-toc-service-accounts-和-rbac\">Service Accounts 和 RBAC</a>        <ol>\n          <li><a href=\"#service-accounts\" id=\"markdown-toc-service-accounts\">Service Accounts</a></li>\n          <li><a href=\"#rbac\" id=\"markdown-toc-rbac\">RBAC</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n<h2 id=\"k8s概念补充\">k8s概念补充</h2>\n\n<p>除了笔记一中的基本概念，还有一些概念仍然需要了解</p>\n\n<h3 id=\"namespace\">Namespace</h3>\n\n<p>命名空间是 Kubernetes 中用来隔离不同资源的逻辑空间。通过命名空间，可以将不同的资源划分到不同的分组中，以实现资源隔离和管理。</p>\n\n<h3 id=\"configmap-和-secret\">ConfigMap 和 Secret</h3>\n\n<h4 id=\"configmap\">ConfigMap</h4>\n\n<p>ConfigMap 是一种 API 对象，用来将非机密性的数据保存到键值对中。使用时， <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a> 可以将其用作环境变量、命令行参数或者存储卷中的配置文件。</p>\n\n<p>ConfigMap 将你的环境配置信息和<a href=\"https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-image\">容器镜像</a>解耦，便于应用配置的修改。</p>\n\n<p>ConfigMap 并不提供保密或者加密功能。 如果你想存储的数据是机密的，请使用 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/\">Secret</a>， 或者使用其他第三方工具来保证你的数据的私密性，而不是用 ConfigMap。</p>\n\n<p>使用 ConfigMap 来将你的配置数据和应用程序代码分开。</p>\n\n<p>假设你正在开发一个应用，它可以在你自己的电脑上（用于开发）和在服务器（用于实际运行）。 你的代码里有一段是用于查看环境变量 <code class=\"language-plaintext highlighter-rouge\">DATABASE_HOST</code>，在本地运行时， 你将这个变量设置为 <code class=\"language-plaintext highlighter-rouge\">localhost</code>，在云上，你将其设置为引用 Kubernetes 集群中的公开数据库组件的 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/\">服务</a>。</p>\n\n<p>这让你可以获取在云中运行的容器镜像，并且如果有需要的话，在本地调试完全相同的代码。</p>\n\n<h4 id=\"secret\">Secret</h4>\n\n<p>Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。 这样的信息可能会被放在 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a> 规约中或者镜像中。 使用 Secret 意味着你不需要在应用程序代码中包含机密数据。</p>\n\n<p>由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将敏感数据写入非易失性存储。</p>\n\n<p>Secret 类似于 <a href=\"https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/\">ConfigMap</a> 但专门用于保存机密数据。</p>\n\n<p>可以将 Secret 用于以下场景：</p>\n\n<ul>\n  <li><a href=\"https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/distribute-credentials-secure/#define-container-environment-variables-using-secret-data\">设置容器的环境变量</a>。</li>\n  <li><a href=\"https://kubernetes.io/zh-cn/docs/tasks/inject-data-application/distribute-credentials-secure/#provide-prod-test-creds\">向 Pod 提供 SSH 密钥或密码等凭据</a>。</li>\n  <li><a href=\"https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/pull-image-private-registry/\">允许 kubelet 从私有镜像仓库中拉取镜像</a>。</li>\n</ul>\n\n<p>Kubernetes 控制面也使用 Secret； 例如，<a href=\"https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/#bootstrap-token-secrets\">引导令牌 Secret</a> 是一种帮助自动化节点注册的机制。</p>\n\n<h3 id=\"volume\">Volume</h3>\n\n<p>Volume 是 Kubernetes 中用来持久化数据的一种机制。</p>\n\n<p>容器中的文件在磁盘上是临时存放的，这给在容器中运行较重要的应用带来一些问题。 当容器崩溃或停止时会出现一个问题。此时容器状态未保存， 因此在容器生命周期内创建或修改的所有文件都将丢失。 在崩溃期间，kubelet 会以干净的状态重新启动容器。 当多个容器在一个 Pod 中运行并且需要共享文件时，会出现另一个问题。 跨所有容器设置和访问共享文件系统具有一定的挑战性。</p>\n\n<h3 id=\"statefulset\">StatefulSet</h3>\n\n<p>StatefulSet 和 Deployment 在 Kubernetes 中都是用来管理应用程序副本的对象，但它们有一些重要的区别：</p>\n\n<ol>\n  <li><strong>稳定标识符</strong>：\n    <ul>\n      <li>在 Deployment 中，每个副本都是相互替换的，它们之间没有特定的标识符。这意味着，如果某个副本挂了，它可以被任何一个新的副本替代，而且新的副本可能会拥有不同的 IP 地址或者主机名。</li>\n      <li>在 StatefulSet 中，每个副本都有一个稳定的标识符，通常以有序的数字序列来命名，比如 <code class=\"language-plaintext highlighter-rouge\">pod-0</code>, <code class=\"language-plaintext highlighter-rouge\">pod-1</code>, <code class=\"language-plaintext highlighter-rouge\">pod-2</code> 等。这意味着每个副本在整个生命周期中都会保持相同的标识符，不会随着重新启动或者替换而改变。</li>\n    </ul>\n  </li>\n  <li><strong>持久化存储</strong>：\n    <ul>\n      <li>StatefulSet 在设计上更适合需要持久化存储的应用程序，比如数据库。它支持为每个副本分配持久化的存储卷，确保即使副本被重新启动或者替换，数据依然可以保持不变。</li>\n      <li>Deployment 通常用于无状态应用程序，它们不需要持久化存储，每个副本之间可以相互替换而不会影响应用程序的状态。</li>\n    </ul>\n  </li>\n  <li><strong>Pod顺序和管理</strong>：\n    <ul>\n      <li>在 StatefulSet 中，Pods 的创建、删除和更新顺序是有保障的。每个 Pod 都会按照其索引顺序进行创建和删除，并且在删除时会确保先删除索引较大的 Pod，再删除索引较小的 Pod，以确保数据的稳定性。</li>\n      <li>在 Deployment 中，Pods 的创建、删除和更新顺序是不确定的。它们之间没有任何的顺序保证，每个 Pod 可能会在任何时候被创建、删除或更新。</li>\n    </ul>\n  </li>\n</ol>\n\n<p>综上所述，StatefulSet 和 Deployment 在管理应用程序副本时有着不同的特点和适用场景。StatefulSet 更适用于需要稳定标识符和持久化存储的有状态应用程序，而 Deployment 则更适用于无状态应用程序。</p>\n\n<h3 id=\"daemonset\">DaemonSet</h3>\n\n<p>DaemonSet 就像是给你的应用程序派发任务的机器人。</p>\n\n<p>想象一下你有一个快递公司，你的快递公司有很多车，每辆车都负责在特定的区域内派送包裹。而 DaemonSet 就像是给每辆车一个任务清单，让它们在自己负责的区域内派送包裹。</p>\n\n<p>举个例子，假设你的快递公司需要在每个城市（Node）的街道上放置一个监控摄像头（Pod）。你可以使用 DaemonSet 来管理这些监控摄像头的部署。DaemonSet 会确保在<strong>每个节点上都有一个摄像头运行</strong>，而且这个摄像头只会运行在负责监控的节点上，而不会运行在其他节点上。</p>\n\n<p>另外，如果你的快递公司需要在新增一个城市的时候自动部署监控摄像头，DaemonSet 也可以帮你完成这个任务。它会自动在新的节点上部署摄像头，确保新的城市也能被监控到。</p>\n\n<p>总的来说，DaemonSet 就像是给你的应用程序派发任务的机器人，它会确保在每个节点上都运行着你需要的应用程序，并且可以根据需要自动部署新的应用程序副本。</p>\n\n<h3 id=\"service-accounts-和-rbac\">Service Accounts 和 RBAC</h3>\n\n<p>Service Accounts 和 RBAC（Role-Based Access Control）是 Kubernetes 中两个不同的安全机制，它们分别负责管理不同层面的权限和访问控制。</p>\n\n<ol>\n  <li><strong>Service Accounts（服务账号）</strong>：\n    <ul>\n      <li>Service Accounts 是 Kubernetes 中用于身份认证的机制，它允许 Pod 或其他 Kubernetes 资源在集群中进行认证和授权。</li>\n      <li>每个 Pod 都与一个 Service Account 相关联，用于表示 Pod 的身份。Service Account 可以被分配给 Pod，使得 Pod 可以在集群中进行各种操作，比如与其他服务进行通信、访问存储卷等。</li>\n      <li>Service Accounts 通常用于标识和区分不同的应用程序或服务，以便 Kubernetes 能够识别和控制它们的行为。</li>\n    </ul>\n  </li>\n  <li><strong>RBAC（Role-Based Access Control，基于角色的访问控制）</strong>：\n    <ul>\n      <li>RBAC 是 Kubernetes 中用于控制用户或服务账号对集群资源的访问权限的一种机制。</li>\n      <li>RBAC 允许集群管理员定义一组角色（Role），每个角色定义了一组权限（比如读取、写入、删除等），然后将这些角色分配给用户或服务账号。</li>\n      <li>RBAC 还允许集群管理员定义角色绑定（RoleBinding），将角色和用户或服务账号进行关联，以告诉 Kubernetes 谁可以在集群中做什么操作。</li>\n      <li>RBAC 的作用范围更广，它可以控制用户或服务账号对集群中任意资源的访问权限，而不仅仅局限于身份认证。</li>\n    </ul>\n  </li>\n</ol>\n\n<p>综上所述，Service Accounts 主要用于身份认证，用于标识和区分不同的应用程序或服务；而 RBAC 则是用于控制用户或服务账号对集群资源的访问权限，通过定义角色和角色绑定来实现精细的权限控制。两者在功能和应用范围上有所不同，但在 Kubernetes 中共同作用于保障集群的安全性和稳定性。</p>\n\n<h4 id=\"service-accounts\">Service Accounts</h4>\n\n<p>Service Account 就像是给你的应用程序一张身份证。</p>\n\n<p>想象一下你带着你的身份证去办理各种业务，比如办银行卡、购物、或者验证身份。在 Kubernetes 中，Service Account 就扮演着类似的角色。它为你的应用程序提供了一个身份，让你的应用程序能够在集群中进行各种操作，比如创建、删除、或者修改资源。</p>\n\n<p>举个例子，假设你的应用程序需要从其他服务中获取一些数据，或者向数据库中写入一些数据。这些操作通常需要进行身份验证，以确保只有授权的应用程序才能进行这些操作。而 Service Account 就提供了这样的身份验证机制，确保你的应用程序能够在 Kubernetes 集群中进行安全的操作。</p>\n\n<p>另外，Service Account 还可以帮助你的应用程序与其他 Kubernetes 资源进行通信，比如调用其他服务、访问存储卷、或者监视集群中的事件。</p>\n\n<p>总的来说，Service Account 就像是给你的应用程序一张身份证一样，为你的应用程序提供了身份验证和授权机制，确保你的应用程序能够安全地在 Kubernetes 集群中进行各种操作。</p>\n\n<h4 id=\"rbac\">RBAC</h4>\n\n<p>RBAC 就像是应用程序门禁系统。</p>\n\n<p>想象一下你有一栋大楼，里面有很多房间和很多人。为了保护楼内的安全，你安装了一套门禁系统。这套门禁系统会根据每个人的身份和权限来决定他们能够进入哪些房间。</p>\n\n<p>在 Kubernetes 中，RBAC 就扮演着类似的角色。它允许你设置不同用户或者服务账号的权限，以控制他们能够访问哪些资源和执行哪些操作。比如，你可以设置一个用户只能读取某个命名空间中的 Pod，而另一个用户则可以读写所有的 Deployment。</p>\n\n<p>RBAC 的工作原理很简单：你设置一些角色（Role）和角色绑定（RoleBinding），然后将它们分配给用户或者服务账号。角色定义了一组权限，比如读取、写入、删除等操作，而角色绑定则将角色和用户或者服务账号进行关联，告诉 Kubernetes 谁能够做什么。</p>\n\n<p>总的来说，RBAC 就像是给你的应用程序安装了一套门禁系统一样，通过设置角色和权限来控制用户或者服务账号对 Kubernetes 资源的访问和操作，保护你的集群的安全。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%BA%8C/'> <img src='/images/covers/k8s.png' alt='K8s笔记（二）基本概念（二）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-05-24T14:20:48+10:00'>May 24, 2024</time> </span> </div><h2 class='article__title'>K8s笔记（二）基本概念（二）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Kubernetes' class='article__tag'>Kubernetes</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "K8s笔记（一）基本概念（一）",
      "category" : "",
      "tags"     : "Kubernetes",
      "url"      : "/zh-cn/2024/05/23/K8s%E7%AC%94%E8%AE%B0-%E4%B8%80/",
      "date"     : "May 23, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#k8s架构图\" id=\"markdown-toc-k8s架构图\">K8s架构图</a></li>\n  <li><a href=\"#k8s概念\" id=\"markdown-toc-k8s概念\">k8s概念</a>    <ol>\n      <li><a href=\"#nodepod和control-plane\" id=\"markdown-toc-nodepod和control-plane\">Node，Pod和Control plane</a>        <ol>\n          <li><a href=\"#理解-node\" id=\"markdown-toc-理解-node\">理解 Node</a></li>\n          <li><a href=\"#理解-pod\" id=\"markdown-toc-理解-pod\">理解 Pod</a></li>\n          <li><a href=\"#理解-control-plane\" id=\"markdown-toc-理解-control-plane\">理解 Control Plane</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#replicasetdeployment和service\" id=\"markdown-toc-replicasetdeployment和service\">ReplicaSet，Deployment和Service</a>        <ol>\n          <li><a href=\"#理解-replicaset\" id=\"markdown-toc-理解-replicaset\">理解 ReplicaSet</a>            <ol>\n              <li><a href=\"#使用-replicaset\" id=\"markdown-toc-使用-replicaset\">使用 ReplicaSet</a></li>\n            </ol>\n          </li>\n          <li><a href=\"#理解-deployment\" id=\"markdown-toc-理解-deployment\">理解 Deployment</a>            <ol>\n              <li><a href=\"#使用-deployment\" id=\"markdown-toc-使用-deployment\">使用 Deployment</a></li>\n            </ol>\n          </li>\n          <li><a href=\"#理解-service\" id=\"markdown-toc-理解-service\">理解 Service</a></li>\n          <li><a href=\"#servicedeployment-和-replicaset-协同工作\" id=\"markdown-toc-servicedeployment-和-replicaset-协同工作\">Service、Deployment 和 ReplicaSet 协同工作</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<p>今天去参加了<a href=\"https://www.meetup.com/k8s-au/\">K8SUG</a>的会议（主要内容包括GitOps、FluxCD等内容），才发现自己对K8S的理解仅限于管理容器化的微服务，因此，我决定花一些时间学习K8S，起码先跑通一个Quick start.</p>\n\n<h2 id=\"k8s架构图\">K8s架构图</h2>\n\n<p><img src=\"https://kubernetes.io/images/docs/kubernetes-cluster-architecture.svg\" alt=\"Kubernetes 组件\" /></p>\n\n<h2 id=\"k8s概念\">k8s概念</h2>\n\n<h3 id=\"nodepod和control-plane\">Node，Pod和Control plane</h3>\n\n<p>一组工作机器，称为<a href=\"https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/\">nodes</a>（K8S中的工作机器称为节点，通俗来讲是运行容器化程序的那台电脑（服务器））， 会运行容器化应用程序。每个集群至少有一个工作节点（worker nodes）。</p>\n\n<p>工作节点会托管 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a>（Pod表示你的集群上一组正在运行的容器），而 Pod 就是作为应用负载的组件。 <a href=\"https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane\">Control plane</a>（控制平面指的是容器编排层，暴露API和接口来定义、部署容器和管理容器的生命周期）管理集群中的worker node和 Pod。 在生产环境中，控制平面通常跨多台计算机运行， 一个集群通常运行多个节点，提供容错性和高可用性。</p>\n\n<p>一个正常运行的 Kubernetes 集群如下：</p>\n\n<p><img src=\"https://kubernetes.io/images/docs/components-of-kubernetes.svg\" alt=\"Kubernetes 的组件\" /></p>\n\n<h4 id=\"理解-node\">理解 Node</h4>\n\n<p>K8s 通过将容器放入在Node上运行的 Pod 中来执行你的<a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/\">工作负载</a>（即运行在K8s的应用程序）。Node可以是一个虚拟机或者物理机器。 每个节点包含运行 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a> 所需的服务。</p>\n\n<p>通常集群中会有若干个Nodes；而在一个学习所用或者资源受限的环境中，你的集群中也可能只有一个Node。</p>\n\n<p>节点上的<a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#node-components\">node-components</a>包括 <a href=\"https://kubernetes.io/docs/reference/generated/kubelet\">kubelet</a>（每个Node上都会运行的代理，保证容器都运行在Pod中）、 <a href=\"https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes\">container-runtimes</a>（负责运行容器的软件）以及 <a href=\"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-proxy/\">kube-proxy</a>（Node的网络代理）。</p>\n\n<h4 id=\"理解-pod\">理解 Pod</h4>\n\n<p>当我们谈论Kubernetes中的 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a> 时，可以把它想象成一个容器的集合，就像是一个包含多个小容器的“盒子”。这些小容器可以是应用程序的不同部分，比如前端、后端或者数据库。Pod提供了一个容器们可以“住”的地方，它们可以一起工作，共享资源，互相帮助。</p>\n\n<p>在实际情况下，你可以把Pod比作一辆载人的汽车，而每个容器就是车上的一个乘客。这些乘客可能是团队中的不同成员，他们需要一起到达目的地。Pod就像是这辆车，提供了载人的空间，并让这些乘客共享车上的资源，比如空调和音响系统。</p>\n\n<p>另外，Pod还可以理解为是一个小型的工作单位，就像是一个团队中的一个项目组。每个成员都有自己的任务，但他们需要共同合作才能完成整个项目。Pod就像是这个项目组，容器们在里面共同协作，完成应用程序的功能。</p>\n\n<p>综上所述，理解Kubernetes中的Pod就是理解它是容器们共同生活和工作的地方，提供了资源共享和协作的环境，使得应用程序可以高效地运行和管理。</p>\n\n<h4 id=\"理解-control-plane\">理解 Control Plane</h4>\n\n<p>当我们谈论 Kubernetes 中的 Control Plane 时，可以将其想象成是一个管理者或指挥官，负责监督整个 Kubernetes 集群的运行状态和行为。这个控制平面就像是一个指挥中心，负责协调和管理集群中的各种活动。</p>\n\n<p>想象一下，你在玩一个大型游戏，而 Control Plane 就像是游戏中的“游戏管理员”。他们负责监视游戏中的所有活动，确保一切都按照规则进行。如果有玩家需要资源或者有问题需要解决，管理员就会介入并采取行动。</p>\n\n<p>在 Kubernetes 中，Control Plane 就是类似于这个游戏管理员的存在。它由多个组件组成，比如 API Server、Scheduler、Controller Manager 和 etcd。这些组件一起工作，监视和管理着集群中的各种资源，比如 Pod、Service 和 Volume。</p>\n\n<p>所以，理解 Kubernetes 中的 Control Plane 就是理解它是集群的管理者，负责监督和协调集群中的各种活动，确保一切都运行良好。</p>\n\n<h3 id=\"replicasetdeployment和service\">ReplicaSet，Deployment和Service</h3>\n\n<h4 id=\"理解-replicaset\">理解 ReplicaSet</h4>\n\n<p>当你开始使用 Kubernetes（通常简称为K8s）时，会遇到一种叫做 ReplicaSet 的东西。ReplicaSet 的作用有点像是给你的应用程序建立备份。你可以告诉 ReplicaSet 你想要多少个副本（replica）的应用程序运行着，然后它会确保一直有那么多个副本在运行，就算有些出了问题也会自动修复。比如说，如果你告诉 ReplicaSet 你要三个副本的应用程序，它就会一直保证有三个在跑着。如果其中一个挂了，它会自动启动一个新的来替代，确保一直保持在三个副本。</p>\n\n<p>就像是你有了一个备用轮胎一样，如果一条轮胎坏了，你就能换上备用的，车还能继续跑。ReplicaSet 就是 Kubernetes 世界里的这个备用轮胎。</p>\n\n<h5 id=\"使用-replicaset\">使用 ReplicaSet</h5>\n\n<p>当你在使用 Kubernetes 管理你的应用程序时，你可能会想确保你的应用程序一直可用，即使在某些情况下出现故障。这时候 ReplicaSet 就非常有用了。</p>\n\n<p>想象一下，你有一个网络商店，每天都有成千上万的用户在上面购物。你的网站是通过 Kubernetes 来管理的，而 ReplicaSet 就是 Kubernetes 中负责确保你的网站一直在线的工具之一。</p>\n\n<p>你告诉 ReplicaSet 你希望有三个副本（也就是三个一模一样的网站）一直在运行。这样，如果有一台服务器出了问题，另外两台还能继续服务用户。如果有用户正在使用出了问题的那台服务器，Kubernetes 会自动帮你把他们重新分配到正常的服务器上，确保他们不会受到影响。</p>\n\n<p>所以，ReplicaSet 的主要应用场景就是确保你的应用程序一直在线，并且能够自动修复一些出现的故障，保持系统的稳定性和可用性。</p>\n\n<h4 id=\"理解-deployment\">理解 Deployment</h4>\n\n<p>当你在 Kubernetes 中管理你的应用程序时，你会经常听到一个叫做 Deployment 的东西。Deployment 的作用就像是你在管理一支队伍一样。</p>\n\n<p>想象一下，你有一支篮球队，你想确保每场比赛都有足够的球员参加，而且如果有球员受伤或者生病了，你希望能够很容易地替换掉他们。</p>\n\n<p>Deployment 就像是你的队伍管理器。你告诉 Deployment 你希望有多少个球员（也就是你的应用程序副本）参加比赛，然后它会确保一直有那么多个球员。如果有球员受伤了，它会自动帮你召回一个备用球员来替代。而且，Deployment 还能够帮你做一些其他的事情，比如更新应用程序版本，确保所有的球员都在同一个版本上。</p>\n\n<p>所以，Deployment 的主要作用就是确保你的应用程序一直保持在你希望的状态，并且能够方便地管理和更新应用程序。</p>\n\n<h5 id=\"使用-deployment\">使用 Deployment</h5>\n\n<p>Deployment 主要有两个主要应用场景：</p>\n\n<ol>\n  <li>\n    <p><strong>应用程序的部署和更新</strong>：\n想象一下你有一个在线商店的网站，你希望能够轻松地部署新的版本并确保网站的稳定性。Deployment 可以帮助你做到这一点。你可以告诉 Deployment 你希望有多少个副本的新版本应用程序在运行，它会自动帮你启动新的副本，并确保新版本的应用程序在运行之前旧版本的应用程序不会被停止，以确保网站的稳定性。一旦新版本的应用程序启动成功并且运行正常，Deployment 就会逐步替换旧版本的应用程序，保证整个过程的平滑进行。</p>\n  </li>\n  <li>\n    <p><strong>应用程序的扩展和收缩</strong>：\n假设你的在线商店正在进行促销活动，预计有更多的用户会访问你的网站。你可以通过修改 Deployment 的配置来告诉 Kubernetes 启动更多的副本来应对更高的流量。一旦促销活动结束，你也可以通过减少副本的数量来节省资源和成本。Deployment 可以帮助你自动完成这些操作，而无需手动管理每个副本的启动和停止。</p>\n  </li>\n</ol>\n\n<p>Deployment 使得部署、更新和管理应用程序变得更加简单和可靠。</p>\n\n<h4 id=\"理解-service\">理解 Service</h4>\n\n<p>当你在使用 Kubernetes 管理你的应用程序时，你可能会遇到一个叫做 Service 的东西。Service 的作用就像是你的应用程序的门面一样。</p>\n\n<p>想象一下你有一个很受欢迎的咖啡馆，每天都有很多人来喝咖啡。为了方便顾客，你在咖啡馆的门口设置了一个服务台，顾客可以在这里点单、支付、然后服务员会将咖啡送到他们的座位上。</p>\n\n<p>在 Kubernetes 中，Service 就是类似于这个服务台的东西。你的应用程序可能由多个副本组成，而且这些副本的 IP 地址可能会不断变化。Service 就像是你的应用程序的门面，它有一个固定的 IP 地址和一个稳定的域名，顾客（也就是其他的应用程序）只需要知道这个 IP 地址或者域名，就可以访问你的应用程序，而不需要关心背后具体哪台服务器在提供服务。</p>\n\n<p>另外，Service 还可以根据你的应用程序的需求来将流量分发到不同的副本上，确保每个副本都能够均匀地处理请求，提高了应用程序的稳定性和可靠性。</p>\n\n<p>所以，Service 在 Kubernetes 中扮演着非常重要的角色，它为你的应用程序提供了一个稳定的入口，并帮助你管理流量和确保应用程序的可用性。</p>\n\n<p>Service 在 Kubernetes 中有几个主要功能：</p>\n\n<ol>\n  <li>\n    <p><strong>稳定入口点</strong>：\nService 提供了一个固定的 IP 地址和一个稳定的域名，作为你的应用程序的入口点。无论后台的副本如何变化，顾客（其他应用程序）只需要知道 Service 的 IP 地址或者域名，就可以访问你的应用程序，而不需要关心具体的副本在哪里提供服务。</p>\n  </li>\n  <li>\n    <p><strong>负载均衡</strong>：\n当你的应用程序由多个副本组成时，Service 可以帮助你在这些副本之间均匀地分发流量，确保每个副本都能够处理到达的请求。这样可以提高应用程序的性能和可靠性。</p>\n  </li>\n  <li>\n    <p><strong>服务发现</strong>：\nService 可以帮助其他应用程序发现和连接到你的应用程序。通过查询 Kubernetes 的 DNS 或者通过环境变量来获取 Service 的 IP 地址，其他应用程序可以轻松地找到你的应用程序并与之通信。</p>\n  </li>\n  <li>\n    <p><strong>内部通信</strong>：\n在同一个 Kubernetes 集群中的不同组件之间经常需要进行通信，而这些组件可能由不同的副本组成。Service 可以帮助这些组件通过内部网络进行通信，而不需要暴露在公网上。</p>\n  </li>\n</ol>\n\n<p>Service 提供了稳定的入口点、负载均衡、服务发现和内部通信等功能，帮助你构建和管理可靠的分布式应用程序。</p>\n\n<h4 id=\"servicedeployment-和-replicaset-协同工作\">Service、Deployment 和 ReplicaSet 协同工作</h4>\n\n<p>你是一家网上商店的老板，你有一个仓库存放着各种商品。你的商店使用 Kubernetes 来管理，而你的商品就是你的应用程序。</p>\n\n<p>首先，你需要 Deployment 来管理你的商品。Deployment 就像是你的库管，负责管理仓库里的商品数量。你告诉 Deployment 你想要多少个商品（也就是副本）在库存里，它会自动帮你保持这个数量，就像库管一样，如果有商品缺货了，它会自动帮你补充。</p>\n\n<p>然后，你需要 ReplicaSet 来帮助 Deployment 实现这个功能。ReplicaSet 就像是库管的助手，帮助他确保库存里有足够数量的商品。它会监视仓库里的商品数量，如果发现有商品不够了，就会自动帮你补充，确保仓库里的商品数量符合你的要求。</p>\n\n<p>最后，你需要 Service 来让顾客能够买到商品。Service 就像是你商店的前台，接受顾客的订单并把订单传递给库管。顾客只需要知道前台的地址，就可以买到他们想要的商品，而不需要直接找库管。Service 就是帮助顾客和库管之间建立联系的桥梁，确保顾客能够顺利购买到商品。</p>\n\n<p>综上所述，Service、Deployment 和 ReplicaSet 三者之间是相互配合、相互协作的关系，共同构建了一个稳定、可靠的应用程序管理系统。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2024/05/23/K8s%E7%AC%94%E8%AE%B0-%E4%B8%80/'> <img src='/images/covers/k8s.png' alt='K8s笔记（一）基本概念（一）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-05-23T11:15:00+10:00'>May 23, 2024</time> </span> </div><h2 class='article__title'>K8s笔记（一）基本概念（一）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Kubernetes' class='article__tag'>Kubernetes</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Edit-xlsx开发日志（一）",
      "category" : "Edit-xlsx",
      "tags"     : "rust",
      "url"      : "/zh-cn/edit-xlsx/2024/01/30/Edit-xlsx%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E4%B8%80/",
      "date"     : "Jan 30, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#起因\" id=\"markdown-toc-起因\">起因</a></li>\n  <li><a href=\"#openxml及xlsx简介\" id=\"markdown-toc-openxml及xlsx简介\">OpenXml及Xlsx简介</a></li>\n  <li><a href=\"#xlsx-文件的处理\" id=\"markdown-toc-xlsx-文件的处理\">XLSX 文件的处理</a>    <ol>\n      <li><a href=\"#zip简介\" id=\"markdown-toc-zip简介\">Zip简介</a></li>\n      <li><a href=\"#walkdir简介\" id=\"markdown-toc-walkdir简介\">Walkdir简介</a></li>\n      <li><a href=\"#serde简介\" id=\"markdown-toc-serde简介\">Serde简介</a></li>\n      <li><a href=\"#quick-xml简介\" id=\"markdown-toc-quick-xml简介\">Quick-xml简介</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"起因\">起因</h2>\n<p>当我在工作中接触到一个名为POI的Java库时，我开始思考：为什么在Rust项目中找不到像POI这样的功能，能够对XLSX文件进行编辑的库呢？这个问题激发了我开发一款名为edit-xlsx的Rust库的想法。</p>\n\n<p>在我工作的过程中，我意识到虽然有一些Rust库可以用来读取和写入XLSX文件，但是却没有一个专门用于编辑XLSX文件的库。这就是我决定开发edit-xlsx库的原因。</p>\n\n<p>edit-xlsx的目标很简单：为用户提供一个方便、易于使用的工具，让他们能够轻松地编辑现有的XLSX文件。这意味着用户可以修改、添加或删除文件中的内容，而无需手动处理XLSX格式的复杂细节。</p>\n\n<p>通过开发edit-xlsx库，我希望能够填补Rust生态系统中的这一空白，并为开发人员提供一个便捷的工具，以便他们能够更轻松地处理XLSX文件，而无需依赖于其他语言或平台。这个项目的动力源于我对Rust语言的热爱，以及对解决实际问题的渴望。</p>\n\n<p>在你们看到这条博客时，我已经在crates.io中发布了<a href=\"https://crates.io/crates/edit-xlsx\">edit-xlsx</a>项目。同时，我也会不定期记录它的更新内容。</p>\n\n<h2 id=\"openxml及xlsx简介\">OpenXml及Xlsx简介</h2>\n\n<p>OpenXML是一种基于XML（可扩展标记语言）的开放式文件格式，用于创建和管理电子文档，如文档、电子表格和演示文稿。它由Microsoft在2006年推出，并成为了Office Open XML（OOXML）标准的一部分。XLSX文件就是一种使用OpenXML标准创建的电子表格文件格式之一。</p>\n\n<p>OpenXML标准中定义着XLSX文件的结构和内容，使得其能够被不同的应用程序读取和编辑，而无需使用特定的软件（如Office，LibreOffice，Numbers，WPS等）。XLSX文件是一种压缩的XML文件，其中包含了电子表格的数据、格式、图表等内容，以及与文件相关的元数据和其他信息。</p>\n\n<p>XLSX 文件实际上是一个压缩包，它内部包含了多个文件和文件夹，这些文件和文件夹共同构成了表格的结构及内容。\n为了便于理解 XLSX 文件的结构，我们将创建一个包含最基本内容的 XLSX 文档。\n注意：一个 XLSX 文件中可能不止包含这些文件。\n此外，一个只包含以下文件的 XLSX 文档不一定能够正常工作（取决于 XLSX 文档的处理软件及版本）</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- new_excel.xlsx\n    - _rels/\n        .rels\n    - <span class=\"o\">[</span>Content_Types].xml\n    - docProps/\n        - app.xml\n        - core.xml\n    - xl/\n            - _rels/\n            - workbook.xml\n            - styles.xml\n            - worksheets/\n                - sheet1.xml\n</code></pre></div></div>\n\n<p>随后，我们可以逐步了解每个文件的作用：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">_rels</code>：包含与文件之间关系的 XML 文件。其中的 <code class=\"language-plaintext highlighter-rouge\">.rels</code> 文件定义了工作簿和工作表之间的关系。</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Content_Types.xml</code>：定义了 XLSX 文件中包含的所有 XML 文件的类型。它告诉应用程序每个 XML 文件的内容类型，以便正确解析和处理这些文件。</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">docProps</code>：包含了文档的属性信息，这些信息通常是元数据，用于描述文档的作者、创建日期、最后修改日期等。它包含以下文件：\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">app.xml</code>：包含了与应用程序相关的元数据，例如文档的标题、作者、主题等。</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">core.xml</code>：包含了核心元数据，如文档的创建者、创建日期、最后修改者、最后修改日期等。</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">xl</code>：这是包含主要内容的文件夹。\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">_rels</code>：包含了与工作簿中不同部分之间关系的 XML 文件。例如，<code class=\"language-plaintext highlighter-rouge\">workbook.xml.rels</code> 文件定义了工作簿中工作表和共享字符串文件（共享字符串我们将在之后介绍）之间的关系。</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">worksheets</code>：包含了每个工作表的数据。在我们的示例中，只有一个名为 <code class=\"language-plaintext highlighter-rouge\">sheet1.xml</code> 的文件，它包含了工作表中的数据和格式信息。\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">sheet1.xml</code>：包含了工作表中的数据、单元格的样式和格式等信息。</li>\n        </ul>\n      </li>\n      <li><code class=\"language-plaintext highlighter-rouge\">workbook.xml</code>：定义了工作簿的结构，包括工作表、名称和外部链接。它描述了工作簿中包含的所有工作表的名称和位置等信息。</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">styles.xml</code>: 定义了工作簿中的样式，包括字体、颜色、数字格式等。</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"xlsx-文件的处理\">XLSX 文件的处理</h2>\n<p>我们已经知道XLSX文件的本质就是XML文件（及文件夹）的压缩包，因此对XLSX文件的处理主要包括压缩包处理（解压及压缩）及Xml处理（序列化及反序列化）两部分。</p>\n\n<p>我在下方列出了当前我为完成这些功能所依赖的库，今后可能对依赖的库进行增加或减少，而我亦会记录这些修改。</p>\n\n<h4 id=\"zip简介\">Zip简介</h4>\n<p><a href=\"https://crates.io/crates/zip\">Zip</a> 是 crates.io 中下载量最高的压缩包处理库（不排除与它的名字有关）。该库支持 XLSX 文件所使用的 deflate 算法，刚好符合我们的需求，因此我们使用 zip 库完成XLSX文件的压缩和解压。</p>\n\n<h4 id=\"walkdir简介\">Walkdir简介</h4>\n<p><a href=\"https://crates.io/crates/walkdir\">Walkdir</a> 是一个用于递归遍历目录结构并列出其中文件和子目录的 Rust 语言库。重要的是，该库是 Zip 推荐的实现压缩方法所依赖的库，因此我们结合该库完成对XLSX文件的压缩功能。</p>\n\n<h4 id=\"serde简介\">Serde简介</h4>\n<p><a href=\"https://crates.io/crates/serde\">Serde</a> 是 Rust 中最流行的序列化和反序列化库之一。其名字来源于“serialize” 和 “deserialize” 这两个单词的组合，旨在提供一种简单而灵活的方式来实现 Rust 数据结构和各种数据格式之间的转换。</p>\n\n<p>在我们的项目中，我们主要使用其 derive 功能，以快速实现对结构，枚举的序列化和反序列化。</p>\n\n<h4 id=\"quick-xml简介\">Quick-xml简介</h4>\n<p><a href=\"https://crates.io/crates/quick-xml\">quick-xml</a> 是我反复实验并挑选的最适合XLSX中xml格式的序列化/反序列化工具，与 fast-xml 等项目对比，该项目支持的特性更加全面，如支持<code class=\"language-plaintext highlighter-rouge\">@</code>，<code class=\"language-plaintext highlighter-rouge\">$</code>等方式对XML结构的attributes，value等内容的读取。而且该项目仍在维护，我很期待它今后添加更多，更易用的features。</p>\n\n<h2 id=\"总结\">总结</h2>\n<p>该篇博客记录了我对edit-xlsx项目开发的原因及预计使用的技术栈，如果时间和精力允许，我将在该栏目持续记录我的开发日志。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/edit-xlsx/2024/01/30/Edit-xlsx%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E4%B8%80/'> <img src='/images/covers/edit-xlsx-cover.png' alt='Edit-xlsx开发日志（一）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2024-01-30T18:20:05+11:00'>Jan 30, 2024</time> </span> </div><h2 class='article__title'>Edit-xlsx开发日志（一）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/rust' class='article__tag'>rust</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（十三）可选（optional）依赖项和依赖项排除（exclusion）",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%89-%E5%8F%AF%E9%80%89-optional-%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%92%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E6%8E%92%E9%99%A4-exclusion/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#可选依赖项optional-dependencies\" id=\"markdown-toc-可选依赖项optional-dependencies\">可选依赖项（Optional Dependencies）</a>    <ol>\n      <li><a href=\"#为什么使用可选依赖项\" id=\"markdown-toc-为什么使用可选依赖项\">为什么使用可选依赖项？</a></li>\n      <li><a href=\"#如何使用可选标签\" id=\"markdown-toc-如何使用可选标签\">如何使用可选标签？</a></li>\n      <li><a href=\"#可选依赖项如何工作\" id=\"markdown-toc-可选依赖项如何工作\">可选依赖项如何工作？</a></li>\n      <li><a href=\"#示例\" id=\"markdown-toc-示例\">示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#依赖项排除dependency-exclusions\" id=\"markdown-toc-依赖项排除dependency-exclusions\">依赖项排除（Dependency Exclusions）</a>    <ol>\n      <li><a href=\"#如何使用依赖项排除\" id=\"markdown-toc-如何使用依赖项排除\">如何使用依赖项排除</a></li>\n      <li><a href=\"#依赖关系排除如何运作以及何时使用-作为最后手段\" id=\"markdown-toc-依赖关系排除如何运作以及何时使用-作为最后手段\">依赖关系排除如何运作以及何时使用 <strong>（作为最后手段！）</strong></a></li>\n      <li><a href=\"#为什么要按依赖关系而不是在-pom-层面进行排除\" id=\"markdown-toc-为什么要按依赖关系而不是在-pom-层面进行排除\">为什么要按依赖关系而不是在 POM 层面进行排除</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>本节将讨论可选依赖项和依赖项排除。这将有助于用户了解它们是什么，以及何时和如何使用它们。本节还解释了为什么要按依赖关系而不是在 POM 层级进行排除。</p>\n\n<h2 id=\"可选依赖项optional-dependencies\">可选依赖项（Optional Dependencies）</h2>\n\n<p>可选依赖项用于无法（无论出于何种原因）将项目拆分成子模块的情况。我们的想法是，某些依赖项只用于项目中的某些功能，如果不使用该功能，就不需要这些依赖项。理想情况下，这样的功能会被拆分成一个依赖于核心功能项目的子模块。这个新的子项目将只有非选择性的依赖关系，因为如果您决定使用该子项目的功能，就会需要所有这些依赖关系。</p>\n\n<p>但是，由于项目无法拆分（同样，无论出于什么原因），这些依赖关系被声明为可选。如果用户想使用与可选依赖项相关的功能，就必须在自己的项目中重新声明该可选依赖项。这并不是处理这种情况的最明确方法，但可选依赖和依赖排除都是权宜之计。</p>\n\n<h3 id=\"为什么使用可选依赖项\">为什么使用可选依赖项？</h3>\n\n<p>可选依赖项可以节省空间和内存。它们能防止有问题的 jar（违反许可协议或导致 classpath 问题）被捆绑到 WAR、EAR、fat jar 或类似文件中。</p>\n\n<h3 id=\"如何使用可选标签\">如何使用可选标签？</h3>\n\n<p>通过在依赖关系声明中将 <code class=\"language-plaintext highlighter-rouge\">&lt;optional&gt;</code> 元素设置为 true，可将依赖关系声明为可选：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"c\">&lt;!-- declare the dependency to be set as optional --&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;optional&gt;</span>true<span class=\"nt\">&lt;/optional&gt;</span> <span class=\"c\">&lt;!-- value will be true or false only --&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"可选依赖项如何工作\">可选依赖项如何工作？</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-A -&gt; Project-B\n</code></pre></div></div>\n\n<p>上图表示项目 A 依赖于项目 B。当 A 在其 POM 中将 B 声明为可选依赖项时，这种关系将保持不变。这就像正常编译一样，Project-B 会被添加到 Project-A 的 classpath 中。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-X -&gt; Project-A\n</code></pre></div></div>\n\n<p>当另一个项目（Project-X）在其 POM 中将 项目-A 声明为依赖关系时，依赖关系的可选性就会生效。项目-B 并不包含在项目-X 的 classpath 中。您需要在项目-X 的 POM 中直接声明，这样 B 才能包含在 X 的 classpath 中。</p>\n\n<h3 id=\"示例\">示例</h3>\n\n<p>假设有一个名为 X2 的项目，其功能与 Hibernate 类似。它支持多种数据库，如 MySQL、PostgreSQL 和多个版本的 Oracle。每个受支持的数据库都需要额外依赖一个驱动 jar。编译 X2 时需要所有这些依赖项。但是，您的项目只使用一个特定的数据库，不需要其他数据库的驱动程序。X2 可以将这些依赖项声明为可选项，这样当项目在其 POM 中将 X2 声明为直接依赖项时，X2 支持的所有驱动程序就不会自动包含在项目的 classpath 中。您的项目必须为其使用的数据库的特定驱动程序加入明确的依赖关系。</p>\n\n<h2 id=\"依赖项排除dependency-exclusions\">依赖项排除（Dependency Exclusions）</h2>\n\n<p>由于 Maven 是临时解析依赖关系的，因此有可能在项目的 classpath 中包含不需要的依赖关系。例如，某个较旧的 jar 可能存在安全问题，或者与您正在使用的 Java 版本不兼容。为了解决这个问题，Maven 允许您排除特定的依赖项。排除项设置在 POM 中的特定依赖项上，并针对特定的 groupId 和 artifactId。在构建项目时，该工件将不会通过声明了排除的依赖关系添加到项目的 classpath 中。</p>\n\n<h3 id=\"如何使用依赖项排除\">如何使用依赖项排除</h3>\n\n<p>在 <code class=\"language-plaintext highlighter-rouge\">&lt;dependency&gt;</code> 元素中添加<code class=\"language-plaintext highlighter-rouge\">&lt;exclusions&gt;</code> 元素，通过该元素将有问题的 jar 包括在内。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>  <span class=\"c\">&lt;!-- declare the exclusion here --&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectB<span class=\"nt\">&lt;/groupId&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>Project-B<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span> \n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"依赖关系排除如何运作以及何时使用-作为最后手段\">依赖关系排除如何运作以及何时使用 <strong>（作为最后手段！）</strong></h3>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-A\n   -&gt; Project-B\n        -&gt; Project-D <span class=\"c\">&lt;!-- This dependency should be excluded --&gt;</span>\n              -&gt; Project-E\n              -&gt; Project-F\n   -&gt; Project C\n</code></pre></div></div>\n\n<p>图中显示，项目 A 依赖于项目 B 和 C，项目 B 依赖于项目 D。默认情况下，项目 A 的 classpath 包括</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>B, C, D, E, F\n</code></pre></div></div>\n\n<p>假设您不希望项目 D 及其依赖项被添加到项目 A 的 classpath 中，因为项目 D 的某些依赖项从资源库中丢失了，而且您也不需要项目 B 中依赖于项目 D 的功能。项目 B 的开发人员本可以将项目 D 的依赖关系标记为 <code class=\"language-plaintext highlighter-rouge\">&lt;optional&gt;true&lt;/optional&gt;</code>：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectD<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>ProjectD<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;optional&gt;</span>true<span class=\"nt\">&lt;/optional&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>不幸的是，他们没有这样做。万不得已，您可以在自己的项目 A POM 中这样排除它：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectB<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-B<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectD<span class=\"nt\">&lt;/groupId&gt;</span> <span class=\"c\">&lt;!-- Exclude Project-D from Project-B --&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>Project-D<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>如果将项目-A 部署到资源库，而项目-X 声明对项目-A 的正常依赖，那么项目-D 还会被排除在 classpath 之外吗？</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-X -&gt; Project-A\n</code></pre></div></div>\n\n<p>答案是肯定的。项目 A 已声明它不需要项目 D 来运行，因此它不会作为项目 A 的传递依赖关系被引入。</p>\n\n<p>现在，考虑项目-X 依赖于项目-Y，如下图所示：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-X -&gt; Project-Y\n               -&gt; Project-B\n                    -&gt; Project-D\n                       ...\n</code></pre></div></div>\n\n<p>项目 Y 也依赖于项目 B，而且它确实需要项目-D 支持的功能。因此，它不会在其依赖关系列表中排除项目-D。项目-Y 还可能提供一个额外的资源库，以解决项目-E 的问题。在这种情况下，重要的是项目-D 不会被全局排除，因为它是项目-Y 的合法依赖关系。</p>\n\n<p>在另一种情况下，假设你不想要的依赖关系是 Project-E，而不是 Project-D。如何将其排除在外？请看下图：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-A\n   -&gt; Project-B\n        -&gt; Project-D \n              -&gt; Project-E <span class=\"c\">&lt;!-- Exclude this dependency --&gt;</span>\n              -&gt; Project-F\n   -&gt; Project C\n</code></pre></div></div>\n\n<p>排除对声明点以下的整个依赖关系图都有效。如果想排除项目-E，而不是项目-D，只需将排除改为指向项目-E，但不能将排除向下移动到项目-D。您不能更改项目-D 的 POM。如果可以，你就可以使用可选依赖项来代替排除项，或者将项目-D 拆分成多个子项目，每个子项目都只包含正常的依赖项。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectB<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-B<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectE<span class=\"nt\">&lt;/groupId&gt;</span> <span class=\"c\">&lt;!-- Exclude Project-E from Project-B --&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>Project-E<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"为什么要按依赖关系而不是在-pom-层面进行排除\">为什么要按依赖关系而不是在 POM 层面进行排除</h3>\n\n<p>这主要是为了确保依赖关系图是可预测的，并防止继承效应将不应该被排除的依赖关系排除在外。如果您到了万不得已的地步，不得不使用排除法，那么您应该绝对确定是哪个依赖关系带来了不需要的传递依赖关系。</p>\n\n<p>如果您真的想确保某个特定依赖关系不会出现在 classpath 中（无论路径如何），那么可以配置禁止依赖关系规则，以便在发现有问题的依赖关系时使构建失败。当编译失败时，你需要在 enforcer 发现的每个路径上添加特定的排除项。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%89-%E5%8F%AF%E9%80%89-optional-%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%92%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E6%8E%92%E9%99%A4-exclusion/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（十三）可选（optional）依赖项和依赖项排除（exclusion）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2023-12-05T20:01:56+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven（十三）可选（optional）依赖项和依赖项排除（exclusion）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（十二）依赖机制简介",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/05/Maven-%E5%8D%81%E4%BA%8C-%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#传递依赖\" id=\"markdown-toc-传递依赖\">传递依赖</a></li>\n  <li><a href=\"#依赖关系作用域\" id=\"markdown-toc-依赖关系作用域\">依赖关系作用域</a></li>\n  <li><a href=\"#依赖关系管理\" id=\"markdown-toc-依赖关系管理\">依赖关系管理</a>    <ol>\n      <li><a href=\"#importing-依赖关系\" id=\"markdown-toc-importing-依赖关系\">importing 依赖关系</a></li>\n      <li><a href=\"#bom\" id=\"markdown-toc-bom\">BOM</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>依赖关系管理是 Maven 的核心功能之一。管理单个项目的依赖关系非常简单。管理由数百个模块组成的多模块项目和应用程序的依赖关系也是可能的。Maven 可帮助定义、创建和维护具有明确定义的 classpath 和库版本的可重现构建。</p>\n\n<h2 id=\"传递依赖\">传递依赖</h2>\n\n<p>Maven 通过自动包含传递依赖关系，避免了发现和指定自己的依赖关系所需的库。</p>\n\n<p>该功能通过从指定的远程资源库读取依赖项的项目文件来实现。一般来说，这些项目的所有依赖库都会在你的项目中使用，项目从其父项目或依赖库继承的任何依赖库也是如此。</p>\n\n<p>收集依赖项的层级数量没有限制。只有在发现循环依赖关系时才会出现问题。</p>\n\n<p>由于存在传递依赖关系，所包含的库图可能会迅速变大。因此，还有一些附加功能可以限制依赖关系的包含范围：</p>\n\n<ul>\n  <li><em>依赖调解（Dependency mediation）</em>：这决定了在遇到多个版本的依赖时，将选择哪个版本的工件。Maven 会选择“最近的定义”。也就是说，它会使用依赖关系树中与您的项目最接近的依赖关系的版本。您可以通过在项目的 POM 中明确声明版本来保证版本。请注意，如果两个依赖版本在依赖关系树中的深度相同，则先声明的版本胜出。\n    <ul>\n      <li>“最近定义（nearest definition）”意味着所使用的版本将是依赖关系树中与您的项目最接近的版本。请看这棵依赖关系树：</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  A\n  ├── B\n  │   └── C\n  │       └── D 2.0\n  └── E\n      └── D 1.0\n</code></pre></div></div>\n\n<p>A、B 和 C 的依赖关系定义为 A -&gt; B -&gt; C -&gt; D:2.0 和 A -&gt; E -&gt; D:1.0，那么在构建 A 时将使用 D:1.0，因为从 A 到 D 经过 E 的路径更短。您可以在 A 中明确添加对 D:2.0 的依赖，以强制使用 D:2.0，如图所示：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  A\n  ├── B\n  │   └── C\n  │       └── D 2.0\n  ├── E\n  │   └── D 1.0\n  │\n  └── D 2.0\n</code></pre></div></div>\n\n<ul>\n  <li><em>依赖关系管理（Dependency management）</em>：这允许项目作者直接指定在传递依赖关系或未指定版本的依赖关系中遇到工件时要使用的版本。在上一节的示例中，一个依赖项被直接添加到了 A 中，尽管 A 并未直接使用该依赖项。相反，A 可以将 D 作为依赖项包含在其依赖项管理（dependencyManagement）部分中，并直接控制在使用或引用 D 时使用的版本。</li>\n  <li><em>依赖范围（Dependency scope）</em>：这使您可以只包含适合当前构建阶段的依赖项。下文将对此进行详细介绍。</li>\n  <li><em>排除的依赖关系（Excluded dependencies）</em>：如果项目 X -&gt; Y -&gt; Z，则项目 X 的所有者可使用“exclusion（排除）”元素明确地将项目 Z 排除为依赖关系。</li>\n  <li><em>可选依赖关系（Optional dependencies）</em> - 如果项目 Y -&gt; Z，项目 Y 的所有者可使用“optional（可选）”元素将项目 Z 标记为可选依赖关系。当项目 X 依赖于项目 Y 时，X 将只依赖于 Y，而不依赖于 Y 的可选依赖项 Z。(将可选依赖关系视为 “默认排除 “可能会有所帮助）。</li>\n</ul>\n\n<p>尽管传递依赖关系可以隐式地包含所需的依赖关系，但明确指定源代码直接使用的依赖关系仍不失为一种好的做法。尤其是当项目的依赖关系发生变化时，这种最佳实践就会证明其价值。</p>\n\n<p>例如，假设项目 A 指定了对另一个项目 B 的依赖关系，而项目 B 指定了对项目 C 的依赖关系。如果您直接使用项目 C 中的组件，而没有在项目 A 中指定项目 C，那么当项目 B 突然更新/删除对项目 C 的依赖关系时，可能会导致构建失败。</p>\n\n<p>直接指定依赖关系的另一个原因是，它能为项目提供更好的文档：只需阅读项目中的 POM 文件，或执行 <code class=\"language-plaintext highlighter-rouge\">mvn dependency:tree</code> 就能了解更多信息。</p>\n\n<p>Maven 还提供了用于分析依赖关系的 <a href=\"https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html\">dependency:analyze</a> 插件目标：它有助于使这一最佳实践更容易实现。</p>\n\n<h2 id=\"依赖关系作用域\">依赖关系作用域</h2>\n\n<p>依赖关系作用域用于限制依赖关系的传递性，并确定依赖关系何时包含在 classpath 中。</p>\n\n<p>共有 6 种作用域：</p>\n\n<ul>\n  <li>compile</li>\n</ul>\n\n<p>这是默认作用域，在未指定任何作用域时使用。编译依赖项在项目的<strong>所有 classpath 中（编译、测试、运行）都可用</strong>。此外，这些依赖关系也会传播到依赖的项目中。</p>\n\n<ul>\n  <li>provided</li>\n</ul>\n\n<p>这与<code class=\"language-plaintext highlighter-rouge\">compile</code>很相似，但表示您希望 JDK 或容器在运行时提供依赖关系。例如，在为 Java 企业版构建 Web 应用程序时，您会将对 Servlet API 和相关 Java EE API 的依赖关系作用域设置为 <code class=\"language-plaintext highlighter-rouge\">provided</code>，因为 Web 容器会提供这些类。具有此作用域的依赖关系<strong>会添加到用于编译和测试的 classpath 中</strong>，但不会添加到运行时 classpath 中。它不具有传递性。</p>\n\n<ul>\n  <li>runtime</li>\n</ul>\n\n<p>此作用域表示编译时不需要依赖，但执行时需要。Maven 会将此作用域的依赖关系包含在<strong>运行时和测试 classpath 中</strong>，但不会包含在编译 classpath 中。</p>\n\n<ul>\n  <li>test</li>\n</ul>\n\n<p>此作用域表示应用程序的正常使用不需要依赖关系，依赖关系<strong>仅在测试编译和执行阶段</strong>可用。此作用域不具有传递性。此作用域通常用于 JUnit 和 Mockito 等测试库。如果非测试库（如 Apache Commons IO）在单元测试（<code class=\"language-plaintext highlighter-rouge\">src/test/java</code>）中使用，但不在模型代码（<code class=\"language-plaintext highlighter-rouge\">src/main/java</code>）中使用，也可使用此作用域。</p>\n\n<ul>\n  <li>system</li>\n</ul>\n\n<p>该作用域与 <code class=\"language-plaintext highlighter-rouge\">provided</code> 类似，只是您必须明确提供包含该作用域的 JAR。（可以通过dependency的systemPath元素指定依赖 JAR 的路径）工件始终可用，不会在资源库中查找。</p>\n\n<ul>\n  <li>import</li>\n</ul>\n\n<p>此作用域仅支持 <code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code> 部分中 pom 类型的依赖关系。它表示依赖关系将被指定项目的 POM 的 <code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code> 部分中的有效依赖关系列表替换。由于依赖关系已被替换，因此具有导入作用域的依赖关系实际上并不参与限制依赖关系的易变性。</p>\n\n<p>如下表所示，每个作用域（<code class=\"language-plaintext highlighter-rouge\">import</code> 除外）都会以不同的方式影响传递依赖关系。如果<strong>将依赖关系设置为左列中的作用域</strong>，那么该依赖关系与最上面一行中的作用域之间的传递依赖关系就会<strong>在主项目中产生一个依赖关系</strong>，该依赖关系的作用域列在交叉点上。如果没有列出作用域，则表示该依赖关系被省略。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th> </th>\n      <th>compile</th>\n      <th>provided</th>\n      <th>runtime</th>\n      <th>test</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>compile</td>\n      <td>compile(*)</td>\n      <td>-</td>\n      <td>runtime</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>provided</td>\n      <td>provided</td>\n      <td>-</td>\n      <td>provided</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>runtime</td>\n      <td>runtime</td>\n      <td>-</td>\n      <td>runtime</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>test</td>\n      <td>test</td>\n      <td>-</td>\n      <td>test</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>注意：这应该是运行时范围，因此必须明确列出所有编译依赖项。但是，如果您所依赖的库扩展了另一个库中的类，那么这两个库都必须在编译时可用。因此，编译时的依赖关系即使具有传递性，也仍然是编译作用域。</p>\n\n<h2 id=\"依赖关系管理\">依赖关系管理</h2>\n\n<p>依赖关系管理部分是一种集中管理依赖关系信息的机制。当一组项目继承自一个共同的父项目时，就可以将所有有关依赖关系的信息放在共同的 POM 中，并在子 POM 中对工件进行更简单的引用。通过一些示例可以很好地说明这种机制。下面这两个 POM 扩展了同一个父类：</p>\n\n<p>Project A:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>excluded-artifact<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project B:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>war<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>这两个示例 POM 有一个共同的依赖关系，每个 POM 有一个非单一依赖关系。这些信息可以这样放在父 POM 中：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>artifact-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n        <span class=\"nt\">&lt;exclusions&gt;</span>\n          <span class=\"nt\">&lt;exclusion&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>excluded-artifact<span class=\"nt\">&lt;/artifactId&gt;</span>\n          <span class=\"nt\">&lt;/exclusion&gt;</span>\n        <span class=\"nt\">&lt;/exclusions&gt;</span>\n \n      <span class=\"nt\">&lt;/dependency&gt;</span>\n \n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>war<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n \n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>这样，两个子 POM 就简单多了：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n \n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"c\">&lt;!-- This is not a jar dependency, so we must specify type. --&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"c\">&lt;!-- This is not a jar dependency, so we must specify type. --&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>war<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n \n    <span class=\"nt\">&lt;deendency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"c\">&lt;!-- This is not a jar dependency, so we must specify type. --&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>注意：</strong> 在其中两个依赖关系引用中，我们必须指定 <code class=\"language-plaintext highlighter-rouge\">&lt;type/&gt;</code> 元素。这是因为与依赖关系管理（dependencyManagement）部分匹配依赖关系引用的最小信息集实际上是<strong>{groupId、artifactId、type、classifier}</strong>。在许多情况下，这些依赖关系会引用没有 <code class=\"language-plaintext highlighter-rouge\">classifier</code> 的 <code class=\"language-plaintext highlighter-rouge\">jar</code> 工件。由于类型字段的默认值为 <code class=\"language-plaintext highlighter-rouge\">jar</code>，而默认分类器为空，因此我们可以将身份集简称为 <strong>{groupId、artifactId}</strong>。</p>\n\n<p>依赖关系管理部分的第二个也是非常重要的用途是控制用于传递依赖关系的项目版本。举个例子：</p>\n\n<p>Project A:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n <span class=\"nt\">&lt;artifactId&gt;</span>A<span class=\"nt\">&lt;/artifactId&gt;</span>\n <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n <span class=\"nt\">&lt;name&gt;</span>A<span class=\"nt\">&lt;/name&gt;</span>\n <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n   <span class=\"nt\">&lt;dependencies&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>b<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>d<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n   <span class=\"nt\">&lt;/dependencies&gt;</span>\n <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project B:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>A<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>B<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>B<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>d<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>在项目 B 上运行 maven 时，将使用 a、b、c 和 d 的 1.0 版本，而不管它们的 POM 中指定了什么版本。</p>\n\n<ul>\n  <li>a 和 c 都被声明为项目的依赖关系，因此由于依赖关系调解，使用了 1.0 版本。由于直接指定了 <code class=\"language-plaintext highlighter-rouge\">runtime</code> 作用域，因此两者都具有 <code class=\"language-plaintext highlighter-rouge\">runtime</code> 作用域。</li>\n  <li>b 定义在 B 的父级依赖关系管理部分，由于对于传递依赖关系，依赖关系管理优先于依赖关系调解，因此如果 a 或 c 的 POM 中引用了版本 1.0，则将选择版本 1.0。</li>\n  <li>最后，由于 d 是在 B 的依赖关系管理部分中指定的，如果 d 是 a 或 c 的依赖关系（或传递依赖关系），则将选择版本 1.0，这同样是因为依赖关系管理优先于依赖关系调解，而且当前 POM 的声明优先于其父声明。</li>\n</ul>\n\n<p>有关<code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code>标记的参考信息可从<a href=\"https://maven.apache.org/ref/current/maven-model/maven.html#class_DependencyManagement\">项目描述符参考</a>中获取。</p>\n\n<h3 id=\"importing-依赖关系\">importing 依赖关系</h3>\n\n<p>上一节的示例介绍了如何通过继承来指定依赖关系。但是，在大型项目中，由于一个项目只能从一个父项目继承，因此可能无法实现这一点。为此，项目可以从其他项目导入依赖。这可以通过将 POM 依赖声明为 <code class=\"language-plaintext highlighter-rouge\">&lt;scope&gt;import&lt;/scope&gt;</code> 来实现。</p>\n\n<p>Project B:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>B<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>B<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>A<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>d<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>假设 A 是上例中定义的 POM，那么最终结果也是一样的。A 的所有依赖管理关系都将并入 B，但 d 除外，因为它是在此 POM 中定义的。</p>\n\n<p>Project X:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n <span class=\"nt\">&lt;artifactId&gt;</span>X<span class=\"nt\">&lt;/artifactId&gt;</span>\n <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n <span class=\"nt\">&lt;name&gt;</span>X<span class=\"nt\">&lt;/name&gt;</span>\n <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n   <span class=\"nt\">&lt;dependencies&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.1<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>b<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n   <span class=\"nt\">&lt;/dependencies&gt;</span>\n <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project Y:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n <span class=\"nt\">&lt;artifactId&gt;</span>Y<span class=\"nt\">&lt;/artifactId&gt;</span>\n <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n <span class=\"nt\">&lt;name&gt;</span>Y<span class=\"nt\">&lt;/name&gt;</span>\n <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n   <span class=\"nt\">&lt;dependencies&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n   <span class=\"nt\">&lt;/dependencies&gt;</span>\n <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project Z:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>Z<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>Z<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>X<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>Y<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>在上面的示例中，Z 从 X 和 Y 中导入了受管理的依赖关系。其中 X 和 Y 都包含依赖关系 a，但由于 X 更先声明，且 a 并未在 Z 的依赖关系管理（dependencyManagement）中声明，因此将使用 a 的 1.1 版本而不是 1.2 版本。</p>\n\n<p>这个过程是递归的。比如若 X 导入了另一个 POM Q，那么在处理 Z 时，就会发现 Q 的所有依赖关系管理都定义在 X 中。</p>\n\n<h3 id=\"bom\">BOM</h3>\n\n<p>导入在定义相关工件的“库”时最为有效，这些工件通常是多项目构建的一部分。一个项目使用这些库中的一个或多个工件是很常见的。不过，有时很难保证使用工件的项目版本与库中分发的版本保持同步。下面的模式说明了如何创建供其他项目使用的“物料清单”（BOM）。</p>\n\n<p>项目的根是 BOM POM。它定义了将在库中创建的所有工件的版本。其他希望使用该库的项目应将此 POM 导入其 POM 的依赖关系管理（dependencyManagement）部分。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;project1Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project1Version&gt;</span>\n    <span class=\"nt\">&lt;project2Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project2Version&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project1Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project2Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>parent<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">parent</code> 子项目将 BOM POM 作为其父项目。这是一个普通的多项目 POM。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.2.12<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>commons-logging<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>commons-logging<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.1.1<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>project1<span class=\"nt\">&lt;/module&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>project2<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>接下来是实际的项目 POM：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>${project1Version}<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n \n<span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>${project2Version}<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>commons-logging<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>commons-logging<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>下面的项目展示了如何在另一个项目中使用该库，而无需指定依赖项目的版本：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>use<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>最后，在创建 <code class=\"language-plaintext highlighter-rouge\">import</code> 依赖项的项目时，请注意以下几点：</p>\n\n<ul>\n  <li>不要尝试导入在当前 POM 的子模块中定义的 POM。这样做会导致构建失败，因为它无法定位 POM。</li>\n  <li>切勿将导入 POM 声明为目标 POM 的父级（或 grandparent 等）。这样就无法解决循环问题，并会抛出异常。</li>\n  <li>在引用 POM 具有传递依赖关系的工件时，项目需要将这些工件的版本指定为依赖关系管理。不这样做会导致构建失败，因为工件可能没有指定版本。(在任何情况下，这都应被视为最佳实践，因为它能防止工件的版本从一次构建到下一次构建发生变化）。</li>\n</ul>\n\n<p>从 Maven 4.0 开始，引入了一种新的特定 BOM 包装。它允许定义在利用较新的 4.1.0 模型的项目中不作为父类使用的 BOM，同时仍与 Maven 3.x 客户端和项目完全兼容。在安装/部署时，这种 BOM 包装会利用 Maven 4 中的构建/消费 POM 功能转化为更常见的 POM 包装。因此，它与 Maven 3.x 完全兼容。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.1.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>bom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;project1Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project1Version&gt;</span>\n    <span class=\"nt\">&lt;project2Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project2Version&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project1Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project2Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n <span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/05/Maven-%E5%8D%81%E4%BA%8C-%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（十二）依赖机制简介'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>10 min read <time class='article__date' datetime='2023-12-05T19:10:42+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven（十二）依赖机制简介</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（十一）标准文件目录",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%80-%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/",
      "date"     : "Dec 5, 2023",
      "content"  : "\n<p>有了通用的标准文件目录，熟悉一个 Maven 项目的用户就能在另一个 Maven 项目中立即找到家的感觉。这样做的好处类似于采用一个网站的外观和感觉。</p>\n\n<p>下一节记录了 Maven 期望的目录布局和 Maven 创建的目录布局。请尽量遵照这一结构。如果无法做到，可以通过项目描述符覆盖这些设置。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th><code class=\"language-plaintext highlighter-rouge\">src/main/java</code></th>\n      <th>Application/Library 源代码</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/resources</code></td>\n      <td>Application/Library 资源</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/filters</code></td>\n      <td>资源过滤文件</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/webapp</code></td>\n      <td>Web 应用源码</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/test/java</code></td>\n      <td>测试源码</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/test/resources</code></td>\n      <td>测试资源</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/test/filters</code></td>\n      <td>测试资源过滤文件</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/it</code></td>\n      <td>集成测试（主要针对插件）</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/assembly</code></td>\n      <td>装配描述符</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/site</code></td>\n      <td>网站</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">LICENSE.txt</code></td>\n      <td>项目 license</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">NOTICE.txt</code></td>\n      <td>项目所依赖的库所要求的声明和归属</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">README.txt</code></td>\n      <td>项目 readme</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>最上层是描述项目的文件：<code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 文件。此外，还有供用户在收到源代码后立即阅读的文本文件： <code class=\"language-plaintext highlighter-rouge\">README.txt</code>、<code class=\"language-plaintext highlighter-rouge\">LICENSE.txt</code> 等。</p>\n\n<p>这种结构只有两个子目录：<code class=\"language-plaintext highlighter-rouge\">src</code> 和 <code class=\"language-plaintext highlighter-rouge\">target</code>。这里唯一需要的其他目录是 <code class=\"language-plaintext highlighter-rouge\">CVS</code>、<code class=\"language-plaintext highlighter-rouge\">.git</code> 或 <code class=\"language-plaintext highlighter-rouge\">.svn</code> 等元数据，以及多项目构建中的任何子项目（每个子项目的布局如上）。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">target</code> 目录用于存放构建过程中的所有输出。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">src</code> 目录包含构建项目、网站等的所有源材料。每种类型都有一个子目录：<code class=\"language-plaintext highlighter-rouge\">main</code> 用于主构建工件、<code class=\"language-plaintext highlighter-rouge\">test</code> 用于单元测试代码和资源、<code class=\"language-plaintext highlighter-rouge\">site</code> 等。</p>\n\n<p>在生成源代码的工件目录（即 <code class=\"language-plaintext highlighter-rouge\">main</code> 和 <code class=\"language-plaintext highlighter-rouge\">test</code>）中，有一个用于 <code class=\"language-plaintext highlighter-rouge\">java</code> 语言的目录（在该目录下存在正常的包层次结构），以及一个用于 <code class=\"language-plaintext highlighter-rouge\">resources</code> 的目录（根据默认资源定义复制到目标 classpath 的结构）。</p>\n\n<p>如果在构件构建过程中有其他贡献源，它们将位于其他子目录下。例如，<code class=\"language-plaintext highlighter-rouge\">src/main/antlr</code> 包含 Antlr 语法定义文件。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%80-%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（十一）标准文件目录'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-12-05T14:41:05+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven（十一）标准文件目录</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（十）配置文件（Profiles）简介",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/05/Maven-%E5%8D%81-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Profiles-%E7%AE%80%E4%BB%8B/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#有哪些不同的配置在哪里定义\" id=\"markdown-toc-有哪些不同的配置在哪里定义\">有哪些不同的配置，在哪里定义</a></li>\n  <li><a href=\"#配置激活\" id=\"markdown-toc-配置激活\">配置激活</a>    <ol>\n      <li><a href=\"#配置激活细节\" id=\"markdown-toc-配置激活细节\">配置激活细节</a>        <ol>\n          <li><a href=\"#显式激活\" id=\"markdown-toc-显式激活\">显式激活</a></li>\n          <li><a href=\"#隐式激活\" id=\"markdown-toc-隐式激活\">隐式激活</a>            <ol>\n              <li><a href=\"#jdk-激活\" id=\"markdown-toc-jdk-激活\">JDK 激活</a></li>\n              <li><a href=\"#os-激活\" id=\"markdown-toc-os-激活\">OS 激活</a></li>\n              <li><a href=\"#property-激活\" id=\"markdown-toc-property-激活\">property 激活</a></li>\n              <li><a href=\"#文件激活\" id=\"markdown-toc-文件激活\">文件激活</a></li>\n            </ol>\n          </li>\n          <li><a href=\"#多种条件激活\" id=\"markdown-toc-多种条件激活\">多种条件激活</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#停用配置文件\" id=\"markdown-toc-停用配置文件\">停用配置文件</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#配置可以指定的内容\" id=\"markdown-toc-配置可以指定的内容\">配置可以指定的内容</a>    <ol>\n      <li><a href=\"#外部文件配置\" id=\"markdown-toc-外部文件配置\">外部文件配置</a></li>\n      <li><a href=\"#pom-配置\" id=\"markdown-toc-pom-配置\">POM 配置</a></li>\n      <li><a href=\"#profiles-以外的-pom-元素\" id=\"markdown-toc-profiles-以外的-pom-元素\"><code class=\"language-plaintext highlighter-rouge\">&lt;profiles&gt;</code> 以外的 POM 元素</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#配置优先级\" id=\"markdown-toc-配置优先级\">配置优先级</a></li>\n  <li><a href=\"#配置误区\" id=\"markdown-toc-配置误区\">配置误区</a>    <ol>\n      <li><a href=\"#外部属性定义\" id=\"markdown-toc-外部属性定义\">外部属性定义</a></li>\n      <li><a href=\"#自然环境配置的不规范\" id=\"markdown-toc-自然环境配置的不规范\">自然环境配置的不规范</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#如何判断哪些配置文件在构建过程中生效\" id=\"markdown-toc-如何判断哪些配置文件在构建过程中生效\">如何判断哪些配置文件在构建过程中生效？</a></li>\n  <li><a href=\"#命名规范\" id=\"markdown-toc-命名规范\">命名规范</a></li>\n</ol>\n\n<p>Apache Maven 竭尽全力确保构建的可移植性。除其他事项外，这意味着允许在 POM 中进行构建配置，避免<strong>所有文件系统引用</strong>（在继承、依赖关系和其他地方），并更加依赖本地存储库来存储实现这一点所需的元数据。</p>\n\n<p>不过，有时可移植性并不完全可行。在某些情况下，插件可能需要配置本地文件系统路径。在其他情况下，可能需要稍有不同的依赖关系集，项目的构件名称也可能需要稍作调整。有时，根据检测到的构建环境，甚至可能需要在构建生命周期中包含整个插件。</p>\n\n<p>针对这些情况，Maven 支持构建配置文件。配置文件使用 POM 中可用元素的子集（外加一个额外部分）进行指定，并以多种方式触发。它们在构建时对 POM 进行修改，旨在通过互补集为一组目标环境提供等效但不同的参数（例如，提供开发、测试和生产环境中 appserver 根目录的路径）。因此，配置文件很容易导致团队中的不同成员产生不同的构建结果。不过，只要使用得当，配置文件仍能保持项目的可移植性。这也将最大限度地减少 maven 的 <code class=\"language-plaintext highlighter-rouge\">-f</code> 选项的使用，该选项允许用户创建另一个 POM，并使用不同的参数或配置进行构建，这将使其更易于维护，因为它只使用一个 POM 运行。</p>\n\n<h2 id=\"有哪些不同的配置在哪里定义\">有哪些不同的配置，在哪里定义</h2>\n\n<ul>\n  <li>\n    <p>项目配置</p>\n\n    <ul>\n      <li>在 POM 文件中定义 <code class=\"language-plaintext highlighter-rouge\">(pom.xml)</code>.</li>\n    </ul>\n  </li>\n  <li>\n    <p>用户配置</p>\n\n    <ul>\n      <li>在用户 <a href=\"https://maven.apache.org/ref/current/maven-settings/settings.html\">Maven 设置</a> 中定义<code class=\"language-plaintext highlighter-rouge\">(%USER_HOME%/.m2/settings.xml)</code>.</li>\n    </ul>\n  </li>\n  <li>\n    <p>全局配置</p>\n\n    <ul>\n      <li>在全局 <a href=\"https://maven.apache.org/ref/current/maven-settings/settings.html\">Maven 设置</a> 中定义<code class=\"language-plaintext highlighter-rouge\">(${maven.home}/conf/settings.xml)</code>.</li>\n    </ul>\n  </li>\n  <li>\n    <p>配置文件描述</p>\n\n    <ul>\n      <li>位于项目 basedir（<a href=\"(https://maven.apache.org/ref/2.2.1/maven-profile/profiles.html)\">profiles.xml</a>）中的描述符（Maven 3.0 及以上版本不再支持该描述符；请参阅 <a href=\"https://cwiki.apache.org/confluence/display/MAVEN/Maven+3.x+Compatibility+Notes#Maven3.xCompatibilityNotes-profiles.xml\">Maven 3 兼容性说明</a>）</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"配置激活\">配置激活</h2>\n\n<p>子 POM 不会像其他 POM 元素一样继承 Profiles。相反，它们很早就被 <a href=\"https://maven.apache.org/ref/3.9.6/maven-model-builder/\">Maven Model Builder</a> 解决了，只有激活的配置文件的效果才会被继承（例如配置文件中定义的插件）。这也导致隐式配置文件激活只会对周围的配置文件容器产生影响，而不会对任何其他配置文件（即使具有相同的 id）产生影响。</p>\n\n<p>如何触发配置？根据使用的预案类型有何不同？\n激活配置有几种方式：</p>\n\n<ul>\n  <li>显式</li>\n  <li>隐式\n    <ul>\n      <li>基于操作系统</li>\n      <li>基于系统属性</li>\n      <li>基于文件的存在</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"配置激活细节\">配置激活细节</h3>\n\n<h4 id=\"显式激活\">显式激活</h4>\n\n<p>可以使用 <code class=\"language-plaintext highlighter-rouge\">-P</code> 命令行标志明确指定配置文件。</p>\n\n<p>该标志后跟一个以逗号分隔的配置文件 ID 列表。<strong>除了通过激活配置或 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 中的 <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> 元素激活的配置文件外，该选项中指定的配置文件也会被激活。</strong>从 Maven 4 开始，Maven 将拒绝激活或停用无法解析的配置文件。为防止出现这种情况，请在配置文件标识符前加上 <code class=\"language-plaintext highlighter-rouge\">?</code></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal <span class=\"nt\">-P</span> profile-1,profile-2,?profile-3\n</code></pre></div></div>\n\n<p>配置文件可在 Maven 设置中通过 <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> 元素激活。该元素包含一个 <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfile&gt;</code> 的列表，每个元素内部都包含一个配置文件 ID：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings&gt;</span>\n  ...\n  <span class=\"nt\">&lt;activeProfiles&gt;</span>\n    <span class=\"nt\">&lt;activeProfile&gt;</span>profile-1<span class=\"nt\">&lt;/activeProfile&gt;</span>\n  <span class=\"nt\">&lt;/activeProfiles&gt;</span>\n  ...\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> 标记中列出的配置文件将在项目每次使用时默认激活。也可以在 POM 中使用类似下面的配置来默认激活配置文件：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>profile-1<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;activeByDefault&gt;</span>true<span class=\"nt\">&lt;/activeByDefault&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>该配置文件将在所有构建过程中自动激活，除非使用前述方法激活了同一 POM 中的另一个配置文件。<strong>当通过命令行或激活配置激活 POM 中的配置文件时，默认激活的所有配置文件都会自动停用。</strong></p>\n\n<h4 id=\"隐式激活\">隐式激活</h4>\n\n<p>配置文件可根据检测到的构建环境状态自动触发。这些触发器是通过配置文件本身的 <code class=\"language-plaintext highlighter-rouge\">&lt;activation&gt;</code> 部分指定的。<strong>目前，这种检测仅限于 JDK 版本匹配、操作系统匹配或系统属性的存在/值</strong>。隐式配置文件激活始终仅指容器配置文件（而不是具有相同 id 的其他模块中的配置文件）。下面是一些示例。</p>\n\n<h5 id=\"jdk-激活\">JDK 激活</h5>\n\n<p>当 JDK 的版本以 <code class=\"language-plaintext highlighter-rouge\">1.4</code> 开头时（如 <code class=\"language-plaintext highlighter-rouge\">1.4.0_08</code>、<code class=\"language-plaintext highlighter-rouge\">1.4.2_07</code>、<code class=\"language-plaintext highlighter-rouge\">1.4</code>），以下配置将触发配置文件，特别是对于较新的版本，如 <code class=\"language-plaintext highlighter-rouge\">1.8</code> 或 <code class=\"language-plaintext highlighter-rouge\">11</code>，配置文件将不起作用：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;jdk&gt;</span>1.4<span class=\"nt\">&lt;/jdk&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>也可以使用范围。范围值必须以 <code class=\"language-plaintext highlighter-rouge\">[</code> 或 <code class=\"language-plaintext highlighter-rouge\">(</code> 开头，否则该值将被解释为前缀。以下内容适用于 <code class=\"language-plaintext highlighter-rouge\">1.3</code>、<code class=\"language-plaintext highlighter-rouge\">1.4</code> 和 <code class=\"language-plaintext highlighter-rouge\">1.5</code> 版本。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;jdk&gt;</span>[1.3,1.6)<span class=\"nt\">&lt;/jdk&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p><strong>注意：<code class=\"language-plaintext highlighter-rouge\">,1.5]</code> 这样的上限很可能不包括大多数 <code class=\"language-plaintext highlighter-rouge\">1.5</code> 版本，因为它们会有一个额外的补丁版本，如 <code class=\"language-plaintext highlighter-rouge\">_05</code>，而上述范围没有将其考虑在内。</strong></p>\n\n<h5 id=\"os-激活\">OS 激活</h5>\n\n<p>根据检测到的操作系统激活。有关操作系统值的更多详情，请参阅 <a href=\"https://maven.apache.org/enforcer/enforcer-rules/requireOS.html\">Maven Enforcer Plugin</a>。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;os&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>Windows XP<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;family&gt;</span>Windows<span class=\"nt\">&lt;/family&gt;</span>\n        <span class=\"nt\">&lt;arch&gt;</span>x86<span class=\"nt\">&lt;/arch&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>5.1.2600<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/os&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<h5 id=\"property-激活\">property 激活</h5>\n\n<ul>\n  <li>当系统属性 <code class=\"language-plaintext highlighter-rouge\">debug</code> 被指定为任意值时，下面的配置文件将被激活：</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>debug<span class=\"nt\">&lt;/name&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<ul>\n  <li>当系统属性 <code class=\"language-plaintext highlighter-rouge\">debug</code> 完全未定义时，下面配置文件将被激活：</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>!debug<span class=\"nt\">&lt;/name&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<ul>\n  <li>当系统属性 <code class=\"language-plaintext highlighter-rouge\">debug</code> 未定义或定义值不为 <code class=\"language-plaintext highlighter-rouge\">true</code> 时，下面配置文件将被激活：</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>debug<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>!true<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>以下两种命令都可以激活前面提到的那个配置：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal\nmvn groupId:artifactId:goal <span class=\"nt\">-Ddebug</span><span class=\"o\">=</span><span class=\"nb\">false</span>\n</code></pre></div></div>\n\n<ul>\n  <li>当系统属性 <code class=\"language-plaintext highlighter-rouge\">environment</code> 指定为 <code class=\"language-plaintext highlighter-rouge\">test</code> 时，下面配置文件将被激活：</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>environment<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>test<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>要激活该配置文件，您可以在命令行中键入以下内容：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal <span class=\"nt\">-Denvironment</span><span class=\"o\">=</span><span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<p>从 Maven 3.0 开始，POM 中的配置文件也可以根据 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 中 <code class=\"language-plaintext highlighter-rouge\">activeProfiles</code> 的属性激活。</p>\n\n<p>注意：<code class=\"language-plaintext highlighter-rouge\">FOO</code> 等环境变量可作为 <code class=\"language-plaintext highlighter-rouge\">env.FOO</code> 形式的属性使用。此外，请注意环境变量名称在 Windows 系统中统一为大写。</p>\n\n<ul>\n  <li>自 Maven 3.9.0 起，还可以通过引用属性 <code class=\"language-plaintext highlighter-rouge\">packaging</code> 来评估 POM 打包的值。这只有在多个 Maven 模块的共同父 POM 中定义了配置文件激活时才有用。下一个示例将在构建带有打包 war 的项目时触发配置文件：</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>packaging<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>war<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<h5 id=\"文件激活\">文件激活</h5>\n\n<p>此示例将在生成的文件 <code class=\"language-plaintext highlighter-rouge\">target/generated-sources/axistools/wsdl2java/org/apache/maven</code> 丢失时触发配置文件：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;file&gt;</span>\n        <span class=\"nt\">&lt;missing&gt;</span>target/generated-sources/axistools/wsdl2java/org/apache/maven<span class=\"nt\">&lt;/missing&gt;</span>\n      <span class=\"nt\">&lt;/file&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>标签 <code class=\"language-plaintext highlighter-rouge\">&lt;exists&gt;</code> 和 <code class=\"language-plaintext highlighter-rouge\">&lt;missing&gt;</code> 可以内插。支持的变量包括系统属性（如 <code class=\"language-plaintext highlighter-rouge\">${user.home}</code>）和环境变量（如 <code class=\"language-plaintext highlighter-rouge\">${env.HOME}</code>）。</p>\n\n<p><strong>请注意，在 POM 中定义的属性和值在这里不能用于插值</strong>。例如，上述示例中的激活程序不能使用 <code class=\"language-plaintext highlighter-rouge\">${project.build.directory}</code>，而需要硬编码目标路径。</p>\n\n<h4 id=\"多种条件激活\">多种条件激活</h4>\n\n<p>不同的隐式激活类型可组合在一个配置文件中。只有满足所有条件，配置文件才会激活（自 Maven 3.2.2 起，<a href=\"https://issues.apache.org/jira/browse/MNG-4565\">MNG-4565</a>）。不支持在同一配置文件中多次使用同一类型（<a href=\"https://issues.apache.org/jira/browse/MNG-5909\">MNG-5909</a>、<a href=\"https://issues.apache.org/jira/browse/MNG-3328\">MNG-3328</a>）。</p>\n\n<h3 id=\"停用配置文件\">停用配置文件</h3>\n\n<p>可使用命令行停用一个或多个配置文件，方法是在其标识符前添加 <code class=\"language-plaintext highlighter-rouge\">!</code> 或 <code class=\"language-plaintext highlighter-rouge\">-</code> 字符，如下所示。</p>\n\n<p>请注意，在 Bash、ZSH 和其他 shell 中，<code class=\"language-plaintext highlighter-rouge\">!</code> 需要用 <code class=\"language-plaintext highlighter-rouge\">\\</code> 或引号括起来，因为它有特殊含义。此外，以 <code class=\"language-plaintext highlighter-rouge\">-</code> 开头的命令行选项值存在一个已知的 bug（<a href=\"https://issues.apache.org/jira/browse/CLI-309\">CLI-309</a>），因此建议使用 <code class=\"language-plaintext highlighter-rouge\">-P=-profilename</code> 语法。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal <span class=\"nt\">-P</span> <span class=\"se\">\\!</span>profile-1,<span class=\"se\">\\!</span>profile-2,<span class=\"se\">\\!</span>?profile-3\n<span class=\"c\">## 或者</span>\nmvn groupId:artifactId:goal <span class=\"nt\">-P</span><span class=\"o\">=</span><span class=\"nt\">-profile-1</span>,-profile-2,-?profile-3\n</code></pre></div></div>\n\n<p>这可用于停用标记为 activeByDefault 的配置文件或通过激活配置激活的配置文件。</p>\n\n<h2 id=\"配置可以指定的内容\">配置可以指定的内容</h2>\n\n<p>我们已经讨论了在哪里指定配置以及如何激活配置，那么讨论一下在配置中可以指定哪些内容将是非常有用的。与预案配置的其他方面一样，这个问题的答案并不简单。</p>\n\n<p>根据您选择配置文件的位置，您可以访问不同的 POM 配置选项。</p>\n\n<h3 id=\"外部文件配置\">外部文件配置</h3>\n\n<p>在外部文件（即 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 或 <code class=\"language-plaintext highlighter-rouge\">profiles.xml</code>）中指定的配置文件从严格意义上讲是不可移植的。任何看似很有可能改变构建结果的内容都仅限于 POM 中的内联配置文件。像版本库列表这样的东西可能只是已有项目的专有版本库，不会改变构建结果。因此，您只能修改 <code class=\"language-plaintext highlighter-rouge\">&lt;repositories&gt;</code> 和 <code class=\"language-plaintext highlighter-rouge\">&lt;pluginRepositories&gt;</code> 部分，以及额外的 <code class=\"language-plaintext highlighter-rouge\">&lt;properties&gt;</code> 部分。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">&lt;properties&gt;</code> 部分允许您指定自由形式的键值对，这些键值对将包含在 POM 的插值过程中。这样，您就可以以 <code class=\"language-plaintext highlighter-rouge\">${profile.provided.path}</code> 的形式指定插件配置。</p>\n\n<h3 id=\"pom-配置\">POM 配置</h3>\n\n<p>另一方面，如果可以在 POM 中合理指定配置文件，您就会有更多选择。当然，这样做的代价是您只能修改该项目及其子模块。由于这些配置文件是内联指定的，因此有更好的机会保持可移植性，因此可以说您可以在其中添加更多信息，而不会有其他用户无法获得这些信息的风险。</p>\n\n<p>POM 中指定的配置文件可以修改<a href=\"https://maven.apache.org/ref/3.9.6/maven-model/maven.html\">以下 POM 元素</a>：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;repositories&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;pluginRepositories&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;dependencies&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;properties&gt;</code> （实际上不在主 POM 中提供，但在幕后使用）</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;modules&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;reports&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;reporting&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;distributionManagement&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;build&gt;</code> 元素的子集，其中包括：\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;defaultGoal&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;resources&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;testResources&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;directory&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;finalName&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;filters&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;pluginManagement&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code></li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"profiles-以外的-pom-元素\"><code class=\"language-plaintext highlighter-rouge\">&lt;profiles&gt;</code> 以外的 POM 元素</h3>\n\n<p>我们不允许在 POM 配置文件之外修改某些 POM 元素，因为当 POM 被部署到版本库系统时，这些运行时修改将不会被分发，从而使该人构建的项目与其他项目完全不同。虽然您可以通过外部配置文件的选项在一定程度上做到这一点，但其危险性是有限的。另一个原因是，这些 POM 信息有时会从父 POM 中重复使用。</p>\n\n<p>外部文件（如 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 和 <code class=\"language-plaintext highlighter-rouge\">profiles.xml</code>）也不支持 POM 文件之外的元素。让我们来详细说明一下这种情况。当有效的 POM 部署到远程版本库时，任何人都可以从版本库中获取其信息并直接用于构建 Maven 项目。现在，试想一下，<strong>如果我们可以在依赖项（这对构建非常重要）中设置配置文件，或者在 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 中设置 <code class=\"language-plaintext highlighter-rouge\">POM-profiles</code> 以外的任何其他元素，那么我们就很可能无法指望其他人使用该版本库中的 POM 并构建它。</strong>我们还必须考虑如何与他人共享 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code>。请注意，配置文件过多会造成混乱，也很难维护。总之，既然这是构建数据，就应该放在 POM 中。</p>\n\n<h2 id=\"配置优先级\">配置优先级</h2>\n\n<p>在一个 POM 中，来自激活的配置文件的所有配置文件元素都会覆盖 POM 中同名的全局元素，或在集合的情况下扩展全局元素。如果在同一 POM 或外部文件中激活了多个配置文件，则<strong>后面定义的配置文件优先于前面定义的配置文件</strong>（与配置文件 ID 和激活顺序无关）。</p>\n\n<p>示例：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;repositories&gt;</span>\n    <span class=\"nt\">&lt;repository&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>global-repo<span class=\"nt\">&lt;/id&gt;</span>\n      ...\n    <span class=\"nt\">&lt;/repository&gt;</span>\n  <span class=\"nt\">&lt;/repositories&gt;</span>\n  ...\n  <span class=\"nt\">&lt;profiles&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>profile-1<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;activeByDefault&gt;</span>true<span class=\"nt\">&lt;/activeByDefault&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;repositories&gt;</span>\n        <span class=\"nt\">&lt;repository&gt;</span>\n          <span class=\"nt\">&lt;id&gt;</span>profile-1-repo<span class=\"nt\">&lt;/id&gt;</span>\n          ...\n        <span class=\"nt\">&lt;/repository&gt;</span>\n      <span class=\"nt\">&lt;/repositories&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>profile-2<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;activeByDefault&gt;</span>true<span class=\"nt\">&lt;/activeByDefault&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;repositories&gt;</span>\n        <span class=\"nt\">&lt;repository&gt;</span>\n          <span class=\"nt\">&lt;id&gt;</span>profile-2-repo<span class=\"nt\">&lt;/id&gt;</span>\n          ...\n        <span class=\"nt\">&lt;/repository&gt;</span>\n      <span class=\"nt\">&lt;/repositories&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profiles&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>这将导致版本库列表：<code class=\"language-plaintext highlighter-rouge\">profile-2-repo</code>、<code class=\"language-plaintext highlighter-rouge\">profile-1-repo</code>、<code class=\"language-plaintext highlighter-rouge\">global-repo</code>。</p>\n\n<h2 id=\"配置误区\">配置误区</h2>\n\n<p>我们已经提到，在构建中添加配置文件有可能会破坏项目的可移植性。我们甚至还强调了在哪些情况下配置文件可能会破坏项目的可移植性。不过，作为关于使用配置文件时应避免的一些误区，我们还是值得重申这些观点。</p>\n\n<p>使用配置文件时，有两个主要问题领域需要注意。首先是<strong>外部属性</strong>，通常用于插件配置。这些属性可能会破坏项目的可移植性。另一个更微妙的方面是<strong>对自然环境集的配置的不规范</strong>。</p>\n\n<h3 id=\"外部属性定义\">外部属性定义</h3>\n\n<p>外部属性定义是指在 pom.xml 之外定义的、但未在其中相应配置文件中定义的任何属性值。在 POM 中最明显的用法是插件配置。缺少属性当然会破坏项目的可移植性，这些小错误会产生微妙的影响，导致构建失败。例如，在 settings.xml 中指定的配置文件中指定 appserver 路径，可能会导致团队中的其他用户在没有类似 settings.xml 的情况下尝试构建集成测试插件时失败。下面是一个网络应用程序项目的 pom.xml 片段：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;plugins&gt;</span>\n      <span class=\"nt\">&lt;plugin&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.myco.plugins<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>spiffy-integrationTest-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;configuration&gt;</span>\n          <span class=\"nt\">&lt;appserverHome&gt;</span>${appserver.home}<span class=\"nt\">&lt;/appserverHome&gt;</span>\n        <span class=\"nt\">&lt;/configuration&gt;</span>\n      <span class=\"nt\">&lt;/plugin&gt;</span>\n      ...\n    <span class=\"nt\">&lt;/plugins&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>此时，在您的本地 <code class=\"language-plaintext highlighter-rouge\">${user.home}/.m2/settings.xml</code> 中有：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings&gt;</span>\n  ...\n  <span class=\"nt\">&lt;profiles&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>appserverConfig<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;appserver.home&gt;</span>/path/to/appserver<span class=\"nt\">&lt;/appserver.home&gt;</span>\n      <span class=\"nt\">&lt;/properties&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n  <span class=\"nt\">&lt;/profiles&gt;</span>\n \n  <span class=\"nt\">&lt;activeProfiles&gt;</span>\n    <span class=\"nt\">&lt;activeProfile&gt;</span>appserverConfig<span class=\"nt\">&lt;/activeProfile&gt;</span>\n  <span class=\"nt\">&lt;/activeProfiles&gt;</span>\n  ...\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div></div>\n\n<p>当您构建集成测试生命周期阶段时，您的集成测试通过了，因为您提供的路径允许测试插件安装和测试此 Web 应用程序。</p>\n\n<p>然而，当你的同事尝试构建集成测试时，他的构建却大败而归，抱怨说无法解析插件配置参数 <code class=\"language-plaintext highlighter-rouge\">&lt;appserverHome&gt;</code>，更糟糕的是，该参数的值字面意思是 <code class=\"language-plaintext highlighter-rouge\">${appserver.home}</code> 无效（如果它警告你的话）。</p>\n\n<p>恭喜你，你的项目现在是不可移植的了。在 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 中内嵌此配置文件有助于缓解这一问题，但明显的缺点是，每个项目层次结构（考虑到继承的影响）现在都必须指定此信息。由于 Maven 为项目继承提供了良好的支持，因此可以将此类配置放在团队级 POM 的 <code class=\"language-plaintext highlighter-rouge\">&lt;pluginManagement&gt;</code> 部分或类似内容中，然后简单地继承路径即可。</p>\n\n<p>另一个不那么吸引人的答案可能是开发环境的标准化。不过，这往往会影响 Maven 所能带来的生产力提升。</p>\n\n<h3 id=\"自然环境配置的不规范\">自然环境配置的不规范</h3>\n\n<p>除了上述的可移植性问题外，您的配置文件还很容易无法涵盖所有情况。如果这样做，通常就会让目标环境中的某一个环境陷入困境。让我们再看一次上面的 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 示例片段：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;plugins&gt;</span>\n      <span class=\"nt\">&lt;plugin&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.myco.plugins<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>spiffy-integrationTest-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;configuration&gt;</span>\n          <span class=\"nt\">&lt;appserverHome&gt;</span>${appserver.home}<span class=\"nt\">&lt;/appserverHome&gt;</span>\n        <span class=\"nt\">&lt;/configuration&gt;</span>\n      <span class=\"nt\">&lt;/plugin&gt;</span>\n      ...\n    <span class=\"nt\">&lt;/plugins&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>现在，请看下面的配置文件，它将在 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 中以内联方式指定：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;profiles&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>appserverConfig-dev<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;property&gt;</span>\n          <span class=\"nt\">&lt;name&gt;</span>env<span class=\"nt\">&lt;/name&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>dev<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;appserver.home&gt;</span>/path/to/dev/appserver<span class=\"nt\">&lt;/appserver.home&gt;</span>\n      <span class=\"nt\">&lt;/properties&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n \n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>appserverConfig-dev-2<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;property&gt;</span>\n          <span class=\"nt\">&lt;name&gt;</span>env<span class=\"nt\">&lt;/name&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>dev-2<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;appserver.home&gt;</span>/path/to/another/dev/appserver2<span class=\"nt\">&lt;/appserver.home&gt;</span>\n      <span class=\"nt\">&lt;/properties&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n  <span class=\"nt\">&lt;/profiles&gt;</span>\n  ..\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>该配置文件与上一个示例中的配置文件非常相似，但有几个重要的例外：它明显面向开发环境，添加了一个名为 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code> 的新配置文件，并且有一个激活部分，当系统属性包含 <code class=\"language-plaintext highlighter-rouge\">env=dev</code>（用于名为 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code> 的配置文件）和 <code class=\"language-plaintext highlighter-rouge\">env=dev-2</code>（用于名为 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code> 的配置文件）时，将触发将其包含在内。因此，执行命令：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span>dev-2 integration-test\n</code></pre></div></div>\n\n<p>可以成功构建，使用名为 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code> 的配置给出的属性。而且，当我们执行：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span>dev integration-test\n</code></pre></div></div>\n\n<p>将使用名为 appserverConfig-dev 的配置文件给出的属性成功构建。但是，执行：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span>production integration-test\n</code></pre></div></div>\n\n<p>无法成功构建。为什么？因为由此产生的 <code class=\"language-plaintext highlighter-rouge\">${appserver.home}</code> 属性不是部署和测试网络应用的有效路径。在编写配置文件时，我们没有考虑生产环境的情况。生产环境（env=production）与测试环境，甚至可能与本地环境一起，构成了我们可能要构建集成测试生命周期阶段的一组自然目标环境。这组自然环境的不完整说明意味着我们实际上将有效的目标环境限制在了开发环境中。您的队友（可能还有您的经理）不会觉得这很幽默。因此当构建配置文件以处理此类情况时，请务必处理整个目标排列集。</p>\n\n<p>另外，用户特定配置文件也可以以类似方式运行。这意味着，当团队添加了新的开发人员时，与用户相关的处理不同环境的配置文件就会启动。虽然我认为这可以作为对新手的有用培训，但以这种方式把他们扔到狼群中并不好。再次强调，一定要考虑到整套配置文件。</p>\n\n<h2 id=\"如何判断哪些配置文件在构建过程中生效\">如何判断哪些配置文件在构建过程中生效？</h2>\n\n<p>确定激活的配置文件有助于用户了解在构建过程中执行了哪些特定配置文件。我们可以使用 <a href=\"https://maven.apache.org/plugins/maven-help-plugin/\">Maven Help Plugin</a> 来了解在构建过程中执行了哪些配置文件。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles\n</code></pre></div></div>\n\n<p>让我们通过一些小示例来进一步了解该插件的 active-profiles 目标。</p>\n\n<p>从 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 中最后一个配置文件示例中，你会发现有两个名为 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code> 和 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code> 的配置文件，它们的属性值各不相同。如果我们继续执行：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles <span class=\"nt\">-Denv</span><span class=\"o\">=</span>dev\n</code></pre></div></div>\n\n<p>结果将是一个列表，列出激活属性为 <code class=\"language-plaintext highlighter-rouge\">env=dev</code> 的配置文件 id 以及声明该配置文件的源代码。请看下面的示例：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The following profiles are active:\n\n - appserverConfig-dev <span class=\"o\">(</span><span class=\"nb\">source</span>: pom<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>现在，如果我们在 settings.xml 中声明了一个配置文件（请参阅 settings.xml 中的配置文件示例），并将其设置为激活的配置文件并执行：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles\n</code></pre></div></div>\n\n<p>结果应该是这样的：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The following profiles are active:\n\n - appserverConfig <span class=\"o\">(</span><span class=\"nb\">source</span>: settings.xml<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>尽管我们没有激活属性，但某个配置文件已被列为激活状态。为什么？就像我们之前提到的，在 settings.xml 中设置为<code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code>的配置会自动激活。</p>\n\n<p>现在，如果我们在 settings.xml 中将某个配置文件设置为<code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code>，并在 POM 中触发了一个配置文件。你认为哪个配置文件会对构建产生影响？</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles <span class=\"nt\">-P</span> appserverConfig-dev\n</code></pre></div></div>\n\n<p>这将列出已激活的配置文件：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The following profiles are active:\n\n - appserverConfig-dev <span class=\"o\">(</span><span class=\"nb\">source</span>: pom<span class=\"o\">)</span>\n - appserverConfig <span class=\"o\">(</span><span class=\"nb\">source</span>: settings.xml<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>尽管它列出了两个活动配置文件，但我们并不确定其中的哪一个被应用。要查看对构建的影响，请执行：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:effective-pom <span class=\"nt\">-P</span> appserverConfig-dev\n</code></pre></div></div>\n\n<p>这将把该构建配置的有效 POM 打印到控制台。请注意，<code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 中的配置文件比 POM 中的配置文件优先级更高。因此这里应用的配置文件是 <code class=\"language-plaintext highlighter-rouge\">appserverConfig</code>，而不是 <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code>。</p>\n\n<p>如果要将插件的输出重定向到名为 <code class=\"language-plaintext highlighter-rouge\">effective-pom.xml</code> 的文件，请使用命令行选项 <code class=\"language-plaintext highlighter-rouge\">-Doutput=effective-pom.xml</code>。</p>\n\n<h2 id=\"命名规范\">命名规范</h2>\n\n<p>现在你已经注意到，配置文件是解决不同目标环境下不同构建配置要求问题的一种自然方法。在上文，我们讨论了解决这种情况的“自然配置文件集”概念，以及考虑所需的整个配置文件集的重要性。</p>\n\n<p>然而，如何组织和管理这组资料的演变也是一个非同小可的问题。正如优秀的开发人员会努力编写<strong>自文档化代码</strong>一样，您的配置文件 id 也必须提示其预期用途。一个好的方法是使用通用的系统属性触发器作为配置文件名称的一部分。<strong>这可能会导致由系统属性 <code class=\"language-plaintext highlighter-rouge\">env</code> 触发的配置文件名称如 <code class=\"language-plaintext highlighter-rouge\">env-dev</code>、<code class=\"language-plaintext highlighter-rouge\">env-test</code> 和 <code class=\"language-plaintext highlighter-rouge\">env-prod</code>。这样的系统为如何激活针对特定环境的联编留下了非常直观的提示</strong>。因此，要激活针对测试环境的构建，需要发出以下命令来激活 env-test：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span><span class=\"nb\">test</span> &lt;phase&gt;\n</code></pre></div></div>\n\n<p>只需将配置文件 id 中的<code class=\"language-plaintext highlighter-rouge\">=</code>替换为<code class=\"language-plaintext highlighter-rouge\">-</code>，即可获得正确的命令行选项。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/05/Maven-%E5%8D%81-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Profiles-%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（十）配置文件（Profiles）简介'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2023-12-05T14:33:35+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven（十）配置文件（Profiles）简介</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（九）POM简介",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/05/Maven-%E4%B9%9D-POM%E7%AE%80%E4%BB%8B/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是-pom\" id=\"markdown-toc-什么是-pom\">什么是 POM</a></li>\n  <li><a href=\"#super-pom\" id=\"markdown-toc-super-pom\">Super POM</a></li>\n  <li><a href=\"#minimal-pom\" id=\"markdown-toc-minimal-pom\">Minimal POM</a></li>\n  <li><a href=\"#项目继承\" id=\"markdown-toc-项目继承\">项目继承</a>    <ol>\n      <li><a href=\"#示例-1\" id=\"markdown-toc-示例-1\">示例 1</a>        <ol>\n          <li><a href=\"#场景\" id=\"markdown-toc-场景\">场景</a></li>\n          <li><a href=\"#解决方案\" id=\"markdown-toc-解决方案\">解决方案</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#示例--2\" id=\"markdown-toc-示例--2\">示例  2</a>        <ol>\n          <li><a href=\"#场景-1\" id=\"markdown-toc-场景-1\">场景</a></li>\n          <li><a href=\"#解决方案-1\" id=\"markdown-toc-解决方案-1\">解决方案</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#项目聚合\" id=\"markdown-toc-项目聚合\">项目聚合</a>    <ol>\n      <li><a href=\"#示例-3\" id=\"markdown-toc-示例-3\">示例 3</a>        <ol>\n          <li><a href=\"#场景-2\" id=\"markdown-toc-场景-2\">场景</a></li>\n          <li><a href=\"#解决方案-2\" id=\"markdown-toc-解决方案-2\">解决方案</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#示例-4\" id=\"markdown-toc-示例-4\">示例 4</a>        <ol>\n          <li><a href=\"#场景-3\" id=\"markdown-toc-场景-3\">场景</a></li>\n          <li><a href=\"#解决方案-3\" id=\"markdown-toc-解决方案-3\">解决方案</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#继承与聚合的对比\" id=\"markdown-toc-继承与聚合的对比\">继承与聚合的对比</a>    <ol>\n      <li><a href=\"#示例-5\" id=\"markdown-toc-示例-5\">示例 5</a>        <ol>\n          <li><a href=\"#场景-4\" id=\"markdown-toc-场景-4\">场景</a></li>\n          <li><a href=\"#解决方案-4\" id=\"markdown-toc-解决方案-4\">解决方案</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#项目插值与变量\" id=\"markdown-toc-项目插值与变量\">项目插值与变量</a>    <ol>\n      <li><a href=\"#可以使用的变量\" id=\"markdown-toc-可以使用的变量\">可以使用的变量</a>        <ol>\n          <li><a href=\"#项目模型变量\" id=\"markdown-toc-项目模型变量\">项目模型变量</a></li>\n          <li><a href=\"#特殊变量\" id=\"markdown-toc-特殊变量\">特殊变量</a></li>\n          <li><a href=\"#属性properties\" id=\"markdown-toc-属性properties\">属性（Properties）</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"什么是-pom\">什么是 POM</h2>\n\n<p>项目对象模型或 POM 是 Maven 的基本工作单元。它是一个 XML 文件，包含项目信息和 Maven 用于构建项目的配置详细信息。它包含大多数项目的默认值。例如，构建目录是 <code class=\"language-plaintext highlighter-rouge\">target</code>；源代码目录是 <code class=\"language-plaintext highlighter-rouge\">src/main/java</code>；测试源代码目录是 <code class=\"language-plaintext highlighter-rouge\">src/test/java</code>，等等。执行任务或目标时，Maven 会查找当前目录下的 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p>\n\n<p>POM 中可指定的部分配置包括<strong>项目依赖关系、可执行的插件或目标、构建配置文件</strong>等。还可以指定项目版本、描述、开发人员、邮件列表等其他信息。</p>\n\n<h2 id=\"super-pom\">Super POM</h2>\n\n<p>Super POM 是 Maven 的默认 POM。除非明确设置，否则所有 POM 都会扩展Super POM，这意味着您为项目创建的 POM 都会继承Super POM 中指定的配置。</p>\n\n<p>您可以在 <a href=\"https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html\">Maven Core 参考文档</a>中查看 Maven 3.6.3 的Super POM。</p>\n\n<h2 id=\"minimal-pom\">Minimal POM</h2>\n\n<p>对 POM 的最低要求，即 POM 的最简结构如下：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">project</code> - 项目根目录</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">modelVersion</code> - 应设置为 4.0.0</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupId</code> - 项目组的 ID。</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">artifactId</code> - 工件（项目）的 ID</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">version</code> - 项目组下的项目版本</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 如下：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>POM 要求配置其 <code class=\"language-plaintext highlighter-rouge\">groupId</code>、<code class=\"language-plaintext highlighter-rouge\">artifactId</code> 和 <code class=\"language-plaintext highlighter-rouge\">version</code>。这三个值构成了项目的完全限定工件名称。其形式为 <code class=\"language-plaintext highlighter-rouge\">&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;</code>。在上面的例子中，项目的完全限定工件名是 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>。</p>\n\n<p>如前文所述，如果没有指定配置细节，Maven 将使用默认值。其中一个默认值就是打包类型。每个 Maven 项目都有一个打包类型。如果未在 POM 中指定，则会使用默认值 <code class=\"language-plaintext highlighter-rouge\">jar</code>。</p>\n\n<p>而且，可以看到在最小 POM 中没有指定 repositories。如果使用最小 POM 构建项目，它将继承Super POM 中的资源库配置。因此，当 Maven 在最小 POM 中看到依赖项时，它就会知道这些依赖项将从Super POM 中指定的 https://repo.maven.apache.org/maven2 下载。</p>\n\n<h2 id=\"项目继承\">项目继承</h2>\n\n<p>可以被继承的 POM 元素包括：</p>\n\n<ul>\n  <li>dependencies</li>\n  <li>developers and contributors</li>\n  <li>plugin lists (including reports)</li>\n  <li>plugin executions with matching ids</li>\n  <li>plugin configuration</li>\n  <li>resources</li>\n</ul>\n\n<p>Super POM 是项目继承的一个示例，但您也可以通过在 POM 中指定父元素来引入自己的父 POM，如以下示例所示。</p>\n\n<h3 id=\"示例-1\">示例 1</h3>\n\n<h4 id=\"场景\">场景</h4>\n\n<p>举例来说，让我们重复使用之前的工件 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>，并引入另一个工件 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code>。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>让我们把它们的目录结构指定如下：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<p>注意：<code class=\"language-plaintext highlighter-rouge\">my-module/pom.xml</code> 是 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code> 的 POM，而 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 是 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> 的 POM。</p>\n\n<h4 id=\"解决方案\">解决方案</h4>\n\n<p>现在，如果我们要将 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> 变成 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code> 的父工件，就必须将 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code> 的 POM 修改为以下配置：</p>\n\n<p><strong>com.mycompany.app:my-module:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>请注意，我们现在增加了一个部分，即父级（<code class=\"language-plaintext highlighter-rouge\">&lt;parent&gt;</code>）部分。该部分允许我们指定哪个工件是 POM 的父工件。为此，我们需要指定父 POM 的完全合格的构件名称。有了这些设置，我们的模块就可以继承父 POM 的某些属性了。</p>\n\n<p>另外，如果希望模块的 groupId 或版本与父模块相同，也可以删除模块 POM 中的 groupId 或 version 标识：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>这允许模块继承其父 POM 的 groupId 和 version。</p>\n\n<h3 id=\"示例--2\">示例  2</h3>\n\n<h4 id=\"场景-1\">场景</h4>\n\n<p>然而，只有父项目已经安装在本地版本库中，或者在特定的目录结构中（即父 pom.xml 比模块的 pom.xml 高一个目录），这样做是可行的。</p>\n\n<p>但如果父项目尚未安装，而且目录结构如下例所示呢？</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> parent\n     <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<h4 id=\"解决方案-1\">解决方案</h4>\n\n<p>要处理这种目录结构（或任何其他目录结构），我们必须在父节中添加 <code class=\"language-plaintext highlighter-rouge\">&lt;relativePath&gt;</code> 元素。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;relativePath&gt;</span>../parent/pom.xml<span class=\"nt\">&lt;/relativePath&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>顾名思义，它是从模块的 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 到父级的 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 的相对路径。</p>\n\n<h2 id=\"项目聚合\">项目聚合</h2>\n\n<p>项目聚合（Project Aggregation）与项目继承（Project Inheritance）类似。但它<strong>不是从模块指定父 POM，而是从父 POM 指定模块。</strong>这样，父项目就知道了它的模块，如果针对父项目调用 Maven 命令，该 Maven 命令也会执行到父项目的模块。要进行项目聚合，必须执行以下操作：</p>\n\n<ul>\n  <li>将父 POM 中 <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> 的值改为 <code class=\"language-plaintext highlighter-rouge\">pom</code> ；</li>\n  <li>在父 POM 中指定其模块（子 POM）的目录。</li>\n</ul>\n\n<h3 id=\"示例-3\">示例 3</h3>\n\n<h4 id=\"场景-2\">场景</h4>\n\n<p>原来的 POM 和文件目录结构如下：</p>\n\n<p><strong>com.mycompany.app:my-app:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>com.mycompany.app:my-module:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>directory structure</strong></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<h4 id=\"解决方案-2\">解决方案</h4>\n\n<p>如果要将 my-module 整合到 my-app 中，我们只需修改 my-app：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>my-module<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>在修改后的 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> 中，添加了 <code class=\"language-plaintext highlighter-rouge\">packaging</code> 部分和 <code class=\"language-plaintext highlighter-rouge\">modules</code> 部分。<code class=\"language-plaintext highlighter-rouge\">packaging</code> 部分的值设置为 <code class=\"language-plaintext highlighter-rouge\">pom</code>， <code class=\"language-plaintext highlighter-rouge\">modules</code> 部分的值设置为 <code class=\"language-plaintext highlighter-rouge\">&lt;module&gt;my-module&lt;/module&gt;</code> 元素。<code class=\"language-plaintext highlighter-rouge\">&lt;module&gt;</code> 的值是从 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> 到 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code> 的 POM 的相对路径（根据惯例，我们使用模块的 artifactId 作为模块目录的名称）。</p>\n\n<p>现在，只要 Maven 命令处理 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>，同样的 Maven 命令也会针对 <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code> 运行。此外，某些命令（特别是目标 <code class=\"language-plaintext highlighter-rouge\">goals</code>）处理项目聚合的方式不同。</p>\n\n<h3 id=\"示例-4\">示例 4</h3>\n\n<h4 id=\"场景-3\">场景</h4>\n\n<p>但是，如果我们将目录结构更改为下面这样呢？</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> parent\n     <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<p>父 POM 如何指定模块？</p>\n\n<h4 id=\"解决方案-3\">解决方案</h4>\n\n<p>答案与示例 3 相同，指定模块的路径：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>../my-module<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"继承与聚合的对比\">继承与聚合的对比</h2>\n\n<p>继承：如果您有多个 Maven 项目，而且它们都有类似的配置，您可以通过提取这些类似配置并创建一个父项目来重构您的项目。这样，您<strong>只需让您的 Maven 项目继承该父项目，这些配置就会应用到所有项目中。</strong></p>\n\n<p>聚合：如果您有一组项目是一起构建或处理的，您可以创建一个父项目，并让该父项目将这些项目声明为其模块。这样，你<strong>只需构建父项目，其他项目就会跟进。</strong></p>\n\n<p>同时使用继承和聚合：当然，您也可以同时使用项目继承和项目聚合。也就是说，你可以让你的模块指定一个父项目，同时让这个父项目指定那些 Maven 项目作为它的模块。您只需应用这三条规则即可：</p>\n\n<ul>\n  <li>在每个子 POM 中指定其父 POM；</li>\n  <li>将父 POM <code class=\"language-plaintext highlighter-rouge\">&lt;packageing&gt;</code>的值改为 <code class=\"language-plaintext highlighter-rouge\">pom</code>；</li>\n  <li>在父 POM 中指定其模块（子 POM）的目录</li>\n</ul>\n\n<h3 id=\"示例-5\">示例 5</h3>\n\n<h4 id=\"场景-4\">场景</h4>\n\n<p><strong>com.mycompany.app:my-app:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>com.mycompany.app:my-module:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>目录结构</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> parent\n     <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<h4 id=\"解决方案-4\">解决方案</h4>\n\n<p>应用三条规则示例如下：</p>\n\n<p><strong>com.mycompany.app:my-app:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span> \n  <span class=\"c\">&lt;!-- 修改packaging值为pom --&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>../my-module<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n  <span class=\"c\">&lt;!-- 声明被聚合的模块路径 --&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>com.mycompany.app:my-module:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;relativePath&gt;</span>../parent/pom.xml<span class=\"nt\">&lt;/relativePath&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"c\">&lt;!-- 声明继承的父项目，如果父项目没有安装，声明其相对路径 --&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>注意：配置文件继承与 POM 本身使用的继承策略相同。</p>\n\n<h2 id=\"项目插值与变量\">项目插值与变量</h2>\n\n<p>Maven 鼓励的做法之一就是不要重复。不过，在某些情况下，您需要在多个不同位置使用相同的值。为了确保只指定一次值，Maven 允许您在 POM 中使用自己的变量和预定义变量。</p>\n\n<p>例如，要访问 project.version 变量，可以这样引用它：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;version&gt;</span>${project.version}<span class=\"nt\">&lt;/version&gt;</span>\n</code></pre></div></div>\n\n<p>需要注意的一个因素是，如上所述，这些变量是在继承后处理的。这意味着，<strong>如果父项目定义了某个变量且子项目覆盖了这个变量，那么子项目最终使用的是子项目自身而非父项目的变量定义。</strong></p>\n\n<h3 id=\"可以使用的变量\">可以使用的变量</h3>\n\n<h4 id=\"项目模型变量\">项目模型变量</h4>\n\n<p>模块中任何单值元素字段都可以作为变量引用。例如，<code class=\"language-plaintext highlighter-rouge\">${project.groupId}</code>、<code class=\"language-plaintext highlighter-rouge\">${project.version}</code>、<code class=\"language-plaintext highlighter-rouge\">${project.build.sourceDirectory}</code> 等。请参阅 POM 参考资料，查看完整的属性列表。</p>\n\n<p>这些变量均以前缀 <code class=\"language-plaintext highlighter-rouge\">project.</code> 引用。您也可能会看到以 <code class=\"language-plaintext highlighter-rouge\">pom.</code> 作为前缀的引用，或完全省略前缀的引用，这些形式现已过时，不应再使用。</p>\n\n<h4 id=\"特殊变量\">特殊变量</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th><code class=\"language-plaintext highlighter-rouge\">project.basedir</code></th>\n      <th>当前项目所在的目录。</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">project.baseUri</code></td>\n      <td>当前项目所在的目录，用 URI 表示。自 <strong>Maven 2.1.0</strong> 起</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">maven.build.timestamp</code></td>\n      <td>表示构建开始的时间戳（UTC）。自 <strong>Maven 2.1.0-M1</strong> 起</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>可以通过声明 <code class=\"language-plaintext highlighter-rouge\">maven.build.timestamp.format</code> 属性来定制构建时间戳的格式：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;maven.build.timestamp.format&gt;</span>yyyy-MM-dd'T'HH:mm:ss'Z'<span class=\"nt\">&lt;/maven.build.timestamp.format&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>格式模式必须符合 <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\">SimpleDateFormat 的 API 文档</a>中给出的规则。如果不存在该属性，格式默认为示例中已给出的值。</p>\n\n<h4 id=\"属性properties\">属性（Properties）</h4>\n\n<p>您还可以将项目中定义的任何属性作为变量引用。请看下面的示例：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;mavenVersion&gt;</span>3.0<span class=\"nt\">&lt;/mavenVersion&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.maven<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>maven-artifact<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>${mavenVersion}<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.maven<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>maven-core<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>${mavenVersion}<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/05/Maven-%E4%B9%9D-POM%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（九）POM简介'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2023-12-05T12:36:12+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven（九）POM简介</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（八）构建生命周期",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/04/Maven-%E5%85%AB-%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#构建生命周期基础\" id=\"markdown-toc-构建生命周期基础\">构建生命周期基础</a>    <ol>\n      <li><a href=\"#构建生命周期由若干阶段组成\" id=\"markdown-toc-构建生命周期由若干阶段组成\">构建生命周期由若干阶段组成</a></li>\n      <li><a href=\"#常用命令行调用\" id=\"markdown-toc-常用命令行调用\">常用命令行调用</a></li>\n      <li><a href=\"#构建阶段由插件目标组成\" id=\"markdown-toc-构建阶段由插件目标组成\">构建阶段由插件目标组成</a></li>\n      <li><a href=\"#某些阶段通常不通过命令行调用\" id=\"markdown-toc-某些阶段通常不通过命令行调用\">某些阶段通常不通过命令行调用</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#设置项目以使用构建生命周期\" id=\"markdown-toc-设置项目以使用构建生命周期\">设置项目以使用构建生命周期</a>    <ol>\n      <li><a href=\"#打包\" id=\"markdown-toc-打包\">打包</a></li>\n      <li><a href=\"#插件\" id=\"markdown-toc-插件\">插件</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#生命周期参考\" id=\"markdown-toc-生命周期参考\">生命周期参考</a>    <ol>\n      <li><a href=\"#clean-生命周期\" id=\"markdown-toc-clean-生命周期\">clean 生命周期</a></li>\n      <li><a href=\"#site-生命周期\" id=\"markdown-toc-site-生命周期\">site 生命周期</a></li>\n      <li><a href=\"#default-生命周期\" id=\"markdown-toc-default-生命周期\">default 生命周期</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#内置生命周期绑定\" id=\"markdown-toc-内置生命周期绑定\">内置生命周期绑定</a>    <ol>\n      <li><a href=\"#clean-生命周期绑定\" id=\"markdown-toc-clean-生命周期绑定\">clean 生命周期绑定</a></li>\n      <li><a href=\"#site-生命周期绑定\" id=\"markdown-toc-site-生命周期绑定\">site 生命周期绑定</a></li>\n      <li><a href=\"#default-生命周期绑定\" id=\"markdown-toc-default-生命周期绑定\">default 生命周期绑定</a>        <ol>\n          <li><a href=\"#packaging-ejb--ejb3--jar--par--rar--war\" id=\"markdown-toc-packaging-ejb--ejb3--jar--par--rar--war\">Packaging <code class=\"language-plaintext highlighter-rouge\">ejb</code> / <code class=\"language-plaintext highlighter-rouge\">ejb3</code> / <code class=\"language-plaintext highlighter-rouge\">jar</code> / <code class=\"language-plaintext highlighter-rouge\">par</code> / <code class=\"language-plaintext highlighter-rouge\">rar</code> / <code class=\"language-plaintext highlighter-rouge\">war</code></a></li>\n          <li><a href=\"#packaging-ear\" id=\"markdown-toc-packaging-ear\">Packaging <code class=\"language-plaintext highlighter-rouge\">ear</code></a></li>\n          <li><a href=\"#packaging-maven-plugin\" id=\"markdown-toc-packaging-maven-plugin\">Packaging <code class=\"language-plaintext highlighter-rouge\">maven-plugin</code></a></li>\n          <li><a href=\"#packaging-pom\" id=\"markdown-toc-packaging-pom\">Packaging <code class=\"language-plaintext highlighter-rouge\">pom</code></a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"构建生命周期基础\">构建生命周期基础</h2>\n\n<p>Maven 以构建生命周期这一核心概念为基础。这意味着构建和发布特定工件（项目）的流程已明确定义。</p>\n\n<p>对于构建项目的人员来说，这意味着只需学习一小套命令即可构建任何 Maven 项目，而 POM 将确保他们获得所需的结果。</p>\n\n<p>有三种内置的构建生命周期：<code class=\"language-plaintext highlighter-rouge\">default</code>、<code class=\"language-plaintext highlighter-rouge\">clean</code>和<code class=\"language-plaintext highlighter-rouge\">site</code>。<code class=\"language-plaintext highlighter-rouge\">default</code>生命周期处理项目部署，<code class=\"language-plaintext highlighter-rouge\">clean</code>生命周期处理项目清理，而<code class=\"language-plaintext highlighter-rouge\">site</code>生命周期处理项目网站的创建。</p>\n\n<h3 id=\"构建生命周期由若干阶段组成\">构建生命周期由若干阶段组成</h3>\n\n<p>每个构建生命周期都由不同的构建阶段列表定义，其中一个构建阶段代表生命周期中的一个阶段。</p>\n\n<p>例如，默认生命周期包括以下阶段（有关生命周期阶段的完整列表，请参阅<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference\">生命周期参考</a>）：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">validate</code> - 验证项目是否正确，是否提供了所有必要信息</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">compile</code> - 编译项目源代码</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">test</code> - 使用合适的单元测试框架测试编译后的源代码。这些测试不应要求打包或部署代码</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">package</code> - 将编译后的代码打包为可发布的格式，如 JAR。</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">verify</code> - 对集成测试的结果进行检查，确保符合质量标准</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">install</code> - 将软件包安装到本地存储库中，作为本地其他项目的依赖项使用</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">deploy</code> - 在构建环境中完成，将最终软件包复制到远程资源库，以便与其他开发人员和项目共享。</li>\n</ul>\n\n<p>这些生命周期阶段（加上此处未显示的其他生命周期阶段）按顺序执行，以完成<code class=\"language-plaintext highlighter-rouge\">default</code>生命周期。考虑到上述生命周期阶段，这意味着在使用默认生命周期时，Maven 会首先验证项目，然后尝试编译源代码，针对测试运行源代码，打包二进制文件（如 jar），针对该打包运行集成测试，验证集成测试，将验证后的打包安装到本地版本库，然后将安装好的打包部署到远程版本库。</p>\n\n<h3 id=\"常用命令行调用\">常用命令行调用</h3>\n\n<p>您应该选择与你的预期结果相匹配的阶段。如果您想要您的 jar，请运行 package。如果要运行单元测试，则运行 test。</p>\n\n<p>如果您不确定自己想要什么，首选调用的阶段是：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn verify\n</code></pre></div></div>\n\n<p>在执行<code class=\"language-plaintext highlighter-rouge\">verify</code>之前，该命令会依次执行每个<code class=\"language-plaintext highlighter-rouge\">default</code>生命周期阶段（<code class=\"language-plaintext highlighter-rouge\">validate</code>, <code class=\"language-plaintext highlighter-rouge\">compile</code>, <code class=\"language-plaintext highlighter-rouge\">package</code>等）。您只需调用要执行的最后一个构建阶段，在本例中就是<code class=\"language-plaintext highlighter-rouge\">verify</code>。在大多数情况下，效果与<code class=\"language-plaintext highlighter-rouge\">package</code>相同。不过，如果有集成测试<code class=\"language-plaintext highlighter-rouge\">test</code>，这些测试也会被执行。在校验阶段，还可以进行一些额外的检查，例如，如果代码是按照预定义的校验规则编写的。</p>\n\n<p>在构建环境中，使用下面的调用可将工件干净利落地构建并部署到共享资源库中：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn clean deploy\n</code></pre></div></div>\n\n<p>同样的命令<strong>可用于多模块情况（即一个项目有一个或多个子项目）</strong>。Maven 会<strong>遍历每个子项目并执行清理，然后执行部署</strong>（包括之前构建阶段的所有步骤）。</p>\n\n<h3 id=\"构建阶段由插件目标组成\">构建阶段由插件目标组成</h3>\n\n<p>不过，尽管构建阶段负责构建生命周期中的特定步骤，但其履行职责的方式可能会有所不同。这可以<strong>通过声明与这些构建阶段绑定的插件目标来实现</strong>。</p>\n\n<p><strong>插件目标代表一项具体任务（比构建阶段更细），有助于项目的构建和管理</strong>。它可以绑定 0 个或多个构建阶段。未与任何构建阶段绑定的目标可通过直接调用在构建生命周期之外执行。执行顺序取决于目标和构建阶段的调用顺序。例如，请看下面的命令。clean（清除）和 package（打包）参数是构建阶段，而 dependency:copy-dependencies 是（插件的）目标。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn clean dependency:copy-dependencies package\n</code></pre></div></div>\n\n<p>如果执行该目标，将首先执行清理（clean）阶段（这意味着它将运行清理生命周期的所有前置阶段，以及清理阶段本身），然后执行依赖：复制依赖（dependency:copy-dependencies）目标，最后执行软件包（package）阶段（以及默认生命周期的所有前置构建阶段）。</p>\n\n<p>此外，如果一个目标与一个或多个构建阶段绑定，则该目标将在所有这些阶段中被调用。</p>\n\n<p>此外，一个构建阶段也可以绑定 0 个或多个目标。如果一个构建阶段没有绑定任何目标，那么该构建阶段将不会执行。但如果它绑定了一个或多个目标，就会执行所有这些目标。</p>\n\n<p>（注：在 Maven 2.0.5 及以上版本中，绑定到一个阶段的多个目标将按照在 POM 中声明的顺序执行，但不支持同一插件的多个实例。在 Maven 2.0.11 及以上版本中，同一插件的多个实例被分组在一起执行，并按顺序排列）。</p>\n\n<h3 id=\"某些阶段通常不通过命令行调用\">某些阶段通常不通过命令行调用</h3>\n\n<p>用连字符（<code class=\"language-plaintext highlighter-rouge\">pre-*</code>、<code class=\"language-plaintext highlighter-rouge\">post-*</code> 或 <code class=\"language-plaintext highlighter-rouge\">process-*</code>）命名的阶段通常不直接从命令行调用。这些阶段会对编译过程进行排序，产生在编译过程之外无用的中间结果。在调用集成测试（<code class=\"language-plaintext highlighter-rouge\">integration-test</code>）的情况下，环境可能会处于挂起状态。</p>\n\n<p>代码覆盖工具（如 Jacoco）和执行容器插件（如 Tomcat、Cargo 和 Docker）将目标绑定到预集成测试（<code class=\"language-plaintext highlighter-rouge\">pre-integration-test</code>）阶段，以准备集成测试容器环境。这些插件还将目标绑定到集成测试后（<code class=\"language-plaintext highlighter-rouge\">post-integration-test</code>）阶段，以收集覆盖率统计数据或退出集成测试容器。</p>\n\n<p>故障安全和代码覆盖插件将目标绑定到集成测试（<code class=\"language-plaintext highlighter-rouge\">integration-test</code>）和验证（<code class=\"language-plaintext highlighter-rouge\">verify</code>）阶段。最终结果是在验证（<code class=\"language-plaintext highlighter-rouge\">verify</code>）阶段后可获得测试和覆盖率报告。如果从命令行调用集成测试（<code class=\"language-plaintext highlighter-rouge\">integration-test</code>），则不会生成任何报告。更糟糕的是，集成测试容器环境处于挂起状态；Tomcat 网络服务器或 Docker 实例仍在运行，Maven 甚至可能不会自行终止。</p>\n\n<h2 id=\"设置项目以使用构建生命周期\">设置项目以使用构建生命周期</h2>\n\n<p>构建生命周期非常简单易用，但当您为一个项目构建 Maven 构建时，如何为每个构建阶段分配任务？</p>\n\n<h3 id=\"打包\">打包</h3>\n\n<p>第一种，也是最常见的一种方法，是通过同样命名的 POM 元素 <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> 为项目设置打包。一些有效的打包值包括 <code class=\"language-plaintext highlighter-rouge\">jar</code>、<code class=\"language-plaintext highlighter-rouge\">war</code>、<code class=\"language-plaintext highlighter-rouge\">ear</code> 和 <code class=\"language-plaintext highlighter-rouge\">pom</code>。如果没有指定包装值，则默认为 <code class=\"language-plaintext highlighter-rouge\">jar</code>。</p>\n\n<p>每个封装都包含一个目标列表，用于绑定到特定阶段。例如，<code class=\"language-plaintext highlighter-rouge\">jar</code> 包装将把以下目标绑定到默认生命周期的构建阶段。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">阶段</th>\n      <th style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">jar</code> 打包的plugin:goal（插件:目标）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:compile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:testResources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:testCompile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">surefire:test</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">jar:jar</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>这几乎是一组<a href=\"https://maven.apache.org/ref/3.9.6/maven-core/default-bindings.html\">标准的绑定</a>；不过，有些软件包会以不同的方式处理它们。例如，纯元数据项目（打包值为 <code class=\"language-plaintext highlighter-rouge\">pom</code>）只将目标绑定到安装和部署阶段（有关某些打包类型的目标到构建阶段绑定的完整列表，请参阅<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference\">生命周期参考</a>）。</p>\n\n<p>请注意，要使某些打包类型可用，您可能还需要在 POM 的 <code class=\"language-plaintext highlighter-rouge\">&lt;build&gt;</code> 部分包含特定插件，并为该插件指定 <code class=\"language-plaintext highlighter-rouge\">&lt;extensions&gt;true&lt;/extensions&gt;</code> 。Plexus 插件就是一个需要这样做的例子，它提供了 <code class=\"language-plaintext highlighter-rouge\">plexus-application</code> 和 <code class=\"language-plaintext highlighter-rouge\">plexus-service</code> 打包。</p>\n\n<h3 id=\"插件\">插件</h3>\n\n<p>为阶段添加目标的第二种方法是在项目中配置插件。插件是向 Maven 提供目标的工件。此外，一个插件可能有一个或多个目标，其中每个目标代表该插件的一种能力。例如，编译器插件有两个目标：<code class=\"language-plaintext highlighter-rouge\">compile</code> 和 <code class=\"language-plaintext highlighter-rouge\">testCompile</code>。前者编译主代码的源代码，后者编译测试代码的源代码。</p>\n\n<p>正如您将在后面的章节中看到的，插件可以包含<strong>指示将目标绑定到哪个生命周期阶段</strong>的信息。请注意，仅添加插件本身的信息是不够的，还必须指定要在构建过程中运行的目标。</p>\n\n<p>配置的目标将添加到已绑定到所选包装生命周期的目标中。如果一个特定阶段绑定了多个目标，则使用的顺序是先执行包装中的目标，然后再执行 POM 中配置的目标。请注意，您可以使用 <code class=\"language-plaintext highlighter-rouge\">&lt;executions&gt;</code> 元素对特定目标的顺序进行更多控制。</p>\n\n<p>例如，Modello 插件默认将其目标 <code class=\"language-plaintext highlighter-rouge\">modello:java</code> 绑定到生成源代码（<code class=\"language-plaintext highlighter-rouge\">generate-sources</code>）阶段（注：<code class=\"language-plaintext highlighter-rouge\">modello:java</code> 目标生成 Java 源代码）。因此，要使用 Modello 插件并让它从模型生成源代码并将其纳入构建，您需要在 <code class=\"language-plaintext highlighter-rouge\">&lt;build&gt;</code> 的 <code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code> 部分的 POM 中添加以下内容：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nt\">&lt;plugin&gt;</span>\n   <span class=\"nt\">&lt;groupId&gt;</span>org.codehaus.modello<span class=\"nt\">&lt;/groupId&gt;</span>\n   <span class=\"nt\">&lt;artifactId&gt;</span>modello-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n   <span class=\"nt\">&lt;version&gt;</span>1.8.1<span class=\"nt\">&lt;/version&gt;</span>\n   <span class=\"nt\">&lt;executions&gt;</span>\n     <span class=\"nt\">&lt;execution&gt;</span>\n       <span class=\"nt\">&lt;configuration&gt;</span>\n         <span class=\"nt\">&lt;models&gt;</span>\n           <span class=\"nt\">&lt;model&gt;</span>src/main/mdo/maven.mdo<span class=\"nt\">&lt;/model&gt;</span>\n         <span class=\"nt\">&lt;/models&gt;</span>\n         <span class=\"nt\">&lt;version&gt;</span>4.0.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;/configuration&gt;</span>\n       <span class=\"nt\">&lt;goals&gt;</span>\n         <span class=\"nt\">&lt;goal&gt;</span>java<span class=\"nt\">&lt;/goal&gt;</span>\n       <span class=\"nt\">&lt;/goals&gt;</span>\n     <span class=\"nt\">&lt;/execution&gt;</span>\n   <span class=\"nt\">&lt;/executions&gt;</span>\n <span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div></div>\n\n<p>您可能想知道为什么要使用 <code class=\"language-plaintext highlighter-rouge\">&lt;executions&gt;</code> 元素。这样您就可以在需要时使用不同的配置多次运行同一个目标。还可以给单独的执行赋予一个 ID，这样在继承或应用配置文件时，就可以控制目标配置是被合并还是被转化为额外的执行。</p>\n\n<p>当给出多个符合特定阶段的执行时，这些执行将按照 POM 中指定的顺序执行，先执行继承的执行。</p>\n\n<p>现在，就 <code class=\"language-plaintext highlighter-rouge\">modello:java</code> 而言，只有在生成源代码（<code class=\"language-plaintext highlighter-rouge\">generate-sources</code>）阶段才有意义。但有些目标可以在多个阶段使用，而且可能没有合理的默认值。对于这些目标，你可以自己指定阶段。例如，假设有一个目标 <code class=\"language-plaintext highlighter-rouge\">display:time</code>，它能在命令行中显示当前时间，你希望它在 <code class=\"language-plaintext highlighter-rouge\">process-test-resources</code> 阶段运行，以显示测试何时开始。可以这样配置</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nt\">&lt;plugin&gt;</span>\n   <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.example<span class=\"nt\">&lt;/groupId&gt;</span>\n   <span class=\"nt\">&lt;artifactId&gt;</span>display-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n   <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n   <span class=\"nt\">&lt;executions&gt;</span>\n     <span class=\"nt\">&lt;execution&gt;</span>\n       <span class=\"nt\">&lt;phase&gt;</span>process-test-resources<span class=\"nt\">&lt;/phase&gt;</span>\n       <span class=\"nt\">&lt;goals&gt;</span>\n         <span class=\"nt\">&lt;goal&gt;</span>time<span class=\"nt\">&lt;/goal&gt;</span>\n       <span class=\"nt\">&lt;/goals&gt;</span>\n     <span class=\"nt\">&lt;/execution&gt;</span>\n   <span class=\"nt\">&lt;/executions&gt;</span>\n <span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"生命周期参考\">生命周期参考</h2>\n\n<h3 id=\"clean-生命周期\">clean 生命周期</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">阶段</th>\n      <th style=\"text-align: left\">描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">pre-clean</code></td>\n      <td style=\"text-align: left\">在实际项目清洁之前执行所需的流程</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">clean</code></td>\n      <td style=\"text-align: left\">删除上一次构建生成的所有文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">post-clean</code></td>\n      <td style=\"text-align: left\">执行最终完成项目清理所需的流程</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"site-生命周期\">site 生命周期</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">阶段</th>\n      <th style=\"text-align: left\">描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">pre-site</code></td>\n      <td style=\"text-align: left\">在实际项目网站生成之前执行所需的流程</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site</code></td>\n      <td style=\"text-align: left\">生成项目的网站文档</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">post-site</code></td>\n      <td style=\"text-align: left\">执行最终生成网站所需的流程，并为网站部署做好准备</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site-deploy</code></td>\n      <td style=\"text-align: left\">将生成的网站文档部署到指定的网络服务器上</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"default-生命周期\">default 生命周期</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">validate</code></td>\n      <td style=\"text-align: left\">验证项目是否正确，以及所有必要信息是否可用。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">initialize</code></td>\n      <td style=\"text-align: left\">初始化构建状态，例如设置属性或创建目录。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-sources</code></td>\n      <td style=\"text-align: left\">生成源代码，以便纳入编译。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-sources</code></td>\n      <td style=\"text-align: left\">处理源代码，例如过滤任何值。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-resources</code></td>\n      <td style=\"text-align: left\">生成包含在软件包中的资源。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\">将资源复制并处理到目标目录，以便打包。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\">编译项目源代码。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-classes</code></td>\n      <td style=\"text-align: left\">对编译生成的文件进行后处理，例如对 Java 类进行字节码增强。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-test-sources</code></td>\n      <td style=\"text-align: left\">生成测试源代码，以便纳入编译。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-sources</code></td>\n      <td style=\"text-align: left\">处理测试源代码，例如过滤任何值。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-test-resources</code></td>\n      <td style=\"text-align: left\">创建测试资源。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\">复制并处理资源到测试目标目录。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\">将测试源代码编译到测试目标目录中。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-classes</code></td>\n      <td style=\"text-align: left\">对测试编译生成的文件进行后处理，例如对 Java 类进行字节码增强。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test</code></td>\n      <td style=\"text-align: left\">使用合适的单元测试框架运行测试。这些测试不应要求打包或部署代码。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">prepare-package</code></td>\n      <td style=\"text-align: left\">在实际打包前执行任何必要的操作以准备打包。这通常会产生一个未打包、已处理过的软件包版本。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\">将编译后的代码打包成可发布的格式，如 JAR。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">pre-integration-test</code></td>\n      <td style=\"text-align: left\">执行集成测试前所需的操作。这可能涉及设置所需的环境等。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">integration-test</code></td>\n      <td style=\"text-align: left\">处理软件包，并在必要时将其部署到可运行集成测试的环境中。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">post-integration-test</code></td>\n      <td style=\"text-align: left\">执行集成测试后所需的操作。这可能包括清理环境。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">verify</code></td>\n      <td style=\"text-align: left\">运行任何检查以验证软件包是否有效并符合质量标准。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\">将软件包安装到本地存储库，作为本地其他项目的依赖项。</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\">在集成或发布环境中完成，将最终软件包复制到远程版本库，以便与其他开发人员和项目共享。</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"内置生命周期绑定\">内置生命周期绑定</h2>\n\n<p>有些阶段默认绑定了目标。对于默认生命周期，这些绑定取决于包装值。下面是一些目标与构建阶段的绑定。</p>\n\n<h3 id=\"clean-生命周期绑定\">clean 生命周期绑定</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">clean</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">clean:clean</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"site-生命周期绑定\">site 生命周期绑定</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site:site</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site-deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"default-生命周期绑定\">default 生命周期绑定</h3>\n\n<h4 id=\"packaging-ejb--ejb3--jar--par--rar--war\">Packaging <code class=\"language-plaintext highlighter-rouge\">ejb</code> / <code class=\"language-plaintext highlighter-rouge\">ejb3</code> / <code class=\"language-plaintext highlighter-rouge\">jar</code> / <code class=\"language-plaintext highlighter-rouge\">par</code> / <code class=\"language-plaintext highlighter-rouge\">rar</code> / <code class=\"language-plaintext highlighter-rouge\">war</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:compile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:testResources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:testCompile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">surefire:test</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">ejb:ejb</code> <em>or</em> <code class=\"language-plaintext highlighter-rouge\">ejb3:ejb3</code> <em>or</em> <code class=\"language-plaintext highlighter-rouge\">jar:jar</code> <em>or</em> <code class=\"language-plaintext highlighter-rouge\">par:par</code> <em>or</em> <code class=\"language-plaintext highlighter-rouge\">rar:rar</code> <em>or</em> <code class=\"language-plaintext highlighter-rouge\">war:war</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"packaging-ear\">Packaging <code class=\"language-plaintext highlighter-rouge\">ear</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">ear:generate-application-xml</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">ear:ear</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"packaging-maven-plugin\">Packaging <code class=\"language-plaintext highlighter-rouge\">maven-plugin</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">plugin:descriptor</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:compile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:testResources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:testCompile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">surefire:test</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">jar:jar</code> <em>and</em> <code class=\"language-plaintext highlighter-rouge\">plugin:addPluginArtifactMetadata</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"packaging-pom\">Packaging <code class=\"language-plaintext highlighter-rouge\">pom</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/04/Maven-%E5%85%AB-%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（八）构建生命周期'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2023-12-04T19:56:23+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven（八）构建生命周期</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（七）命名约定指南",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/04/Maven-%E4%B8%83-%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A%E6%8C%87%E5%8D%97/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#groupid\" id=\"markdown-toc-groupid\">groupId</a></li>\n  <li><a href=\"#artifactid\" id=\"markdown-toc-artifactid\">artifactId</a></li>\n  <li><a href=\"#version\" id=\"markdown-toc-version\">version</a></li>\n</ol>\n\n<h2 id=\"groupid\">groupId</h2>\n\n<p><strong>groupId</strong> 在所有项目中唯一标识您的项目，应遵循<a href=\"https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7\">Java 的包名称规则</a>。这意味着它以您控制的反向域名开头。例如<code class=\"language-plaintext highlighter-rouge\">org.apache.maven</code>,<code class=\"language-plaintext highlighter-rouge\">org.apache.commons</code>。</p>\n\n<p>Maven 并不强制执行这一规则。有许多传统项目并不遵循这一约定，而是使用单字组 ID（single word ID）。不过，新的单字组 ID 将很难被批准纳入 Maven Central 资源库。</p>\n\n<p>您可以创建任意多的子组（subgroups）。使用项目结构是确定 <code class=\"language-plaintext highlighter-rouge\">groupId</code> 粒度的好方法。也就是说，如果当前项目是一个多模块项目，则应在父项目的 <code class=\"language-plaintext highlighter-rouge\">groupId</code> 上附加一个新的标识符。例如<code class=\"language-plaintext highlighter-rouge\">org.apache.maven</code>, <code class=\"language-plaintext highlighter-rouge\">org.apache.maven.plugins</code>,<code class=\"language-plaintext highlighter-rouge\">org.apache.maven.reporting</code></p>\n\n<h2 id=\"artifactid\">artifactId</h2>\n\n<p><strong>artifactId</strong> 是 jar 的名称，不含版本。如果是你创建的，那么你可以选择任何你想要的名称（小写字母，没有奇怪的符号）。但如果是第三方 jar，则必须使用分发的 jar 名称。例如<code class=\"language-plaintext highlighter-rouge\">maven</code>, <code class=\"language-plaintext highlighter-rouge\">commons-math</code>。</p>\n\n<h2 id=\"version\">version</h2>\n\n<p>如果您发布了版本，那么您可以选择任何带有数字和点的典型版本（1.0、1.1、1.0.1……）。不要使用日期，因为它们通常与 SNAPSHOT（nightly）版本相关联。但如果是第三方工具，则必须使用其版本号，不管它是什么，而且看起来可能很奇怪。例如<code class=\"language-plaintext highlighter-rouge\">2.0</code>, <code class=\"language-plaintext highlighter-rouge\">2.0.1</code>, <code class=\"language-plaintext highlighter-rouge\">1.3.1</code>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/04/Maven-%E4%B8%83-%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A%E6%8C%87%E5%8D%97/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（七）命名约定指南'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-12-04T16:05:40+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven（七）命名约定指南</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（六）构建其它类型项目及子项目",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/04/Maven-%E5%85%AD-%E6%9E%84%E5%BB%BA%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AD%90%E9%A1%B9%E7%9B%AE/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#构建其它类型项目\" id=\"markdown-toc-构建其它类型项目\">构建其它类型项目</a></li>\n  <li><a href=\"#同时构建多个项目\" id=\"markdown-toc-同时构建多个项目\">同时构建多个项目</a></li>\n</ol>\n\n<h2 id=\"构建其它类型项目\">构建其它类型项目</h2>\n\n<p>生命周期适用于任何项目类型。例如，我们可以在基本目录中创建一个简单的网络应用程序：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn archetype:generate <span class=\"se\">\\</span>\n    <span class=\"nt\">-DarchetypeGroupId</span><span class=\"o\">=</span>org.apache.maven.archetypes <span class=\"se\">\\</span>\n    <span class=\"nt\">-DarchetypeArtifactId</span><span class=\"o\">=</span>maven-archetype-webapp <span class=\"se\">\\</span>\n    <span class=\"nt\">-DgroupId</span><span class=\"o\">=</span>com.mycompany.app <span class=\"se\">\\</span>\n    <span class=\"nt\">-DartifactId</span><span class=\"o\">=</span>my-webapp\n</code></pre></div></div>\n\n<p>请注意，这些内容必须都在一行中。这将创建一个名为 <code class=\"language-plaintext highlighter-rouge\">my-webapp</code> 的目录，其中包含以下项目描述符：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-webapp<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>war<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;finalName&gt;</span>my-webapp<span class=\"nt\">&lt;/finalName&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>注意 <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> 元素——它告诉 Maven 以 WAR 的形式构建。进入 webapp 项目目录并尝试命令：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn package\n</code></pre></div></div>\n\n<p>您将看到 <code class=\"language-plaintext highlighter-rouge\">target/my-webapp.war</code> 已构建，并且所有正常步骤都已执行。</p>\n\n<h2 id=\"同时构建多个项目\">同时构建多个项目</h2>\n\n<p>Maven 内置了处理多个模块的概念。在本节中，我们将演示如何一步构建上述 WAR，并包含之前的 JAR。</p>\n\n<p>首先，我们需要在其他两个模块上方的目录中添加一个父 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 文件，因此它应该是这样的：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>+- pom.xml\n+- my-app\n| +- pom.xml\n| +- src\n|   +- main\n|     +- java\n+- my-webapp\n| +- pom.xml\n| +- src\n|   +- main\n|     +- webapp\n</code></pre></div></div>\n\n<p>创建的 POM 文件应包含以下内容：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>my-app<span class=\"nt\">&lt;/module&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>my-webapp<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>我们需要依赖网络应用中的 JAR，因此请将其添加到 <code class=\"language-plaintext highlighter-rouge\">my-webapp/pom.xml</code> 中：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n</code></pre></div></div>\n\n<p>最后，在子目录中的其他两个 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 文件中添加以下 <code class=\"language-plaintext highlighter-rouge\">&lt;parent&gt;</code> 元素：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  ...\n</code></pre></div></div>\n\n<p>现在，从父目录执行命令：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn verify\n</code></pre></div></div>\n\n<p>现在已在 <code class=\"language-plaintext highlighter-rouge\">my-webapp/target/my-webapp.war</code> 中创建了 WAR，并包含了 JAR：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>jar tvf my-webapp/target/my-webapp-1.0-SNAPSHOT.war\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/\n 222 Fri Jun 24 10:59:54 EST 2005 META-INF/MANIFEST.MF\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/\n3239 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/pom.xml\n   0 Fri Jun 24 10:59:56 EST 2005 WEB-INF/\n 215 Fri Jun 24 10:59:56 EST 2005 WEB-INF/web.xml\n 123 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/pom.properties\n  52 Fri Jun 24 10:59:56 EST 2005 index.jsp\n   0 Fri Jun 24 10:59:56 EST 2005 WEB-INF/lib/\n2713 Fri Jun 24 10:59:56 EST 2005 WEB-INF/lib/my-app-1.0-SNAPSHOT.jar\n</code></pre></div></div>\n\n<p>这是如何实现的？首先，创建的父 POM（名为 <code class=\"language-plaintext highlighter-rouge\">app</code>）定义了 <code class=\"language-plaintext highlighter-rouge\">pom</code> 封装和模块列表。这会告诉 Maven 在项目集上运行所有操作，而不仅仅是当前项目（要覆盖此行为，可以使用 <code class=\"language-plaintext highlighter-rouge\">--non-recursive</code> 命令行选项）。</p>\n\n<p>接下来，我们告诉 WAR 需要 <code class=\"language-plaintext highlighter-rouge\">my-app</code> JAR。这样做有几个目的：</p>\n\n<ul>\n  <li>让 WAR 中的任何代码（本例中没有代码）都能在类路径上使用该 JAR；</li>\n  <li>确保 JAR 始终在 WAR 之前编译；</li>\n  <li>指示 WAR 插件将 JAR 包含在其库目录中。</li>\n</ul>\n\n<p>您可能已经注意到，<code class=\"language-plaintext highlighter-rouge\">junit-4.11.jar</code> 是一个依赖项，但最终并没有出现在 WAR 中。原因在于 <code class=\"language-plaintext highlighter-rouge\">&lt;scope&gt;test&lt;/scope&gt;</code> 元素——它只是测试所需的元素，因此没有像编译时依赖的 <code class=\"language-plaintext highlighter-rouge\">my-app</code> 一样包含在网络应用中。</p>\n\n<p>最后一步是包含父定义。这样可以确保即使项目与父项目分开发布，也能通过在版本库中查找找到 POM。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/04/Maven-%E5%85%AD-%E6%9E%84%E5%BB%BA%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AD%90%E9%A1%B9%E7%9B%AE/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（六）构建其它类型项目及子项目'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2023-12-04T14:35:15+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven（六）构建其它类型项目及子项目</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（五）外部依赖、远程仓库及文档",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/04/Maven-%E4%BA%94-%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%8F%8A%E6%96%87%E6%A1%A3/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#引入外部依赖项\" id=\"markdown-toc-引入外部依赖项\">引入外部依赖项</a></li>\n  <li><a href=\"#部署到远程存储库\" id=\"markdown-toc-部署到远程存储库\">部署到远程存储库</a></li>\n  <li><a href=\"#创建文档\" id=\"markdown-toc-创建文档\">创建文档</a></li>\n</ol>\n\n<h2 id=\"引入外部依赖项\">引入外部依赖项</h2>\n\n<p>您可能已经注意到了我们用作示例的 POM 中的 <code class=\"language-plaintext highlighter-rouge\">dependencies</code> 元素。事实上，您一直都在使用外部依赖关系，但在这里我们将更详细地介绍其工作原理。如需更全面的介绍，请参阅我们的<a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\">依赖机制简介</a>。</p>\n\n<p>pom.xml 的 “dependencies”（依赖项）部分列出了项目构建所需的所有外部依赖项（无论是在编译时、测试时、运行时还是其他时候）。现在，我们的项目只依赖 JUnit（为了清晰起见，我去掉了所有资源过滤的内容）：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>对于每个外部依赖项，您至少需要定义 4 项内容：groupId、artifactId、version 和 scope。groupId、artifactId 和版本与构建该依赖关系的项目的 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 中给出的相同。scope 元素表示项目如何使用该依赖项，可以是<code class=\"language-plaintext highlighter-rouge\">compile</code>、<code class=\"language-plaintext highlighter-rouge\">test</code>和<code class=\"language-plaintext highlighter-rouge\">runtime</code> 等值。有关为依赖关系指定内容的更多信息，请参阅<a href=\"https://maven.apache.org/ref/current/maven-model/maven.html\">项目描述符参考</a>。</p>\n\n<p>有关整个依赖机制的更多信息，请参阅<a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\">依赖机制简介</a>。</p>\n\n<p>有了这些关于依赖项的信息，Maven 就能在构建项目时引用该依赖项。Maven 从何处引用依赖关系？Maven 会在本地版本库（默认位置为 <code class=\"language-plaintext highlighter-rouge\">${user.home}/.m2/repository</code>）中查找所有依赖项。在上一节中，我们将项目中的构件（<code class=\"language-plaintext highlighter-rouge\">my-app-1.0-SNAPSHOT.jar</code>）安装（install）到本地资源库中。安装完成后，其他项目只需在其 pom.xml 中添加依赖关系信息，即可将该 jar 作为依赖关系引用：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-other-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    ...\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>那么在其他地方构建的依赖关系呢？它们如何进入我的本地版本库？只要项目引用了本地版本库中没有的依赖项，Maven 就会将该依赖项从远程版本库下载到本地版本库中。当您构建第一个项目时，您可能会注意到 Maven 下载了很多东西（这些下载是用于构建项目的各种插件的依赖项）。</p>\n\n<p><strong>默认情况下，Maven 使用的远程资源库位于 https://repo.maven.apache.org/maven2/。您也可以设置自己的远程资源库（也许是公司的中央资源库）</strong>，以替代或补充默认的远程资源库。有关版本库的更多信息，请参阅<a href=\"https://maven.apache.org/guides/introduction/introduction-to-repositories.html\">版本库简介</a>。</p>\n\n<p>让我们为项目添加另一个依赖关系。假设我们在代码中添加了一些日志记录，需要将 log4j 添加为依赖关系。首先，我们需要知道 log4j 的 groupId、artifactId 和 version。Maven Central 上的相应目录名为 <code class=\"language-plaintext highlighter-rouge\">/maven2/log4j/log4j</code>。该目录中有一个名为 <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> 的文件。下面是 log4j 的 <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> 文件：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;metadata&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.1.3<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;versioning&gt;</span>\n    <span class=\"nt\">&lt;versions&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.1.3<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.4<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.5<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.6<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.7<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.8<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.9<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.12<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/versions&gt;</span>\n  <span class=\"nt\">&lt;/versioning&gt;</span>\n<span class=\"nt\">&lt;/metadata&gt;</span>\n</code></pre></div></div>\n\n<p>从该文件中，我们可以看到我们需要的 groupId 是“log4j”，artifactId 是“log4j”。我们可以看到许多不同的版本值可供选择。</p>\n\n<p>现在，我们将只使用最新版本 1.2.12（某些 <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> 文件还可能指定当前发布版本的版本：请参阅<a href=\"https://maven.apache.org/ref/current/maven-repository-metadata/repository-metadata.html\">版本库元数据参考</a>）。</p>\n\n<p>在 <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> 文件旁边，我们可以看到与每个版本的 log4j 库相对应的目录。在每个目录中，我们都能找到实际的 jar 文件（如 <code class=\"language-plaintext highlighter-rouge\">log4j-1.2.12.jar</code>）以及一个 pom 文件（这是该依赖项的 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>，说明了它可能有的其他依赖项和其他信息）和另一个 <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> 文件。每个文件还对应一个 md5 文件，其中包含这些文件的 MD5 哈希值。你可以用它来验证库，或者找出你可能正在使用的特定库的版本。</p>\n\n<p>现在我们知道了所需的信息，就可以将依赖关系添加到 pom.xml 中：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.12<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>现在，当我们编译项目（<code class=\"language-plaintext highlighter-rouge\">mvn compile</code>）时，我们会看到 Maven 为我们下载了 log4j 依赖项。</p>\n\n<h2 id=\"部署到远程存储库\">部署到远程存储库</h2>\n\n<p>要将 jars 部署到外部版本库，必须在 pom.xml 中配置版本库 url，并在 settings.xml 中配置连接到版本库的身份验证信息。</p>\n\n<p>下面是一个使用 scp 和用户名/密码验证的示例：</p>\n\n<p>POM.xml：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.codehaus.plexus<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>plexus-utils<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0.4<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;filters&gt;</span>\n      <span class=\"nt\">&lt;filter&gt;</span>src/main/filters/filters.properties<span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/filters&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n  <span class=\"c\">&lt;!--\n   |\n   |\n   |\n   --&gt;</span>\n  <span class=\"nt\">&lt;distributionManagement&gt;</span>\n    <span class=\"nt\">&lt;repository&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>mycompany-repository<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;name&gt;</span>MyCompany Repository<span class=\"nt\">&lt;/name&gt;</span>\n      <span class=\"nt\">&lt;url&gt;</span>scp://repository.mycompany.com/repository/maven2<span class=\"nt\">&lt;/url&gt;</span>\n    <span class=\"nt\">&lt;/repository&gt;</span>\n  <span class=\"nt\">&lt;/distributionManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>settings.xml：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/SETTINGS/1.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  ...\n  <span class=\"nt\">&lt;servers&gt;</span>\n    <span class=\"nt\">&lt;server&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>mycompany-repository<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;username&gt;</span>jvanzyl<span class=\"nt\">&lt;/username&gt;</span>\n      <span class=\"c\">&lt;!-- Default value is ~/.ssh/id_dsa --&gt;</span>\n      <span class=\"nt\">&lt;privateKey&gt;</span>/path/to/identity<span class=\"nt\">&lt;/privateKey&gt;</span> (default is ~/.ssh/id_dsa)\n      <span class=\"nt\">&lt;passphrase&gt;</span>my_key_passphrase<span class=\"nt\">&lt;/passphrase&gt;</span>\n    <span class=\"nt\">&lt;/server&gt;</span>\n  <span class=\"nt\">&lt;/servers&gt;</span>\n  ...\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div></div>\n\n<p>请注意，如果您连接的是在 sshd_config 中将 PasswordAuthentication（密码验证）参数设置为 no（否） 的 openssh ssh 服务器，则每次进行用户名/密码验证时都必须键入密码（尽管您可以使用其他 ssh 客户端键入用户名和密码登录）。在这种情况下，你可能需要改用公钥验证。</p>\n\n<p>在 settings.xml 中使用密码时应小心谨慎。更多信息，请参阅<a href=\"https://maven.apache.org/guides/mini/guide-encryption.html\">密码加密</a>。</p>\n\n<h2 id=\"创建文档\">创建文档</h2>\n\n<p>为了快速开始使用 Maven 文档系统，您可以使用原型机制，使用以下命令为现有项目生成一个站点：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn archetype:generate <span class=\"se\">\\</span>\n  <span class=\"nt\">-DarchetypeGroupId</span><span class=\"o\">=</span>org.apache.maven.archetypes <span class=\"se\">\\</span>\n  <span class=\"nt\">-DarchetypeArtifactId</span><span class=\"o\">=</span>maven-archetype-site <span class=\"se\">\\</span>\n  <span class=\"nt\">-DgroupId</span><span class=\"o\">=</span>com.mycompany.app <span class=\"se\">\\</span>\n  <span class=\"nt\">-DartifactId</span><span class=\"o\">=</span>my-app-site\n</code></pre></div></div>\n\n<p>现在，前往<a href=\"https://maven.apache.org/guides/mini/guide-site.html\">创建网站指南</a>了解如何为您的项目创建文档。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/04/Maven-%E4%BA%94-%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%8F%8A%E6%96%87%E6%A1%A3/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（五）外部依赖、远程仓库及文档'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2023-12-04T13:23:42+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven（五）外部依赖、远程仓库及文档</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（四）资源的添加及过滤",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/04/Maven-%E5%9B%9B-%E8%B5%84%E6%BA%90%E7%9A%84%E6%B7%BB%E5%8A%A0%E5%8F%8A%E8%BF%87%E6%BB%A4/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#将资源添加到-jar-中\" id=\"markdown-toc-将资源添加到-jar-中\">将资源添加到 JAR 中</a></li>\n  <li><a href=\"#过滤资源文件\" id=\"markdown-toc-过滤资源文件\">过滤资源文件</a></li>\n</ol>\n\n<h2 id=\"将资源添加到-jar-中\">将资源添加到 JAR 中</h2>\n\n<p>Maven 中，无需更改上面的 POM 即可满足的<strong>另一个常见用例</strong>是将<strong>资源打包在 JAR 文件中</strong>。对于此常见任务，Maven 再次依赖于<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">Standard Directory Layout</a>，这意味着通过使用标准 Maven 约定，您只需将这些<strong>资源放置在标准目录结构中即可将资源打包到 JAR 中</strong>。</p>\n\n<p>您可以在下面的示例中看到，我们添加了一个目录<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/resources</code>，我们可以在该目录中放置我们希望打包到 JAR 中的任何资源。Maven 采用的简单规则是这样的：放置在<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/resources</code>目录中的任何目录或文件都将打包在 JAR 中，并且从 JAR 的底部开始具有完全相同的结构。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my-app\n|-- pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> src\n    |-- main\n    |   |-- java\n    |   |   <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    |   |       <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n    |   |           <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n    |   |               <span class=\"sb\">`</span><span class=\"nt\">--</span> App.java\n    |   <span class=\"sb\">`</span><span class=\"nt\">--</span> resources\n    |       <span class=\"sb\">`</span><span class=\"nt\">--</span> META-INF\n    |           <span class=\"sb\">`</span><span class=\"nt\">--</span> application.properties\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> <span class=\"nb\">test</span>\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> java\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n                <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n                    <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n                        <span class=\"sb\">`</span><span class=\"nt\">--</span> AppTest.java\n</code></pre></div></div>\n\n<p>因此，您可以在我们的示例中看到，我们有一个<code class=\"language-plaintext highlighter-rouge\">META-INF</code>目录，该目录中包含一个<code class=\"language-plaintext highlighter-rouge\">application.properties</code>文件。如果您解压 Maven 为您创建的 JAR 并查看它，您将看到以下内容：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>|-- META-INF\n|   |-- MANIFEST.MF\n|   <span class=\"sb\">`</span><span class=\"nt\">--</span> application.properties\n|   <span class=\"sb\">`</span><span class=\"nt\">--</span> maven\n|       <span class=\"sb\">`</span><span class=\"nt\">--</span> com.mycompany.app\n|           <span class=\"sb\">`</span><span class=\"nt\">--</span> my-app\n|               |-- pom.properties\n|               <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> App.class\n</code></pre></div></div>\n\n<p>正如你所看到的，<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/resources</code> 的内容可以从 JAR 的底部开始找到，而我们的 <code class=\"language-plaintext highlighter-rouge\">application.properties</code> 文件则位于 <code class=\"language-plaintext highlighter-rouge\">META-INF</code> 目录中。你还会注意到其他一些文件，如 <code class=\"language-plaintext highlighter-rouge\">META-INF/MANIFEST.MF</code>，以及 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 和 <code class=\"language-plaintext highlighter-rouge\">pom.properties</code> 文件。这些都是在 Maven 中生成 JAR 时的标准配置。您可以选择创建自己的清单，但如果不创建，Maven 会默认生成一个清单。（您也可以修改默认清单中的条目。我们稍后将讨论这个问题）。<code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 和 <code class=\"language-plaintext highlighter-rouge\">pom.properties</code> 文件打包在 JAR 中，因此 Maven 生成的每个构件都是自描述的，如果需要，您还可以在自己的应用程序中使用元数据。一个简单的用途可能是检索应用程序的版本。对 POM 文件进行操作需要使用一些 Maven 工具，但可以使用标准 Java API 来使用属性，如下所示：</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#Generated by Maven\n#Tue Oct 04 15:43:21 GMT-05:00 2005\n</span><span class=\"py\">version</span><span class=\"p\">=</span><span class=\"s\">1.0-SNAPSHOT</span>\n<span class=\"py\">groupId</span><span class=\"p\">=</span><span class=\"s\">com.mycompany.app</span>\n<span class=\"py\">artifactId</span><span class=\"p\">=</span><span class=\"s\">my-app</span>\n</code></pre></div></div>\n\n<p>要将资源添加到单元测试的类路径中，请遵循与将资源添加到 JAR 中相同的模式，只不过放置资源的目录是<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/test/resources</code>。此时，您将拥有一个如下所示的项目目录结构：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my-app\n|-- pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> src\n    |-- main\n    |   |-- java\n    |   |   <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    |   |       <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n    |   |           <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n    |   |               <span class=\"sb\">`</span><span class=\"nt\">--</span> App.java\n    |   <span class=\"sb\">`</span><span class=\"nt\">--</span> resources\n    |       <span class=\"sb\">`</span><span class=\"nt\">--</span> META-INF\n    |           |-- application.properties\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> <span class=\"nb\">test</span>\n        |-- java\n        |   <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n        |       <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n        |           <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n        |               <span class=\"sb\">`</span><span class=\"nt\">--</span> AppTest.java\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> resources\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> test.properties\n</code></pre></div></div>\n\n<p>在单元测试中，您可以使用如下所示的简单代码片段来访问测试所需的资源：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// ...</span>\n<span class=\"c1\">// 检索资源</span>\n<span class=\"nc\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"n\">getClass</span><span class=\"o\">().</span><span class=\"na\">getResourceAsStream</span><span class=\"o\">(</span> <span class=\"s\">\"/test.properties\"</span> <span class=\"o\">);</span>\n<span class=\"c1\">// 对资源做一些事情</span>\n<span class=\"c1\">// ...</span>\n</code></pre></div></div>\n\n<h2 id=\"过滤资源文件\">过滤资源文件</h2>\n\n<p>有时，资源文件需要包含一个<strong>只能在构建时提供的值</strong>。</p>\n\n<p>要在 Maven 中实现这一点，可使用 <code class=\"language-plaintext highlighter-rouge\">${&lt;property name&gt;}</code> 语法在资源文件中引用包含该值的属性。该属性可以是 pom.xml 、 settings.xml 、外部属性文件或系统属性中定义的值。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>我们必须添加以前不存在的<code class=\"language-plaintext highlighter-rouge\">build</code>、<code class=\"language-plaintext highlighter-rouge\">resources</code>和<code class=\"language-plaintext highlighter-rouge\">resource</code>元素。此外，我们必须明确声明资源位于 <code class=\"language-plaintext highlighter-rouge\">src/main/resources</code> 目录中。所有这些信息之前都是作为默认值提供的，但由于默认值<code class=\"language-plaintext highlighter-rouge\">filtering</code>是 false，我们必须将其添加到 pom.xml 中才能覆盖该默认值并设置<code class=\"language-plaintext highlighter-rouge\">filtering</code>为 true。</p>\n\n<p>要引用 pom.xml 中定义的属性，属性名称会使用定义值的 XML 元素名称，其中 <strong><code class=\"language-plaintext highlighter-rouge\">pom</code> 可以作为项目（根）元素的别名</strong>。因此，<code class=\"language-plaintext highlighter-rouge\">${project.name}</code> 指的是项目的名称，<code class=\"language-plaintext highlighter-rouge\">${project.version}</code> 指的是项目的版本，<code class=\"language-plaintext highlighter-rouge\">${project.build.finalName}</code> 指的是构建项目打包时创建的文件的最终名称，等等。请注意，POM 中的某些元素具有默认值，因此无需在 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 中明确定义即可在此处使用。<strong>同样，用户 <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> 中的值可以使用以 <code class=\"language-plaintext highlighter-rouge\">settings</code> 开头的属性名来引用</strong>（例如，<code class=\"language-plaintext highlighter-rouge\">${settings.localRepository}</code> 指的是用户本地存储库的路径）。</p>\n\n<p>继续我们的示例，让我们在 <code class=\"language-plaintext highlighter-rouge\">application.properties</code> 文件（放在 <code class=\"language-plaintext highlighter-rouge\">src/main/resources</code> 目录中）中添加几个属性，这些属性的值将在过滤资源时提供：</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">application.name</span><span class=\"p\">=</span><span class=\"s\">${project.name}</span>\n<span class=\"py\">application.version</span><span class=\"p\">=</span><span class=\"s\">${project.version}</span>\n</code></pre></div></div>\n\n<p>有了这些，就可以执行以下命令（process-resources 是构建生命周期阶段，在此阶段会复制和过滤资源）：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn process-resources\n</code></pre></div></div>\n\n<p>而 <code class=\"language-plaintext highlighter-rouge\">target/classes</code> 下的 <code class=\"language-plaintext highlighter-rouge\">application.properties</code> 文件（最终将被放入 jar 中）看起来像这样：</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">application.name</span><span class=\"p\">=</span><span class=\"s\">Maven Quick Start Archetype</span>\n<span class=\"py\">application.version</span><span class=\"p\">=</span><span class=\"s\">1.0-SNAPSHOT</span>\n</code></pre></div></div>\n\n<p>要<strong>引用外部文件中定义的属性</strong>，只需在 pom.xml 中添加对该外部文件的引用即可。首先，让我们创建外部属性文件，并将其命名为<code class=\"language-plaintext highlighter-rouge\">src/main/filters/filter.properties</code>：</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># filter.properties\n</span><span class=\"py\">my.filter.value</span><span class=\"p\">=</span><span class=\"s\">hello!</span>\n</code></pre></div></div>\n\n<p>接下来，我们将在 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 中添加对这个新文件的引用：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;filters&gt;</span>\n      <span class=\"nt\">&lt;filter&gt;</span>src/main/filters/filter.properties<span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/filters&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>随后，我们可以在 <code class=\"language-plaintext highlighter-rouge\">application.properties</code> 文件中添加对该属性的引用：</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">application.name</span><span class=\"p\">=</span><span class=\"s\">${project.name}</span>\n<span class=\"py\">application.version</span><span class=\"p\">=</span><span class=\"s\">${project.version}</span>\n<span class=\"py\">message</span><span class=\"p\">=</span><span class=\"s\">${my.filter.value}</span>\n</code></pre></div></div>\n\n<p>下一次执行 <code class=\"language-plaintext highlighter-rouge\">mvn process-resources</code> 命令时，就会将新的属性值放入 <code class=\"language-plaintext highlighter-rouge\">application.properties</code> 中。如果不在外部文件中定义 <code class=\"language-plaintext highlighter-rouge\">my.filter.value</code> 属性，也可以在 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 的 properties 部分中定义，这样也能达到同样的效果（不需要引用<code class=\"language-plaintext highlighter-rouge\">src/main/filters/filter.properties</code>）：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n \n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;my.filter.value&gt;</span>hello<span class=\"nt\">&lt;/my.filter.value&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>过滤资源还可以从系统属性中获取值；这些属性可以是 Java 内置的系统属性（如 <code class=\"language-plaintext highlighter-rouge\">java.version</code> 或 <code class=\"language-plaintext highlighter-rouge\">user.home</code>），也可以是使用标准 Java -D 参数在命令行中定义的属性。继续举例说明，让我们把 <code class=\"language-plaintext highlighter-rouge\">application.properties</code> 文件改成下面的样子：</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">java.version</span><span class=\"p\">=</span><span class=\"s\">${java.version}</span>\n<span class=\"py\">command.line.prop</span><span class=\"p\">=</span><span class=\"s\">${command.line.prop}</span>\n</code></pre></div></div>\n\n<p>现在，当你执行以下命令时（注意命令行中 command.line.prop 属性的定义），<code class=\"language-plaintext highlighter-rouge\">application.properties</code> 文件将包含系统属性中的值。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn process-resources <span class=\"s2\">\"-Dcommand.line.prop=hello again\"</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/04/Maven-%E5%9B%9B-%E8%B5%84%E6%BA%90%E7%9A%84%E6%B7%BB%E5%8A%A0%E5%8F%8A%E8%BF%87%E6%BB%A4/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（四）资源的添加及过滤'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2023-12-04T12:25:23+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven（四）资源的添加及过滤</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（三）快照版本",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/03/Maven-%E4%B8%89-%E5%BF%AB%E7%85%A7%E7%89%88%E6%9C%AC/",
      "date"     : "Dec 3, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#快照版本\" id=\"markdown-toc-快照版本\">快照版本</a></li>\n</ol>\n\n<h2 id=\"快照版本\">快照版本</h2>\n\n<p>注意，下面显示的文件中<strong>版本</strong>标记的值<code class=\"language-plaintext highlighter-rouge\">pom.xml</code>具有后缀：<code class=\"language-plaintext highlighter-rouge\">-SNAPSHOT</code>。</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span>\n  <span class=\"err\">...</span>\n  <span class=\"err\">&lt;groupId</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  ...\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  ...\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">SNAPSHOT</code>值指的是指开发分支上的<strong>“最新”代码</strong>，并不能保证代码稳定或不变。相反，“发布”版本（任何不带后缀<code class=\"language-plaintext highlighter-rouge\">SNAPSHOT</code>的版本值）中的代码是不变的。</p>\n\n<p>换句话说，快照版本是最终“发布”版本之前的“开发”版本。该快照比它的发布版本“更旧”。</p>\n\n<p>在<a href=\"https://maven.apache.org/plugins/maven-release-plugin/\">发布过程</a>中，<strong>x.y-SNAPSHOT</strong>的版本更改为<strong>x.y</strong>。\n发布过程还将开发版本增加到<strong>x.(y+1)-SNAPSHOT</strong>。例如，版本<strong>1.0-SNAPSHOT</strong>发布为版本<strong>1.0</strong>，新开发版本为版本<strong>1.1-SNAPSHOT</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/03/Maven-%E4%B8%89-%E5%BF%AB%E7%85%A7%E7%89%88%E6%9C%AC/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（三）快照版本'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-12-03T14:40:34+11:00'>Dec 3, 2023</time> </span> </div><h2 class='article__title'>Maven（三）快照版本</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（二）第一个Maven项目",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/03/Maven-%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AAMaven%E9%A1%B9%E7%9B%AE/",
      "date"     : "Dec 3, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#第一个maven项目\" id=\"markdown-toc-第一个maven项目\">第一个Maven项目</a></li>\n  <li><a href=\"#compile编译应用程序源\" id=\"markdown-toc-compile编译应用程序源\">compile：编译应用程序源</a></li>\n  <li><a href=\"#test编译测试源并运行单元测试\" id=\"markdown-toc-test编译测试源并运行单元测试\">test：编译测试源并运行单元测试</a></li>\n  <li><a href=\"#package-和-install\" id=\"markdown-toc-package-和-install\">package 和 install</a></li>\n  <li><a href=\"#site-和-clean\" id=\"markdown-toc-site-和-clean\">site 和 clean</a></li>\n</ol>\n\n<h2 id=\"第一个maven项目\">第一个Maven项目</h2>\n\n<p>我们将立即开始创建您的第一个 Maven 项目！为了创建我们的第一个 Maven 项目，我们将使用 Maven 的原型（Archetypes）机制。原型被定义为<strong>一种原始模式或模型，所有其他同类事物都是由它构成的</strong>。在 Maven 中，<strong>原型是一个项目模板</strong>，它与一些用户输入相结合，生成一个根据用户需求定制的工作 Maven 项目。我们现在将向您展示原型机制是如何工作的，但是如果您想了解有关原型的更多信息，请参阅我们的<a href=\"https://maven.apache.org/guides/introduction/introduction-to-archetypes.html\">原型简介</a>。</p>\n\n<p>开始创建您的第一个项目！为了创建最简单的 Maven 项目，请从命令行执行以下命令：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-B</span> archetype:generate <span class=\"nt\">-DgroupId</span><span class=\"o\">=</span>com.mycompany.app <span class=\"nt\">-DartifactId</span><span class=\"o\">=</span>my-app <span class=\"nt\">-DarchetypeArtifactId</span><span class=\"o\">=</span>maven-archetype-quickstart <span class=\"nt\">-DarchetypeVersion</span><span class=\"o\">=</span>1.4\n</code></pre></div></div>\n\n<p>执行此命令后，您会注意到发生了一些事情。首先，您会注意到一个名为<code class=\"language-plaintext highlighter-rouge\">my-app</code>的目录被创建，并且该目录包含一个文件<code class=\"language-plaintext highlighter-rouge\">pom.xml</code>，该文件应如下所示：</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>my-app<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"c\">&lt;!-- FIXME change it to the project's website --&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://www.example.com<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class=\"nt\">&lt;/project.build.sourceEncoding&gt;</span>\n    <span class=\"nt\">&lt;maven.compiler.source&gt;</span>1.7<span class=\"nt\">&lt;/maven.compiler.source&gt;</span>\n    <span class=\"nt\">&lt;maven.compiler.target&gt;</span>1.7<span class=\"nt\">&lt;/maven.compiler.target&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;pluginManagement&gt;</span><span class=\"c\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span>\n       ... lots of helpful plugins\n    <span class=\"nt\">&lt;/pluginManagement&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">pom.xml</code>包含该项目的项目对象模型 （POM）。<strong>POM 是 Maven 中的基本工作单元</strong>。记住这一点很重要，因为 <strong>Maven 本质上是以项目为中心的，一切都围绕项目的概念</strong>。简而言之，POM 包含有关您的项目的每一条重要信息，并且本质上是查找与您的项目相关的任何内容的一站式服务。了解 POM 很重要，鼓励新用户参考<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html\">POM 简介</a>。</p>\n\n<p>这是一个非常简单的 POM，但仍然显示每个 POM 包含的关键元素，因此让我们逐一介绍它们，让您熟悉 POM 要点：</p>\n\n<ul>\n  <li><strong>project</strong> 这是所有 Maven pom.xml 文件中的顶级元素。</li>\n  <li><strong>modelVersion</strong> 该元素指示该 POM 使用的对象模型的版本。<strong>模型本身的版本很少更改</strong>，但是当 Maven 开发人员认为有必要更改模型时，为了确保使用的稳定性，这是强制性的。</li>\n  <li><strong>groupId</strong> 该元素指示创建项目的组织或组的唯一标识符。groupId 是项目的关键标识符之一，通常基于组织的完全限定域名。例如<code class=\"language-plaintext highlighter-rouge\">org.apache.maven.plugins</code>为所有 Maven 插件指定的 groupId。</li>\n  <li><strong>artifactId</strong> 该元素指示<strong>由该项目生成的主要工件的唯一基本名称</strong>。项目的主要工件通常是 JAR 文件。诸如源包之类的次要工件也使用artifactId作为其最终名称的一部分。Maven 生成的典型工件的格式为 &lt;artifactId&gt;-&lt;version&gt;.&lt;extension&gt;（例如，<code class=\"language-plaintext highlighter-rouge\">myapp-1.0.jar</code>）。</li>\n  <li><strong>version</strong> 该元素指示<strong>项目生成的工件的版本</strong>。Maven 在很大程度上帮助您进行版本管理，您经常会<code class=\"language-plaintext highlighter-rouge\">SNAPSHOT</code>在版本中看到指示符，这表明<strong>项目处于开发状态</strong>。<a href=\"https://maven.apache.org/guides/getting-started/index.html#what-is-a-snapshot-version\">我们将在本指南中讨论快照</a>的使用以及它们如何进一步工作。</li>\n  <li><strong>name</strong> 该元素指示用于<strong>项目的显示名称</strong>。这在 <strong>Maven 生成的文档中经常使用</strong>。</li>\n  <li><strong>url</strong> 该元素指示可以找到项目站点的位置。这在 Maven 生成的文档中经常使用。</li>\n  <li><strong>properties</strong> 该元素包含<strong>可在 POM 中的任何位置访问的值</strong>占位符。</li>\n  <li><strong>dependencies</strong> <strong>该元素的子项列出了<a href=\"https://maven.apache.org/pom.html#dependencies\">依赖项</a></strong>。POM 的基石。</li>\n  <li><strong>build</strong> 该元素处理诸如<strong>声明项目的目录结构和管理插件</strong>之类的事情。</li>\n</ul>\n\n<p>有关可在 POM 中使用的元素的<strong>完整参考</strong>，请参阅我们的 <a href=\"https://maven.apache.org/ref/current/maven-model/maven.html\">POM 参考</a>。现在让我们回到手头的项目。</p>\n\n<p>在第一个项目的原型生成之后，您还会注意到已创建以下目录结构：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my-app\n|-- pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> src\n    |-- main\n    |   <span class=\"sb\">`</span><span class=\"nt\">--</span> java\n    |       <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    |           <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n    |               <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n    |                   <span class=\"sb\">`</span><span class=\"nt\">--</span> App.java\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> <span class=\"nb\">test</span>\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> java\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n                <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n                    <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n                        <span class=\"sb\">`</span><span class=\"nt\">--</span> AppTest.java\n</code></pre></div></div>\n\n<p>正如您所看到的，从原型创建的项目有一个 POM、一个用于您的应用程序源的树和一个用于您的测试源的树。这是 Maven 项目的标准布局（应用程序源位于<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/java</code>，测试源位于<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/test/java</code>，其中 <code class=\"language-plaintext highlighter-rouge\">${project.basedir}</code> 表示包含 的目录<code class=\"language-plaintext highlighter-rouge\">pom.xml</code>）。</p>\n\n<p>如果您要手动创建 Maven 项目，这是我们建议使用的目录结构。这是 Maven 约定，要了解更多信息，您可以阅读我们的<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">标准目录布局简介</a>。</p>\n\n<p>现在我们有了 POM、应用程序源和测试源，接下来我们来看如何编译应用程序源代码和测试源代码。</p>\n\n<h2 id=\"compile编译应用程序源\">compile：编译应用程序源</h2>\n\n<p>切换到 <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> 所在的目录，并执行以下命令来编译应用程序源：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn compile\n</code></pre></div></div>\n\n<p>执行此命令后，可以看到如下输出：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>INFO] Scanning <span class=\"k\">for </span>projects...\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">----------------------</span>&lt; com.mycompany.app:my-app <span class=\"o\">&gt;</span><span class=\"nt\">----------------------</span>\n<span class=\"o\">[</span>INFO] Building my-app 1.0-SNAPSHOT\n<span class=\"o\">[</span>INFO] <span class=\"nt\">--------------------------------</span><span class=\"o\">[</span> jar <span class=\"o\">]</span><span class=\"nt\">---------------------------------</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-resources-plugin:3.0.2:resources <span class=\"o\">(</span>default-resources<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Using <span class=\"s1\">'UTF-8'</span> encoding to copy filtered resources.\n<span class=\"o\">[</span>INFO] skip non existing resourceDirectory &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/src/main/resources\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-compiler-plugin:3.8.0:compile <span class=\"o\">(</span>default-compile<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Changes detected - recompiling the module!\n<span class=\"o\">[</span>INFO] Compiling 1 <span class=\"nb\">source </span>file to &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/target/classes\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] BUILD SUCCESS\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Total <span class=\"nb\">time</span>:  0.899 s\n<span class=\"o\">[</span>INFO] Finished at: 2020-07-12T11:31:54+01:00\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n</code></pre></div></div>\n\n<p>第一次执行此（或任何其他）命令时，Maven 将<strong>需要下载完成该命令所需的所有插件和相关依赖项</strong>。从 Maven 的全新安装开始，这可能需要相当长的时间（在上面的输出中，几乎花了 4 分钟）。如果再次执行该命令，Maven 现在将拥有所需的内容，因此不需要下载任何新内容，并且能够更快地执行该命令。</p>\n\n<p>从输出中可以看到，编译后的类被放置在 <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/target/classes</code>，这是 Maven 使用的另一个标准约定。</p>\n\n<h2 id=\"test编译测试源并运行单元测试\">test：编译测试源并运行单元测试</h2>\n\n<p>现在您已经成功编译了应用程序的源代码，并且现在您已经有了一些想要编译和执行的单元测试（因为每个程序员总是编写并执行他们的单元测试）。执行以下命令</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<p>执行此命令后，您应该看到如下输出：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>......\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO]  T E S T S\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Running com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - <span class=\"k\">in </span>com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Results:\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] BUILD SUCCESS\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Total <span class=\"nb\">time</span>:  1.881 s\n<span class=\"o\">[</span>INFO] Finished at: 2020-07-12T12:00:33+01:00\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n</code></pre></div></div>\n\n<p>关于输出需要注意的一些事项：</p>\n\n<ul>\n  <li>Maven 这次下载了更多依赖项。这些是执行测试所需的依赖项和插件（它已经具有编译所需的依赖项，不会再次下载它们）。</li>\n  <li>在编译和执行测试之前，Maven 会编译主要代码（所有这些类都是最新的，因为自上次编译以来我们没有更改任何内容）。</li>\n</ul>\n\n<p>如果您只想编译测试源（但不执行测试），则可以执行以下命令：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn test-compile\n</code></pre></div></div>\n\n<p>现在您可以编译应用程序源代码、编译测试并执行测试。</p>\n\n<p><strong>请注意，surefire 插件（执行测试）会查找具有特定命名约定的文件中包含的测试</strong>。默认情况下，包含的测试有：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/*Test.java</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/Test*.java</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/*TestCase.java</code></li>\n</ul>\n\n<p>默认排除是：</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/Abstract*Test.java</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/Abstract*TestCase.java</code></li>\n</ul>\n\n<h2 id=\"package-和-install\">package 和 install</h2>\n\n<p>制作 JAR 文件非常简单，可以通过执行以下命令来完成：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn package\n</code></pre></div></div>\n\n<p>现在您可以查看该<code class=\"language-plaintext highlighter-rouge\">${project.basedir}/target</code>目录，您将看到生成的 JAR 文件。</p>\n\n<p>但是，我们还需要将生成的工件（JAR 文件）<strong>安装在本地存储库</strong>（<code class=\"language-plaintext highlighter-rouge\">${user.home}/.m2/repository</code>是默认位置）中。有关存储库的更多信息，您可以参阅我们的<a href=\"https://maven.apache.org/guides/introduction/introduction-to-repositories.html\">存储库简介</a>，但让我们继续安装我们的工件！为此，请执行以下命令：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn install\n</code></pre></div></div>\n\n<p>执行此命令后，您应该看到以下输出：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>INFO] Scanning <span class=\"k\">for </span>projects...\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">----------------------</span>&lt; com.mycompany.app:my-app <span class=\"o\">&gt;</span><span class=\"nt\">----------------------</span>\n<span class=\"o\">[</span>INFO] Building my-app 1.0-SNAPSHOT\n<span class=\"o\">[</span>INFO] <span class=\"nt\">--------------------------------</span><span class=\"o\">[</span> jar <span class=\"o\">]</span><span class=\"nt\">---------------------------------</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-resources-plugin:3.0.2:resources <span class=\"o\">(</span>default-resources<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n...\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-compiler-plugin:3.8.0:compile <span class=\"o\">(</span>default-compile<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Nothing to compile - all classes are up to <span class=\"nb\">date</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-resources-plugin:3.0.2:testResources <span class=\"o\">(</span>default-testResources<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n...\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-compiler-plugin:3.8.0:testCompile <span class=\"o\">(</span>default-testCompile<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Nothing to compile - all classes are up to <span class=\"nb\">date</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-surefire-plugin:2.22.1:test <span class=\"o\">(</span>default-test<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO]  T E S T S\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Running com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - <span class=\"k\">in </span>com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Results:\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-jar-plugin:3.0.2:jar <span class=\"o\">(</span>default-jar<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Building jar: &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/target/my-app-1.0-SNAPSHOT.jar\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-install-plugin:2.5.2:install <span class=\"o\">(</span>default-install<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Installing &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/target/my-app-1.0-SNAPSHOT.jar to &lt;local-repository&gt;/com/mycompany/app/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.jar\n<span class=\"o\">[</span>INFO] Installing &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/pom.xml to &lt;local-repository&gt;/com/mycompany/app/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.pom\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] BUILD SUCCESS\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Total <span class=\"nb\">time</span>:  1.678 s\n<span class=\"o\">[</span>INFO] Finished at: 2020-07-12T12:04:45+01:00\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n</code></pre></div></div>\n\n<p>您已经完成了设置、构建、测试、打包和安装典型 Maven 项目的过程。这可能是绝大多数项目将使用 Maven 进行的操作，如果您注意到的话，您到目前为止能够做的所有事情都是由 18 行文件（即项目的模型或 POM）驱动的。</p>\n\n<h2 id=\"site-和-clean\">site 和 clean</h2>\n\n<p>Maven 提供了更多的功能，无需对目前的 POM 进行任何添加。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mvn site</code> 是 Maven 备受推崇的功能之一，无需做任何工作，这个 POM 就有足够的信息来为您的项目生成一个网站！您很可能想要自定义您的 Maven 站点，但如果您时间紧迫，您只需执行该命令即可提供有关项目的基本信息。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mvn clean</code> 将删除包含所有构建数据的目录<code class=\"language-plaintext highlighter-rouge\">target</code>，使其保持干净。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/03/Maven-%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AAMaven%E9%A1%B9%E7%9B%AE/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（二）第一个Maven项目'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2023-12-03T14:05:54+11:00'>Dec 3, 2023</time> </span> </div><h2 class='article__title'>Maven（二）第一个Maven项目</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven（一）Maven的哲学",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/zh-cn/maven/2023/12/03/Maven-%E4%B8%80-Maven%E7%9A%84%E5%93%B2%E5%AD%A6/",
      "date"     : "Dec 3, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#前言\" id=\"markdown-toc-前言\">前言</a></li>\n  <li><a href=\"#maven-的哲学\" id=\"markdown-toc-maven-的哲学\">Maven 的哲学</a></li>\n  <li><a href=\"#maven-简介\" id=\"markdown-toc-maven-简介\">Maven 简介</a></li>\n  <li><a href=\"#maven-的目标\" id=\"markdown-toc-maven-的目标\">Maven 的目标</a>    <ol>\n      <li><a href=\"#使构建过程变得简单\" id=\"markdown-toc-使构建过程变得简单\">使构建过程变得简单</a></li>\n      <li><a href=\"#提供统一的构建系统\" id=\"markdown-toc-提供统一的构建系统\">提供统一的构建系统</a></li>\n      <li><a href=\"#提供优质项目信息\" id=\"markdown-toc-提供优质项目信息\">提供优质项目信息</a></li>\n      <li><a href=\"#提供最佳实践开发指南\" id=\"markdown-toc-提供最佳实践开发指南\">提供最佳实践开发指南</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#maven-不是什么\" id=\"markdown-toc-maven-不是什么\">Maven 不是什么？</a></li>\n</ol>\n\n<h2 id=\"前言\">前言</h2>\n\n<p>Maven 作为常用的 Java 构建工具，我曾多次使用它但没有系统地学习过它。\n最近刚好因为工作需要有了重新认识Maven的机会，这次我以官方文档为主进行了学习，博客的主要内容也是对官方文档中比较重要的部分的翻译。</p>\n\n<h2 id=\"maven-的哲学\">Maven 的哲学</h2>\n\n<p><img src=\"https://maven.apache.org/images/maven-logo-black-on-white.png\" alt=\"logo\" /></p>\n\n<p>Maven 通常被许多人认为是一个构建工具。许多最初接触 Maven 的人都熟悉 Ant，所以这是一种自然的联想，但 Maven 不仅仅是一个构建工具，也不仅仅是 Ant 的替代品。Maven 是与 Ant 完全不同的生物。Ant 只是一个工具箱，而 <strong>Maven 是关于模式的应用</strong>，以实现<strong>具有可见性、可重用性、可维护性和可理解性特征的基础设施</strong>。</p>\n\n<p>如果没有这些特征，多个人就不可能在一个项目上高效地合作。如果没有可见性，一个人就不可能知道另一个人已经完成了什么，因此很有可能有用的代码不会被重用。当代码不被重用时，就很难创建可维护的系统。当每个人都不断地试图找出构成你的项目的所有这些不同的部分时，几乎没有人能够从整体上理解该项目。结果，你最终会出现筒仓效应，共享知识的衰退以及团队成员之间相应程度的挫败感。当流程对每个人来说都以不同的方式运作时，这是自然的结果。</p>\n\n<p>Maven 的诞生源于一个非常实际的愿望，即让 Apache 的多个项目以相同的方式工作。这样开发人员就可以在这些项目之间自由移动，通过了解其中一个项目的工作原理来清楚地了解所有项目的工作原理。如果开发人员花时间了解一个项目是如何构建的，那么当他们转向下一个项目时，他们就不必再次经历这个过程。同样的想法延伸到测试、生成文档、生成指标和报告、测试和部署。所有项目都有足够多的相同特征，Maven 试图在其项目管理的一般方法中利用对这些特征的理解。在非常高的层面上，所有项目都需要构建、测试、打包、记录和部署。当然，上述每个步骤都存在无限的变化，但这种变化仍然发生在明确定义的路径范围内，而 Maven 试图以清晰的方式向每个人呈现这条路径。明确路径的最简单方法是为人们提供一组可以由参与项目的任何人共享的模式。</p>\n\n<h2 id=\"maven-简介\">Maven 简介</h2>\n\n<p>Maven 是一个<a href=\"https://en.wikipedia.org/wiki/Maven\">Yiddish word</a>，意思是<em>知识的积累器</em>，最初是为了简化 Jakarta Turbine 项目的构建过程。有几个项目，每个项目都有自己的 Ant 构建文件，但都略有不同。</p>\n\n<p>我们需要一种构建项目的标准方法：项目组成的定义清晰，发布项目信息的方法简单，并且支持跨多个项目共享 JAR。</p>\n\n<p>Maven现在是一个可用于构建和管理任何基于 Java 的项目的工具。Maven致力于使 Java 开发人员的日常工作变得更加轻松，并且有助于理解任何基于 Java 的项目。</p>\n\n<h2 id=\"maven-的目标\">Maven 的目标</h2>\n\n<p>Maven 的主要目标是让开发人员在<strong>最短的时间内了解开发工作的完整状态</strong>。为了实现这一目标，Maven 处理了几个需要关注的领域：</p>\n\n<ul>\n  <li>使构建过程变得简单</li>\n  <li>提供统一的构建系统</li>\n  <li>提供优质项目信息</li>\n  <li>鼓励更好的开发实践</li>\n</ul>\n\n<h3 id=\"使构建过程变得简单\">使构建过程变得简单</h3>\n\n<p>虽然使用 Maven 并不能消除了解底层机制的需要，但 Maven 确实使开发人员免于了解许多细节。</p>\n\n<h3 id=\"提供统一的构建系统\">提供统一的构建系统</h3>\n\n<p>Maven 使用其<strong>项目对象模型 (POM) **和一组</strong>插件**来构建项目。一旦熟悉了一个 Maven 项目，您就知道所有 Maven 项目是如何构建的。这可以在浏览许多项目时节省时间。</p>\n\n<h3 id=\"提供优质项目信息\">提供优质项目信息</h3>\n\n<p>Maven 提供有用的项目信息，这些信息部分取自 POM，<strong>部分从项目源生成</strong>。例如，Maven可以提供：</p>\n\n<ul>\n  <li>直接从源代码管理创建的<strong>修改日志</strong></li>\n  <li><strong>交叉引用来源</strong></li>\n  <li>由项目管理的邮件列表</li>\n  <li>项目使用的<strong>依赖项</strong></li>\n  <li>包括覆盖率的单元测试报告</li>\n</ul>\n\n<p>第三方代码分析产品还提供 Maven 插件，将其报告添加到 Maven 给出的标准信息中。</p>\n\n<h3 id=\"提供最佳实践开发指南\">提供最佳实践开发指南</h3>\n\n<p>Maven 旨在收集当前的最佳实践开发原则，并轻松引导项目朝该方向发展。</p>\n\n<p>以单元测试为例，单元测试的规范、执行和报告是使用 Maven 的正常构建周期的一部分。当前的单元测试最佳实践如下：</p>\n\n<ul>\n  <li>将测试源代码保存在单独但并行的源代码树中</li>\n  <li>使用测试用例命名约定来定位和执行测试</li>\n  <li>让测试用例设置其环境，而不是定制测试准备的构建</li>\n</ul>\n\n<p>Maven 还协助项目工作流程，例如发布和问题管理。</p>\n\n<p>Maven 还建议了一些项目目录布局。一旦了解了布局，您就可以轻松使用 Maven 的其他项目。由于历史原因，某些项目可能不适合这种结构。虽然 Maven 被设计为能够灵活地满足不同项目的需求，但它无法在不影响目标的前提下满足所有需要。</p>\n\n<p>如果您的项目具有无法重组的不寻常的构建结构，您可能必须放弃Maven的某些功能或完全放弃 Maven 的使用。</p>\n\n<h2 id=\"maven-不是什么\">Maven 不是什么？</h2>\n\n<p>您可能听说过以下一些有关 Maven 的事情：</p>\n\n<ul>\n  <li>Maven 是一个站点和文档工具</li>\n  <li>Maven 扩展了 Ant，让您可以下载依赖项</li>\n  <li>Maven 是一组可重用的 Ant scriptlet</li>\n</ul>\n\n<p>虽然 Maven 可以做这些事情，但正如您可以在上面的“什么是 Maven？”中读到的那样。部分，这些并不是 Maven 唯一的功能，而且它的目标也有很大不同。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/maven/2023/12/03/Maven-%E4%B8%80-Maven%E7%9A%84%E5%93%B2%E5%AD%A6/'> <img src='/images/covers/maven-cover.jpg' alt='Maven（一）Maven的哲学'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-12-03T11:40:06+11:00'>Dec 3, 2023</time> </span> </div><h2 class='article__title'>Maven（一）Maven的哲学</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（七）Springboot集成及分布式部署",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%83-Springboot%E9%9B%86%E6%88%90%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/",
      "date"     : "Nov 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#springboot集成apollo\" id=\"markdown-toc-springboot集成apollo\">Springboot集成Apollo</a></li>\n  <li><a href=\"#分布式部署指南\" id=\"markdown-toc-分布式部署指南\">分布式部署指南</a></li>\n</ol>\n\n<h2 id=\"springboot集成apollo\">Springboot集成Apollo</h2>\n\n<p>account-service项目application.yml配置：</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">app</span><span class=\"pi\">:</span>\n    <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">account-service</span>\n<span class=\"na\">apollo</span><span class=\"pi\">:</span>\n    <span class=\"na\">meta</span><span class=\"pi\">:</span> <span class=\"s\">http://localhost:8080</span>\n    <span class=\"na\">bootstrap</span><span class=\"pi\">:</span>\n        <span class=\"na\">enabled</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n        <span class=\"na\">namespaces</span><span class=\"pi\">:</span> <span class=\"s\">application,micro_service.spring-boot-http,spring-rocketmq,micro_service.spring-boot-druid</span>\n</code></pre></div></div>\n\n<p>通过注解读取配置：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@RestController</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AccountController</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${sms.enable}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Boolean</span> <span class=\"n\">smsEnable</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/hi\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">hi</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"hi\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/sms\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getSmsConfig</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"smsEnable: \"</span> <span class=\"o\">+</span> <span class=\"n\">smsEnable</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${rocketmq.name-server}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">mqNameServer</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${rocketmq.producer.group}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">mqProducerGroup</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/mq\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getRocketMQConf</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mqNameServer</span> <span class=\"o\">+</span> <span class=\"s\">\": \"</span> <span class=\"o\">+</span> <span class=\"n\">mqProducerGroup</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/db-url\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getDBConfig</span><span class=\"o\">(</span><span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${spring.datasource.url}\"</span><span class=\"o\">)</span> <span class=\"nc\">String</span> <span class=\"n\">url</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">url</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>访问网址<code class=\"language-plaintext highlighter-rouge\">http://localhost:10089/account-service/sms</code>，其结果如下</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>smsEnable: true\n</code></pre></div></div>\n\n<p>此时Apollo客户端已经成功集成在Springboot项目中。</p>\n\n<h2 id=\"分布式部署指南\">分布式部署指南</h2>\n\n<p><a href=\"https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide\">分布式部署指南</a>介绍了如何按照分布式部署的方式编译、打包、部署Apollo配置中心，从而可以<strong>在开发、测试、生产等环境</strong>分别部署运行。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%83-Springboot%E9%9B%86%E6%88%90%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（七）Springboot集成及分布式部署'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-24T16:29:57+11:00'>Nov 24, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（七）Springboot集成及分布式部署</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（六）服务端及客户端设计",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%85%AD-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E8%AE%A1/",
      "date"     : "Nov 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#服务端设计配置发布后的实时推送设计\" id=\"markdown-toc-服务端设计配置发布后的实时推送设计\">服务端设计（配置发布后的实时推送设计）</a>    <ol>\n      <li><a href=\"#发送releasemessage的实现方式\" id=\"markdown-toc-发送releasemessage的实现方式\">发送ReleaseMessage的实现方式</a></li>\n      <li><a href=\"#config-service通知客户端的实现方式\" id=\"markdown-toc-config-service通知客户端的实现方式\">Config Service通知客户端的实现方式</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#客户端设计\" id=\"markdown-toc-客户端设计\">客户端设计</a></li>\n</ol>\n\n<h2 id=\"服务端设计配置发布后的实时推送设计\">服务端设计（配置发布后的实时推送设计）</h2>\n\n<p>在配置中心中，一个重要的功能就是配置发布后实时推送到客户端。下图简要描述了配置发布的大致过程：</p>\n\n<p><img src=\"\\images\\posts\\apollo-release-message-notification-design.png\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<ol>\n  <li>用户在Portal操作配置发布；</li>\n  <li>Portal调用Admin Service的接口操作发布；</li>\n  <li>Admin Service发布配置后，发送ReleaseMessage给各个Config Service；</li>\n  <li>Config Service收到ReleaseMessage后，通知对应的客户端。</li>\n</ol>\n\n<h3 id=\"发送releasemessage的实现方式\">发送ReleaseMessage的实现方式</h3>\n\n<p>发送ReleaseMessage的实现方式</p>\n\n<p>Admin Service在配置发布后，需要通知所有的Config Service有配置发布，从而Config Service可以通知对应的客户端来拉取最新的配置。</p>\n\n<p>从概念上来看，这是一个典型的消息使用场景，Admin Service作为producer发出消息，各个Config Service作为consumer消费消息。\n通过一个<strong>消息组件（Message Queue）</strong>就能很好的实现Admin Service和Config Service的解耦。</p>\n\n<p>在实现上，考虑到Apollo的实际使用场景，以及为了尽可能减少外部依赖，Apollo没有采用外部的消息中间件，而是通过数据库实现了一个简单的消息队列。</p>\n\n<p>实现方式如下：</p>\n\n<ol>\n  <li>Admin Service在<strong>配置发布后会往ReleaseMessage表插入一条消息记录</strong>，消息内容就是配置发布的AppId+Cluster+Namespace，参见DatabaseMessageSender；</li>\n  <li><strong>Config Service有一个线程会每秒扫描一次ReleaseMessage表</strong>，看看是否有新的消息记录，参见ReleaseMessageScanner；</li>\n  <li>Config Service如果发现有新的消息记录，那么就会<strong>通知到所有的消息监听器（ReleaseMessageListener）</strong>，如NotificationControllerV2，消息监听器的注册过程参见ConfigServiceAutoConfiguration；</li>\n  <li>NotificationControllerV2得到配置发布的AppId+Cluster+Namespace后，会<strong>通知对应的客户端</strong>。</li>\n</ol>\n\n<p>示意图如下：</p>\n\n<p><img src=\"\\images\\posts\\apollo-release-message-design.png\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"config-service通知客户端的实现方式\">Config Service通知客户端的实现方式</h3>\n\n<p>NotificationControllerV2在得知有配置发布后是如何通知到客户端的呢？</p>\n\n<p>实现方式如下：</p>\n\n<ol>\n  <li>客户端会发起一个Http请求到Config Service的notifications/v2接口，也就是NotificationControllerV2，参见RemoteConfigLongPollService；</li>\n  <li>NotificationControllerV2<strong>不会立即返回结果</strong>，而是通过Spring DeferredResult把请求挂起；</li>\n  <li>如果在60秒内没有该客户端关心的配置发布，那么会返回Http状态码304给客户端；</li>\n  <li>如果有该客户端关心的配置发布，NotificationControllerV2会调用DeferredResult的setResult方法，传入有配置变化的namespace信息，同时该请求会立即返回。客户端从返回的结果中获取到配置变化的namespace后，会立即请求Config Service获取该namespace的最新配置。</li>\n</ol>\n\n<h2 id=\"客户端设计\">客户端设计</h2>\n\n<p>下图简要描述了Apollo客户端的实现原理：</p>\n\n<p><img src=\"\\images\\posts\\apollo-client-architecture.png\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<ol>\n  <li>客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。（通过Http Long Polling实现）</li>\n  <li>客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。\n    <ul>\n      <li>这是一个<strong>fallback机制，为了防止推送机制失效导致配置不更新</strong></li>\n      <li>客户端定时拉取会上报本地版本，所以<strong>一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified</strong></li>\n      <li>定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: apollo.refreshInterval来覆盖，单位为分钟。</li>\n    </ul>\n  </li>\n  <li>客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中</li>\n  <li>客户端会把从服务端获取到的配置在本地文件系统缓存一份\n    <ul>\n      <li>在遇到服务不可用，或网络不通的时候，依然能从本地恢复配置</li>\n    </ul>\n  </li>\n  <li>应用程序可以从Apollo客户端获取最新的配置、订阅配置更新通知</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%85%AD-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E8%AE%A1/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（六）服务端及客户端设计'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-24T14:54:12+11:00'>Nov 24, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（六）服务端及客户端设计</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（五）灰度发布",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%94-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/",
      "date"     : "Nov 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#灰度发布的定义\" id=\"markdown-toc-灰度发布的定义\">灰度发布的定义</a></li>\n  <li><a href=\"#apollo的灰度发布功能\" id=\"markdown-toc-apollo的灰度发布功能\">Apollo的灰度发布功能</a></li>\n</ol>\n\n<h2 id=\"灰度发布的定义\">灰度发布的定义</h2>\n\n<p>灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。\n在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B。\n如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</p>\n\n<h2 id=\"apollo的灰度发布功能\">Apollo的灰度发布功能</h2>\n\n<ol>\n  <li>对于一些对程序有比较大影响的配置，可以先在一个或者多个实例生效，观察一段时间没问题后再全量发布配置。</li>\n  <li>对于一些需要调优的配置参数，可以通过灰度发布功能来实现A/B测试。可以在不同的机器上应用不同的配置，不断调整、测评一段时间后找出较优的配置再全量发布配置。</li>\n</ol>\n\n<p>Apollo的灰度发布操作方式同样可以参考<a href=\"https://www.apolloconfig.com/#/zh/usage/apollo-user-guide\">Apollo使用指南</a>的灰度发布使用指南。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%94-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（五）灰度发布'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-24T12:54:35+11:00'>Nov 24, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（五）灰度发布</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（四）快速入门及使用指南",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%9B%9B-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#快速入门\" id=\"markdown-toc-快速入门\">快速入门</a></li>\n  <li><a href=\"#使用指南\" id=\"markdown-toc-使用指南\">使用指南</a></li>\n</ol>\n\n<h2 id=\"快速入门\">快速入门</h2>\n\n<p>为了让大家更快的上手了解Apollo配置中心，Apollo准备了一个<a href=\"https://www.apolloconfig.com/#/zh/deployment/quick-start\">Quick Start</a>，能够在几分钟内在本地环境部署、启动Apollo配置中心。</p>\n\n<p>不过这里需要注意的是，Quick Start只针对本地测试使用，如果要部署到生产环境，还请另行参考<a href=\"https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide\">分布式部署指南</a>。</p>\n\n<h2 id=\"使用指南\">使用指南</h2>\n\n<p>Apollo的核心功能包括项目管理、配置管理、集群管理等，这些部分可以参考<a href=\"https://www.apolloconfig.com/#/zh/usage/apollo-user-guide\">Apollo使用指南</a>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%9B%9B-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（四）快速入门及使用指南'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-23T18:38:07+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（四）快速入门及使用指南</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（三）工作原理及核心概念",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#工作原理\" id=\"markdown-toc-工作原理\">工作原理</a></li>\n  <li><a href=\"#执行流程\" id=\"markdown-toc-执行流程\">执行流程</a></li>\n  <li><a href=\"#核心概念\" id=\"markdown-toc-核心概念\">核心概念</a></li>\n</ol>\n\n<h2 id=\"工作原理\">工作原理</h2>\n\n<p>Apollo架构设计如图所示：</p>\n\n<p><img src=\"\\images\\posts\\apollo-overall-architecture.png\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>图中各个模块的职责如下：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>模块</th>\n      <th>职责</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Config Service</td>\n      <td>提供配置的读取、推送等功能，服务对象是Apollo客户端</td>\n    </tr>\n    <tr>\n      <td>Admin Service</td>\n      <td>提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）</td>\n    </tr>\n    <tr>\n      <td>Eureka</td>\n      <td>提供服务注册和发现，为了简单起见，目前Eureka在部署时和Config Service是在一个JVM进程中的； Config Service和Admin Service都是多实例、无状态部署，所以需要将自己注册到Eureka中并保持心跳</td>\n    </tr>\n    <tr>\n      <td>Meta Server</td>\n      <td>在Eureka之上架了一层Meta Server用于封装Eureka的服务发现接口</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li>Client通过域名访问Meta Server获取Config Service服务列表（IP+Port），而后直接通过IP+Port访问服务， 同时在Client侧会做load balance、错误重试；</li>\n  <li>Portal通过域名访问Meta Server获取Admin Service服务列表（IP+Port），而后直接通过IP+Port访问服务， 同时在Portal侧会做load balance、错误重试；</li>\n  <li>为了简化部署，我们实际上会把Config Service、Eureka和Meta Server三个逻辑角色部署在同一个JVM进程中。</li>\n</ul>\n\n<h2 id=\"执行流程\">执行流程</h2>\n\n<ol>\n  <li>Apollo启动后，Config/Admin Service会自动注册到Eureka服务注册中心，并定期发送保活心跳；</li>\n  <li>Apollo Client和Portal管理端通过配置的Meta Server的域名地址经由Software Load Balancer（软件负载均衡器）进行负载均衡后分配到某一个Meta Server；</li>\n  <li>Meta Server从Eureka获取Config Service和Admin Service的服务信息，相当于是一个Eureka Client；</li>\n  <li>Meta Server获取Config Service和Admin Service（IP+Port）失败后会进行重试；</li>\n  <li>获取到正确的Config Service和Admin Service的服务信息后，Apollo Client通过Config Service为应用提供配置获取、实时更新等功能；Apollo Portal管理端通过Admin Service提供配置新增、修改、发布等功能。</li>\n</ol>\n\n<h2 id=\"核心概念\">核心概念</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>概念</th>\n      <th>理解</th>\n      <th>关键字</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>application（应用）</td>\n      <td>Apollo客户端运行的应用</td>\n      <td>appId</td>\n    </tr>\n    <tr>\n      <td>environment（环境）</td>\n      <td>Apollo客户端运行时应用处于哪个所处的环境</td>\n      <td>env</td>\n    </tr>\n    <tr>\n      <td>cluster（集群）</td>\n      <td>一个应用下不同实例的分组，比如可以按照数据中心分，上海机房的应用实例分为一个集群，北京的为另一个集群。</td>\n      <td>cluster</td>\n    </tr>\n    <tr>\n      <td>namespace（命名空间）</td>\n      <td>一个应用下<strong>不同配置的分组</strong>，可以简单地把namespace类比为文件，不同类型的配置存放在不同的文件中。如数据库配置文件，RPC配置文件，应用自身的配置文件等。</td>\n      <td>namespaces</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>有关namespace的详细理解可以参考<a href=\"https://www.apolloconfig.com/#/zh/design/apollo-core-concept-namespace\">官方文档-什么是Namespace?</a>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（三）工作原理及核心概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-23T14:59:46+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（三）工作原理及核心概念</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（二）Apollo简介",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%8C-Apollo%E7%AE%80%E4%BB%8B/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#apollo简介\" id=\"markdown-toc-apollo简介\">Apollo简介</a>    <ol>\n      <li><a href=\"#特性\" id=\"markdown-toc-特性\">特性</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"apollo简介\">Apollo简介</h2>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/logo/logo-simple.png\" alt=\"apollo-logo\" width=\"40%\" /></p>\n\n<p>Apollo（<a href=\"https://github.com/ctripcorp/apollo\">Github</a> <code>&#124;</code> <a href=\"https://www.apolloconfig.com/#/zh/README\">官方文档</a>）是携程框架部门研发的分布式配置中心。\n能够集中化管理应用的不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p>\n\n<p>Apollo包括服务端和客户端两部分：</p>\n\n<p>服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</p>\n\n<p>Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对Spring/Spring Boot环境也有较好的支持。</p>\n\n<h3 id=\"特性\">特性</h3>\n\n<p>基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置发布平台，目前提供了以下的特性：</p>\n\n<ol>\n  <li>统一管理不同环境、不同集群的配置\n    <ul>\n      <li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置；</li>\n      <li>同一份代码部署在不同的集群，可以有不同的配置，比如zookeeper的地址等；</li>\n      <li>通过命名空间（namespace）可以很方便地支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖。</li>\n    </ul>\n  </li>\n  <li>配置修改实时生效（热发布）\n    <ul>\n      <li>用户在Apollo修改完配置并发布后，客户端能实时接收到最新的配置，并通知到应用程序。</li>\n    </ul>\n  </li>\n  <li>版本发布管理\n    <ul>\n      <li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚。</li>\n    </ul>\n  </li>\n  <li>灰度发布\n    <ul>\n      <li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例。</li>\n    </ul>\n  </li>\n  <li>权限管理、发布审核、操作审计\n    <ul>\n      <li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误；</li>\n      <li>所有的操作都有审计日志，可以方便地追踪问题。</li>\n    </ul>\n  </li>\n  <li>客户端配置信息监控\n    <ul>\n      <li>可以在界面上方便地看到配置在被哪些实例使用。</li>\n    </ul>\n  </li>\n  <li>提供Java和.Net原生客户端\n    <ul>\n      <li>提供了Java和.Net的原生客户端，方便应用集成；</li>\n      <li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用；</li>\n      <li>同时提供了HTTP接口，非Java和.Net应用也可以方便地使用。</li>\n    </ul>\n  </li>\n  <li>提供开放平台API\n    <ul>\n      <li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。不过Apollo出于通用性考虑，不会对配置的修改做过多限制，只要符合基本的格式就能保存，不会针对不同的配置值进行针对性的校验，如数据库用户名、密码，Redis服务地址等；</li>\n      <li>对于这类应用配置，Apollo支持应用方通过开放平台API在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制。</li>\n    </ul>\n  </li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%8C-Apollo%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（二）Apollo简介'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-23T13:13:25+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（二）Apollo简介</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo配置中心（一）配置和配置中心",
      "category" : "Apollo",
      "tags"     : "配置, 配置中心, and Apollo",
      "url"      : "/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%80-%E9%85%8D%E7%BD%AE%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#前言关于博客的思考\" id=\"markdown-toc-前言关于博客的思考\">前言：关于博客的思考</a></li>\n  <li><a href=\"#配置\" id=\"markdown-toc-配置\">配置</a></li>\n  <li><a href=\"#配置中心\" id=\"markdown-toc-配置中心\">配置中心</a></li>\n</ol>\n\n<h2 id=\"前言关于博客的思考\">前言：关于博客的思考</h2>\n\n<p>我对Apollo的学习主要靠三个过程完成，培训视频、官方文档及示例代码。\n在学习的过程中，我逐渐发现以培训视频和博客记录为主导的学习方式是一种快餐式的，不利于深度思考的学习方式。</p>\n\n<p>这种方式虽然可以在短时间内完成大量知识的学习，但是学习者无法达到对内容的真正掌握。\n而不同项目的文档学习难度不尽相同，主要取决于开发者撰写文档的水平和读者的阅读量。但这种学习方式可以增加读者的思考时间，也不失是一种好的学习方法。</p>\n\n<p>此外，关于Apollo配置中心的博客是在工作之余完成的，所以大部分内容基本都摘自官方文档。\n记录该博客的主要目的在于加深自己对微服务架构的印象和理解，至于细节的具体实现还是要以<a href=\"https://www.apolloconfig.com/#/zh/README\">官方文档</a>为准。</p>\n\n<h2 id=\"配置\">配置</h2>\n\n<p>应用程序在启动和运行时往往需要读取一些配置信息，配置基本上伴随着应用程序的整个生命周期。\n比如数据库连接参数、启动参数等。</p>\n\n<p>配置主要有以下几个特点：</p>\n\n<ol>\n  <li>配置是<strong>独立于程序的只读变量</strong>：\n    <ul>\n      <li>配置首先是独立于程序的，同一份程序在不同的配置下会有不同的行为；</li>\n      <li>其次，配置对于程序是只读的，程序通过读取配置来改变自己的行为，但是程序不应该去改变配置。</li>\n    </ul>\n  </li>\n  <li>配置<strong>伴随应用的整个生命周期</strong>：\n    <ul>\n      <li>配置贯穿于应用的整个生命周期，应用在启动时通过读取配置来初始化，在运行时根据配置调整行为。比如启动时需要读取服务的端口号、系统在运行过程中需要读取定时策略执行定时任务等。</li>\n    </ul>\n  </li>\n  <li>配置可以有多种加载方式：\n    <ul>\n      <li>常见的有程序内部硬编码，配置文件，环境变量，启动参数，基于数据库等。</li>\n    </ul>\n  </li>\n  <li>配置需要治理：\n    <ul>\n      <li>权限控制：由于配置能改变程序的行为，不正确的配置甚至能引起灾难，所以配置的修改必须有完善的权限控制；</li>\n      <li>不同环境、集群配置管理：同一份程序在不同的环境（开发、测试、生产）、不同的集群（如不同的数据中心）经常需要有不同的配置，所以需要有完善的环境、集群配置管理。</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"配置中心\">配置中心</h2>\n\n<p>传统单体应用存在一些潜在的缺陷，如随着规模的扩大，部署效率降低，团队协作效率差，系统可靠性变差，维护困难，新功能上线周期长等。\n所以迫切需要一种新的架构去解决这些问题，而微服务架构是当下的解法之一。</p>\n\n<p>当系统从一个单体应用，被拆分成分布式系统上一个个服务节点后，配置文件也必须跟着迁移（分割），这样配置就分散了，不仅如此，分散还包含着冗余。</p>\n\n<p>配置中心<strong>将配置从应用中剥离出来，统一管理。</strong>\n解决了配置的动态变更，持久化、运维成本等问题。</p>\n\n<p>应用自身既不需要去添加管理配置接口，也不需要自己去实现配置的持久化，更不需要引入“定时任务”以便降低运维成本。</p>\n\n<p><strong>总的来说，配置中心是一种统一管理各种应用配置的基础服务组件。</strong></p>\n\n<p>在系统架构中，配置中心是整个微服务基础架构体系中的一个组件，一个合格的配置中心需要满足：</p>\n\n<ul>\n  <li>配置项容易读取和修改；</li>\n  <li>添加新配置简单直接；</li>\n  <li>支持对配置修改的监视以把控风险；</li>\n  <li>可以查看配置修改的历史记录；</li>\n  <li>不同部署环境支持隔离。</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%80-%E9%85%8D%E7%BD%AE%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo配置中心（一）配置和配置中心'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-23T12:01:05+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo配置中心（一）配置和配置中心</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/配置' class='article__tag'>配置</a>  <a href='/zh-cn/tag/配置中心' class='article__tag'>配置中心</a>  <a href='/zh-cn/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "使用DiskGenius进行系统迁移",
      "category" : "",
      "tags"     : "磁盘管理",
      "url"      : "/zh-cn/2023/10/12/%E4%BD%BF%E7%94%A8DiskGenius%E8%BF%81%E7%A7%BBC%E7%9B%98/",
      "date"     : "Oct 12, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#引言\" id=\"markdown-toc-引言\">引言</a></li>\n  <li><a href=\"#系统盘迁移\" id=\"markdown-toc-系统盘迁移\">系统盘迁移</a>    <ol>\n      <li><a href=\"#diskgenius简介\" id=\"markdown-toc-diskgenius简介\">DiskGenius简介</a></li>\n      <li><a href=\"#磁盘格式化\" id=\"markdown-toc-磁盘格式化\">磁盘格式化</a></li>\n      <li><a href=\"#系统迁移\" id=\"markdown-toc-系统迁移\">系统迁移</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#修改启动顺序\" id=\"markdown-toc-修改启动顺序\">修改启动顺序</a></li>\n</ol>\n\n<h2 id=\"引言\">引言</h2>\n\n<p>博主在本科四年来一直饱受硬盘空间不足的折磨，最近终于有机会加装一块固态硬盘。\n安装过程中，相对繁琐的是系统盘的迁移过程。\n因此我将迁移过程记录于此，或许之后还能用到。</p>\n\n<h2 id=\"系统盘迁移\">系统盘迁移</h2>\n\n<h3 id=\"diskgenius简介\">DiskGenius简介</h3>\n\n<p>DiskGenius（<a href=\"https://www.diskgenius.cn/download.php\">中文版</a> <code>&#124;</code> <a href=\"https://www.diskgenius.com/download.php\">English</a>）是一款常用的专业级磁盘管理软件。\n其包括分区管理，备份还原等使用功能，在本文中我们使用此工具完成系统盘的迁移。</p>\n\n<h3 id=\"磁盘格式化\">磁盘格式化</h3>\n\n<p>在装入新磁盘后，首先对其进行格式化，选择NTFS存储格式。\n而为了避免经常清理C盘的麻烦，我这里选择不分卷。</p>\n\n<h3 id=\"系统迁移\">系统迁移</h3>\n\n<p>安装DiskGenius后，选择其菜单栏中的系统迁移功能。</p>\n\n<p><img src=\"\\images\\posts\\diskGenius-0.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>随后选中原来的系统分区，一般为C盘；随后选择转移的目标磁盘，即我们刚才所格式化的盘。</p>\n\n<p>系统迁移可以选择PE环境或者热迁移。\n由于我没有对其热迁移进行深入研究，我选择更稳健的PE环境进行迁移。</p>\n\n<p>等待一段时间后，系统盘迁移完成。</p>\n\n<h2 id=\"修改启动顺序\">修改启动顺序</h2>\n\n<p>最后的工作为修改硬盘的启动顺序，首先进入BIOS环境（因电脑型号不同而异，我这里为开机过程中按F2）。</p>\n\n<p>在Boot菜单中修改系统启动优先级，将新安装的硬盘优先级与原硬盘互换即可。</p>\n\n<p>重新启动后进行测试，迁移后的系统盘使用顺畅，与迁移前无异。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2023/10/12/%E4%BD%BF%E7%94%A8DiskGenius%E8%BF%81%E7%A7%BBC%E7%9B%98/'> <img src='https://www.bing.com/th?id=OHR.TexasIndigoBunting_ZH-CN3699392300_1920x1080.jpg' alt='使用DiskGenius进行系统迁移'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-10-12T21:54:54+11:00'>Oct 12, 2023</time> </span> </div><h2 class='article__title'>使用DiskGenius进行系统迁移</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/磁盘管理' class='article__tag'>磁盘管理</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "使用ChatGPT控制Arduino设备",
      "category" : "",
      "tags"     : "ChatGPT, Arduino, and 智能家庭",
      "url"      : "/zh-cn/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/",
      "date"     : "Apr 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#chatgpt接入\" id=\"markdown-toc-chatgpt接入\">ChatGPT接入</a>    <ol>\n      <li><a href=\"#prompt编写与测试\" id=\"markdown-toc-prompt编写与测试\">Prompt编写与测试</a></li>\n      <li><a href=\"#openai-api接入\" id=\"markdown-toc-openai-api接入\">OpenAI API接入</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#基于flask搭建服务器\" id=\"markdown-toc-基于flask搭建服务器\">基于Flask搭建服务器</a>    <ol>\n      <li><a href=\"#flask框架搭建\" id=\"markdown-toc-flask框架搭建\">Flask框架搭建</a></li>\n      <li><a href=\"#添加用户api\" id=\"markdown-toc-添加用户api\">添加用户API</a></li>\n      <li><a href=\"#arduino-api\" id=\"markdown-toc-arduino-api\">Arduino API</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#使用mongodb存储设备状态\" id=\"markdown-toc-使用mongodb存储设备状态\">使用MongoDB存储设备状态</a>    <ol>\n      <li><a href=\"#mongodb数据库结构\" id=\"markdown-toc-mongodb数据库结构\">MongoDB数据库结构</a></li>\n      <li><a href=\"#flask接入mongodb\" id=\"markdown-toc-flask接入mongodb\">Flask接入MongoDB</a></li>\n      <li><a href=\"#与数据库的交互及数据缓存\" id=\"markdown-toc-与数据库的交互及数据缓存\">与数据库的交互及数据缓存</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#编写qqbot实现qq平台控制\" id=\"markdown-toc-编写qqbot实现qq平台控制\">编写QQbot实现QQ平台控制</a></li>\n  <li><a href=\"#arduino状态控制\" id=\"markdown-toc-arduino状态控制\">Arduino状态控制</a>    <ol>\n      <li><a href=\"#arduino设备代码实现\" id=\"markdown-toc-arduino设备代码实现\">Arduino设备代码实现</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#结果展示\" id=\"markdown-toc-结果展示\">结果展示</a></li>\n</ol>\n\n<p>这篇博客中将介绍如何使用ChatGPT来控制Arduino设备。ChatGPT是由OpenAI开发的一种自然语言处理模型，其强大的功能引发了很大的讨论。本文介绍了ChatGPT与外部系统集成的一种方法，通过ChatGPT作为控制器实现对Arduino设备的控制，以探索自然语言命令控制家庭设备的可能性及智能家庭设备的发展方向。</p>\n\n<p>这篇博客的代码公开在我的github仓库，<a href=\"https://github.com/MortalreminderPT/HomeGPT-Intelligent-Home-Assistant\">点此链接</a>传送至该项目。</p>\n\n<h2 id=\"chatgpt接入\">ChatGPT接入</h2>\n\n<h3 id=\"prompt编写与测试\">Prompt编写与测试</h3>\n\n<p>我们期望ChatGPT以json格式输出命令实现对设备的控制，因此首先需要编写一个合适的提示（prompt），用于告诉ChatGPT我们的需求。在这个提示中，我们应该明确表达我们希望ChatGPT理解并回答的问题，如打开/关闭LED灯、控制电机转速等。经过数次测试之后，我们使用python代码整合了我们的全部需求，</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">possible_device</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">air-conditioner</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">curtain</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">As an Intelligent Assistant you need to rely on my words to determine what to do with some of devices.</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">your reply contain a list with json [device] only from these devices: </span><span class=\"si\">{</span><span class=\"n\">possible_device</span><span class=\"si\">}</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\"> and only write json list without any discourse.</span><span class=\"sh\">'</span>\n    <span class=\"k\">return</span> <span class=\"n\">prompt</span>\n</code></pre></div></div>\n\n<p>在ChatGPT官网测试该提示词，发现ChatGPT可以正确理解我们的需求并做出回应。</p>\n\n<p><img src=\"\\images\\posts\\gpt1.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>此时，我们相信ChatGPT可以集成到我们的项目中。</p>\n\n<h3 id=\"openai-api接入\">OpenAI API接入</h3>\n\n<p>OpenAI提供了官方API，以实现通过发送请求与ChatGPT进行实时交互。</p>\n\n<p>首先，我们需要获得OpenAI API的访问密钥。在OpenAI的开发者门户网站上可以注册一个账户并获取API密钥。将API密钥保存在安全的地方，因为它将用于与OpenAI API进行通信。</p>\n\n<p>接下来，我们可以通过引入OpenAI API包来实现与ChatGPT的交互，这个过程仍然被放在了一个函数中：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">mask</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n        <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">completions</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n        <span class=\"k\">return</span> <span class=\"n\">message</span>\n</code></pre></div></div>\n\n<p>执行代码并观察输出结果，发现我们成功与ChatGPT完成交互。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>In: As an Intelligent Assistant you need to rely on my words to determine what to <span class=\"k\">do </span>with some of devices.\n我很冷，你可以帮我些什么吗\nyour reply contain a list with json <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"device_1\"</span>,<span class=\"s2\">\"param\"</span>:0<span class=\"o\">}]</span> only from these devices: <span class=\"o\">[{</span><span class=\"s1\">'light'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'air-conditioner'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'curtain'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}]</span> and only write json list without any discourse.\n\nOut: <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"air-conditioner\"</span>,<span class=\"s2\">\"param\"</span>:1<span class=\"o\">}]</span>\n</code></pre></div></div>\n\n<h2 id=\"基于flask搭建服务器\">基于Flask搭建服务器</h2>\n<p>在上一部分中，我们完成了与ChatGPT的对话和集成。为了便于用户的使用及与Arduino的交互，我们将使用Flask框架搭建一个服务器，以通过网络实现交互。</p>\n\n<h3 id=\"flask框架搭建\">Flask框架搭建</h3>\n<p>Flask是一个轻量级的Python Web框架，非常适合用于构建简单的Web应用程序。我们将使用Flask来搭建一个简单的服务器，以接收用户或Arduino的请求。</p>\n\n<p>首先，我们需要安装Flask。可以使用pip命令来安装Flask：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>flask\n</code></pre></div></div>\n\n<p>随后创建Flask主文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">import</span> <span class=\"n\">flask_restful</span> <span class=\"k\">as</span> <span class=\"n\">restful</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">restful</span><span class=\"p\">.</span><span class=\"nc\">Api</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">default_mediatype</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>此时RESTful风格Flask框架已经搭建完成，我们需要为其添加用户及Arduino交互接口。</p>\n<h3 id=\"添加用户api\">添加用户API</h3>\n<p>定义一个用户API文件order.py，用于向服务器发送请求并获取响应。核心代码如下所示：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">OrderApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">text_dict</span> <span class=\"o\">=</span> <span class=\"nc\">RequestParser</span><span class=\"p\">()</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> \\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n            \n        <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">mask_reply</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]})</span>\n\n        <span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n        <span class=\"n\">reply</span><span class=\"o\">=</span><span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask_reply</span><span class=\"o\">=</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n        <span class=\"n\">update_state</span><span class=\"o\">=</span><span class=\"nf\">match_json</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">update_state</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>随后我们需要在主文件中注册API文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">OrderApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>此时用户可以通过POST请求实现对Arduino设备状态的控制。</p>\n<h3 id=\"arduino-api\">Arduino API</h3>\n\n<p>Arduino设备主要工作内容为读取当前设备工作状态并做出对应调整，因此只需编写简单GET请求响应：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ArduinoApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>同样在主文件中注册API文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">ArduinoApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/arduino</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>通过Postman测试，发现可以服务器已经可以正常工作。</p>\n\n<p><img src=\"\\images\\posts\\gpt2.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"使用mongodb存储设备状态\">使用MongoDB存储设备状态</h2>\n\n<p>为了防止停电等因素对设备开关记忆的影响，我们使用数据库对设备状态进行持久化。MongoDB作为一种基于键值对的通用NoSQL数据库，非常适合实现这个需求。</p>\n\n<h3 id=\"mongodb数据库结构\">MongoDB数据库结构</h3>\n<p>在我们开始之前，我们需要定义设备状态的数据结构。在这个例子中，我们假设我们的设备有一个LED灯，可以打开或关闭。我们可以使用以下JSON格式来表示设备状态：</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"nl\">\"device\"</span><span class=\"p\">:</span><span class=\"s2\">\"light\"</span><span class=\"p\">,</span><span class=\"nl\">\"param\"</span><span class=\"p\">:</span><span class=\"mf\">1.0</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>在上面的示例中，device是设备的唯一标识符，param表示LED灯的状态。</p>\n\n<h3 id=\"flask接入mongodb\">Flask接入MongoDB</h3>\n<p>为了与MongoDB进行交互，我们将使用MongoDB的官方Python驱动程序pymongo。我们需要先安装它：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>pymongo\n</code></pre></div></div>\n<p>接下来，我们需要在Flask应用程序中添加与MongoDB的连接和数据访问逻辑。</p>\n\n<p>在app.py文件中添加pymongo库：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask_pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">PyMongo</span>\n<span class=\"n\">mongo</span> <span class=\"o\">=</span> <span class=\"nc\">PyMongo</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">MONGO_URI</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"与数据库的交互及数据缓存\">与数据库的交互及数据缓存</h3>\n\n<p>我们编写一个DeviceStates类与数据库进行交互，为了提升设备响应的即时性，我们还可以给数据库添加缓存。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">DeviceStates</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">device_state</span> <span class=\"ow\">in</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">projection</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})):</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">device_state</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">device_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dict</span><span class=\"p\">:</span><span class=\"n\">DeviceState</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">update_device</span><span class=\"p\">,</span> <span class=\"n\">update_state</span> <span class=\"ow\">in</span> <span class=\"n\">update_dict</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">update_one</span><span class=\"p\">({</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">update_device</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">$set</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"o\">**</span><span class=\"n\">update_state</span><span class=\"p\">}},</span> <span class=\"n\">upsert</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">update_device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">update_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">delete_many</span><span class=\"p\">({}).</span><span class=\"n\">deleted_count</span>\n</code></pre></div></div>\n\n<h2 id=\"编写qqbot实现qq平台控制\">编写QQbot实现QQ平台控制</h2>\n<p>本节编写了一个简单的QQbot，用户可以在QQ平台与QQbot简单对话，完成对Arduino设备状态的控制。</p>\n\n<p>安装botpy包：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>botpy\n</code></pre></div></div>\n\n<p>为QQbot编写交互代码如下：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">botpy</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy</span> <span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.ext.cog_yaml</span> <span class=\"kn\">import</span> <span class=\"n\">read</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">test_config</span> <span class=\"o\">=</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">config.yaml</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">get_logger</span><span class=\"p\">()</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">accept-language</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">zh-CN,zh;q=0.9,en;q=0.8</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">content-type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">application/json</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_ready</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">robot 「</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">robot</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">」 on_ready!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_at_message_create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">avatar</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">sleep</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">server</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n        <span class=\"kn\">import</span> <span class=\"n\">re</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">&lt;.*?&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">POST</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">reply</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">unicode_escape</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">intents</span> <span class=\"o\">=</span> <span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"nc\">Intents</span><span class=\"p\">(</span><span class=\"n\">public_guild_messages</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">intents</span><span class=\"o\">=</span><span class=\"n\">intents</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">appid</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">appid</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">token</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>此时，我们可以在QQ频道与QQbot对话，以实现对Arduino设备的控制</p>\n\n<p><img src=\"\\images\\posts\\gpt3.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"arduino状态控制\">Arduino状态控制</h2>\n<p>在服务器及交互平台搭建完成后，本部分展示了Arduino设备代码实现，其原理主要为发出GET请求获取设备状态，随后通过字符串匹配控制设备的状态。</p>\n\n<h3 id=\"arduino设备代码实现\">Arduino设备代码实现</h3>\n\n<p><strong>这部分代码是由我的队友编写的，他速成了Arduino代码编写并实现了设备状态控制，感谢他在该项目的贡献。</strong></p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ESP8266WiFi.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;SoftwareSerial.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ESP8266HTTPClient.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ArduinoJson.h&gt;</span><span class=\"cp\">\n</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">ssid</span><span class=\"p\">;</span> <span class=\"c1\">//Enter your Wi-Fi SSID</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">password</span><span class=\"p\">;</span> <span class=\"c1\">//Enter you Wi-Fi Password</span>\n<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">ledpin</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"n\">String</span> <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n<span class=\"n\">define</span> <span class=\"n\">URL</span> <span class=\"s\">\"http://localhost:5000/arduino\"</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">WIFI_STA</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"mi\">115200</span><span class=\"p\">);</span>\n    <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">);</span>\n    <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"开始连接\"</span><span class=\"p\">);</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"正在连接到\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">WL_CONNECTED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"waiting for \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"s...\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"WiFi connected!\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"IP address: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">localIP</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFiClient</span> <span class=\"n\">tcpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">HTTPClient</span> <span class=\"n\">httpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">tcpClient</span><span class=\"p\">,</span> <span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">httpCode</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">GET</span><span class=\"p\">();</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Send GET request to URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">httpCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">getString</span><span class=\"p\">();</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Server Response Payload: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span>\n    <span class=\"n\">StaticJsonDocument</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span> <span class=\"o\">&gt;</span> <span class=\"n\">doc</span><span class=\"p\">;</span>\n    <span class=\"n\">DeserializationError</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">deserializeJson</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s\">\"light\"</span><span class=\"p\">][</span><span class=\"s\">\"param\"</span><span class=\"p\">];</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">HIGH</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">LOW</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n    <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"结果展示\">结果展示</h2>\n\n<p>如图所示，在向QQbot提出需求后，ChatGPT成功接收并理解了我们的需求并将其转化为指令，Arduino设备状态也随之发生改变。</p>\n\n<p><img src=\"\\images\\posts\\gpt4.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>ChatGPT在此次实验中的强大作用向我们展示了大语言模型在智能家庭的重大潜力。包括但不限于识别并发掘深度需求，多模态智能家居控制，个性化用户体验等多种潜在方向。</p>\n\n<p>同样，该项应用也存在隐私保护，数据安全等问题，需要人们的进一步思考和解决。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/'> <img src='https://www.bing.com/th?id=OHR.LittleDuckling_ZH-CN2922471258_1920x1080.jpg' alt='使用ChatGPT控制Arduino设备'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>11 min read <time class='article__date' datetime='2023-04-24T02:00:00+10:00'>Apr 24, 2023</time> </span> </div><h2 class='article__title'>使用ChatGPT控制Arduino设备</h2> <p class='article__excerpt'>本文介绍了ChatGPT与外部系统集成的一种方法，通过ChatGPT作为控制器实现对Arduino设备的控制，以探索自然语言命令控制家庭设备的可能性及智能家庭设备的发展方向。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/ChatGPT' class='article__tag'>ChatGPT</a>  <a href='/zh-cn/tag/Arduino' class='article__tag'>Arduino</a>  <a href='/zh-cn/tag/智能家庭' class='article__tag'>智能家庭</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "设计模式（三）生成器（Builder）",
      "category" : "",
      "tags"     : "设计模式",
      "url"      : "/zh-cn/2022/09/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%89-%E7%94%9F%E6%88%90%E5%99%A8-Builder/",
      "date"     : "Sep 10, 2022",
      "content"  : "<h2 id=\"意图\">意图</h2>\n<p>将一个复杂对象的<strong>构建与它的表示分离</strong>，使得<strong>同样构建过程可以创建不同的表示</strong></p>\n\n<h2 id=\"动机\">动机</h2>\n<p>一个RTF阅读器应该能将RTF转换为多种文本格式。\n该阅读器可以将RTF文档转换成ASCII文本或能以交互方式编辑的文本窗口组件。\n然而，可以转换的数目是无限的，因此要能够很容易实现新的转换的增加，而又不改变RTF阅读器。</p>\n\n<p>一个解决办法是用一个可以将RTF转换成另一种文本表示的TextConverter对象来配置这个RTFReader类。\n当RTFReader对RTF文档进行语法分析时，使用TextConverter去做转换。\n无论何时RTFReader识别了一个RTF标记（或是普通文本或是RTF控制字），它都将发送一个请求给TextConverter去转换这个标记。\nTextConverter对象负责进行数据转换以及用特定格式表示该标记，如图</p>\n\n<p>TextConverter的子类对不同转换和不同格式进行特殊处理。\n每种转换器类将创建和装配一个复杂对象的机制隐含在抽象接口后面。\n转换器独立于阅读器，阅读器负责对一个RTF文档进行语法分析。</p>\n\n<p>Builder模式描述了所有这些关系，每个<strong>转换器类在该模式中被称为生成器（Builder），而阅读器称为导向器（Director）</strong>。\n在上面的例子中，Builder模式将分析文本格式的算法（即RTF文档的语法分析程序）与描述怎样创建和表示一个转换后的格式的算法分离开来。\n这样我们可以复用RTFReader的语法分析算法，根据RTF文档创建不同的文本表示——仅需使用不同的TextConverter子类配置RTFReader即可。</p>\n\n<h2 id=\"适用性\">适用性</h2>\n<ul>\n  <li>当<strong>创建</strong>复杂对象的算法应当<strong>独立于该对象的组成部分以及它们的装配方式</strong>时；</li>\n  <li>当构造过程必须允许<strong>被构造的对象有不同的表示时</strong>。</li>\n</ul>\n\n<h2 id=\"结构\">结构</h2>\n\n<h2 id=\"参与者\">参与者</h2>\n<ol>\n  <li>Builder（TextConverter）\n    <ul>\n      <li>为创建一个Product对象的各个部件（Part）指定抽象接口</li>\n    </ul>\n  </li>\n  <li>ConcreteBuilder（ASCIIConverter、TeXConverter、TextWidgetConverter）\n    <ul>\n      <li>实现Builder的接口以构造和装配该产品的各个部件；</li>\n      <li>定义并追踪它所创建的表示；</li>\n      <li>提供一个检索产品的接口（例如GetASCIIText、GetTextWidget）</li>\n    </ul>\n  </li>\n  <li>Director（RTFReader）\n    <ul>\n      <li>构造一个使用Builder接口的对象</li>\n    </ul>\n  </li>\n  <li>Product（ASCIIText、TeXText、TextWidget）\n    <ul>\n      <li>表示被构造的复杂对象，ConcreteBuilder创建该产品的内部表示并定义它的装配过程；</li>\n      <li>包含定义组成部件的类，包括将这些部件装配成最终产品的接口。</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"协作\">协作</h2>\n<ul>\n  <li>用户创建Director对象，并用它所想要的Builder对象进行配置；</li>\n  <li>一旦生成了产品部件，Director就会通知Builder；</li>\n  <li>Builder处理Director的请求，并将部件添加到该产品中。</li>\n  <li>用户从Builder中检索产品。</li>\n</ul>\n\n<h2 id=\"效果\">效果</h2>\n<ul>\n  <li>改变一个产品的内部表示：</li>\n  <li>将构造代码和表示代码分开：</li>\n  <li>可以对构造过程进行更精细的控制：</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/09/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%89-%E7%94%9F%E6%88%90%E5%99%A8-Builder/'> <img src='/images/covers/操作系统-cover1.png' alt='设计模式（三）生成器（Builder）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-09-10T23:00:42+10:00'>Sep 10, 2022</time> </span> </div><h2 class='article__title'>设计模式（三）生成器（Builder）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/设计模式' class='article__tag'>设计模式</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "设计模式（二）抽象工厂（Abstract Factory）",
      "category" : "",
      "tags"     : "设计模式",
      "url"      : "/zh-cn/2022/09/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%8C-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82-Abstract-Factory/",
      "date"     : "Sep 10, 2022",
      "content"  : "<h2 id=\"意图\">意图</h2>\n<p>提供一个<strong>接口</strong>，以创建<strong>一系列相关或相互依赖的对象</strong>，而无须指定它们的具体的类</p>\n\n<h2 id=\"动机\">动机</h2>\n<p>在设计一套支持不同主题的GUI时，同一套主题的GUI下会包括滚动条，窗口和按钮等组件。\n为了保证主题的可移植性，一个应用不该为一个特定的主题硬编码组件，否则会使改变主题变得困难。</p>\n\n<p>因此，可以定义一个抽象的WidgetFactory类，声明用来创建基本窗口组件的接口。\n其中，每一个窗口组件都有抽象类，它们的子类则实现窗口组件的具体主题。\n用户通过WidgetFactory提供的接口获得窗口组件，但是用户并不知道其使用的具体类，因此用户不依赖于具体的主题。</p>\n\n<p>每一种主题对应一个具体的WidgetFactory子类，每个子类实现用于创建该主题的组件操作。\n<strong>客户仅与抽象类定义的接口交互，而不使用特定类的接口</strong></p>\n\n<h2 id=\"适用性\">适用性</h2>\n\n<ul>\n  <li>一个<strong>系统</strong>要<strong>独立于其产品</strong>的创建、组合和表示；</li>\n  <li>一个<strong>系统</strong>要由<strong>多个产品系列中的一个</strong>来配置；</li>\n  <li>要强调<strong>一系列相关产品的对象的设计</strong>以便进行<strong>联合使用</strong>；</li>\n  <li>提供一个<strong>产品类库</strong>，但只想<strong>显示它们的接口</strong>而不是实现。</li>\n</ul>\n\n<h2 id=\"结构\">结构</h2>\n\n<h2 id=\"参与者\">参与者</h2>\n\n<ol>\n  <li>AbstractFactory（WidgetFactory）\n    <ul>\n      <li>声明一个创建抽象产品对象的操作接口</li>\n    </ul>\n  </li>\n  <li>ConcreteFactory（MotifWidgetFactory、PMWidgetFactory）\n    <ul>\n      <li>实现创建具体产品对象的操作</li>\n    </ul>\n  </li>\n  <li>AbstractProduct（Window、ScrollBar）\n    <ul>\n      <li>为一类产品对象声明一个接口</li>\n    </ul>\n  </li>\n  <li>ConcreteProduct（MotifWindow、MotifScrollBar）\n    <ul>\n      <li>定义一个将被具体工厂创建的产品对象；</li>\n      <li>实现AbstractProduct接口</li>\n    </ul>\n  </li>\n  <li>Client\n    <ul>\n      <li>仅由AbstractFactory和AbstractProduct类声明的接口</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"协作\">协作</h2>\n\n<ul>\n  <li>通常在运行时创建一个ConcreteFactory的实例，这一具体工厂创建具有特定实现的产品对象。为创建不同的产品对象，客户应该使用不同的具体工厂;</li>\n  <li>AbstractProduct将产品对象的创建延迟到它的ConcreteFactory子类</li>\n</ul>\n\n<h2 id=\"效果\">效果</h2>\n\n<ol>\n  <li><strong>分离了具体的类</strong>：将客户与类的实现分离，客户通过它们的抽象接口操纵实例。\n产品的类名也在具体工厂的实现中被隔离，即不出现在客户的代码中。</li>\n  <li><strong>易于交换产品系列</strong>：一个具体的工厂类在一个应用中仅出现一次，即在它初始化的时候，这使得改变一个ConcreteFactory变得容易。\n只要改变具体工厂就可以使用不同产品配置，因为一个抽象工厂创建了一个完整的产品系列，所以整个产品系列会立刻改变。</li>\n  <li><strong>有利于产品一致性</strong>：当一个系列中产品对象被设计成一起工作时，一个应用只能使用同一个系列中的对象，而AbstractFactory很容易实现这一点</li>\n  <li><strong>难以支持新种类的产品</strong>：由于AbstractFactory确定了AbstractProduct的集合。\n因此支持新种类的Product就需要扩展该工厂的接口，并扩展其全部ConcreteFactory</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/09/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%8C-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82-Abstract-Factory/'> <img src='/images/covers/操作系统-cover1.png' alt='设计模式（二）抽象工厂（Abstract Factory）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-09-10T22:22:42+10:00'>Sep 10, 2022</time> </span> </div><h2 class='article__title'>设计模式（二）抽象工厂（Abstract Factory）</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/设计模式' class='article__tag'>设计模式</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "设计模式（一）简介",
      "category" : "",
      "tags"     : "设计模式",
      "url"      : "/zh-cn/2022/09/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%80-%E7%AE%80%E4%BB%8B/",
      "date"     : "Sep 10, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是设计模式\" id=\"markdown-toc-什么是设计模式\">什么是设计模式</a></li>\n  <li><a href=\"#设计原则\" id=\"markdown-toc-设计原则\">设计原则</a></li>\n  <li><a href=\"#怎样解决设计问题\" id=\"markdown-toc-怎样解决设计问题\">怎样解决设计问题</a></li>\n</ol>\n\n<p>设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n\n<h2 id=\"什么是设计模式\">什么是设计模式</h2>\n\n<p>设计模式是<strong>对用来在特定场景下解决一般设计问题的类和相互通信的对象的描述</strong></p>\n\n<h2 id=\"设计原则\">设计原则</h2>\n\n<h2 id=\"怎样解决设计问题\">怎样解决设计问题</h2>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-09-10T21:45:18+10:00'>Sep 10, 2022</time> </span> </div><h2 class='article__title'>设计模式（一）简介</h2> <p class='article__excerpt'>设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/设计模式' class='article__tag'>设计模式</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（四十三）动态分区分配算法",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81%E4%B8%89-%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/",
      "date"     : "May 3, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#首次适应算法first-fit\" id=\"markdown-toc-首次适应算法first-fit\">首次适应算法（First Fit）</a></li>\n  <li><a href=\"#最佳适应算法best-fit\" id=\"markdown-toc-最佳适应算法best-fit\">最佳适应算法（Best Fit）</a></li>\n  <li><a href=\"#最坏适应算法worst-fit\" id=\"markdown-toc-最坏适应算法worst-fit\">最坏适应算法（Worst Fit）</a></li>\n  <li><a href=\"#邻近适应算法next-fit\" id=\"markdown-toc-邻近适应算法next-fit\">邻近适应算法（Next Fit）</a></li>\n</ol>\n\n<p>动态分区分配算法：在动态分区分配方式中，当很多个空闲分区都能满足需求时，应该选择哪个分区进行分配？</p>\n\n<h2 id=\"首次适应算法first-fit\">首次适应算法（First Fit）</h2>\n\n<h2 id=\"最佳适应算法best-fit\">最佳适应算法（Best Fit）</h2>\n\n<h2 id=\"最坏适应算法worst-fit\">最坏适应算法（Worst Fit）</h2>\n\n<h2 id=\"邻近适应算法next-fit\">邻近适应算法（Next Fit）</h2>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81%E4%B8%89-%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/'> <img src='/images/covers/操作系统-cover4.jpg' alt='操作系统（四十三）动态分区分配算法'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-03T19:35:13+10:00'>May 3, 2022</time> </span> </div><h2 class='article__title'>操作系统（四十三）动态分区分配算法</h2> <p class='article__excerpt'>内存（Memory）是计算机的重要部件，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据，是外存与CPU进行沟通的桥梁。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（四十二）连续分配管理方式",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81%E4%BA%8C-%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/",
      "date"     : "May 3, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#连续分配的概念\" id=\"markdown-toc-连续分配的概念\">连续分配的概念</a></li>\n  <li><a href=\"#单一连续分配\" id=\"markdown-toc-单一连续分配\">单一连续分配</a></li>\n  <li><a href=\"#固定分区分配\" id=\"markdown-toc-固定分区分配\">固定分区分配</a></li>\n  <li><a href=\"#动态分区分配\" id=\"markdown-toc-动态分区分配\">动态分区分配</a>    <ol>\n      <li><a href=\"#空闲分区表和空闲分区链\" id=\"markdown-toc-空闲分区表和空闲分区链\">空闲分区表和空闲分区链</a></li>\n      <li><a href=\"#动态分区分配算法\" id=\"markdown-toc-动态分区分配算法\">动态分区分配算法</a></li>\n      <li><a href=\"#分区回收\" id=\"markdown-toc-分区回收\">分区回收</a></li>\n      <li><a href=\"#内部碎片和外部碎片\" id=\"markdown-toc-内部碎片和外部碎片\">内部碎片和外部碎片</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"连续分配的概念\">连续分配的概念</h2>\n\n<p>内存空间的分配与回收包括<strong>连续分配管理方式</strong>和<strong>非连续分配管理方式</strong>。</p>\n\n<p><strong>连续分配</strong>：指为用户进程分配的必须是一个<strong>连续的内存空间</strong>。</p>\n\n<h2 id=\"单一连续分配\">单一连续分配</h2>\n\n<p>在单一连续分配方式中，内存被分为<strong>系统区</strong>和<strong>用户区</strong>。\n系统区通常位于内存的低地址部分，用于存放操作系统相关数据；用户区用于存放用户进程相关数据。\n内存中<strong>只能有一道用户程序</strong>，用户程序独占整个用户区空间。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-内存分配1.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ul>\n  <li>优点：实现简单；<strong>无外部碎片</strong>；可以采用覆盖技术扩充内存；不一定需要采取内存保护（如早期的PC操作系统MS-DOS）。</li>\n  <li>缺点：只能用于单用户、单任务的操作系统中；<strong>有内部碎片</strong>；有很大一部分用户区空闲，存储器利用率极低。</li>\n</ul>\n\n<p>内部碎片：分配给某进程的内存区域中，如果有些部分没有用上，就是“内部碎片”。</p>\n\n<h2 id=\"固定分区分配\">固定分区分配</h2>\n\n<p>20世纪60年代出现了支持多道程序的系统。\n为了能在内存中装入多道程序，且这些程序之间又不会相互干扰，于是将<strong>整个用户空间</strong>划分为<strong>若干个固定大小的分区</strong>。\n在<strong>每个分区中只装入一道作业</strong>，这样就形成了最早的、最简单的一种可运行多道程序的内存管理方式。</p>\n\n<p>固定分区分配的分区有两种模式，分区大小相等和分区大小不等，如下图：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-内存分配2.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ul>\n  <li>分区大小相等：缺乏灵活性，但是很<strong>适合用于用一台计算机控制多个相同对象的场合</strong>（比如钢铁厂有n个相同的炼钢炉，就可把内存分为n个大小相等的区域存放n个炼钢炉控制程序）；</li>\n  <li>分区大小不等：增加了灵活性，可以满足不同大小的进程需求。\n根据常在系统中运行的作业大小情况进行划分。（比如划分多个小分区、适量中等分区、少量大分区）</li>\n</ul>\n\n<p>操作系统需要建立一个数据结构——<strong>分区说明表</strong>，来实现各个分区的分配与回收。\n每个表项对应一个分区，通常按分区大小排列。\n每个表项包括对应分区的<strong>大小、起始地址、状态</strong>（是否已分配）。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>分区号</th>\n      <th>大小（MB）</th>\n      <th>起始地址（M）</th>\n      <th>分配状态</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>2</td>\n      <td>8</td>\n      <td>未分配</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2</td>\n      <td>10</td>\n      <td>未分配</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>4</td>\n      <td>12</td>\n      <td>已分配</td>\n    </tr>\n    <tr>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>当某用户程序要装入内存时，由操作系统内核程序根据用户程序大小检索该表，从中找到一个能满足大小的、未分配的分区，将之分配给该程序，然后修改状态为“已分配”。</p>\n<ul>\n  <li>优点：实现简单，<strong>无外部碎片</strong>。</li>\n  <li>缺点：\n    <ol>\n      <li>当用户程序太大时，可能所有的分区都不能满足需求，此时不得不采用覆盖技术来解决，但这又会降低性能；</li>\n      <li><strong>会产生内部碎片</strong>，内存利用率低。</li>\n    </ol>\n  </li>\n</ul>\n\n<h2 id=\"动态分区分配\">动态分区分配</h2>\n\n<p><strong>动态分区分配</strong>又称为<strong>可变分区分配</strong>。\n这种分配方式<strong>不会预先划分内存分区</strong>，而是在进程装入内存时，<strong>根据进程的大小动态地建立分区</strong>，并使<strong>分区的大小正好适合进程的需要</strong>。\n因此系统分区的大小和数目是可变的。（假设某计算机内存大小为64MB，系统区8MB，用户区共56MB）</p>\n\n<h3 id=\"空闲分区表和空闲分区链\">空闲分区表和空闲分区链</h3>\n<p>系统可以使用空闲分区表或者空闲分区链这两种数据结构来记录内存的使用情况：</p>\n<ul>\n  <li>空闲分区表：每个空闲分区对应一个表项。表项中包含分区号、分区大小、分区起始地址等信息；</li>\n  <li>空闲分区链：每个分区的起始部分和末尾部分分别设置前向指针和后向指针。起始部分处还可记录分区大小等信息。</li>\n</ul>\n\n<p><img src=\"\\images\\posts\\操作系统-内存分配3.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h3 id=\"动态分区分配算法\">动态分区分配算法</h3>\n<p>把一个新作业装入内存时，须按照一定的<strong>动态分区分配算法</strong>，从空闲分区表（或空闲分区链）中选出一个分区分配给该作业。\n由于分配算法算法对系统性能有很大的影响，因此人们对它进行了广泛的研究。</p>\n\n<h3 id=\"分区回收\">分区回收</h3>\n<ol>\n  <li>回收区的后面有一个相邻的空闲分区，则将两个相邻的空闲分区合并为一个；</li>\n  <li>回收区的前面有一个相邻的空闲分区，则将两个相邻的空闲分区合并为一个；</li>\n  <li>回收区的前、后各有一个相邻的空闲分区，则将三个相邻的空闲分区合并为一个；</li>\n  <li>回收区的前、后都没有相邻的空闲分区，则新增一个表项。</li>\n</ol>\n\n<h3 id=\"内部碎片和外部碎片\">内部碎片和外部碎片</h3>\n\n<p>动态分区分配<strong>没有内部碎片</strong>，但是<strong>有外部碎片</strong>。</p>\n\n<ul>\n  <li><strong>内部碎片</strong>，分配给某进程的内存区域中，如果有些部分没有用上。</li>\n  <li><strong>外部碎片</strong>，是指内存中的某些空闲分区由于太小而难以利用。</li>\n</ul>\n\n<p>如果内存中空闲空间的总和本来可以满足某进程的要求，但由于进程需要的是一整块连续的内存空间，因此这些“碎片”不能满足进程的需求。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-内存分配4.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>可以通过<strong>紧凑（拼凑，Compaction）</strong>技术来解决外部碎片。</p>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81%E4%BA%8C-%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/'> <img src='/images/covers/操作系统-cover4.jpg' alt='操作系统（四十二）连续分配管理方式'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-03T18:01:06+10:00'>May 3, 2022</time> </span> </div><h2 class='article__title'>操作系统（四十二）连续分配管理方式</h2> <p class='article__excerpt'>内存（Memory）是计算机的重要部件，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据，是外存与CPU进行沟通的桥梁。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（四十一）覆盖与交换",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81%E4%B8%80-%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2/",
      "date"     : "May 3, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#覆盖技术\" id=\"markdown-toc-覆盖技术\">覆盖技术</a>    <ol>\n      <li><a href=\"#示例\" id=\"markdown-toc-示例\">示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#交换技术\" id=\"markdown-toc-交换技术\">交换技术</a>    <ol>\n      <li><a href=\"#问题\" id=\"markdown-toc-问题\">问题</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#覆盖与交换的区别\" id=\"markdown-toc-覆盖与交换的区别\">覆盖与交换的区别</a></li>\n</ol>\n\n<h2 id=\"覆盖技术\">覆盖技术</h2>\n<p>早期的计算机内存很小，比如IBM推出的第一台PC机最大只支持1MB大小的内存。\n因此经常会出现内存大小不够的情况。</p>\n\n<p>后来人们引入了<strong>覆盖技术</strong>，用来<strong>解决“程序大小超过物理内存总和”的问题</strong>。</p>\n\n<p>覆盖技术的思想：将<strong>程序分为多个段</strong>（多个模块）。常用的段常驻内存，不常用的段在需要时调入内存。</p>\n\n<p>内存中分为<strong>一个“固定区”</strong>和<strong>若干个“覆盖区”</strong>：</p>\n<ul>\n  <li>需要常驻内存的段放在“固定区”中，调入后就不再调出；（除非运行结束）</li>\n  <li>不常用的段放在“覆盖区”，需要用到时调入内存，用不到时调出内存。</li>\n</ul>\n\n<h3 id=\"示例\">示例</h3>\n\n<p>如图为程序X的调用结构，以及采用覆盖技术时各个模块在内存中所处位置。</p>\n\n<p>模块A被放入固定区，模块B和C被放入同一覆盖区0，而模块D、E、F被放入另一覆盖区1：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-内存覆盖.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>内存覆盖技术按照自身逻辑结构，让那些不可能同时被访问的程序段共享同个覆盖区。</p>\n\n<p><strong>必须由程序员声明覆盖结构</strong>，操作系统完成自动覆盖。缺点：<strong>对用户不透明</strong>，增加了用户编程负担。\n覆盖技术只用于早期的操作系统中，现在已成为历史。</p>\n\n<h2 id=\"交换技术\">交换技术</h2>\n<p>交换（对换）技术的设计思想：\n内存空间紧张时，系统将内存中<strong>某些进程暂时换出外存</strong>，把外存中<strong>某些已具备运行条件的进程换入内存</strong>。（进程在内存与磁盘间动态调度，中级调度）</p>\n\n<p>如下图，中级调度（内存调度），就是要决定将哪个处于挂起状态的进程重新调入内存。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-七状态模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h3 id=\"问题\">问题</h3>\n\n<ul>\n  <li>应该在外存（磁盘）的什么位置保存被换出的进程？</li>\n</ul>\n\n<p>具有对换功能的操作系统中，通常把磁盘空间分为<strong>文件区</strong>和<strong>对换区</strong>两部分。\n<strong>文件区主要用于存放文件</strong>，主要<strong>追求存储空间的利用率</strong>，因此对文件区空间的管理<strong>采用离散分配方式</strong>；\n<strong>对换区空间</strong>只占磁盘空间的<strong>小部分</strong>，<strong>被换出的进程数据就存放在对换区</strong>。\n由于对换的速度直接影响到系统的整体速度，因此<strong>对换区空间的管理主要追求换入换出速度，因此通常对换区采用连续分配方式</strong>。\n总之，<strong>对换区的I/O速度比文件区的更快</strong>。</p>\n\n<ul>\n  <li>什么时候应该交换？</li>\n</ul>\n\n<p>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。\n例如。在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程；\n如果缺页率明显下降，就可以暂停换出。</p>\n\n<ul>\n  <li>应该换出哪些进程？</li>\n</ul>\n\n<p>可优先换出阻塞进程；可换出优先级低的进程；\n为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间。\n（注意：<strong>PCB会常驻内存</strong>，不会被换出外存）</p>\n\n<h2 id=\"覆盖与交换的区别\">覆盖与交换的区别</h2>\n<ul>\n  <li>覆盖是在同一个程序或进程中的；</li>\n  <li>交换是在不同进程（或作业）之间的。</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81%E4%B8%80-%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2/'> <img src='/images/covers/操作系统-cover4.jpg' alt='操作系统（四十一）覆盖与交换'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-03T17:35:13+10:00'>May 3, 2022</time> </span> </div><h2 class='article__title'>操作系统（四十一）覆盖与交换</h2> <p class='article__excerpt'>内存（Memory）是计算机的重要部件，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据，是外存与CPU进行沟通的桥梁。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（四十）内存管理的概念",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "May 3, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#内存空间的分配与回收\" id=\"markdown-toc-内存空间的分配与回收\">内存空间的分配与回收</a></li>\n  <li><a href=\"#内存空间的扩充\" id=\"markdown-toc-内存空间的扩充\">内存空间的扩充</a></li>\n  <li><a href=\"#地址转换\" id=\"markdown-toc-地址转换\">地址转换</a></li>\n  <li><a href=\"#存储保护\" id=\"markdown-toc-存储保护\">存储保护</a></li>\n</ol>\n\n<h2 id=\"内存空间的分配与回收\">内存空间的分配与回收</h2>\n\n<p>操作系统需要负责<strong>内存空间的分配与回收</strong>：</p>\n<ul>\n  <li>操作系统要怎么记录哪些内存区域已经被分配出去了，哪些又还空闲？</li>\n  <li>当进程运行结束之后，如何将进程占用的内存空间回收？</li>\n  <li>内存中有很多位置可以存放进程，具体该放在哪里？</li>\n</ul>\n\n<h2 id=\"内存空间的扩充\">内存空间的扩充</h2>\n<p>操作系统需要提供某种技术从逻辑上<strong>对内存空间进行扩充</strong>（虚拟性）</p>\n\n<h2 id=\"地址转换\">地址转换</h2>\n<p>操作系统需要提供地址转换功能，负责程序的<strong>逻辑地址与物理地址的转换</strong>：\n为了使编程更方便，程序员写程序时应该只需要关注指令、数据的逻辑地址。\n而<strong>逻辑地址到物理地址的转换</strong>（这个过程称为<strong>地址重定位</strong>）应该由操作系统负责。\n这样就保证了程序员写程序时不需要关注物理内存的实际情况。（三种装入方式）</p>\n\n<h2 id=\"存储保护\">存储保护</h2>\n<p>操作系统需要提供<strong>内存保护</strong>功能。保证各进程在各自存储空间内运行，互不干扰。\n内存保护可采取两种方法：</p>\n<ol>\n  <li>在CPU中<strong>设置一对上、下限寄存器</strong>，存放进程的上、下限地址。\n进程的指令要访问某个地址时，CPU检查是否越界。</li>\n  <li>采用<strong>重定位寄存器</strong>（又称<strong>基址寄存器</strong>）和<strong>界地址寄存器</strong>（又称<strong>限长寄存器</strong>）进行越界检查。\n重定位寄存器中存放的是<strong>进程的起始物理地址</strong>，界地址寄存器中存放的是<strong>进程的最大逻辑地址</strong>。</li>\n</ol>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B%E5%8D%81-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/操作系统-cover4.jpg' alt='操作系统（四十）内存管理的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-03T17:23:56+10:00'>May 3, 2022</time> </span> </div><h2 class='article__title'>操作系统（四十）内存管理的概念</h2> <p class='article__excerpt'>内存（Memory）是计算机的重要部件，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据，是外存与CPU进行沟通的桥梁。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十九）内存的基础知识",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B9%9D-%E5%86%85%E5%AD%98%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
      "date"     : "May 2, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是内存\" id=\"markdown-toc-什么是内存\">什么是内存</a>    <ol>\n      <li><a href=\"#内存管理的概念\" id=\"markdown-toc-内存管理的概念\">内存管理的概念</a></li>\n      <li><a href=\"#内存管理功能\" id=\"markdown-toc-内存管理功能\">内存管理功能</a></li>\n      <li><a href=\"#逻辑地址和物理地址\" id=\"markdown-toc-逻辑地址和物理地址\">逻辑地址和物理地址</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程运行基本原理\" id=\"markdown-toc-进程运行基本原理\">进程运行基本原理</a>    <ol>\n      <li><a href=\"#三种链接方式\" id=\"markdown-toc-三种链接方式\">三种链接方式</a></li>\n      <li><a href=\"#三种装入方式\" id=\"markdown-toc-三种装入方式\">三种装入方式</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"什么是内存\">什么是内存</h2>\n<p>内存可存放数据。程序执行前<strong>需要先放到内存中才能被CPU处理</strong>——缓和CPU与硬盘之间的速度矛盾。</p>\n\n<p>在多道程序环境下，系统中会有多个程序并发执行，也就是说会有多个程序的数据需要同时放到内存中。\n那么，如何区分各个程序的数据是放在什么地方的呢？</p>\n\n<p>内存中有一个一个的“小房间”，每个小房间就是一个“<strong>存储单元</strong>”。</p>\n\n<p>内存地址从0开始，<strong>每个地址对应一个存储单元</strong>。</p>\n\n<p>如果计算机“<strong>按字节编址</strong>”，则<strong>每个存储单元大小为1字节</strong>，即1B，即8个二进制位。</p>\n\n<p>如果字长为<strong>16位的计算机“按字编址”</strong>，则<strong>每个存储单元大小为1个字</strong>；每个字的大小为<strong>16个二进制位</strong>。</p>\n\n<p>补充知识：</p>\n\n<p>$2^{10} = 1K$</p>\n\n<p>$2^{20} = 1M$</p>\n\n<p>$2^{30} = 1G$</p>\n\n<p>一台手机/电脑有4GB内存，是什么意思？</p>\n\n<p>是指该内存中可以存放$4*2^{30}$个字节。</p>\n\n<p>如果是按字节编址的话，也就是有$4*2^{30} = 2^{32}$个存储单元。</p>\n\n<p>需要$2^{32}$个地址才能一一标识，\n所以地址需要用32个二进制位来表示（$0 \\sim 2^{32}-1$）。</p>\n\n<h3 id=\"内存管理的概念\">内存管理的概念</h3>\n\n<p>计算机<strong>不可能将所有用户进程</strong>和系统所需要的全部程序和数据<strong>放入主存</strong>，因此操作系统必须<strong>对内存空间进行合理的划分和有效的动态分配</strong>。</p>\n\n<p><strong>内存管理</strong>的概念就是<strong>操作系统对内存的划分和动态分配</strong>。</p>\n\n<h3 id=\"内存管理功能\">内存管理功能</h3>\n\n<ul>\n  <li><strong>内存空间的分配与回收</strong>：由操作系统完成<strong>主存储器空间的分配和管理</strong>；</li>\n  <li>地址转换：将<strong>逻辑地址</strong>转换成<strong>相应的物理地址</strong>；</li>\n  <li>内存空间的<strong>扩充</strong>：利用<strong>虚拟存储技术</strong>或自动覆盖技术，从<strong>逻辑上扩充主存</strong>；</li>\n  <li><strong>存储保护</strong>：保证<strong>各道作业在各自的存储空间内运行</strong>，互不干扰。</li>\n</ul>\n\n<h3 id=\"逻辑地址和物理地址\">逻辑地址和物理地址</h3>\n<ul>\n  <li>逻辑地址：程序经过编译、链接后生成的指令中指明的是逻辑地址（相对地址），即:相对于进程的起始地址而言的地址；</li>\n</ul>\n\n<h2 id=\"进程运行基本原理\">进程运行基本原理</h2>\n\n<p>将用户<strong>源程序变为可在内存中执行的程序</strong>，通常需要以下几个步骤：</p>\n<ul>\n  <li><strong>编译</strong>：由编译程序将用户源代码编译成若干目标模块；（把高级语言翻译成机器语言）</li>\n  <li><strong>链接</strong>：由链接程序将编译后形成的一组目标模块及所需的库函数连接在一起，形成一个完整的装入模块；（由目标模块生成装入模块，链接后形成完整的逻辑地址)</li>\n  <li><strong>装入</strong>：由装入程序将装入模块装入内存运行，装入后形成物理地址。</li>\n</ul>\n\n<h3 id=\"三种链接方式\">三种链接方式</h3>\n<p>程序的链接有以下三种方式：</p>\n<ul>\n  <li><strong>静态链接</strong>：在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块)，之后不再拆开；</li>\n  <li><strong>装入时动态链接</strong>：将各目标模块装入内存时，边装入边链接的链接方式；</li>\n  <li><strong>运行时动态链接</strong>：在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享。</li>\n</ul>\n\n<h3 id=\"三种装入方式\">三种装入方式</h3>\n<p>内存的装入模块在装入内存时，有以下三种方式:</p>\n<ul>\n  <li><strong>绝对装入</strong>（单道程序阶段）：在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对的物理地址的目标代码。\n装入程序按照装入模块中的地址，将程序和数据装入内存。</li>\n  <li><strong>静态可重定位装入</strong>（早期多道批处理系统）：<strong>编译后的模块</strong>需要连续装入内存，但是<strong>在内存中的物理地址可与逻辑地址不同</strong>，可以存在一定偏移。\n比如逻辑地址是0-100，它可以在内存中存储在100-200的内存单元中，需要设定一个偏移量就是100。\n静态重定位的特点是在一个作业装入内存时，<strong>必须分配其要求的全部内存空间</strong>，如果没有足够的内存，就不能装入该作业。\n<strong>同时也需要为其分配连续的存储空间</strong>，不然通过偏移量是无法找到的。\n现在就可以通过作业的<strong>逻辑地址+偏移量</strong>获得作业在内存中的绝对地址。</li>\n  <li><strong>动态运行时装入</strong>（现代操作系统）：将<strong>不同的模块</strong>可以装入在<strong>不同的内存地址</strong>，<strong>不同模块可以不连续</strong>，但是<strong>同一模块还是要连续存放</strong>的。\n同一模块需要<strong>设定一个重定位寄存器</strong>，<strong>每个模块的重定位寄存器中的值</strong>就是对应的<strong>偏移量</strong>。\n装入程序会把模块装入内存，但是并<strong>不会立即将装入模块的相对地址转换为绝对地址</strong>，而是把这种地址转换<strong>推迟到程序真正执行时才进行</strong>。\n<strong>可以将程序分配到不连续的存储区</strong>。</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B9%9D-%E5%86%85%E5%AD%98%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/'> <img src='/images/covers/操作系统-cover4.jpg' alt='操作系统（三十九）内存的基础知识'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-02T15:51:43+10:00'>May 2, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十九）内存的基础知识</h2> <p class='article__excerpt'>内存（Memory）是计算机的重要部件，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据，是外存与CPU进行沟通的桥梁。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十八）死锁的检测和解除",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E5%85%AB-%E6%AD%BB%E9%94%81%E7%9A%84%E6%A3%80%E6%B5%8B%E5%92%8C%E8%A7%A3%E9%99%A4/",
      "date"     : "May 1, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#死锁的处理策略\" id=\"markdown-toc-死锁的处理策略\">死锁的处理策略</a></li>\n  <li><a href=\"#死锁的检测和解除\" id=\"markdown-toc-死锁的检测和解除\">死锁的检测和解除</a>    <ol>\n      <li><a href=\"#死锁的检测\" id=\"markdown-toc-死锁的检测\">死锁的检测</a>        <ol>\n          <li><a href=\"#资源分配图\" id=\"markdown-toc-资源分配图\">资源分配图</a></li>\n          <li><a href=\"#死锁检测算法\" id=\"markdown-toc-死锁检测算法\">死锁检测算法</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#死锁的解除\" id=\"markdown-toc-死锁的解除\">死锁的解除</a></li>\n      <li><a href=\"#如何决定挂起撤销或回退的进程\" id=\"markdown-toc-如何决定挂起撤销或回退的进程\">如何决定挂起、撤销或回退的进程</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"死锁的处理策略\">死锁的处理策略</h2>\n\n<ol>\n  <li>预防死锁。破坏死锁产生的四个必要条件中的一个或几个；</li>\n  <li>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）；</li>\n  <li>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ol>\n\n<h2 id=\"死锁的检测和解除\">死锁的检测和解除</h2>\n\n<p>如果系统中既不采取预防死锁的措施，也不采取避免死锁的措施，系统就很可能发生死锁。\n在达种情况下，系统应当提供两个算法：</p>\n<ol>\n  <li>死锁检测算法：用于检测系统状态，以确定系统中是否发生了死锁。</li>\n  <li>死锁解除算法：当认定系统中已经发生了死锁，利用该算法可将系统从死锁状态中解脱出来。</li>\n</ol>\n\n<h3 id=\"死锁的检测\">死锁的检测</h3>\n<p>为了能对系统是否已发生了死锁进行检测，必须：</p>\n<ol>\n  <li>用<strong>某种数据结构</strong>来保存资源的请求和分配信息；</li>\n  <li>提供<strong>一种算法</strong>，利用上述信息来检测系统是否已进入死锁状态。</li>\n</ol>\n\n<h4 id=\"资源分配图\">资源分配图</h4>\n\n<p>两种结点：</p>\n<ul>\n  <li>进程结点：对应一个进程；</li>\n  <li>资源结点：对应一类资源，一类资源可能有多个。</li>\n</ul>\n\n<p>两种边：</p>\n<ul>\n  <li>进程结点-&gt;资源结点：表示进程想申请几个资源（每条边代表一个）；</li>\n  <li>资源节点-&gt;进程结点：表示已经为进程分配了几个资源（每条边代表一个）。</li>\n</ul>\n\n<p>如图，一般用矩形表示资源结点，矩形中的小圆代表该类资源的数量。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁5.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。</p>\n\n<p>如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。</p>\n\n<p>相应的，这些被激活的进程执行完之后又会归还一些资源，这样可能又会激活另外一些阻塞的进程。</p>\n\n<p>如果按上述过程分析，最终<strong>能消除所有边</strong>，就称这个图是<strong>可完全简化的</strong>。\n此时<strong>一定没有发生死锁</strong>。（相当于能找到一个<strong>安全序列</strong>）</p>\n\n<p>如图，如果<strong>最终不能消除所有边</strong>，那么此时就是<strong>发生了死锁</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁6.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p><strong>最终还连着边的那些进程就是处于死锁状态的进程。</strong></p>\n\n<h4 id=\"死锁检测算法\">死锁检测算法</h4>\n\n<ol>\n  <li>在资源分配图中，找出<strong>既不阻塞又不是孤点</strong>的进程Pi（即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量。\n如下图中，R1没有空闲资源，R2有一个空闲资源。\n若所有的连接该进程的边均满足上述条件，则这个进程能继续运行直至完成，然后释放它所占有的所有资源）。\n消去它所有的请求边和分配变，使之成为孤立的结点。在下图中，P1是满足这一条件的进程结点，于是将P1的所有边消去。</li>\n  <li>进程Pi所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可能变为非阻塞进程。\n在下图中，P2就满足这样的条件。\n根据1中的方法进行一系列简化后，若<strong>能消去途中所有的边</strong>，则称该图是可完全简化的。</li>\n</ol>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁5.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p><strong>死锁定理</strong>：如果某时刻系统的资源分配图是<strong>不可完全简化</strong>的，那么此时系统死锁。</p>\n\n<h3 id=\"死锁的解除\">死锁的解除</h3>\n\n<p>一旦检测出死锁的发生，就应该立即解除死锁。</p>\n\n<p>注意：并不是系统中所有的进程都是死锁状态，用死锁检测算法<strong>化简资源分配图后，还连着边的那些进程就是死锁进程</strong>。</p>\n\n<p>解除死锁的主要方法有:</p>\n<ol>\n  <li><strong>资源剥夺法</strong>：挂起（暂时放到外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。\n但是应防止被挂起的进程长时间得不到资源而饥饿。</li>\n  <li><strong>撤销进程法</strong>（或称<strong>终止进程法</strong>）：强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。\n这种方式的优点是实现简单，但所付出的代价可能会很大。\n因为有些进程可能已经运行了很长时间，已经接近结束了，一旦被终止可谓功亏一篑，以后还得从头再来。</li>\n  <li><strong>进程回退法</strong>：让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息，设置还原点。</li>\n</ol>\n\n<h3 id=\"如何决定挂起撤销或回退的进程\">如何决定挂起、撤销或回退的进程</h3>\n\n<ol>\n  <li>进程优先级：高优先级进程优先；</li>\n  <li>已执行多长时间：长时间进程优先；</li>\n  <li>还要多久能完成：剩余时间短的进程优先；</li>\n  <li>进程已经使用了多少资源：占有资源多的进程优先；</li>\n  <li>进程是交互式的还是批处理式的：交互式进程优先。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E5%85%AB-%E6%AD%BB%E9%94%81%E7%9A%84%E6%A3%80%E6%B5%8B%E5%92%8C%E8%A7%A3%E9%99%A4/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十八）死锁的检测和解除'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-01T22:05:45+10:00'>May 1, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十八）死锁的检测和解除</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十七）死锁的避免",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B8%83-%E6%AD%BB%E9%94%81%E7%9A%84%E9%81%BF%E5%85%8D/",
      "date"     : "May 1, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#死锁的处理策略\" id=\"markdown-toc-死锁的处理策略\">死锁的处理策略</a></li>\n  <li><a href=\"#动态策略避免死锁\" id=\"markdown-toc-动态策略避免死锁\">动态策略：避免死锁</a>    <ol>\n      <li><a href=\"#安全序列\" id=\"markdown-toc-安全序列\">安全序列</a></li>\n      <li><a href=\"#银行家算法思想\" id=\"markdown-toc-银行家算法思想\">银行家算法思想</a></li>\n      <li><a href=\"#银行家算法步骤\" id=\"markdown-toc-银行家算法步骤\">银行家算法步骤</a>        <ol>\n          <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#安全性算法示例\" id=\"markdown-toc-安全性算法示例\">安全性算法示例</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"死锁的处理策略\">死锁的处理策略</h2>\n\n<ol>\n  <li>预防死锁。破坏死锁产生的四个必要条件中的一个或几个；</li>\n  <li>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）；</li>\n  <li>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ol>\n\n<h2 id=\"动态策略避免死锁\">动态策略：避免死锁</h2>\n\n<h3 id=\"安全序列\">安全序列</h3>\n\n<p>所谓<strong>安全序列</strong>，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。\n只要<strong>能找出一个安全序列</strong>，系统就是<strong>安全状态</strong>。\n当然，<strong>安全序列可能有多个</strong>。</p>\n\n<p>如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了<strong>不安全状态</strong>。\n这就意味着之后<strong>可能</strong>所有进程都无法顺利的执行下去。\n当然，如果有进程提前归还了一些资源，那<strong>系统也有可能重新回到安全状态</strong>，不过我们在分配资源之前总是要考虑到最坏的情况。</p>\n\n<p>如果系统处于<strong>安全状态，就一定不会发生死锁</strong>。\n如果系统进入<strong>不安全状态，就可能发生死锁</strong>。（处于不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态）</p>\n\n<p>因此可以<strong>在资源分配之前预先判断这次分配是否会导致系统进入不安全状态</strong>，以此决定是否答应资源分配请求。\n这也是<strong>“银行家算法”</strong>的核心思想。</p>\n\n<h3 id=\"银行家算法思想\">银行家算法思想</h3>\n\n<p>银行家算法是荷兰学者Dijkstra为银行系统设计的，以确保银行在发放现金贷款时，不会发生不能满足所有客户需要的情况。\n后来该算法被用在操作系统中，用于<strong>避免死锁</strong>。</p>\n\n<p><strong>核心思想</strong>：在进程提出资源申请时，先预判此次分配是否会导致系统进入不安全状态。\n如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待。</p>\n\n<h3 id=\"银行家算法步骤\">银行家算法步骤</h3>\n\n<p>假设系统中有<strong>n个进程，m种资源</strong>；</p>\n\n<p>每个进程在运行前先声明对各种资源的最大需求数，则可用一个n*m的矩阵（可用二维数组实现）表示<strong>所有进程对各种资源的最大需求数</strong>。\n不妨称为<strong>最大需求矩阵Max</strong>，Max[i, j]=K表示进程Pi最多需要K个资源Rj。</p>\n\n<p>同理，系统可以用一个n*m的分配<strong>矩阵Allocation</strong>表示对所有<strong>进程的资源分配情况</strong>。</p>\n\n<p>Max - Allocation = <strong>Need矩阵</strong>，表示<strong>各进程最多还需要多少各类资源</strong>。</p>\n\n<p>另外，还要用一个<strong>长度为m的一维数组Available</strong>表示当前<strong>系统中还有多少可用资源</strong>。</p>\n\n<p>为了直观展示各数据结构，如下表所示展示了5个进程的最大资源需求、进程分配情况和最多还需要的资源：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>最大需求（Max矩阵）</th>\n      <th>已分配（Allocation矩阵）</th>\n      <th>最多还需要（Need矩阵）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P0</td>\n      <td>(7,5,3)</td>\n      <td>(0,1,0)</td>\n      <td>(7,4,3)</td>\n    </tr>\n    <tr>\n      <td>P1</td>\n      <td>(3,2,2)</td>\n      <td>(2,0,0)</td>\n      <td>(1,2,2)</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>(9,0,2)</td>\n      <td>(3,0,2)</td>\n      <td>(6,0,0)</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>(2,2,2)</td>\n      <td>(2,1,1)</td>\n      <td>(0,1,1)</td>\n    </tr>\n    <tr>\n      <td>P4</td>\n      <td>(4,3,3)</td>\n      <td>(0,0,2)</td>\n      <td>(4,3,1)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>此时进程剩余可分配资源Available=(3,3,2)，Request_0=(2,1,1).</p>\n\n<p>某进程<strong>Pi</strong>向系统申请资源，可用一个长度为m的一维数组<strong>Request_i</strong>表示<strong>本次申请的各种资源量</strong>。</p>\n\n<p>可用<strong>银行家算法</strong>预判本次分配是否会导致系统进入不安全状态：</p>\n\n<p>1.如果<code class=\"language-plaintext highlighter-rouge\">Request_i≤Need[i]</code>便转向2；否则认为出错。</p>\n\n<p>2.如果<code class=\"language-plaintext highlighter-rouge\">Request_i≤Available</code>便转向3，否则表示尚无足够资源，Pi必须等待。</p>\n\n<p>3.系统<strong>试探着</strong>把资源分配给进程Pi，并修改相应的数据（并非真的分配，修改数值只是为了做预判）。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Available</span> <span class=\"o\">-=</span> <span class=\"n\">Request_i</span><span class=\"p\">;</span>       <span class=\"c1\">// 减少系统剩余资源量</span>\n<span class=\"n\">Allocation</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">Request_i</span><span class=\"p\">;</span>   <span class=\"c1\">// 增加进程i的分配资源量</span>\n<span class=\"n\">Need</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">Request_i</span><span class=\"p\">;</span>         <span class=\"c1\">// 减少进程i还需要的资源量</span>\n</code></pre></div></div>\n<p>4.操作系统<strong>执行安全性算法</strong>，检查此次资源分配后，系统是否处于安全状态。若安全，才正式分配；否则，恢复相应数据，让进程阻塞等待。</p>\n\n<h4 id=\"总结\">总结</h4>\n\n<p>数据结构：</p>\n<ol>\n  <li>长度为m的一维数组<strong>Available</strong>表示还有多少可用资源；</li>\n  <li>n*m矩阵<strong>Max</strong>表示各进程对资源的最大需求数；</li>\n  <li>n*m矩阵<strong>Allocation</strong>表示已经给各进程分配了多少资源；</li>\n  <li>Max - Allocation = <strong>Need</strong>矩阵表示各进程最多还需要多少资源；</li>\n  <li>长度为m的一位数组<strong>Request_i</strong>表示i进程此次申请的各种资源数。</li>\n</ol>\n\n<p>银行家算法步骤：</p>\n<ol>\n  <li>检查此次申请是否<strong>超过了之前声明的最大需求数</strong>；</li>\n  <li>检查此时系统<strong>剩余的可用资源是否还能满足</strong>这次请求；</li>\n  <li>试探着分配，<strong>更改各数据结构</strong>；</li>\n  <li>用安全性算法<strong>检查此次分配是否会导致系统进入不安全状态</strong>。</li>\n</ol>\n\n<p>安全性算法步骤：</p>\n<ul>\n  <li>检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列并把该进程持有的资源全部回收。</li>\n  <li>不断重复上述过程，看最终是否能让所有进程都加入安全序列。</li>\n</ul>\n\n<h3 id=\"安全性算法示例\">安全性算法示例</h3>\n\n<p>假设系统资源总数为(10,5,7)，剩余可用资源available=(3,3,2)，\n此时进程资源分配情况如上表所示，系统是否处于安全状态？</p>\n\n<p>使用安全性算法，尝试<strong>找出一个安全序列</strong>：</p>\n<ol>\n  <li>依次检查剩余可用资源(3,3,2)是否能满足各进程的需求，可满足P1需求，将P1加入安全序列，并更新剩余可用资源值为(5,3,2)；</li>\n  <li>依次检查剩余可用资源(5,3,2)是否能满足剩余进程（<strong>不包括已加入安全序列的进程</strong>）的需求，可满足P3需求，将P3加入安全序列，并更新剩余可用资源值为(7,4,3)；</li>\n  <li>依次检查剩余可用资源(7,4,3)是否能满足剩余进程（<strong>不包括已加入安全序列的进程</strong>）的需求…</li>\n</ol>\n\n<p>以此类推，<strong>共5次循环检查即可将5个进程都加入安全序列</strong>中，最终可得一个安全序列。\n该算法称为<strong>安全性算法</strong>。可以很方便地用代码实现以上流程，每一轮检查都从编号较小的进程开始检查。</p>\n\n<p>于是，5个进程全部加入安全序列，说明此时系统处于安全状态，暂不可能发生死锁。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B8%83-%E6%AD%BB%E9%94%81%E7%9A%84%E9%81%BF%E5%85%8D/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十七）死锁的避免'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-01T19:05:18+10:00'>May 1, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十七）死锁的避免</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十六）死锁的预防",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E5%85%AD-%E6%AD%BB%E9%94%81%E7%9A%84%E9%A2%84%E9%98%B2/",
      "date"     : "May 1, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#死锁的处理策略\" id=\"markdown-toc-死锁的处理策略\">死锁的处理策略</a></li>\n  <li><a href=\"#静态策略预防死锁\" id=\"markdown-toc-静态策略预防死锁\">静态策略：预防死锁</a>    <ol>\n      <li><a href=\"#破坏互斥条件\" id=\"markdown-toc-破坏互斥条件\">破坏互斥条件</a>        <ol>\n          <li><a href=\"#该策略的缺点\" id=\"markdown-toc-该策略的缺点\">该策略的缺点</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#破坏不剥夺条件\" id=\"markdown-toc-破坏不剥夺条件\">破坏不剥夺条件</a>        <ol>\n          <li><a href=\"#该策略的缺点-1\" id=\"markdown-toc-该策略的缺点-1\">该策略的缺点</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#破坏请求和保持条件\" id=\"markdown-toc-破坏请求和保持条件\">破坏请求和保持条件</a>        <ol>\n          <li><a href=\"#该策略的缺点-2\" id=\"markdown-toc-该策略的缺点-2\">该策略的缺点</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#破坏循环等待条件\" id=\"markdown-toc-破坏循环等待条件\">破坏循环等待条件</a>        <ol>\n          <li><a href=\"#该策略的缺点-3\" id=\"markdown-toc-该策略的缺点-3\">该策略的缺点</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"死锁的处理策略\">死锁的处理策略</h2>\n\n<ol>\n  <li>预防死锁。破坏死锁产生的四个必要条件中的一个或几个；</li>\n  <li>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）；</li>\n  <li>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ol>\n\n<h2 id=\"静态策略预防死锁\">静态策略：预防死锁</h2>\n\n<h3 id=\"破坏互斥条件\">破坏互斥条件</h3>\n\n<p>互斥条件：只有对必须互斥使用的资源的争抢才会导致死锁。</p>\n\n<p>如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。\n比如: <strong>SPOOLing技术。</strong>操作系统可以采用SPOOLing技术把独占设备在逻辑上改造成共享设备。\n如用SPooLing技术将打印机改造为共享设备。</p>\n\n<p>如图，进程1还没用完打印机之前，进程2申请使用打印机会阻塞：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁1.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>使用了SPOOLing技术后，在各进程看来，自己对打印机资源的使用请求立即就被接收处理了，不需要再阻塞等待：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁2.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h4 id=\"该策略的缺点\">该策略的缺点</h4>\n<p>并不是所有的资源都可以改造成可共享使用的资源。\n并且为了系统安全，很多地方还必须保护这种互斥性。\n因此，<strong>很多时候都无法破坏互斥条件</strong>。</p>\n\n<h3 id=\"破坏不剥夺条件\">破坏不剥夺条件</h3>\n<p>不剥夺条件：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。</p>\n\n<p>破坏不剥夺条件：</p>\n<ul>\n  <li>方案一：当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放，从而破坏了不可剥夺条件；</li>\n  <li>方案二:当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一般需要考虑各进程的优先级。（比如剥夺调度方式，就是将处理机资源强行剥夺给优先级更高的进程使用）</li>\n</ul>\n\n<h4 id=\"该策略的缺点-1\">该策略的缺点</h4>\n\n<ol>\n  <li>实现起来比较复杂。</li>\n  <li>释放已获得的资源可能造成前一阶段工作的失效。因此这种方法一般<strong>只适用于易保存和恢复状态的资源</strong>，如CPU。</li>\n  <li>反复地申请和释放资源会增加系统开销，降低系统吞吐量。</li>\n  <li>若采用<strong>方案一</strong>，意味着只要暂时得不到某个资源，之前获得的那些资源就都需要放弃，以后再重新申请。如果一直发生这样的情况，就会<strong>导致进程饥饿</strong>。</li>\n</ol>\n\n<h3 id=\"破坏请求和保持条件\">破坏请求和保持条件</h3>\n<p>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。</p>\n\n<p>可以<strong>采用静态分配方法</strong>，即进程在<strong>运行前一次申请完</strong>它所需要的全部资源，在它的<strong>资源未满足前，不让它投入运行</strong>。\n一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的任何资源了。</p>\n\n<h4 id=\"该策略的缺点-2\">该策略的缺点</h4>\n\n<p>该策略实现起来简单，但也有明显的缺点：\n有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，<strong>资源利用率极低</strong>。\n另外，该策略也有<strong>可能导致某些进程饥饿</strong>。</p>\n\n<p>如图A类进程只需资源1即可运行，B类进程只需资源2即可运行，但C类进程需要同时拥有资源1和资源2才可运行：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁3.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>这种情况下，可能存在A类进程和B类进程不断运行，而C类进程被饿死的情况发生。</p>\n\n<h3 id=\"破坏循环等待条件\">破坏循环等待条件</h3>\n<p>循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。</p>\n\n<p>可采用<strong>顺序资源分配法</strong>。\n首先给系统中的资源编号，规定<strong>每个进程必须按编号递增的顺序请求资源</strong>，同类资源（即编号相同的资源）一次申请完。</p>\n\n<p>原理分析：一个进程只有<strong>已占有小编号</strong>的资源时，<strong>才有资格申请更大编号</strong>的资源。\n按此规则，<strong>已持有大编号资源的进程不可能逆向地回来申请小编号的资源</strong>，从而就不会产生循环等待的现象。</p>\n\n<p>Eg. 假设系统中共有10个资源，编号为1,2,…,10：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-死锁4.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>在任何一个时刻，总有一个进程拥有的资源编号是最大的，那这个进程申请之后的资源必然畅通无阻。\n因此,不可能出现所有进程都阻塞的死锁现象。</p>\n\n<h4 id=\"该策略的缺点-3\">该策略的缺点</h4>\n\n<ol>\n  <li>不方便增加新的设备，因为可能需要重新分配所有的编号；</li>\n  <li>进程实际使用资源的顺序可能和编号递增顺序不一致，会导致资源浪费；</li>\n  <li>必须按规定次序申请资源，用户编程麻烦。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E5%85%AD-%E6%AD%BB%E9%94%81%E7%9A%84%E9%A2%84%E9%98%B2/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十六）死锁的预防'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-01T18:20:06+10:00'>May 1, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十六）死锁的预防</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十五）死锁的概念",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%BA%94-%E6%AD%BB%E9%94%81%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "May 1, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是死锁\" id=\"markdown-toc-什么是死锁\">什么是死锁</a></li>\n  <li><a href=\"#死锁饥饿死循环\" id=\"markdown-toc-死锁饥饿死循环\">死锁、饥饿、死循环</a></li>\n  <li><a href=\"#死锁产生的必要条件\" id=\"markdown-toc-死锁产生的必要条件\">死锁产生的必要条件</a></li>\n  <li><a href=\"#什么时候会发生死锁\" id=\"markdown-toc-什么时候会发生死锁\">什么时候会发生死锁</a></li>\n  <li><a href=\"#死锁的处理策略\" id=\"markdown-toc-死锁的处理策略\">死锁的处理策略</a></li>\n</ol>\n\n<h2 id=\"什么是死锁\">什么是死锁</h2>\n\n<p>在并发环境下，各进程因竞争资源而造成的一种<strong>互相等待对方手里的资源，导进程都阻塞，都无法向前推进的现象，</strong>就是“死锁”。\n发生死锁后若无外力干涉，这些进程都将无法向前推进。</p>\n\n<h2 id=\"死锁饥饿死循环\">死锁、饥饿、死循环</h2>\n\n<ul>\n  <li>死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</li>\n  <li>饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象。如在短进程优先（SPF）算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机，从而发生长进程“饥饿”。</li>\n  <li>死循环：某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑bug导致的，有时是程序员故意设计的。</li>\n</ul>\n\n<table>\n    <tr>\n        <th></th>\n        <th>共同点</th>\n        <th>区别</th>\n    </tr>\n    <tr>\n        <td>死锁</td>    \n        <td rowspan=\"3\">都是进程无法顺利向前推进的现象（故意设计的死循环除外）</td>\n        <td>死锁一定是“循环等待对方手里的资源”导致的，因此如果有死锁现象，那<b>至少有两个或两个以上的进程同时发生死锁</b>。另外，发生死锁的进程一定处于阻塞态。</td>\n    </tr>\n    <tr>\n        <td>饥饿</td>   \n        <td><b>可能只有一个进程发生饥饿</b>。发生饥饿的进程既可能是阻塞态（如长期得不到需要的I/O设备），也可能是就绪态（长期得不到处理机）。</td>\n    </tr>\n    <tr>\n        <td>死循环</td>    \n        <td>可能只有一个进程发生死循环。死循环的进程可以上处理机运行（可以是运行态），只不过无法像期待的那样顺利推进。死锁和饥饿问题是由于操作系统分配资源的策略不合理导致的，而死循环是由代码逻辑的错误导致的。<b>死锁和饥饿是管理者（操作系统）的问题，死循环是被管理者的问题。</b></td>\n    </tr>\n</table>\n\n<h2 id=\"死锁产生的必要条件\">死锁产生的必要条件</h2>\n\n<p>产生死锁必须同时满足一下四个条件，只要其中任一条件不成立，死锁就不会发生：</p>\n<ul>\n  <li><strong>互斥条件</strong>：只有对必须互斥使用的资源的争抢才会导致死锁（如哲学家的筷子、打印机设备）。像内存、扬声器这样可以同时让多个进程使用的资源是不会导致死锁的（因为进程不用阻塞等待这种资源）；</li>\n  <li><strong>不剥夺条件</strong>：进程所获得的资源在未使用完之前，<strong>不能由其他进程强行夺走</strong>，只能主动释放；</li>\n  <li><strong>请求和保持条件</strong>：进程<strong>已经保持了至少一个资源</strong>，但又提出了新的资源请求，而该资源又被其他进程占有，此时<strong>请求进程被阻塞</strong>，但又对自己<strong>已有的资源保持不放</strong>。</li>\n  <li><strong>循环等待条件</strong>：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。</li>\n</ul>\n\n<p><strong>注意！发生死锁时一定有循环等待，但是发生循环等待时未必死锁</strong>（循环等待是死锁的必要不充分条件）</p>\n\n<p>即，如果<strong>同类型资源数</strong>（可以替换的资源）大于1，则即使有循环等待，也未必发生死锁。\n但如果系统中每类资源都只有一个，那循环等待就是死锁的充分必要条件了。</p>\n\n<h2 id=\"什么时候会发生死锁\">什么时候会发生死锁</h2>\n\n<ol>\n  <li>对系统资源的竞争。各进程对不可剥夺的资源（如打印机）的竞争可能引起死锁，对可剥夺的资源（CPU）的竞争是不会引起死锁的。</li>\n  <li>进程推进顺序非法。请求和释放资源的顺序不当，也同样会导致死锁。例如，并发执行的进程P1、P2分别申请并占有了资源R1、R2，之后进程P1又紧接着申请资源R2，而进程P2又申请资源R1，两者会因为申请的资源被对方占有而阻塞，从而发生死锁。</li>\n  <li>信号量的使用不当也会造成死锁。如生产者-消费者问题中，如果实现互斥的P操作在实现同步的P操作之前，就有可能导致死锁。（可以把互斥信号量、同步信号量也看做是一种抽象的系统资源）</li>\n</ol>\n\n<p>总之，对不可剥夺资源的不合理分配，可能导致死锁。</p>\n\n<h2 id=\"死锁的处理策略\">死锁的处理策略</h2>\n\n<ol>\n  <li>预防死锁。破坏死锁产生的四个必要条件中的一个或几个；</li>\n  <li>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）；</li>\n  <li>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%BA%94-%E6%AD%BB%E9%94%81%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十五）死锁的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-05-01T14:01:25+10:00'>May 1, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十五）死锁的概念</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十四）管程",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E5%9B%9B-%E7%AE%A1%E7%A8%8B/",
      "date"     : "Apr 30, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#为什么要引入管程\" id=\"markdown-toc-为什么要引入管程\">为什么要引入管程</a></li>\n  <li><a href=\"#管程的定义和基本特征\" id=\"markdown-toc-管程的定义和基本特征\">管程的定义和基本特征</a></li>\n  <li><a href=\"#用管程解决生产者-消费者问题\" id=\"markdown-toc-用管程解决生产者-消费者问题\">用管程解决生产者-消费者问题</a></li>\n  <li><a href=\"#java中类似管程的机制\" id=\"markdown-toc-java中类似管程的机制\">Java中类似管程的机制</a></li>\n</ol>\n\n<h2 id=\"为什么要引入管程\">为什么要引入管程</h2>\n<p>信号量机制存在的问题：编写程序困难、易出错。</p>\n\n<p>能不能设计一种机制，让程序员写程序时不需要再关注复杂的PV操作，让写代码更轻松呢？</p>\n\n<p>1973年，Brinch Hansen首次在程序设计语言（Pascal）中引入了“管程”成分——一种高级同步机制。</p>\n\n<h2 id=\"管程的定义和基本特征\">管程的定义和基本特征</h2>\n<p>管程是一种特殊的软件模块，有这些部分组成：</p>\n<ol>\n  <li>局部于管程的<strong>共享数据结构</strong>说明；</li>\n  <li>对该数据结构进行操作的<strong>一组过程</strong>；</li>\n  <li>对局部于管程的共享数据设置初始值的语句；</li>\n  <li>管程有一个名字。</li>\n</ol>\n\n<p>管程的基本特征：</p>\n<ol>\n  <li>局部于管程的数据只能被局部于管程的过程所访问；</li>\n  <li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据；</li>\n  <li><strong>每次仅允许一个进程在管程内执行某个内部过程</strong>。</li>\n</ol>\n\n<h2 id=\"用管程解决生产者-消费者问题\">用管程解决生产者-消费者问题</h2>\n\n<p>管程：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">monitor</span> <span class=\"n\">ProducerConsumer</span>\n    <span class=\"n\">condition</span> <span class=\"n\">full</span><span class=\"p\">,</span> <span class=\"n\">empty</span><span class=\"p\">;</span>      <span class=\"c1\">// 条件变量用来实现同步（排队），管程中设置条件变量和等待/唤醒操作，以解决同步问题</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>              <span class=\"c1\">// 缓冲区中的产品数</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">Item</span> <span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"c1\">// 把产品item放入缓冲区，由编译器负责实现各进程互斥地进入管程中的过程</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n            <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">full</span><span class=\"p\">);</span>\n        <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">insert_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Item</span> <span class=\"nf\">remove</span><span class=\"p\">()</span> <span class=\"p\">{</span>             <span class=\"c1\">// 从缓冲区中取出一个产品</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">);</span>\n        <span class=\"n\">count</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">full</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">remove_item</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"n\">end</span> <span class=\"n\">monitor</span>    \n</code></pre></div></div>\n\n<p>使用示例：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 生产者进程 */</span>\n<span class=\"n\">Producer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"err\">生产一个产品</span><span class=\"p\">;</span>\n        <span class=\"n\">ProducerConsumer</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/* 消费者进程 */</span>\n<span class=\"n\">Consumer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">ProducerConsumer</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"p\">();</span>\n        <span class=\"err\">消费产品</span><span class=\"n\">item</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>引入管程的目的是更方便地实现进程互斥和同步：</p>\n<ol>\n  <li>需要在<strong>管程中定义共享数据</strong>（如生产者消费者问题的缓冲区）；</li>\n  <li>需要在<strong>管程中定义用于访问这些共享数据的“入口”</strong>——其实就是一些函数（如生产者消费者问题中，可以定义一个函数用于将产品放入缓冲区，再定义一个函数用于从缓冲区取出产品）；</li>\n  <li>只有<strong>通过这些特定的“入口”才能访问共享数据</strong>；</li>\n  <li>管程中有很多“入口”，但是<strong>每次只能开放其中一个“入口”</strong>，并且<strong>只能让一个进程或线程进入</strong>（如生产者消费者问题中，各进程需要互斥地访问共享缓冲区。管程的这种特性即可保证一个时间段内最多只会有一个进程在访问缓冲区。注意：<strong>这种互斥特性是由编译器负责实现的，程序员不用关心</strong>）；</li>\n  <li>可在管程中设置<strong>条件变量</strong>及<strong>等待/唤醒操作</strong>以解决同步问题。可以让一个进程或线程在条件变量上等待（<strong>此时，该进程应先释放管程的使用权，也就是让出“入口”</strong>)；可以通过唤醒操作将等待在条件变量上的进程或线程唤醒。</li>\n</ol>\n\n<h2 id=\"java中类似管程的机制\">Java中类似管程的机制</h2>\n\n<p>Java中，如果用关键字synchronized来描述一个函数，那么这个函数同一时间段内只能被一个线程调用：</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">monitor</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Item</span> <span class=\"n\">buffer</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Item</span><span class=\"o\">[</span><span class=\"no\">N</span><span class=\"o\">];</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    \n    <span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"o\">(</span><span class=\"nc\">Item</span> <span class=\"n\">item</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"cm\">/* ... */</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>每次只能有一个线程进入<code class=\"language-plaintext highlighter-rouge\">insert()</code>函数，如果多个线程同时调用<code class=\"language-plaintext highlighter-rouge\">insert()</code>函数，则后来者需要排队等待。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E5%9B%9B-%E7%AE%A1%E7%A8%8B/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十四）管程'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-30T20:16:50+10:00'>Apr 30, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十四）管程</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十三）哲学家进餐问题",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B8%89-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/",
      "date"     : "Apr 30, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#问题描述\" id=\"markdown-toc-问题描述\">问题描述</a></li>\n  <li><a href=\"#实现原理\" id=\"markdown-toc-实现原理\">实现原理</a></li>\n  <li><a href=\"#典型错误代码实现\" id=\"markdown-toc-典型错误代码实现\">典型错误代码实现</a></li>\n  <li><a href=\"#一种可行的代码实现\" id=\"markdown-toc-一种可行的代码实现\">一种可行的代码实现</a></li>\n  <li><a href=\"#其它可行方法\" id=\"markdown-toc-其它可行方法\">其它可行方法</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"问题描述\">问题描述</h2>\n\n<p>一张圆桌上坐着5名哲学家，每两个哲学家之间的桌上摆一根筷子，桌子的中间是一碗米饭。\n哲学家们倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响他人。\n只有当哲学家饥饿时，才试图拿起左、右两根筷子（一根一根地拿起）。\n如果筷子已在他人手上，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。</p>\n\n<h2 id=\"实现原理\">实现原理</h2>\n\n<p>关系分析：系统中有5个哲学家进程，5位哲学家与左右邻居对其中间筷子的访问是互斥关系。</p>\n\n<p>这个问题中只有互斥关系，但与之前遇到的问题不同的事，每个哲学家进程需要同时持有两个临界资源才能开始吃饭。\n<strong>如何避免临界资源分配不当造成的死锁现象，是哲学家问题的精髓。</strong></p>\n\n<p>信号量设计：定义互斥信号量数组<code class=\"language-plaintext highlighter-rouge\">chopstick[5]={1,1,1,1,1}</code>用于实现对5个筷子的互斥访问。\n并对哲学家按0~4编号，哲学家<code class=\"language-plaintext highlighter-rouge\">i</code>左边的筷子编号为<code class=\"language-plaintext highlighter-rouge\">i</code>，右边的筷子编号为<code class=\"language-plaintext highlighter-rouge\">(i+1)%5</code>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量9.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"典型错误代码实现\">典型错误代码实现</h2>\n\n<p>首先编写如下代码</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">semaphore</span> <span class=\"n\">chopstick</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n<span class=\"n\">Pi</span><span class=\"p\">(){</span>                               <span class=\"c1\">// i号哲学家的进程</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>            <span class=\"c1\">// 拿起左手边筷子</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">5</span><span class=\"p\">]);</span>      <span class=\"c1\">// 拿起右手边筷子</span>\n        <span class=\"err\">吃饭</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>            <span class=\"c1\">// 放下左手边筷子</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">5</span><span class=\"p\">]);</span>      <span class=\"c1\">// 放下右手边筷子</span>\n        <span class=\"err\">思考</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>这样代码实现存在的问题在于，如果5个哲学家<strong>并发地拿起了自己左手边的筷子</strong>，每位哲学家循环等待右边的人放下筷子（阻塞），<strong>发生“死锁”</strong>。</p>\n\n<h2 id=\"一种可行的代码实现\">一种可行的代码实现</h2>\n\n<p>为了防止死锁发生，<strong>可以令各哲学家拿筷子这件事互斥的执行</strong>。\n这就保证了<strong>即使一个哲学家在拿筷子拿到一半时被阻塞</strong>,也<strong>不会有别的哲学家会继续尝试拿筷子</strong>。\n这样的话，当前正在吃饭的哲学家放下筷子后，被阻塞的哲学家就可以获得等待的筷子了。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">semaphore</span> <span class=\"n\">chopstick</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">mutex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>                <span class=\"c1\">// 互斥地取筷子</span>\n<span class=\"n\">Pi</span><span class=\"p\">(){</span>                               <span class=\"c1\">// i号哲学家的进程</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>            <span class=\"c1\">// 拿起左手边筷子</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">5</span><span class=\"p\">]);</span>      <span class=\"c1\">// 拿起右手边筷子</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"err\">吃饭</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>            <span class=\"c1\">// 放下左手边筷子</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">chopstick</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">5</span><span class=\"p\">]);</span>      <span class=\"c1\">// 放下右手边筷子</span>\n        <span class=\"err\">思考</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"其它可行方法\">其它可行方法</h2>\n\n<ul>\n  <li>可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐。（设置一个信号量为4）这样可以保证至少有一个哲学家是可以拿到左右两只筷子的。</li>\n  <li>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一支后再等待另一只的情况。</li>\n</ul>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>哲学家进餐问题的关键在于解决进程死锁。</p>\n\n<p>这些进程之间只存在互斥关系，但是与之前接触到的互斥关系不同的是，每个进程都需要同时持有两个临界资源，因此就有“死锁”问题的隐患。</p>\n\n<p>遇到一个进程需要同时持有多个临界资源的情况，应该参考哲学家问题的思想，分析题中给出的进程之间是否会发生循环等待，是否会发生死锁。</p>\n\n<p>可以参考哲学家就餐问题解决死锁的三种思路。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B8%89-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十三）哲学家进餐问题'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-30T14:05:09+10:00'>Apr 30, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十三）哲学家进餐问题</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十二）读者-写者问题",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%BA%8C-%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/",
      "date"     : "Apr 29, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#问题描述\" id=\"markdown-toc-问题描述\">问题描述</a></li>\n  <li><a href=\"#实现原理\" id=\"markdown-toc-实现原理\">实现原理</a></li>\n  <li><a href=\"#代码实现\" id=\"markdown-toc-代码实现\">代码实现</a>    <ol>\n      <li><a href=\"#实现互斥访问\" id=\"markdown-toc-实现互斥访问\">实现互斥访问</a></li>\n      <li><a href=\"#保证读进程不会相互阻塞\" id=\"markdown-toc-保证读进程不会相互阻塞\">保证读进程不会相互阻塞</a></li>\n      <li><a href=\"#实现写优先\" id=\"markdown-toc-实现写优先\">实现写优先</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"问题描述\">问题描述</h2>\n<p>有读者和写者两组并发进程，共享一个文件。\n当两个或两个以上的读进程同时访问共享数据时不会产生副作用，但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误。\n因此要求：</p>\n<ol>\n  <li><strong>允许多个读者</strong>可以同时对文件执行读操作；</li>\n  <li><strong>只允许一个写者</strong>往文件中写信息；</li>\n  <li>任一写者在<strong>完成写操作之前不允许其他读者或写者工作</strong>；</li>\n  <li>写者<strong>执行写操作前，应让已有的读者和写者全部退出</strong>。</li>\n</ol>\n\n<p>注：与消费者进程不同，读者进程在读数据后并不会将数据清空，并不会改变数据。因此多个读者可同时访问共享数据。</p>\n\n<h2 id=\"实现原理\">实现原理</h2>\n<p>两类进程：写进程、读进程</p>\n\n<p>互斥关系：</p>\n<ul>\n  <li>写进程―写进程、写进程―读进程之间存在互斥关系。</li>\n  <li>读进程与读进程不存在互斥问题。</li>\n</ul>\n\n<h2 id=\"代码实现\">代码实现</h2>\n<h3 id=\"实现互斥访问\">实现互斥访问</h3>\n\n<p>我们可以设置一个信号量rw保证写进程-读进程和写进程-写进程的互斥关系：</p>\n\n<p>Writer：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">)</span>\n<span class=\"err\">写文件</span><span class=\"p\">;</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Reader：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">)</span>\n<span class=\"err\">读文件</span><span class=\"p\">;</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"保证读进程不会相互阻塞\">保证读进程不会相互阻塞</h3>\n\n<p>为了防止信号量rw阻塞多个读进程读文件过程，如下代码可以使加锁过程仅由<strong>第一个读进程负责</strong>。\n之后的读进程不再需要获得锁就可以读取文件内容。\n而<strong>最后一个读进程负责解锁过程</strong>。</p>\n\n<p>Reader：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">// 由第一个读进程负责</span>\n    <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>      <span class=\"c1\">// 读之前加锁</span>\n<span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>        <span class=\"c1\">// 访问文件的读进程数+1</span>\n<span class=\"err\">读文件</span><span class=\"p\">;</span>\n<span class=\"n\">count</span><span class=\"o\">--</span><span class=\"p\">;</span>        <span class=\"c1\">// 访问文件的读进程数-1</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\">// 由最后一个读进程负责</span>\n    <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>      <span class=\"c1\">// 读完了解锁</span>\n</code></pre></div></div>\n\n<p>若两个读进程并发执行，则count=0时两个进程也许都能满足if条件，都会执行<code class=\"language-plaintext highlighter-rouge\">P(rw)</code>，从而使第二个读进程阻塞。\n出现上述问题的原因在于对count变量的检查和赋值无法一气呵成，因此可以设置另一个互斥信号量来保证各读进程对count的访问是互斥的。</p>\n\n<p><strong>count此时属于临界资源，需要另加一个信号量mutex保证其操作的原子性。</strong></p>\n\n<p>Reader：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 各读进程互斥访问count</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">// 由第一个读进程负责</span>\n    <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>      <span class=\"c1\">// 读之前加锁</span>\n<span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>        <span class=\"c1\">// 访问文件的读进程数+1</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 访问完count解锁</span>\n<span class=\"err\">读文件</span><span class=\"p\">;</span>\n<span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 各读进程互斥访问count</span>\n<span class=\"n\">count</span><span class=\"o\">--</span><span class=\"p\">;</span>        <span class=\"c1\">// 访问文件的读进程数-1</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\">// 由最后一个读进程负责</span>\n    <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>      <span class=\"c1\">// 读完了解锁</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 访问完count解锁</span>\n</code></pre></div></div>\n\n<h3 id=\"实现写优先\">实现写优先</h3>\n\n<p>之前的实现仍然存在潜在问题，即只要有读进程还在读，写进程就要一直阻塞等待，可能“饿死”。\n因此，这种算法中，读进程是优先的。\n为了解决这种问题，可以再加一个信号量w防止写进程饥饿。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 信号量设置</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">rw</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>       <span class=\"c1\">//用于实现对共享文件的互斥访问</span>\n<span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>          <span class=\"c1\">//记录当前有几个读进程在访问文件</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">mutex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">//用于保证对count变量的互斥访问</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>        <span class=\"c1\">//用于实现\"写优先\"</span>\n\n<span class=\"n\">Writer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>          <span class=\"c1\">// 写之前加锁</span>\n        <span class=\"err\">写文件</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>          <span class=\"c1\">// 写之后解锁</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Reader</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 各读进程互斥访问count</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">// 由第一个读进程负责</span>\n            <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>      <span class=\"c1\">// 读之前加锁</span>\n        <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>        <span class=\"c1\">// 访问文件的读进程数+1</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 访问完count解锁</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">);</span>\n        <span class=\"err\">读文件</span><span class=\"p\">;</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 各读进程互斥访问count</span>\n        <span class=\"n\">count</span><span class=\"o\">--</span><span class=\"p\">;</span>        <span class=\"c1\">// 访问文件的读进程数-1</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\">// 由最后一个读进程负责</span>\n            <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">rw</span><span class=\"p\">);</span>      <span class=\"c1\">// 读完了解锁</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>       <span class=\"c1\">// 访问完count解锁</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>分析以下并发执行P(w)的情况：</p>\n<ul>\n  <li>读者1-&gt;写者1-&gt;读者2</li>\n  <li>写者1-&gt;读者1-&gt;写者2</li>\n</ul>\n\n<p>在这种算法中，连续进入的多个读者可以同时读文件；写者和其他进程不能同时访问文件；写者不会饥饿，但也并不是真正的“写优先”，而是<strong>相对公平的先来先服务原则。</strong>\n这种算法又称“读写公平法”。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>读者-写者问题为我们解决复杂的互斥问题提供了一个参考思路。</p>\n\n<p>其<strong>核心思想</strong>在于设置了一个<strong>计数器count</strong>用来记录当前正在访问共享文件的读进程数。\n我们可以用count的值来判断当前进入的进程是否是第一个/最后一个读进程，从而做出不同的处理。</p>\n\n<p>另外，对count变量的检查和赋值不能一气呵成导致了一些错误，如果<strong>需要实现“一气呵成”，自然应该想到用互斥信号量。</strong></p>\n\n<p>最后，还要认真体会我们是如何解决<strong>“写进程饥饿”</strong>问题的。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%BA%8C-%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十二）读者-写者问题'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2022-04-29T12:47:21+10:00'>Apr 29, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十二）读者-写者问题</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十一）吸烟者问题",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B8%80-%E5%90%B8%E7%83%9F%E8%80%85%E9%97%AE%E9%A2%98/",
      "date"     : "Apr 29, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#问题描述\" id=\"markdown-toc-问题描述\">问题描述</a></li>\n  <li><a href=\"#实现原理\" id=\"markdown-toc-实现原理\">实现原理</a></li>\n  <li><a href=\"#代码实现\" id=\"markdown-toc-代码实现\">代码实现</a></li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"问题描述\">问题描述</h2>\n<p>假设一个系统有<strong>三个抽烟者进程</strong>和<strong>一个供应者进程</strong>。\n每个抽烟者不停地卷烟并抽掉它，但是要卷起并抽掉一支烟，抽烟者需要有三种材料：烟草、纸和胶水。\n三个抽烟者中，<strong>第一个拥有烟草、第二个拥有纸、第三个拥有胶水。</strong>\n供应者进程无限地提供三种材料，供应者每次将两种材料放桌子上，拥有剩下那种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉完成了，供应者就会放另外两种材料再桌上，这个过程一直重复（让三个抽烟者轮流地抽烟）</p>\n\n<h2 id=\"实现原理\">实现原理</h2>\n\n<p>这个问题本质上也属于“生产者-消费者”问题，更详细的说是“可生产多种产品的单生产者-多消费者”。</p>\n\n<p>互斥关系：</p>\n<ul>\n  <li>桌子可以抽象为容量为1的缓冲区，要互斥访问。</li>\n</ul>\n\n<p>桌子上可能的组合：</p>\n<ul>\n  <li>组合一：纸+胶水；</li>\n  <li>组合二：烟草+胶水；</li>\n  <li>组合三：烟草+纸。</li>\n</ul>\n\n<p>同步关系（从事件的角度分析）：</p>\n<ul>\n  <li>桌上有组合一-&gt;第一个抽烟者取走东西；</li>\n  <li>桌上有组合二-&gt;第二个抽烟者取走东西；</li>\n  <li>桌上有组合三-&gt;第三个抽烟者取走东西；</li>\n  <li>发出完成信号-&gt;供应者将下一个组合放到桌上。</li>\n</ul>\n\n<p>信号量设计：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量8.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"代码实现\">代码实现</h2>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">semaphore</span> <span class=\"n\">offer1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>     <span class=\"c1\">//桌上组合一的数量</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">offer2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>     <span class=\"c1\">//桌上组合二的数量</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">offer3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>     <span class=\"o\">/</span><span class=\"err\">桌上组合三的数量</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">finish</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>     <span class=\"c1\">//抽烟是否完成</span>\n<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>                <span class=\"c1\">//用于实现\"三个抽烟者轮流抽烟\"</span>\n\n<span class=\"n\">Provider</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"err\">将组合一放到桌上</span><span class=\"p\">;</span>\n            <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">offer1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"err\">将组合二放到桌上</span><span class=\"p\">;</span>\n            <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">offer2</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"err\">将组合三放到桌上</span><span class=\"p\">;</span>\n            <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">offer3</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Smoker1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">offer1</span><span class=\"p\">);</span>\n        <span class=\"err\">从桌上拿走组合一</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Smoker2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">offer2</span><span class=\"p\">);</span>\n        <span class=\"err\">从桌上拿走组合二</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Smoker3</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">offer3</span><span class=\"p\">);</span>\n        <span class=\"err\">从桌上拿走组合三</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>缓冲区大小为1，同一时刻，四个同步信号量中至多有一个的值为1，因此<strong>不必专门设置一个互斥信号量</strong>。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>吸烟者问题可以为我们解决“可以生产多个产品的单生产者”问题提供一个思路。\n值得吸取的精华是：<strong>轮流让各个吸烟者吸烟</strong>必然需要<strong>轮流的在桌上放上组合</strong>一、二、三。\n注意体会我们是如何用一个整型变量i实现这个<strong>轮流</strong>过程的。</p>\n\n<p>若<strong>一个生产者要生产多种产品</strong>（或者说会<strong>引发多种前驱事件</strong>），那么<strong>各个V操作</strong>应该放在各自<strong>对应的“事件”发生之后</strong>的位置。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81%E4%B8%80-%E5%90%B8%E7%83%9F%E8%80%85%E9%97%AE%E9%A2%98/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十一）吸烟者问题'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-29T11:26:25+10:00'>Apr 29, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十一）吸烟者问题</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三十）多生产者-多消费者问题",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81-%E5%A4%9A%E7%94%9F%E4%BA%A7%E8%80%85-%E5%A4%9A%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/",
      "date"     : "Apr 28, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#问题描述\" id=\"markdown-toc-问题描述\">问题描述</a></li>\n  <li><a href=\"#实现原理\" id=\"markdown-toc-实现原理\">实现原理</a></li>\n  <li><a href=\"#代码实现\" id=\"markdown-toc-代码实现\">代码实现</a></li>\n  <li><a href=\"#去掉互斥信号的情况\" id=\"markdown-toc-去掉互斥信号的情况\">去掉互斥信号的情况</a>    <ol>\n      <li><a href=\"#缓冲区容量为1\" id=\"markdown-toc-缓冲区容量为1\">缓冲区容量为1</a></li>\n      <li><a href=\"#缓冲区容量为2\" id=\"markdown-toc-缓冲区容量为2\">缓冲区容量为2</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#总结\" id=\"markdown-toc-总结\">总结</a></li>\n</ol>\n\n<h2 id=\"问题描述\">问题描述</h2>\n<p>桌子上有一只盘子，每次只能向其中放入一个水果。\n爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。\n只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。\n仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。</p>\n\n<h2 id=\"实现原理\">实现原理</h2>\n\n<p>互斥关系（mutex = 1）：</p>\n<ul>\n  <li>对缓冲区（盘子）的访问要互斥地进行。</li>\n</ul>\n\n<p>同步关系（一前一后）：</p>\n<ol>\n  <li>父亲将苹果放入盘子后，女儿才能取苹果；</li>\n  <li>母亲将橘子放入盘子后，儿子才能取橘子；</li>\n  <li>只有盘子为空时，父亲或母亲才能放入水果。（“盘子为空”这个事件可以由儿子或女儿触发，事件发生后才允许父亲或母亲放水果）</li>\n</ol>\n\n<p>信号量设计：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量5.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"代码实现\">代码实现</h2>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">semaphore</span> <span class=\"n\">mutex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>   <span class=\"c1\">//实现互斥访问盘子（缓冲区）</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">apple</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>   <span class=\"c1\">//盘子中有几个苹果</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"c1\">//盘子中有几个橘子</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">plate</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>   <span class=\"c1\">//盘子中还可以放多少个水果</span>\n\n<span class=\"n\">dad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"err\">准备一个苹果</span><span class=\"p\">;</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">plate</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"err\">把苹果放入盘子</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">apple</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">mom</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"err\">准备一个橘子；</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">plate</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"err\">把橘子放入盘子</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">daughter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">apple</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"err\">从盘中取出苹果</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">plate</span><span class=\"p\">);</span>\n        <span class=\"err\">吃掉苹果</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">son</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">);</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"err\">从盘中取出橘子</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">plate</span><span class=\"p\">);</span>\n        <span class=\"err\">吃掉橘子</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"去掉互斥信号的情况\">去掉互斥信号的情况</h2>\n\n<h3 id=\"缓冲区容量为1\">缓冲区容量为1</h3>\n\n<p>在缓冲区容量为1时，即使不设置专门的互斥变量mutex，也不会出现多个进程同时访问盘子的现象。</p>\n\n<p>分析：刚开始，儿子、女儿进程即使上处理机运行也会被阻塞。\n如果刚开始是父亲进程先上处埋机行，则父亲<code class=\"language-plaintext highlighter-rouge\">P(plate)</code>，可以访问盘子-&gt;\n母亲<code class=\"language-plaintext highlighter-rouge\">P(plate)</code>，阻塞等待盘子-&gt;\n父亲放入苹果<code class=\"language-plaintext highlighter-rouge\">V(apple)</code>，女儿进程被唤醒，其他进程即使运行也都会阻塞，暂时不可能访问临界资源（盘子）-&gt;\n女儿<code class=\"language-plaintext highlighter-rouge\">P(apple)</code>，访问盘子，<code class=\"language-plaintext highlighter-rouge\">V(plate)</code>，等待盘子的母亲进程被唤醒-&gt;\n母亲进程访问盘子（其他进程暂时都无法进入临界区）-&gt;……</p>\n\n<p>原因在于本题中的缓冲区大小为1。\n在任何时刻，apple、orange、plate三个同步信号量中最多只有一个是1。\n因此最多只有一个进程的P操作不会被阻塞，并顺利地进入临界区。</p>\n\n<h3 id=\"缓冲区容量为2\">缓冲区容量为2</h3>\n\n<p>父亲<code class=\"language-plaintext highlighter-rouge\">P(plate)</code>，可以访问盘子-&gt;\n母亲<code class=\"language-plaintext highlighter-rouge\">P(plate)</code>，可以访问盘子-&gt;\n父亲在往盘子里放苹果，同时母亲也可以往盘子里放橘子。\n于是就出现了两个进程同时访问缓冲区的情况，有可能导致两个进程写入缓冲区的数据相互覆盖的情况。\n因此，如果缓冲区大小大于1，就必须专门设置一个互斥信号量mutex来保证互斥访问缓冲区。</p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>解决“多生产者-多消费者问题”的关键在于理清复杂的同步关系。</p>\n\n<p>在分析同步问题（一前一后问题）的时候不能从单个进程行为的角度来分析，要把“一前一后”发生的事看做是两种“事件”的前后关系。</p>\n\n<p>比如，如果从单个进程行为的角度来考虑的话，我们会有以下结论：</p>\n<ul>\n  <li><strong>如果盘子里装有苹果，那么一定要女儿取走苹果后父亲或母亲才能再放入水果；</strong></li>\n  <li><strong>如果盘子里装有橘子，那么一定要儿子取走橘子后父亲或母亲才能再放入水果。</strong></li>\n</ul>\n\n<p>这么看是否就意味着要设置四个同步信号量分别实现这四个“一前一后”的关系了？</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量6.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>正确的分析方法应该<strong>从“事件”的角度来考虑</strong>，我们可以把上述<strong>四对“进程行为的前后关系”</strong>抽象为<strong>一对“事件的前后关系”</strong>\n盘子变空事件-&gt;放入水果事件：</p>\n<ul>\n  <li><strong>“盘子变空事件”既可由儿子引发，也可由女儿引发；</strong></li>\n  <li><strong>“放水果事件”既可能是父亲执行，也可能是母亲执行。</strong></li>\n</ul>\n\n<p>这样的话，就可以用一个同步信号量解决问题了。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量7.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89%E5%8D%81-%E5%A4%9A%E7%94%9F%E4%BA%A7%E8%80%85-%E5%A4%9A%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（三十）多生产者-多消费者问题'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-28T12:02:09+10:00'>Apr 28, 2022</time> </span> </div><h2 class='article__title'>操作系统（三十）多生产者-多消费者问题</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十九）生产者-消费者问题",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B9%9D-%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/",
      "date"     : "Apr 28, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#pv操作问题的一般思路\" id=\"markdown-toc-pv操作问题的一般思路\">PV操作问题的一般思路：</a></li>\n  <li><a href=\"#问题描述\" id=\"markdown-toc-问题描述\">问题描述</a></li>\n  <li><a href=\"#实现原理\" id=\"markdown-toc-实现原理\">实现原理</a></li>\n  <li><a href=\"#同步和互斥的顺序\" id=\"markdown-toc-同步和互斥的顺序\">同步和互斥的顺序</a></li>\n</ol>\n\n<h2 id=\"pv操作问题的一般思路\">PV操作问题的一般思路：</h2>\n<ol>\n  <li>关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</li>\n  <li>整理思路。根据各进程的操作流程确定P、V操作的大致顺序。</li>\n  <li>设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。（互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少）</li>\n</ol>\n\n<h2 id=\"问题描述\">问题描述</h2>\n\n<p>系统中有一组生产者进程和一组消费者进程。\n生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用。（这里的“产品”理解为某种数据）</p>\n\n<p>生产者、消费者共享一个初始为空、大小为n的缓冲区。</p>\n\n<p>只有<strong>缓冲区没满</strong>时，<strong>生产者才能把产品放入缓冲区</strong>，否则必须等待。</p>\n\n<p>只有<strong>缓冲区不空</strong>时，<strong>消费者才能从中取出产品</strong>，否则必须等待。</p>\n\n<p><strong>缓冲区是临界资源</strong>，各进程必须<strong>互斥地访问</strong>。</p>\n\n<h2 id=\"实现原理\">实现原理</h2>\n\n<p>生产者-消费者问题是一个互斥、同步的综合问题。</p>\n\n<p>对于初学者来说最难的是发现题目中隐含的两对同步关系。</p>\n\n<p>有时候是消费者需要等待生产者生产，有时候是生产者要等待消费者消费。这是两个不同的“一前一后问题”，因此也需要设置两个同步信号量。</p>\n\n<p>生产者-消费者问题的前驱关系如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量4.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>根据前驱图可编写对应代码：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">semaphore</span> <span class=\"n\">mutex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">//互斥信号量，实现对缓冲区的互斥访问</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">empty</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"c1\">//同步信号量，表示空闲缓冲区的数量</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"c1\">//同步信号量,表示产品的数量,也即非空缓冲区的数量</span>\n\n<span class=\"n\">Producer</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"err\">生产一个产品</span><span class=\"p\">;</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">);</span>   <span class=\"c1\">// 消耗一个空闲缓冲区</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 实现互斥是在同进程中进行一对PV操作</span>\n        <span class=\"err\">把产品放入缓冲区</span><span class=\"p\">;</span> \n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 实现互斥是在同进程中进行一对PV操作</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">full</span><span class=\"p\">);</span>    <span class=\"c1\">// 增加一个产品</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Consumer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">full</span><span class=\"p\">);</span>    <span class=\"c1\">// 消耗一个产品（非空缓冲区）</span>\n        <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"err\">从缓冲区取出一个产品</span><span class=\"p\">;</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n        <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">);</span>   <span class=\"c1\">// 增加一个空闲缓冲区</span>\n        <span class=\"err\">使用产品</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<ul>\n  <li>mutex：实现互斥是在同进程中进行一对PV操作</li>\n  <li>empty/full：实现两进程的同步关系，是在其中一个进程中执行P，另一进程中执行V</li>\n</ul>\n\n<h2 id=\"同步和互斥的顺序\">同步和互斥的顺序</h2>\n\n<p>假设将上述代码的P操作顺序进行互换，如下所示：</p>\n\n<p>Producer：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 1.</span>\n<span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">);</span>   <span class=\"c1\">// 2.</span>\n<span class=\"err\">把产品放入缓冲区</span><span class=\"p\">;</span> \n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">full</span><span class=\"p\">);</span>   \n</code></pre></div></div>\n\n<p>Consumer：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">full</span><span class=\"p\">);</span>    <span class=\"c1\">// 3.</span>\n<span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 4.</span>\n<span class=\"err\">从缓冲区取出一个产品</span><span class=\"p\">;</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>\n<span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>若此时缓冲区内已经放满产品，则empty=0，full=n。\n则生产者进程执行1使mutex变为0，再执行2，由于已<strong>没有空闲缓冲区，因此生产者被阻塞</strong>。\n由于生产者阻塞，因此切换回消费者进程。\n消费者进程执行3，<strong>由于mutex为0</strong>，即生产者还没释放对临界资源的“锁”，因此<strong>消费者也被阻塞</strong>。</p>\n\n<p>这就造成了<strong>生产者等待消费者释放空闲缓冲区</strong>，而<strong>消费者又等待生产者释放临界区</strong>的情况。\n生产者和消费者循环等待被对方唤醒，<strong>出现“死锁”</strong>。</p>\n\n<p>同样的，若缓冲区中没有产品，即full=O，empty=n。按341的顺序执行就会发生死锁。</p>\n\n<p>因此，实现<strong>互斥的P操作一定要在实现同步的P操作之后</strong>。</p>\n\n<p>V操作不会导致进程阻塞，因此两个<strong>V操作顺序可以交换</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B9%9D-%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十九）生产者-消费者问题'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-28T11:16:23+10:00'>Apr 28, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十九）生产者-消费者问题</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十八）信号量实现进程的同步、互斥和前驱",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E5%85%AB-%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5-%E4%BA%92%E6%96%A5%E5%92%8C%E5%89%8D%E9%A9%B1/",
      "date"     : "Apr 27, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#pv操作\" id=\"markdown-toc-pv操作\">P、V操作</a></li>\n  <li><a href=\"#实现进程互斥\" id=\"markdown-toc-实现进程互斥\">实现进程互斥</a></li>\n  <li><a href=\"#实现进程同步\" id=\"markdown-toc-实现进程同步\">实现进程同步</a></li>\n  <li><a href=\"#实现进程的前驱关系\" id=\"markdown-toc-实现进程的前驱关系\">实现进程的前驱关系</a></li>\n</ol>\n\n<h2 id=\"pv操作\">P、V操作</h2>\n\n<ul>\n  <li>信号量的值：这种<strong>资源的剩余数量</strong>（信号量的值如果小于0，说明此时有进程在等待这种资源）；</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">P(S)</code>：申请一个资源S，如果<strong>资源不够就阻塞等待</strong>；</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">V(S)</code>：释放一个资源S，如果有进程在等待该资源，则<strong>唤醒一个进程</strong>。</li>\n</ul>\n\n<h2 id=\"实现进程互斥\">实现进程互斥</h2>\n\n<ol>\n  <li>分析并发进程的关键活动，划定临界区（如:对临界资源打印机的访问就应放在临界区）；</li>\n  <li>设置<strong>互斥信号量</strong>mutex，表示<strong>进入临界区的名额</strong>。初值为1；</li>\n  <li>在进入区<code class=\"language-plaintext highlighter-rouge\">P(mutex)</code>——申请资源；</li>\n  <li>在退出区<code class=\"language-plaintext highlighter-rouge\">V(mutex)</code>——释放资源。</li>\n</ol>\n\n<p>注意：</p>\n<ul>\n  <li>对<strong>不同的临界资源</strong>需要设置<strong>不同的互斥信号量</strong>。</li>\n  <li><strong>P、V操作必须成对出现</strong>。缺少<code class=\"language-plaintext highlighter-rouge\">P(mutex)</code>就<strong>不能保证临界资源的互斥访问</strong>。缺少<code class=\"language-plaintext highlighter-rouge\">V(mutex)</code>会导致<strong>资源永不被释放，等待进程永不被唤醒</strong>。</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 信号量机制实现互斥 */</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">mutex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"n\">Process1</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* ... */</span>\n    <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 使用临界资源前加锁</span>\n    <span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n    <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 使用临界资源后解锁</span>\n    <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process2</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* ... */</span>\n    <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 使用临界资源前加锁</span>\n    <span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n    <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">mutex</span><span class=\"p\">);</span>   <span class=\"c1\">// 使用临界资源后解锁</span>\n    <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>不同的临界资源设置不同的互斥信号量：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量1.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"实现进程同步\">实现进程同步</h2>\n<p>进程同步：要让各并发进程按要求有序地推进。</p>\n\n<p>比如，P1、P2并发执行，由于存在异步性，因此二者交替推进的次序是不确定的。</p>\n\n<p>若<strong>P2的“代码4”要基于P1的“代码1”和“代码2”的运行结果</strong>才能执行，那么我们就必须<strong>保证“代码4”一定是在“代码2”之后才会执行</strong>。</p>\n\n<p>这就是进程同步问题，让本来异步并发的进程互相配合，有序推进。</p>\n\n<p>用信号量实现进程同步:</p>\n<ol>\n  <li>分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作（或两句代码）；</li>\n  <li>设置<strong>同步信号量S,初始为0</strong>。</li>\n  <li>在<strong>“前操作”之后</strong>执行<code class=\"language-plaintext highlighter-rouge\">V(S)</code></li>\n  <li>在<strong>“后操作”之前</strong>执行<code class=\"language-plaintext highlighter-rouge\">P(S)</code></li>\n</ol>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 信号量机制实现同步 */</span>\n<span class=\"n\">semaphore</span> <span class=\"n\">mutex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"n\">Process1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"err\">代码</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"err\">代码</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">);</span>\n  <span class=\"err\">代码</span><span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">);</span>\n  <span class=\"err\">代码</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"err\">代码</span><span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"err\">代码</span><span class=\"mi\">6</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>分析：信号量S代表“某种资源”，刚开始是没有这种资源的。P2需要使用这种资源，而又只能由P1产生这种资源。</strong></p>\n\n<p>若先执行到<code class=\"language-plaintext highlighter-rouge\">V(S)</code>操作，则<code class=\"language-plaintext highlighter-rouge\">S++</code>后<code class=\"language-plaintext highlighter-rouge\">S=1</code>。\n之后当执行到<code class=\"language-plaintext highlighter-rouge\">P(S)</code>操作时，由于<code class=\"language-plaintext highlighter-rouge\">S=1</code>，表示有可用资源，会执行<code class=\"language-plaintext highlighter-rouge\">S--</code>，S的值变回0，P2进程不会执行<code class=\"language-plaintext highlighter-rouge\">block</code>原语，而是继续往下执行代码4。</p>\n\n<p>若先执行到<code class=\"language-plaintext highlighter-rouge\">P(S)</code>操作，由于<code class=\"language-plaintext highlighter-rouge\">S=0</code>，<code class=\"language-plaintext highlighter-rouge\">S--</code>后<code class=\"language-plaintext highlighter-rouge\">S=-1</code>，表示此时没有可用资源，因此P操作中会执行<code class=\"language-plaintext highlighter-rouge\">block</code>原语，主动请求阻塞。\n之后当执行完代码2，继而执行<code class=\"language-plaintext highlighter-rouge\">V(S)</code>操作，<code class=\"language-plaintext highlighter-rouge\">S++</code>，使S变回0，由于此时有进程在该信号量对应的阻塞队列中，因此会在V操作中执行<code class=\"language-plaintext highlighter-rouge\">wakeup</code>原语，唤醒P2进程。\n这样P2就可以继续执行代码4了。</p>\n\n<h2 id=\"实现进程的前驱关系\">实现进程的前驱关系</h2>\n\n<p>前驱关系问题本质上是多级同步问题，假设6个进程中的代码要求按照以下前驱图所示顺序进行执行：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量2.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>其实每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作）,因此：</p>\n<ol>\n  <li>要为<strong>每一对前驱关系</strong>各设置<strong>一个同步信号量</strong>；</li>\n  <li>在<strong>“前操作”之后</strong>对相应的同步信号量执行<strong>V操作</strong>；</li>\n  <li>在<strong>“后操作”之前</strong>对相应的同步信号量执行<strong>Р操作</strong>。</li>\n</ol>\n\n<p><img src=\"\\images\\posts\\操作系统-信号量3.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>此时的代码为：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Process1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"n\">S1</span><span class=\"p\">;</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n  <span class=\"n\">S2</span><span class=\"p\">;</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process3</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"n\">S3</span><span class=\"p\">;</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process4</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n  <span class=\"n\">S4</span><span class=\"p\">;</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process5</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span>\n  <span class=\"n\">S5</span><span class=\"p\">;</span>\n  <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Process6</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/* ... */</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span>\n  <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">);</span>\n  <span class=\"n\">S6</span><span class=\"p\">;</span>\n  <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E5%85%AB-%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5-%E4%BA%92%E6%96%A5%E5%92%8C%E5%89%8D%E9%A9%B1/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十八）信号量实现进程的同步、互斥和前驱'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2022-04-27T18:08:23+10:00'>Apr 27, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十八）信号量实现进程的同步、互斥和前驱</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十七）信号量机制",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B8%83-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/",
      "date"     : "Apr 27, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#信号量的概念\" id=\"markdown-toc-信号量的概念\">信号量的概念</a></li>\n  <li><a href=\"#整型信号量\" id=\"markdown-toc-整型信号量\">整型信号量</a></li>\n  <li><a href=\"#记录型信号量\" id=\"markdown-toc-记录型信号量\">记录型信号量</a></li>\n</ol>\n\n<h2 id=\"信号量的概念\">信号量的概念</h2>\n\n<p>用户进程可以通过使用操作系统提供的<strong>一对原语</strong>来对<strong>信号量</strong>进行操作，从而很方便地实现了进程互斥、进程同步。</p>\n\n<p><strong>信号量</strong>其实就是一个<strong>变量</strong>（可以是一个整数，也可以是更复杂的记录型变量），可以用一个信号量来<strong>表示系统中某种资源的数量</strong>。\n比如：系统中只有一台打印机，就可以设置一个初值为1的信号量。</p>\n\n<p><strong>原语</strong>是一种特殊的<strong>程序段</strong>，其执行<strong>只能一气呵成，不可被中断。</strong>\n原语是由<strong>关中断/开中断指令</strong>实现的。\n软件解决方案的主要问题是由“进入区的各种操作无法一气呵成”，因此如果能把进入区、退出区的操作都用“原语”实现，使这些操作能“一气呵成”就能避免问题。</p>\n\n<p><strong>一对原语</strong>：<code class=\"language-plaintext highlighter-rouge\">wait(S)</code>原语和<code class=\"language-plaintext highlighter-rouge\">signal(S)</code>原语，可以把原语理解为我们自己写的函数，函数名分别为<code class=\"language-plaintext highlighter-rouge\">wait</code>和<code class=\"language-plaintext highlighter-rouge\">signal</code>，括号里的信号量S其实就是函数调用时传入的一个参数。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">wait</code>、<code class=\"language-plaintext highlighter-rouge\">signal</code>原语常简称为<strong>P、V操作</strong>（来自荷兰语proberen和verhogen）。</p>\n\n<h2 id=\"整型信号量\">整型信号量</h2>\n\n<p>用一个<strong>整数型的变量</strong>作为信号量，用来表示<strong>系统中某种资源的数量</strong>。</p>\n\n<p>与普通整数变量的区别：对信号量的操作只有三种，即初始化、P操作、V操作。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// 初始化整型信号量S，表示当前系统中可用的打印机资源数。</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"c1\">// wait原语，相当于\"进入区\"</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>     <span class=\"c1\">// 如果资源数不够，就一直循环等待</span>\n    <span class=\"n\">S</span><span class=\"o\">--</span><span class=\"p\">;</span>                <span class=\"c1\">// 如果资源数够，则占用一个资源</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">signal</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"c1\">// signal原语，相当于\"退出区\"</span>\n    <span class=\"n\">S</span><span class=\"o\">++</span><span class=\"p\">;</span>                <span class=\"c1\">// 使用完资源后，在退出区释放资源</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>整型信号量中，“检查”和“上锁”一气呵成，避免了并发、异步导致的问题。</p>\n\n<p>存在的问题：<strong>不满足“让权等待”原则</strong>，会发生“忙等”。</p>\n\n<h2 id=\"记录型信号量\">记录型信号量</h2>\n\n<p>整型信号量的缺陷是存在“忙等”问题，因此人们又提出了“记录型信号量”，即用记录型数据结构表示的信号量。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 记录型信号量的定义 */</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">;</span>          <span class=\"c1\">// 剩余资源数</span>\n    <span class=\"n\">Struct</span> <span class=\"n\">process</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">;</span>  <span class=\"c1\">// 等待队列</span>\n<span class=\"p\">}</span> <span class=\"n\">semaphore</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* 某进程需要使用资源时，通过wait原语申请 */</span>\n<span class=\"kt\">void</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"n\">semaphore</span> <span class=\"n\">S</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">block</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">L</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/* 进程使用完资源后，通过signal原语释放 */</span>\n<span class=\"kt\">void</span> <span class=\"nf\">signal</span><span class=\"p\">(</span><span class=\"n\">semaphore</span> <span class=\"n\">S</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">wakeup</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">L</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>如果剩余资源数不够，使用<code class=\"language-plaintext highlighter-rouge\">block</code>原语使进程从运行态进入阻塞态，并把挂到信号量S的等待队列（即阻塞队列）中；\n释放资源后，若还有别的进程在等待这种资源<code class=\"language-plaintext highlighter-rouge\">wakeup</code>原语唤醒等待队列中的一个进程，该进程从阻塞态变为就绪态。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">wait(S)</code>、<code class=\"language-plaintext highlighter-rouge\">signal(S)</code>也可以记为<code class=\"language-plaintext highlighter-rouge\">P(S)</code>、<code class=\"language-plaintext highlighter-rouge\">V(S)</code>,这对原语可用于<strong>实现系统资源的“申请”和“释放”</strong>。</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">S.value</code>的初值表示系统中<strong>某种资源的数目</strong>。</p>\n\n<p>对信号量S的<strong>一次Р操作</strong>意味着进程<strong>请求一个单位的该类资源</strong>，因此需要执行<code class=\"language-plaintext highlighter-rouge\">S.value--</code>，表示资源数减1；\n当<code class=\"language-plaintext highlighter-rouge\">S.value &lt; 0</code>时表示该类资源己分配完毕，因此进程应调用<code class=\"language-plaintext highlighter-rouge\">block</code>原语进行<strong>自我阻塞</strong>（当前运行的进程从<strong>运行态-&gt;阻塞态</strong>），主动放弃处理机，并插入该类资源的等待队列<code class=\"language-plaintext highlighter-rouge\">S.L</code>中。\n可见，该机制<strong>遵循了“让权等待”原则</strong>,不会出现“忙等”现象。</p>\n\n<p>对信号量S的<strong>一次V操作</strong>意味着进程<strong>释放一个单位的该类资源</strong>，因此需要执行<code class=\"language-plaintext highlighter-rouge\">S.value++</code>，表示资源数加1；\n若加1后仍是<code class=\"language-plaintext highlighter-rouge\">S.value &lt;= 0</code>，表示依然有进程在等待该类资源，因此应调用<code class=\"language-plaintext highlighter-rouge\">wakeup</code>原语<strong>唤醒等待队列中的第一个进程</strong>（被唤醒进程从<strong>阻塞态-&gt;就绪态</strong>）。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B8%83-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十七）信号量机制'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-27T13:12:18+10:00'>Apr 27, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十七）信号量机制</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十六）互斥锁",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E5%85%AD-%E4%BA%92%E6%96%A5%E9%94%81/",
      "date"     : "Apr 26, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#互斥锁的概念\" id=\"markdown-toc-互斥锁的概念\">互斥锁的概念</a></li>\n  <li><a href=\"#互斥锁的特性\" id=\"markdown-toc-互斥锁的特性\">互斥锁的特性</a></li>\n</ol>\n\n<h2 id=\"互斥锁的概念\">互斥锁的概念</h2>\n<p>解决临界区最简单的工具就是互斥锁（mutex lock）。\n一个进程在进入临界区时应获得锁；在退出临界区时释放锁。\n函数<code class=\"language-plaintext highlighter-rouge\">acquire()</code>获得锁，而函数<code class=\"language-plaintext highlighter-rouge\">release()</code>释放锁。</p>\n\n<p>每个互斥锁有一个布尔变量<code class=\"language-plaintext highlighter-rouge\">available</code>，表示锁是否可用。\n如果锁是可用的，调用<code class=\"language-plaintext highlighter-rouge\">acquire()</code>会成功，且锁不再可用。\n当一个进程试图获取不可用的锁时，会被阻塞，直到锁被释放。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">acquire</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">available</span><span class=\"p\">);</span> <span class=\"c1\">// 忙等待</span>\n    <span class=\"n\">available</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>  <span class=\"c1\">// 获得锁</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">release</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">available</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>   <span class=\"c1\">// 释放锁</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">acquire()</code>或<code class=\"language-plaintext highlighter-rouge\">release()</code>的执行必须是原子操作，因此互斥锁通常采用硬件机制来实现。</p>\n\n<p>互斥锁的主要缺点是忙等待，当有一个进程在临界区中，任何其他进程在进入临界区时必连续循环调用<code class=\"language-plaintext highlighter-rouge\">acquire()</code>。\n当多个进程共享同一CPU时，就浪费了CPU周期。\n因此，互斥锁通常用于多处理器系统，一个线程可以在一个处理器上等待，不影响其他线程的执行。</p>\n\n<p>需要连续循环忙等的互斥锁（自旋等待），都可称为自旋锁（spin lock）。\n如TS、swap指令；单标志、双标志法、Peterson算法。</p>\n\n<h2 id=\"互斥锁的特性\">互斥锁的特性</h2>\n<ul>\n  <li>需忙等，进程时间片用完才下处理机，<strong>违反“让权等待”原则</strong>；</li>\n  <li>优点：等待期间<strong>不用切换进程上下文</strong>，多处理器系统中，<strong>若上锁时间短，则等待代价很低</strong>；</li>\n  <li>常用于多处理器系统，一个核忙等，其他核照常工作，并快速释放临界区；</li>\n  <li><strong>不太适用于单处理机系统</strong>，忙等的过程中不可能解锁。</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n    <span class=\"n\">acquire</span><span class=\"p\">();</span> <span class=\"c1\">// 进入区</span>\n    <span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 临界区</span>\n    <span class=\"n\">release</span><span class=\"p\">();</span> <span class=\"c1\">// 退出区</span>\n    <span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 剩余区</span>\n<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E5%85%AD-%E4%BA%92%E6%96%A5%E9%94%81/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十六）互斥锁'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-26T11:42:34+10:00'>Apr 26, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十六）互斥锁</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十五）进程互斥的硬件实现方法",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%BA%94-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/",
      "date"     : "Apr 25, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#中断屏蔽方法\" id=\"markdown-toc-中断屏蔽方法\">中断屏蔽方法</a></li>\n  <li><a href=\"#testandset指令tstsl指令\" id=\"markdown-toc-testandset指令tstsl指令\">TestAndSet指令（TS/TSL指令）</a></li>\n  <li><a href=\"#swap指令exchangexchg指令\" id=\"markdown-toc-swap指令exchangexchg指令\">Swap指令（Exchange/XCHG指令）</a></li>\n</ol>\n\n<h2 id=\"中断屏蔽方法\">中断屏蔽方法</h2>\n<p>利用“开/关中断指令”实现。\n与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不能发生进程切换，因此也不可能发生两个同时访问临界区的情况。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n关中断指令;\n临界区;\n开中断指令;\n...\n</code></pre></div></div>\n\n<ul>\n  <li><strong>关中断指令</strong>：关中断后即不允许当前进程被中断，也必然不会发生进程切换；</li>\n  <li>\n    <p><strong>开中断指令</strong>：直到当前进程访问完临界区,再执行开中断指令，才有可能有别的进程上处理机并访问临界区。</p>\n  </li>\n  <li>优点：简单、高效</li>\n  <li>缺点：<strong>不适用于多处理机</strong>；只适用于操作系统内核进程，<strong>不适用于用户进程</strong>（因为开/关中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险）。</li>\n</ul>\n\n<h2 id=\"testandset指令tstsl指令\">TestAndSet指令（TS/TSL指令）</h2>\n<p>TS指令是用硬件实现的，<strong>执行的过程不允许被中断</strong>，只能一气呵成。以下是用c语言描述的逻辑：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* 布尔型共享变量lock表示当前临界区是否被加锁\n * true表示已加锁,false表示未加锁 \n */</span>\n<span class=\"n\">bool</span> <span class=\"nf\">testAndSet</span> <span class=\"p\">(</span><span class=\"n\">bool</span> <span class=\"o\">*</span><span class=\"n\">lock</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">bool</span> <span class=\"n\">old</span><span class=\"p\">;</span> \n    <span class=\"n\">old</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">lock</span><span class=\"p\">;</span> <span class=\"c1\">// old 用来存放lock原来的值</span>\n    <span class=\"o\">*</span><span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 无论是否已加锁，都设置为true</span>\n    <span class=\"k\">return</span> <span class=\"n\">old</span><span class=\"p\">;</span> <span class=\"c1\">// 返回lock原来的值</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/* 使用TSL指令实现互斥的算法逻辑 */</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">testAndSet</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">lock</span><span class=\"p\">));</span> <span class=\"c1\">// 上锁并检查</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 临界区代码</span>\n<span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 解锁操作</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 剩余区代码</span>\n</code></pre></div></div>\n\n<p>若刚开始lock是false，则TS返回的old值为false，while循环条件不满足，直接跳过循环，进入临界区；\n若刚开始lock是true，则执行TS后old返回的值为true，while循环条件满足，会一直循环，直到当前访问临界区的进程在退出区进行“解锁”。\n相比软件实现方法，TS指令把<strong>“上锁”和“检查”</strong>操作<strong>用硬件的方式</strong>变成了一气呵成的<strong>原子操作</strong>。</p>\n\n<ul>\n  <li>优点：实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；<strong>适用于多处理机</strong>环境；</li>\n  <li>缺点：<strong>不满足“让权等待”原则</strong>，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”。</li>\n</ul>\n\n<h2 id=\"swap指令exchangexchg指令\">Swap指令（Exchange/XCHG指令）</h2>\n<p>Swap指令是用硬件实现的，执行的过程不允许被中断，只能一气呵成。以下是用c语言描述的逻辑：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* Swap指令是交换两个变量的值 */</span>\n<span class=\"n\">swap</span> <span class=\"p\">(</span><span class=\"n\">bool</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">bool</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">bool</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"o\">*</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/* 使用Swap指令实现互斥的算法逻辑 */</span>\n<span class=\"n\">bool</span> <span class=\"n\">old</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">old</span> <span class=\"o\">==</span> <span class=\"nb\">true</span><span class=\"p\">)</span>\n    <span class=\"n\">swap</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">lock</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">old</span><span class=\"p\">);</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 临界区代码</span>\n<span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 解锁操作</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 剩余区代码</span>\n</code></pre></div></div>\n\n<p>逻辑上来看Swap和TS并无太大区别，都是先记录下此时临界区是否已经被上锁（记录在old变量上），再将上锁标记lock设置为true，最后检查old。\n如果old为false则说明之前没有别的进程对临界区上锁，则可跳出循环，进入临界区。</p>\n\n<ul>\n  <li>优点：实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；<strong>适用于多处理机</strong>环境；</li>\n  <li>缺点：<strong>不满足“让权等待”原则</strong>，暂时无法进入临界区的进程会占用CPU并循环执行Swap指令，从而导致“忙等”。</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%BA%94-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十五）进程互斥的硬件实现方法'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-25T17:24:46+10:00'>Apr 25, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十五）进程互斥的硬件实现方法</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十四）进程互斥的软件实现方法",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E5%9B%9B-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/",
      "date"     : "Apr 25, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#单标志法\" id=\"markdown-toc-单标志法\">单标志法</a></li>\n  <li><a href=\"#双标志先检查法\" id=\"markdown-toc-双标志先检查法\">双标志先检查法</a></li>\n  <li><a href=\"#双标志后检查法\" id=\"markdown-toc-双标志后检查法\">双标志后检查法</a></li>\n  <li><a href=\"#peterson算法\" id=\"markdown-toc-peterson算法\">Peterson算法</a></li>\n</ol>\n\n<h2 id=\"单标志法\">单标志法</h2>\n\n<p>算法思想：两个进程中，一个进程在<strong>访问完临界区后</strong>会把使用临界区的<strong>权限转交</strong>给另一个进程。\n也就是说每个进程进入临界区的权限只能被另一个进程赋予。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// turn表示当前允许进入临界区的进程号</span>\n\n<span class=\"cm\">/* P0进程 */</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">turn</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// 1.进入区</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 2.临界区</span>\n<span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// 3.退出区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 4.剩余区</span>\n\n<span class=\"cm\">/* P1进程 */</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">turn</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// 5.进入区</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 6.临界区</span>\n<span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 7.退出区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 8.剩余区</span>\n</code></pre></div></div>\n\n<p>turn的初值为0，即刚开始只允许О号进程进入临界区。</p>\n\n<p>若P1先上处理机运行，则会一直卡在5。\n直到P1的时间片用完，发生调度，切换PO上处理机运行。\n代码1不会卡住PO，PO可以正常访问临界区，在PO访问临界区期间即时切换回P1, P1依然会卡在5。</p>\n\n<p>只有PO在退出区将turn改为1后，P1才能进入临界区。\n因此，该算法<strong>可以实现“同一时刻最多只允许一个进程访问临界区”</strong>。</p>\n\n<p>缺点：\n只能按PO-&gt;P1-&gt;PO-&gt;P1这样轮流访问。\n这种必须“轮流访问”带来的问题是，如果此时允许进入临界区的进程是PO，而PO一直不访问临界区，那么虽然此时临界区空闲，但是并不允许P1访问。</p>\n\n<p>因此，<strong>单标志法</strong>存在的主要问题是：<strong>违背“空闲让进”原则。</strong></p>\n\n<h2 id=\"双标志先检查法\">双标志先检查法</h2>\n<p>算法思想：设置一个布尔型数组<code class=\"language-plaintext highlighter-rouge\">flag[0]</code>，数组中各个元素用来<strong>标记各进程想进入临界区的意愿。</strong>\n比如<code class=\"language-plaintext highlighter-rouge\">flag[0]=ture</code>意味着0号进程P0现在想要进入临界区。\n每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区，如果没有，则把自身对应的标志<code class=\"language-plaintext highlighter-rouge\">flag[i]</code>设为<code class=\"language-plaintext highlighter-rouge\">true</code>，之后开始访问临界区。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bool</span> <span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span> <span class=\"c1\">// 表示进入临界区意愿的数组</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* P0进程 */</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span> <span class=\"c1\">// 1.</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 2.修改标记为想要进入临界区</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 3.临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 4.退出区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n\n<span class=\"cm\">/* P1进程 */</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span> <span class=\"c1\">// 5.</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 6.修改标记为想要进入临界区</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 7.临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 8.退出区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n</code></pre></div></div>\n\n<p>若按照152637的顺序执行，PO和P1将会同时访问临界区。</p>\n\n<p>因此，<strong>双标志先检查法</strong>的主要问题是：<strong>违反“忙则等待”原则。</strong></p>\n\n<p>原因在于，<strong>进入区</strong>的“检查”和“上锁”<strong>两个处理不是一气呵成</strong>的。“检查”后，“上锁”前可能发生进程切换。</p>\n\n<h2 id=\"双标志后检查法\">双标志后检查法</h2>\n\n<p>算法思想：双标志先检查法的改版。\n前一个算法的问题是先“检查”后“上锁”，但是这两个操作又无法一气呵成，因此导致了两个进程同时进入临界区的问题。\n因此，人们又想到先“上锁”后“检查”的方法，来避免上述问题。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bool</span> <span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span> <span class=\"c1\">// 表示进入临界区意愿的数组</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* P0进程 */</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 1.修改标记为想要进入临界区</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span> <span class=\"c1\">// 2.如果P1也想进入临界区，则P0循环等待</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 3.临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 4.退出区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n\n<span class=\"cm\">/* P1进程 */</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 5.修改标记为想要进入临界区</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span> <span class=\"c1\">// 6.如果P0也想进入临界区，则P1循环等待</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 7.临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 8.退出区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n</code></pre></div></div>\n\n<p>若按照1526的顺序执行，P0和P1将都无法进入临界区。</p>\n\n<p>因此，<strong>双标志后检查法</strong>虽然<strong>解决了“忙则等待”的问题</strong>，但是又<strong>违背了“空闲让进”和“有限等待”原则</strong>，会因各进程都长期无法访问临界资源而<strong>产生“饥饿”</strong>现象。</p>\n\n<h2 id=\"peterson算法\">Peterson算法</h2>\n\n<p>算法思想：结合双标志法、单标志法的思想。如果双方都争着想进入临界区，那可以让进程尝试谦让。</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bool</span> <span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span> <span class=\"c1\">// 表示进入临界区意愿的数组</span>\n<span class=\"kt\">int</span> <span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// turn 表示优先让哪个线程进入临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* P0进程 */</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 1.进入区，表示自己想要进入临界区</span>\n<span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// 2.进入区，表示可以优先让对方进入临界区</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">turn</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// 3.进入区，如果对方想进且最后一次是自己谦让则进行循环等待</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 4.临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 5.退出区，表示自己不想访问临界区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n\n<span class=\"cm\">/* P1进程 */</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// 6.进入区，表示自己想要进入临界区</span>\n<span class=\"n\">turn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 7.进入区，可以优先让对方进入临界区</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">turn</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// 8.进入区，如果对方想进且最后一次是自己谦让则进行循环等待</span>\n<span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 9.临界区</span>\n<span class=\"n\">flag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 10.退出区，表示自己不想访问临界区</span>\n<span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> \n</code></pre></div></div>\n\n<p><strong>Peterson算法</strong>用软件方法解决了进程互斥问题，<strong>遵循了空闲让进、忙则等待、有限等待三个原则</strong>，但是依然<strong>未遵循让权等待的原则。</strong></p>\n\n<p>Peterson算法相较于之前三种软件解决方案来说，是最好的，但依然不够好。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E5%9B%9B-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十四）进程互斥的软件实现方法'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2022-04-25T12:56:13+10:00'>Apr 25, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十四）进程互斥的软件实现方法</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十三）进程同步与互斥",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B8%89-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5/",
      "date"     : "Apr 25, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#进程同步\" id=\"markdown-toc-进程同步\">进程同步</a></li>\n  <li><a href=\"#进程互斥\" id=\"markdown-toc-进程互斥\">进程互斥</a>    <ol>\n      <li><a href=\"#进程互斥的概念\" id=\"markdown-toc-进程互斥的概念\">进程互斥的概念</a></li>\n      <li><a href=\"#互斥访问的四个部分\" id=\"markdown-toc-互斥访问的四个部分\">互斥访问的四个部分</a></li>\n      <li><a href=\"#互斥访问临界资源的四个原则\" id=\"markdown-toc-互斥访问临界资源的四个原则\">互斥访问临界资源的四个原则</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"进程同步\">进程同步</h2>\n\n<p>进程具有异步性的特征。异步性是指，各并发执行的进程以各自独立的、不可预知的速度向前推进。</p>\n\n<p>如图，前文的管道通信可以作为一个进程同步的例子。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-管道通信.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>在管道中，读进程和写进程并发地运行，由于并发必然导致异步性，因此“写数据”和“读数据”两个操作执行的<strong>先后顺序是不确定</strong>的。\n而<strong>实际应用中</strong>，又<strong>必须</strong>按照<strong>“写数据→读数据”的顺序</strong>来执行的。\n如何解决这种异步问题，就是“进程同步”所讨论的内容。</p>\n\n<p>操作系统要提供“进程同步机制”来实现上述需求。</p>\n\n<p><strong>同步</strong>亦称<strong>直接制约关系</strong>，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要<strong>在某些位置上协调它们的工作次序而产生的制约关系</strong>。\n进程间的直接制约关系就是源于它们之间的相互合作。</p>\n\n<h2 id=\"进程互斥\">进程互斥</h2>\n\n<h3 id=\"进程互斥的概念\">进程互斥的概念</h3>\n\n<p>进程的“并发”需要“共享”的支持。各个并发执行的进程不可避免的需要共享一些系统资源（比如内存，又比如打印机、摄像头这样的I/O设备）</p>\n\n<p>资源共享方式包括<strong>互斥共享方式</strong>和<strong>同时共享方式</strong>：</p>\n<ul>\n  <li>互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但<strong>一个时间段内只允许一个进程访问该资源</strong>；</li>\n  <li>同时共享方式：系统中的某些资源，<strong>允许一个时间段内由多个进程“同时”对它们进行访问</strong>。</li>\n</ul>\n\n<p>我们把<strong>一个时间段内只允许一个进程使用</strong>的资源称为<strong>临界资源</strong>。\n许多物理设备（比如摄像头、打印机）都属于临界资源。\n此外还有许多变量、数据、内存缓冲区等都属于临界资源。</p>\n\n<p>对临界资源的访问，必须<strong>互斥地</strong>进行。\n互斥，亦称<strong>间接制约关系</strong>。\n<strong>进程互斥</strong>指当一个<strong>进程访问某临界资源</strong>时，<strong>另一个想要访问该临界资源的进程必须等待</strong>。\n当前访问临界资源的进程访问结束，<strong>释放该资源之后</strong>，<strong>另一个进程才能去访问临界资源</strong>。</p>\n\n<h3 id=\"互斥访问的四个部分\">互斥访问的四个部分</h3>\n\n<p>对临界资源的互斥访问，可以在逻辑上分为如下四个部分:</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n    <span class=\"n\">entry</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 进入区</span>\n    <span class=\"n\">critical</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 临界区</span>\n    <span class=\"n\">exit</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 退出区</span>\n    <span class=\"n\">remainder</span> <span class=\"n\">section</span><span class=\"p\">;</span> <span class=\"c1\">// 剩余区</span>\n<span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<ul>\n  <li><strong>进入区</strong>负责检查是否可进入临界区，若可进入，则应设置正在访问临界资源的标志（上锁），以阻止其他进程同时进入临界区；</li>\n  <li><strong>临界区</strong>是访问资源的那段代码；</li>\n  <li><strong>退出区</strong>负责解除正在访问临界资源的标志（解锁）；</li>\n  <li>剩余区做其他处理。</li>\n</ul>\n\n<p>注意:\n<strong>临界区</strong>是进程中<strong>访问临界资源</strong>的代码段。</p>\n\n<p><strong>进入区和退出区</strong>是负责<strong>实现互斥的代码段</strong>。</p>\n\n<p>临界区也可称为“临界段”。</p>\n\n<h3 id=\"互斥访问临界资源的四个原则\">互斥访问临界资源的四个原则</h3>\n\n<p>为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则：</p>\n\n<ol>\n  <li><strong>空闲让进</strong>。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区；</li>\n  <li><strong>忙则等待</strong>。当已有进程进入临界区时，其他试图进入临界区的进程必须等待；</li>\n  <li><strong>有限等待</strong>。对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）；</li>\n  <li><strong>让权等待</strong>。当进程不能进入临界区时，应<strong>立即释放处理机</strong>，防止进程忙等待。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B8%89-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十三）进程同步与互斥'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-25T12:21:08+10:00'>Apr 25, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十三）进程同步与互斥</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十二）RR、PSA、MLFQ调度算法",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%BA%8C-RR-PSA-MLFQ%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/",
      "date"     : "Apr 24, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#简介\" id=\"markdown-toc-简介\">简介</a></li>\n  <li><a href=\"#rr算法\" id=\"markdown-toc-rr算法\">RR算法</a>    <ol>\n      <li><a href=\"#rr算法特点\" id=\"markdown-toc-rr算法特点\">RR算法特点</a></li>\n      <li><a href=\"#例子\" id=\"markdown-toc-例子\">例子</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#psa算法\" id=\"markdown-toc-psa算法\">PSA算法</a>    <ol>\n      <li><a href=\"#psa算法特点\" id=\"markdown-toc-psa算法特点\">PSA算法特点</a></li>\n      <li><a href=\"#非抢占式psa\" id=\"markdown-toc-非抢占式psa\">非抢占式PSA</a></li>\n      <li><a href=\"#抢占式psa\" id=\"markdown-toc-抢占式psa\">抢占式PSA</a></li>\n      <li><a href=\"#补充\" id=\"markdown-toc-补充\">补充</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#mlfq算法\" id=\"markdown-toc-mlfq算法\">MLFQ算法</a>    <ol>\n      <li><a href=\"#mlfq算法特点\" id=\"markdown-toc-mlfq算法特点\">MLFQ算法特点</a></li>\n      <li><a href=\"#例子-1\" id=\"markdown-toc-例子-1\">例子</a></li>\n      <li><a href=\"#补充-1\" id=\"markdown-toc-补充-1\">补充</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"简介\">简介</h2>\n\n<p>本章介绍三种适用于<strong>交互式系统</strong>的调度算法。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法</th>\n      <th>可抢占</th>\n      <th>优点</th>\n      <th>缺点</th>\n      <th>会导致饥饿</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>RR</td>\n      <td>抢占式</td>\n      <td>公平，适用于分时系统</td>\n      <td>频繁切换存在开销；不区分优先级</td>\n      <td>不会</td>\n    </tr>\n    <tr>\n      <td>PSA</td>\n      <td>有抢占式，也有非抢占式</td>\n      <td>区分优先级，适用于实时系统</td>\n      <td>可能导致饥饿</td>\n      <td>会</td>\n    </tr>\n    <tr>\n      <td>MLFQ</td>\n      <td>抢占式</td>\n      <td>平衡、优秀</td>\n      <td>可能导致饥饿</td>\n      <td>会</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>比起早期的批处理操作系统来说，由于计算机造价大幅降低 因此之后出现的交互式操作系统（包括分时操作系统、实时操作系统等）更注重系统的响应时间、公平性、平衡性等指标。\n而这几种算法恰好能较好地满足交互式系统的需求。因此<strong>这三种算法适合用于交互式系统</strong>。（比如UNIX使用的就是多级反馈队列调度算法）</p>\n\n<h2 id=\"rr算法\">RR算法</h2>\n\n<h3 id=\"rr算法特点\">RR算法特点</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法名</th>\n      <th>时间片轮转（Round-Robin，RR）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>算法思想</td>\n      <td>公平地、轮流地为各个进程服务，让每个进程在一定时间间隔内都可以得到响应</td>\n    </tr>\n    <tr>\n      <td>算法规则</td>\n      <td>按照各进程到达就绪队列的顺序，轮流让各个进程执行一个<strong>时间片</strong>（如100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队。</td>\n    </tr>\n    <tr>\n      <td>用于作业/进程调度</td>\n      <td>用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理机时间片）</td>\n    </tr>\n    <tr>\n      <td>是否可抢占</td>\n      <td>若进程未能在时间片内运行完，将被强行剥夺处理机使用权，因此时间片轮转调度算法属于<strong>抢占式</strong>的算法。由时钟装置发出<strong>时钟中断</strong>来通知CPU时间片已到</td>\n    </tr>\n    <tr>\n      <td>优缺点</td>\n      <td>优点：公平、响应快，适用于分时操作系统；<br />缺点：由于高频率的进程切换，因此有一定开销；不区分任务的紧急程度。</td>\n    </tr>\n    <tr>\n      <td>是否会导致饥饿</td>\n      <td>不会</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"例子\">例子</h3>\n\n<p>各进程到达就绪队列的时间、需要的运行时间如下表所示。使用<strong>时间片轮转调度</strong>算法，分析时间片大小分别是2、5时的进程运行情况。</p>\n\n<p>注意：常用于分时操作系统，更注重响应时间，因而此处不计算周转时间。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>到达时间</th>\n      <th>运行时间</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P1</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>P4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>时间片轮转调度算法</strong>轮流让就绪队列中的进程依次执行一个时间片（每次选择的都是排在就绪队列队头的进程）</p>\n\n<ul>\n  <li>时间片大小为2</li>\n</ul>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>就绪队列</th>\n      <th>分析</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td><strong>P1(5)</strong></td>\n      <td>只有P1到达就绪队列，让P1上处理机运行一个时间片</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td><strong>P2(4)</strong>-&gt;P1(3)</td>\n      <td>P2到达就绪队列，P1运行完一个时间片，被剥夺处理机，重新放到队尾。此时P2排在队头，因此让P2上处理机。（注意：2时刻，P1下处理机，同一时刻新进程P2到达，<strong>默认新到达的进程先进入就绪队列</strong>）</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td><strong>P1(3)</strong>-&gt;P3(1)-&gt;P2(2)</td>\n      <td>P3到达，先插到就绪队尾，紧接着，P2下处理机也插到队尾</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>P3(1)-&gt;P2(2)-&gt;P4(6)</td>\n      <td>P4到达插到就绪队尾。由于P1的时间片还没用完，因此暂时不调度。另外，此时P1处于运行态，并不在就绪队列中</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td><strong>P3(1)</strong>-&gt;P2(2)-&gt;P4(6)-&gt;P1(1)</td>\n      <td>P1时间片用完，下处理机，重新放回就绪队尾，发生调度</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td><strong>P2(2)</strong>-&gt;P4(6)-&gt;P1(1)</td>\n      <td>虽然P3的时间片没用完，但是由于P3只需运行1个单位的时间。运行完了会<strong>主动放弃处理机</strong>，因此也会发生调度。队头进程P2上处理机。</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td><strong>P4(6)</strong>-&gt;P1(1)</td>\n      <td>进程P2时间片用完，并刚好运行完，发生调度，P4上处理机</td>\n    </tr>\n    <tr>\n      <td>11</td>\n      <td><strong>P1(1)</strong>-&gt;P4(4)</td>\n      <td>P4时间片用完，重新回到就绪队列。P1上处理机</td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td><strong>P4(4)</strong></td>\n      <td>P1运行完，主动放弃处理机，此时就绪队列中只剩P4，P4上处理机</td>\n    </tr>\n    <tr>\n      <td>14</td>\n      <td>-</td>\n      <td>就绪队列为空，因此让P4接着运行一个时间片</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法5.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ul>\n  <li>时间片大小为5</li>\n</ul>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>就绪队列</th>\n      <th>分析</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td><strong>P1(5)</strong></td>\n      <td>只有P1到达，P1上处理机</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>P2(4)</td>\n      <td>P2到达，但P1时间片尚未结束，因此<strong>暂不调度</strong></td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>P2(4)-&gt;P3(1)</td>\n      <td>P3到达，但P1时间片尚未结束，因此暂不调度</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td><strong>P2(4)</strong>-&gt;P3(1)-&gt;P4(6)</td>\n      <td>P4到达，同时，P1运行结束。发生调度，P2上处理机</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td><strong>P3(1)</strong>-&gt;P4(6)</td>\n      <td>P2运行结束，虽然时间片没用完，但是会主动放弃处理机。发生调度</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td><strong>P4(6)</strong></td>\n      <td>P3运行结束，虽然时间片没用完，但是会主动放弃处理机。发生调度</td>\n    </tr>\n    <tr>\n      <td>15</td>\n      <td>-</td>\n      <td>P4时间片用完，但就绪队列为空，因此会让P4继续执行一个时间片</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法6.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"psa算法\">PSA算法</h2>\n\n<h3 id=\"psa算法特点\">PSA算法特点</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法名</th>\n      <th>优先级调度（Priority Scheduling Algorithm，PSA）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>算法思想</td>\n      <td>随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的紧急程度来决定处理顺序</td>\n    </tr>\n    <tr>\n      <td>算法规则</td>\n      <td>每个作业/进程有各自的优先级，调度时选择优先级最高的作业/进程</td>\n    </tr>\n    <tr>\n      <td>用于作业/进程调度</td>\n      <td>既可用于作业调度，也可用于进程调度。甚至，还会用于在之后的I/O调度中</td>\n    </tr>\n    <tr>\n      <td>是否可抢占</td>\n      <td>抢占式、非抢占式都有。非抢占式只需在进程主动放弃处理机时进行调度即可，而抢占式还需在就绪队列变化时，检查是否会发生抢占。</td>\n    </tr>\n    <tr>\n      <td>优缺点</td>\n      <td>优点：用优先级区分紧急程度、重要程度，适用于实时操作系统。可灵活地调整对各种作业/进程的偏好程度。<br />缺点：若源源不断地有高优先级进程到来，则可能导致饥饿</td>\n    </tr>\n    <tr>\n      <td>是否会导致饥饿</td>\n      <td>会</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"非抢占式psa\">非抢占式PSA</h3>\n<p>各进程到达就绪队列的时间、需要的运行时间、进程优先数如下表所示。使用<strong>非抢占式的优先级调度算法</strong>，分析进程运行情况。（注：优先数越大，优先级越高)</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>到达时间</th>\n      <th>运行时间</th>\n      <th>优先数</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P1</td>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>P4</td>\n      <td>5</td>\n      <td>4</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>非抢占式的优先级调度算法</strong>：每次调度时选择<strong>当前已到达且优先级最高</strong>的进程。当前进程<strong>主动放弃处理机时</strong>发生调度。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>就绪队列</th>\n      <th>分析</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td><strong>P1</strong></td>\n      <td>只有P1到达，P1上处理机</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>P2、<strong>P3</strong>、P4</td>\n      <td>P1运行完成主动放弃处理机，其余进程都已到达，P3优先级最高，P3上处理机</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td><strong>P2</strong>、P4</td>\n      <td>P3完成，P2、P4优先级相同，由于P2先到达，因此P2优先上处理机</td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td><strong>P4</strong></td>\n      <td>P2完成，就绪队列只剩P4，P4上处理机</td>\n    </tr>\n    <tr>\n      <td>16</td>\n      <td>-</td>\n      <td>P4完成，所有进程都结束</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法7.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h3 id=\"抢占式psa\">抢占式PSA</h3>\n<p>抢占式的优先级调度算法：每次调度时选择<strong>当前已到达且优先级最高</strong>的进程。当前进程<strong>主动放弃处理机时</strong>发生调度。\n另外，当<strong>就绪队列发生改变</strong>时也需要检查是会发生抢占。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>就绪队列</th>\n      <th>分析</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td><strong>P1</strong></td>\n      <td>只有P1到达，P1上处理机</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>P1、<strong>P2</strong></td>\n      <td>P2到达就绪队列，优先级比P1更高，发生抢占。P1回到就绪队列，P2上处理机。</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>P1、P2、<strong>P3</strong></td>\n      <td>P3到达，优先级比P2更高，P2回到就绪队列，P3抢占处理机</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>P1、<strong>P2</strong>、P4</td>\n      <td>P3完成，主动释放处理机，同时，P4也到达，由于P2比P4更先进入就绪队列，因此选择P2上处理机</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>P1、<strong>P4</strong></td>\n      <td>P2完成，就绪队列只剩P1、P4，P4上处理机。</td>\n    </tr>\n    <tr>\n      <td>11</td>\n      <td><strong>P1</strong></td>\n      <td>P4完成，P1上处理机</td>\n    </tr>\n    <tr>\n      <td>16</td>\n      <td>-</td>\n      <td>P1完成，所有进程都结束</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法8.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h3 id=\"补充\">补充</h3>\n\n<p>就绪队列未必只有一个，可以按照不同优先级来组织。另外，也可以把优先级高的进程排在更靠近队头的位置；</p>\n\n<p>根据优先级是否可以动态改变，可将优先级分为<strong>静态优先级</strong>和<strong>动态优先级</strong>两种：</p>\n<ul>\n  <li>静态优先级:创建进程时确定，之后一直不变；</li>\n  <li>动态优先级:创建进程时有一个初始值，之后会根据情况动态地调整优先级。</li>\n</ul>\n\n<p>通常情况下：</p>\n<ul>\n  <li>系统进程优先级<strong>高于</strong>用户进程；</li>\n  <li>前台进程优先级<strong>高于</strong>后台进程；</li>\n  <li>操作系统更偏好I/O型进程（或称I/O繁忙型进程，I/O设备和CPU可以<strong>并行</strong>工作。如果优先让I/O繁忙型进程运行的话，则越有可能让I/O设备尽早地投入工作，则资源利用率、系统吞吐量都会得到提升。）</li>\n</ul>\n\n<p>与I/O型进程相对的是计算型进程（或称CPU繁忙型进程）</p>\n\n<p>可以从追求公平、提升资源利用率等角度考虑动态优先级的调整：</p>\n<ul>\n  <li>如果某进程在就绪队列中等待了很长时间，则可以适当提升其优先级；</li>\n  <li>如果某进程占用处理机运行了很长时间，则可适当降低其优先级；</li>\n  <li>如果发现一个进程频繁地进行I/O操作，则可适当提升其优先级。</li>\n</ul>\n\n<h2 id=\"mlfq算法\">MLFQ算法</h2>\n\n<h3 id=\"mlfq算法特点\">MLFQ算法特点</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法名</th>\n      <th>多级反馈队列调度算法（Multi-Level Feedback Queue，MLFQ）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>算法思想</td>\n      <td>对其他调度算法的折中权衡</td>\n    </tr>\n    <tr>\n      <td>算法规则</td>\n      <td>1．设置多级就绪队列，各级队列<strong>优先级从高到低，时间片从小到大</strong><br />2．新进程到达时先进入第1级队列，按<strong>FCFS原则排队等待</strong>被分配时间片，若<strong>用完时间片进程还未结束，则进程进入下一级队列队尾</strong>。 如果此时已经是在最下级的队列，则重新放回该队列队尾<br />3．只有<strong>第k级队列为空时，才会为k+1级队头的进程分配时间片</strong></td>\n    </tr>\n    <tr>\n      <td>用于作业/进程调度</td>\n      <td>用于进程调度</td>\n    </tr>\n    <tr>\n      <td>是否可抢占</td>\n      <td><strong>抢占式</strong>的算法。在k级队列的进程运行过程中，若更上级的队列(1~k-1级）中进入了一个新进程，则由于新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回k级队列队尾。</td>\n    </tr>\n    <tr>\n      <td>优缺点</td>\n      <td>对各类型进程相对公平（FCFS的优点）；每个新到达的进程都可以很快就得到响应（RR的优点）；短进程只用较少的时间就可完成（SPF的优点）；不必实现估计进程的运行时间（避免用户作假）；可灵活地调整对各类进程的偏好程度，比如CPU密集型进程、I/O密集型进程（可以将因I/O而阻塞的进程重新放回原队列，这样I/O型进程就可以保持较高优先级）</td>\n    </tr>\n    <tr>\n      <td>是否会导致饥饿</td>\n      <td>会</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"例子-1\">例子</h3>\n<p>各进程到达就绪队列的时间、需要的运行时间如下表所示。使用多级反馈队列调度算法，分析进程的运行过程。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>到达时间</th>\n      <th>运行时间</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P1</td>\n      <td>0</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>5</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>设置多级就绪队列，各级队列<strong>优先级从高到低，时间片从小到大；</strong></p>\n\n<p><strong>新进程到达时先进入第1级队列</strong>，按<strong>FCFS原则</strong>排队等待被分配时间片。若用完时间片进程还未结束，则进程进入下一级队列队尾。\n如果此时已经在最下级的队列，则重新放回最下级队列队尾；</p>\n\n<p>只有<strong>第k级队列为空</strong>时，才会<strong>为k+1级队头的进程分配时间片</strong>；</p>\n\n<p><strong>被抢占处理机的进程</strong>重新放回<strong>原队列队尾</strong>。</p>\n\n<p>假设此时的多级反馈队列共3级，3级队列优先级从高到低，时间片分别为1、2、4。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>第1级队列（时间片1）</th>\n      <th>第2级队列（时间片2）</th>\n      <th>第3级队列（时间片4）</th>\n      <th>分析</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td><strong>P1（8）</strong></td>\n      <td>-</td>\n      <td>-</td>\n      <td>仅有P1到达，上处理机</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td><strong>P2（4）</strong></td>\n      <td>P1（7）</td>\n      <td>-</td>\n      <td>P1<strong>时间片用完，但任务未结束，放到第2级队列</strong>，同时P2到达第1级队列，优先上处理机运行</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>-</td>\n      <td><strong>P1（7）</strong>-&gt;P2（3）</td>\n      <td>-</td>\n      <td>P2时间片用完，但任务未结束，放到第2级队列，此时第1级队列为空，第2级队列队头的P1上处理机运行</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>-</td>\n      <td><strong>P2（3）</strong></td>\n      <td>P1（5）</td>\n      <td>P1时间片用完，但任务未结束，放到第3级队列，此时第1级队列为空，P2上处理机运行</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td><strong>P3（1）</strong></td>\n      <td>P2（2）</td>\n      <td>P1（5）</td>\n      <td>P3到达，处于更高的优先级队列，<strong>抢占处理机</strong>，P2下处理机，被<strong>重新放回原队列队尾</strong></td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>-</td>\n      <td><strong>P2（2）</strong></td>\n      <td>P1（5）</td>\n      <td>P3运行结束，第2级队列的P2上处理机</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>-</td>\n      <td>-</td>\n      <td><strong>P1（5）</strong></td>\n      <td>P2运行结束，第3级队列的P1上处理机</td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td>-</td>\n      <td>-</td>\n      <td><strong>P1（1）</strong></td>\n      <td>P1时间片用完，第3级队列已经是<strong>最低级，重新放回</strong>，且队列中仅剩P1，上处理机</td>\n    </tr>\n    <tr>\n      <td>13</td>\n      <td>-</td>\n      <td>-</td>\n      <td>-</td>\n      <td>全部程序运行结束</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"补充-1\">补充</h3>\n\n<p>MLFQ不仅可以使用固定优先级和FCFS的调度策略，还可以灵活选用别的优先级划分和调度策略。</p>\n\n<p>如图，系统中按进程类型设置多个队列，进程创建成功后插入某个队列。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法9.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>队列之间可采取固定优先级，或<strong>时间片划分</strong>：</p>\n<ul>\n  <li>固定优先级：高优先级空时低优先级进程才能被调度；</li>\n  <li>时间片划分：如三个队列分配时间50%、40%、10%</li>\n</ul>\n\n<p>各队列可采用不同的调度策略，如：</p>\n<ul>\n  <li>系统进程队列采用PSA</li>\n  <li>交互式队列采用RR</li>\n  <li>批处理队列采用FCFS</li>\n</ul>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%BA%8C-RR-PSA-MLFQ%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十二）RR、PSA、MLFQ调度算法'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2022-04-24T13:57:12+10:00'>Apr 24, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十二）RR、PSA、MLFQ调度算法</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十一）FCFS、SJF、HRRN调度算法",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B8%80-FCFS-SJF-HRRN%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/",
      "date"     : "Apr 24, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#简介\" id=\"markdown-toc-简介\">简介</a></li>\n  <li><a href=\"#fcfs算法\" id=\"markdown-toc-fcfs算法\">FCFS算法</a>    <ol>\n      <li><a href=\"#fcfs算法特点\" id=\"markdown-toc-fcfs算法特点\">FCFS算法特点</a></li>\n      <li><a href=\"#例子\" id=\"markdown-toc-例子\">例子</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#sjf算法\" id=\"markdown-toc-sjf算法\">SJF算法</a>    <ol>\n      <li><a href=\"#sjf算法特点\" id=\"markdown-toc-sjf算法特点\">SJF算法特点</a></li>\n      <li><a href=\"#例子-1\" id=\"markdown-toc-例子-1\">例子</a></li>\n      <li><a href=\"#抢占式版本srtn算法\" id=\"markdown-toc-抢占式版本srtn算法\">抢占式版本——SRTN算法</a></li>\n      <li><a href=\"#注意\" id=\"markdown-toc-注意\">注意</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#hrrn算法\" id=\"markdown-toc-hrrn算法\">HRRN算法</a>    <ol>\n      <li><a href=\"#关于fcfs和sjf的思考\" id=\"markdown-toc-关于fcfs和sjf的思考\">关于FCFS和SJF的思考</a></li>\n      <li><a href=\"#响应比\" id=\"markdown-toc-响应比\">响应比</a></li>\n      <li><a href=\"#hrrn算法特点\" id=\"markdown-toc-hrrn算法特点\">HRRN算法特点</a></li>\n      <li><a href=\"#例子-2\" id=\"markdown-toc-例子-2\">例子</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"简介\">简介</h2>\n\n<p>本章介绍三种适用于<strong>早期批处理系统</strong>的调度算法。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法</th>\n      <th>可抢占</th>\n      <th>优点</th>\n      <th>缺点</th>\n      <th>考虑运行和等待时间</th>\n      <th>会导致饥饿</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>FCFS</td>\n      <td>非抢占</td>\n      <td>公平、实现简单</td>\n      <td>对短作业不利</td>\n      <td>等待时间√<br />运行时间×</td>\n      <td>不会</td>\n    </tr>\n    <tr>\n      <td>SJF/SPF</td>\n      <td>非抢占，也有抢占式版本最短剩余时间优先算法（SRTN）</td>\n      <td>几乎最短的平均等待时间/周转时间</td>\n      <td>对长作业不利，可能导致饥饿；<br />难以实现真正的短作业优先</td>\n      <td>等待时间×<br />运行时间√</td>\n      <td>会</td>\n    </tr>\n    <tr>\n      <td>HRRN</td>\n      <td>非抢占</td>\n      <td>FCFS和SJF算法的折中，综合考虑了等待和运行时间</td>\n      <td>-</td>\n      <td>等待时间√<br />运行时间√</td>\n      <td>不会</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>这几种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能的指标，但是不关心“响应时间”，也并不区分任务的紧急程度。\n因此对于用户来说，交互性很糟糕。因此过三种算法一般适合用于<strong>早期的批处理系统</strong>，当然，FCFS算法也常结合其他的算法使用，在现在也扮演着很重要的角色。\n而适合用于交互式系统的调度算法在下章介绍。</p>\n\n<h2 id=\"fcfs算法\">FCFS算法</h2>\n\n<h3 id=\"fcfs算法特点\">FCFS算法特点</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法名</th>\n      <th>先来先服务（First Come First Serve，FCFS）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>算法思想</td>\n      <td>主要从“公平”的角度考虑（类似于我们生活中排队买东西的例子）</td>\n    </tr>\n    <tr>\n      <td>算法规则</td>\n      <td>按照作业/进程到达的<strong>先后顺序进行服务</strong></td>\n    </tr>\n    <tr>\n      <td>用于作业/进程调度</td>\n      <td>用于<strong>作业调度</strong>时，考虑的是哪个作业先到达<strong>后备队列</strong>；<br />用于<strong>进程调度</strong>时，考虑的是哪个进程先到达<strong>就绪队列</strong></td>\n    </tr>\n    <tr>\n      <td>是否可抢占</td>\n      <td>非抢占式算法</td>\n    </tr>\n    <tr>\n      <td>优缺点</td>\n      <td>优点：公平、算法实现简单；<br />缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对短作业来说用户体验不好。即<strong>FCFS算法对长作业有利，对短作业不利</strong></td>\n    </tr>\n    <tr>\n      <td>是否会导致饥饿</td>\n      <td>不会</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"例子\">例子</h3>\n<p>各进程到达就绪队列的时间、需要的运行时间如下表所示。使用先来先服务调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>到达时间</th>\n      <th>运行时间</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P1</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>P4</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>解答：</p>\n\n<p>FCFS按照<strong>到达的先后顺序调度</strong>，事实上就是<strong>等待时间越久的越优先</strong>得到服务。</p>\n\n<p>因此，调度顺序为P1&gt;P2&gt;P3&gt;P4，如图所示。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法1.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>周转时间 = 完成时间-到达时间\n带权周转时间 = 周转时间 / 运行时间\n等待时间 = 周转时间 - 运行时间</p>\n\n<p>注意：本例中的进程都是纯计算型的进程，一个进程到达后要么在等待，要么在运行。\n如果是又有计算、又有I/O操作的进程，其等待时间就是周转时间 - 运行时间 - I/O操作的时间。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>P1</th>\n      <th>P2</th>\n      <th>P3</th>\n      <th>P4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>周转时间</td>\n      <td>7-0=7</td>\n      <td>11-2=9</td>\n      <td>12-4=8</td>\n      <td>16-5=11</td>\n    </tr>\n    <tr>\n      <td>带权周转时间</td>\n      <td>7/7=1</td>\n      <td>9/4=2.25</td>\n      <td>8/1=8</td>\n      <td>11/4=2.75</td>\n    </tr>\n    <tr>\n      <td>等待时间</td>\n      <td>7-7=0</td>\n      <td>9-4=5</td>\n      <td>8-1=7</td>\n      <td>11-4=7</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>平均周转时间 = (7+9+8+11) / 4 = 8.75</p>\n\n<p>平均带权周转时间 = (1+2.25+8+2.75) / 4 = 3.5</p>\n\n<p>平均等待时间 = (0+5+7+7) / 4 = 4.75</p>\n\n<h2 id=\"sjf算法\">SJF算法</h2>\n\n<h3 id=\"sjf算法特点\">SJF算法特点</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法名</th>\n      <th>短作业优先（Shortest Job First，SJF）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>算法思想</td>\n      <td>追求<strong>最少的平均等待时间、最少的平均周转时间、最少的平均平均带权周转时间</strong></td>\n    </tr>\n    <tr>\n      <td>算法规则</td>\n      <td>最短的作业/进程优先得到服务（所谓“最短”，是指<strong>要求服务时间最短</strong>）</td>\n    </tr>\n    <tr>\n      <td>用于作业/进程调度</td>\n      <td>即可用于作业调度，也可用于进程调度。用于进程调度时称为短进程优先(Shortest Process First，SPF）算法</td>\n    </tr>\n    <tr>\n      <td>是否可抢占</td>\n      <td>SJF/SPF是非抢占式的算法。但是也有抢占式的版本——<strong>最短剩余时间优先算法</strong>（Shortest Remaining Time Next，SRTN）</td>\n    </tr>\n    <tr>\n      <td>优缺点</td>\n      <td>优点：几乎最短的平均等待时间、平均周转时间；<br />缺点：不公平。<strong>对短作业有利，对长作业不利。</strong>可能产生<strong>饥饿现象</strong>。另外，作业/进程的运行时间是由用户提供的，并不一定真实，不一定能做到真正的短作业优先</td>\n    </tr>\n    <tr>\n      <td>是否会导致饥饿</td>\n      <td>会。如果源源不断地有短作业/进程到来，可能使长作业/进程长时间得不到服务，产生“饥饿”现象。如果一直得不到服务，则称为“饿死”</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"例子-1\">例子</h3>\n<p>各进程到达就绪队列的时间、需要的运行时间如下表所示。使用非抢占式的短作业优先调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>到达时间</th>\n      <th>运行时间</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P1</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>P4</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>解答：</p>\n\n<p>短作业/进程优先调度算法每次调度时选择<strong>当前已到达且运行时间最短的</strong>作业/进程。</p>\n\n<p>因此，调度顺序为P1&gt;P3&gt;P2&gt;P4</p>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法2.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>P1</th>\n      <th>P2</th>\n      <th>P3</th>\n      <th>P4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>周转时间</td>\n      <td>7-0=7</td>\n      <td>8-4=4</td>\n      <td>12-2=10</td>\n      <td>16-5=11</td>\n    </tr>\n    <tr>\n      <td>带权周转时间</td>\n      <td>7/7=1</td>\n      <td>4/1=4</td>\n      <td>10/4=2.5</td>\n      <td>11/4=2.75</td>\n    </tr>\n    <tr>\n      <td>等待时间</td>\n      <td>7-7=0</td>\n      <td>4-1=3</td>\n      <td>10-4=6</td>\n      <td>11-4=7</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>平均周转时间 = (7+4+10+11) / 4 = 8</p>\n\n<p>平均带权周转时间 = (1+4+2.5+2.75) / 4 = 2.56</p>\n\n<p>平均等待时间 = (0+3+6+7) / 4 = 4</p>\n\n<p>对比FCFS算法的结果，显然SPF算法的平均等待/周转/带权周转时间都要更低</p>\n\n<h3 id=\"抢占式版本srtn算法\">抢占式版本——SRTN算法</h3>\n\n<p>各进程到达就绪队列的时间、需要的运行时间如下表所示。使用抢占式的短作业优先调度算法计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>到达时间</th>\n      <th>运行时间</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>P1</td>\n      <td>0</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <td>P2</td>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>P3</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>P4</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>解答：</p>\n\n<p><strong>最短剩余时间优先算法</strong>每当有进程加入<strong>就绪队列改变时就需要调度</strong>，如果新到达的进程<strong>剩余时间</strong>比当前运行的进程剩余时间<strong>更短</strong>，则由新进程<strong>抢占处理机</strong>，当前运行进程重新回到就绪队列。\n另外，<strong>当一个进程完成时也需要调度。</strong></p>\n\n<p>需要注意的是，当有新进程到达时就绪队列就会改变，就要按照上述规则进行检查。\n以下Pn=m表示当前Pn进程剩余时间为m。各个时刻的情况如下：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>不同进程剩余时间</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0（P1到达）</td>\n      <td><strong>P1=7</strong></td>\n    </tr>\n    <tr>\n      <td>2（P2到达）</td>\n      <td>P1=5、<strong>P2=4</strong></td>\n    </tr>\n    <tr>\n      <td>4（P3到达）</td>\n      <td>P1=5、P2=2、<strong>P3=1</strong></td>\n    </tr>\n    <tr>\n      <td>5（P3完成、P4到达）</td>\n      <td>P1=5、<strong>P2=2</strong>、P4=4</td>\n    </tr>\n    <tr>\n      <td>7（P2完成）</td>\n      <td>P1=5、<strong>P4=4</strong></td>\n    </tr>\n    <tr>\n      <td>11（P4完成）</td>\n      <td><strong>P1=5</strong></td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法3.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<table>\n  <thead>\n    <tr>\n      <th>进程</th>\n      <th>P1</th>\n      <th>P2</th>\n      <th>P3</th>\n      <th>P4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>周转时间</td>\n      <td>16-0=16</td>\n      <td>7-2=5</td>\n      <td>5-4=1</td>\n      <td>11-5=6</td>\n    </tr>\n    <tr>\n      <td>带权周转时间</td>\n      <td>16/7=2.28</td>\n      <td>5/4=1.25</td>\n      <td>1/1=1</td>\n      <td>6/4=1.5</td>\n    </tr>\n    <tr>\n      <td>等待时间</td>\n      <td>16-7=9</td>\n      <td>5-4=1</td>\n      <td>1-1=0</td>\n      <td>6-4=2</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>平均周转时间 = (16+5+1+6) / 4 = 7</p>\n\n<p>平均带权周转时间 = (2.28+1.25+1+1.5) / 4 = 1.50</p>\n\n<p>平均等待时间 = (9+1+0+2) / 4 = 3</p>\n\n<p>对比SJF/SPF算法，显然抢占式的这几个指标又要更低。</p>\n\n<h3 id=\"注意\">注意</h3>\n\n<p>严格来说，“SJF调度算法的平均等待时间、平均周转时间最少”这个表述是错误的，不严谨的。\n之前的例子表明，最短剩余时间优先算法得到的平均等待时间、平均周转时间还要更少；\n应该加上一个条件“在<strong>所有进程同时可运行</strong>时，采用SIF调度算法的平均等待时间、平均周转时间最少”；\n或者说“在<strong>所有进程都几乎同时到达</strong>时，采用SJF调度算法的平均等待时间、平均周转时间最少”。</p>\n\n<p>如果不加上述前提条件，则应该说“<strong>抢占式的</strong>短作业/进程优先调度算法的平均等待时间、平均周转时间最少”。</p>\n\n<p>虽然严格来说，SJF的平均等待时间、平均周转时间并不一定最少，\n但相比于其他算法（如FCFS），SJF依然可以获得较少的平均等待时间、平均周转时间。</p>\n\n<h2 id=\"hrrn算法\">HRRN算法</h2>\n\n<h3 id=\"关于fcfs和sjf的思考\">关于FCFS和SJF的思考</h3>\n\n<p>FCFS算法是在每次调度的时候选择一个等待时间最长的作业（进程）为其服务。\n但是没有考虑到作业的运行时间，因此导致了对短作业不友好的问题；</p>\n\n<p>SJF算法是选择一个执行时间最短的作业为其服务。\n但是又完全不考虑各个作业的等待时间，因此导致了对长作业不友好的问题，甚至还会造成饥饿问题；</p>\n\n<p>高响应比算法既考虑到了各个作业的等待时间，也兼顾了运行时间。</p>\n\n<h3 id=\"响应比\">响应比</h3>\n\n<p><strong>响应比</strong> = （等待时间 + 要求服务时间） / 要求服务时间</p>\n\n<p>响应比兼顾了作业的等待时间和运行时间，且响应比总是≥1。</p>\n\n<h3 id=\"hrrn算法特点\">HRRN算法特点</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>算法名</th>\n      <th>高响应比优先（Highest Response Ratio Next，HRRN）</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>算法思想</td>\n      <td>要综合考虑作业/进程的等待时间和要求服务的时间</td>\n    </tr>\n    <tr>\n      <td>算法规则</td>\n      <td>在每次调度时先计算各个作业/进程的<strong>响应比</strong>，选择<strong>响应比最高</strong>的作业/进程为其服务</td>\n    </tr>\n    <tr>\n      <td>用于作业/进程调度</td>\n      <td>即可用于作业调度，也可用于进程调度。</td>\n    </tr>\n    <tr>\n      <td>是否可抢占</td>\n      <td>非抢占式的算法。因此只有当前运行的作业/进程主动放弃处理机时，才需要调度，才需要计算响应比</td>\n    </tr>\n    <tr>\n      <td>优缺点</td>\n      <td>综合考虑了等待时间和运行时间（要求服务时间）<br />等待时间相同时，要求服务时间短的优先（SJF的优点）<br />要求服务时间相同时，等待时间长的优先（FCFS的优点）<br />对于长作业来说，随着等待时间越来越久，其响应比也会越来越大，从而避免了长作业饥饿的问题</td>\n    </tr>\n    <tr>\n      <td>是否会导致饥饿</td>\n      <td>不会。</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"例子-2\">例子</h3>\n<p>各进程到达就绪队列的时间、需要的运行时间如下表所示。使用高响应比优先调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n\n<p><strong>高响应比优先算法</strong>是<strong>非抢占式</strong>的调度算法，只有当前运行的进程<strong>主动放弃CPU</strong>时（正常/异常完成，或主动阻塞），才需要进行调度。\n调度时<strong>计算所有就绪进程的响应比，选响应比最高的进程</strong>上处理机。</p>\n\n<p>以下Pn=m表示当前Pn进程的响应比为m。各个时刻的情况如下：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>时刻</th>\n      <th>不同进程响应比</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0（P1到达）</td>\n      <td>只有P1到达就绪队列，直接选取<strong>P1</strong></td>\n    </tr>\n    <tr>\n      <td>7（P1完成）</td>\n      <td>P2=(5+4)/4=2.25、<strong>P3=(3+1)/1=4</strong>、P4=(2+4)/4=1.5</td>\n    </tr>\n    <tr>\n      <td>8（P3完成）</td>\n      <td><strong>P2=2.5</strong>、P4=1.75</td>\n    </tr>\n    <tr>\n      <td>12（P2完成）</td>\n      <td>就绪队列中只剩<strong>P4</strong></td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-调度算法4.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>具体计算可以参考前文，这里不再给出。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81%E4%B8%80-FCFS-SJF-HRRN%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十一）FCFS、SJF、HRRN调度算法'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2022-04-24T13:34:45+10:00'>Apr 24, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十一）FCFS、SJF、HRRN调度算法</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二十）调度算法的评价指标",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/",
      "date"     : "Apr 24, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#cpu利用率\" id=\"markdown-toc-cpu利用率\">CPU利用率</a></li>\n  <li><a href=\"#系统吞吐量\" id=\"markdown-toc-系统吞吐量\">系统吞吐量</a></li>\n  <li><a href=\"#周转时间\" id=\"markdown-toc-周转时间\">周转时间</a>    <ol>\n      <li><a href=\"#周转时间平均周转时间\" id=\"markdown-toc-周转时间平均周转时间\">周转时间、平均周转时间</a></li>\n      <li><a href=\"#带权周转时间平均带权周转时间\" id=\"markdown-toc-带权周转时间平均带权周转时间\">带权周转时间、平均带权周转时间</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#等待时间\" id=\"markdown-toc-等待时间\">等待时间</a></li>\n  <li><a href=\"#响应时间\" id=\"markdown-toc-响应时间\">响应时间</a></li>\n</ol>\n\n<h2 id=\"cpu利用率\">CPU利用率</h2>\n\n<p>由于早期的CPU造价极其昂贵，因此人们会<strong>希望让CPU尽可能多地工作</strong>。</p>\n\n<p><strong>CPU利用率</strong>：指CPU忙碌的时间占总时间的比例。</p>\n\n<p><strong>利用率</strong> = 设备忙碌时间/总时间</p>\n\n<p>Eg. 某计算机只支持单道程序，某个作业刚开始需要在CPU上运行5秒，再用打印机打印输出5秒，之后再执行5秒，才能结束。\n在此过程中，CPU利用率、打印机利用率分别是多少？</p>\n\n<p>CPU利用率：</p>\n\n\\[\\begin{equation}\n\\dfrac {5+5} {5+5+5}=66.66\\%\n\\end{equation}\\]\n\n<p>打印机利用率：</p>\n\n\\[\\begin{equation}\n\\dfrac {5} {5+5+5}=33.33\\%\n\\end{equation}\\]\n\n<p>多道程序并发执行时，通常使用<strong>甘特图</strong>进行辅助计算。</p>\n\n<h2 id=\"系统吞吐量\">系统吞吐量</h2>\n\n<p>对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业。</p>\n\n<p><strong>系统吞吐量</strong>：单位时间内完成作业的数量</p>\n\n<p>系统吞吐量 = 总共完成作业数量 / 总共花费时间</p>\n\n<p>Eg. 某计算机系统处理完10道作业，共花费100秒，则系统吞吐量为10/100=0.1道/秒</p>\n\n<h2 id=\"周转时间\">周转时间</h2>\n\n<p>对于计算机的用户来说，他很关心自己的作业从提交到完成花了多少时间。</p>\n\n<p><strong>周转时间</strong>，是<strong>指从作业被提交给系统开始，到作业完成为止的这段时间间隔</strong>。</p>\n\n<p>总共包括四个部分：</p>\n<ol>\n  <li>作业在外存后备队列上等待作业调度（高级调度）的时间；</li>\n  <li>进程在就绪队列上等待进程调度（低级调度，就绪态）的时间；</li>\n  <li>进程在CPU上执行（运行态）的时间；</li>\n  <li>进程等待I/O操作完成（阻塞态）的时间。</li>\n</ol>\n\n<p>后三项在一个作业的整个处理过程中，可能发生多次。</p>\n\n<p>（作业）<strong>周转时间</strong> = 作业完成时间 - 作业提交时间</p>\n\n<h3 id=\"周转时间平均周转时间\">周转时间、平均周转时间</h3>\n\n<p>对于用户来说，更关心自己的单个作业的周转时间；\n但对于操作系统来说，更关心系统的整体表现，因此更关心所有作业周转时间的平均值，即平均周转时间。</p>\n\n<p><strong>平均周转时间</strong> = 各作业周转时间和 / 作业数</p>\n\n<p>有的作业运行时间短，有的作业运行时间长，因此在周转时间相同的情况下，运行时间不同的作业，给用户的感觉肯定是不一样的。</p>\n\n<h3 id=\"带权周转时间平均带权周转时间\">带权周转时间、平均带权周转时间</h3>\n\n<p><strong>带权周转时间</strong> = 作业周转时间 / 作业实际运行时间 = （作业完成时间 - 作业提交时间） / 作业实际运行时间</p>\n\n<p>对于周转时间相同的两个作业，实际运行时间长的作业在相同时间内被服务的时间更多，带权周转时间更小，用户满意度更高。</p>\n\n<p>对于实际运行时间相同的两个作业，周转时间短的带权周转时间更小，用户满意度更高。</p>\n\n<p>注意：</p>\n<ul>\n  <li>带权周转时间必定 ≥ 1；</li>\n  <li>带权周转时间与周转时间都是越小越好。</li>\n</ul>\n\n<p><strong>平均带权周转时间</strong> = 各作业带权周转时间和 / 作业数</p>\n\n<h2 id=\"等待时间\">等待时间</h2>\n\n<p>计算机的用户希望自己的作业尽可能少的等待处理机。</p>\n\n<p><strong>等待时间</strong>，指进程/作业处于<strong>等待处理机状态时间之和</strong>，等待时间越长，用户满意度越低。</p>\n\n<p>作业提交后首先进入作业后备队列（在外存中），在后备队列中<strong>等待被服务（调度）</strong>。</p>\n\n<p>作业调入内存后，<strong>建立对应的进程</strong>。这个进程会被CPU服务、会被I/O设备服务，当然也会有<strong>等待被服务</strong>的时候。</p>\n\n<p>对于<strong>进程</strong>来说，等待时间就是指进程建立后<strong>等待被服务的时间之和</strong>，\n在等待I/O完成的期间其实进程也是在被服务的，所以不计入等待时间。</p>\n\n<p>对于<strong>作业</strong>来说，不仅要考虑<strong>建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间</strong>。</p>\n\n<p>一个作业总共需要被CPU服务多久，被I/O设备服务多久一般是确定不变的，因此调度算法其实只会影响作业/进程的等待时间。\n当然，与前面指标类似，也有<strong>平均等待时间</strong>来评价整体性能。</p>\n\n<h2 id=\"响应时间\">响应时间</h2>\n\n<p>对于计算机用户来说，会希望自己的提交的请求（比如通过键盘输入了一个调试命令）尽早地开始被系统服务、回应。</p>\n\n<p><strong>响应时间</strong>，指从用户<strong>提交请求</strong>到<strong>首次产生响应</strong>所用的时间。</p>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C%E5%8D%81-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（二十）调度算法的评价指标'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-24T13:05:28+10:00'>Apr 24, 2022</time> </span> </div><h2 class='article__title'>操作系统（二十）调度算法的评价指标</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十九）调度器（Scheduler）和闲逛进程",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B9%9D-%E8%B0%83%E5%BA%A6%E5%99%A8-Scheduler-%E5%92%8C%E9%97%B2%E9%80%9B%E8%BF%9B%E7%A8%8B/",
      "date"     : "Apr 24, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#调度器调度程序scheduler\" id=\"markdown-toc-调度器调度程序scheduler\">调度器/调度程序（Scheduler）</a></li>\n  <li><a href=\"#闲逛进程\" id=\"markdown-toc-闲逛进程\">闲逛进程</a></li>\n</ol>\n\n<h2 id=\"调度器调度程序scheduler\">调度器/调度程序（Scheduler）</h2>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-线程的三状态模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>在进程的三状态模型中，②、③过程由调度程序引起，调度程序决定：</p>\n<ul>\n  <li>让谁运行?——调度算法</li>\n  <li>运行多长时间?――时间片大小</li>\n</ul>\n\n<p>什么事件会触发<strong>调度程序</strong>（进程的调度时机）：</p>\n<ul>\n  <li><strong>创建新进程</strong>；</li>\n  <li><strong>进程退出</strong>；</li>\n  <li>运行<strong>进程阻塞</strong>；</li>\n  <li><strong>I/O中断</strong>发生（可能唤醒某些阻塞进程）。</li>\n</ul>\n\n<p>非抢占式和抢占式的区别：</p>\n<ul>\n  <li>非抢占式调度策略，只有<strong>运行进程阻塞或退出</strong>才触发调度程序工作；</li>\n  <li>抢占式调度策略，每个<strong>时钟中断或k个时钟中断</strong>会触发调度程序工作。</li>\n</ul>\n\n<p>在不支持内核级线程的操作系统中，调度程序的处理对象是进程：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-调度器1.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>支持内核级线程的操作系统，调度程序的处理对象是内核线程：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-调度器2.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"闲逛进程\">闲逛进程</h2>\n\n<p>如果就绪队列中没有其他就绪进程时，调度程序会选中闲逛进程（Idle），即实际系统中，CPU不会空闲，即便不存在就绪进程，也会运行闲逛进程。</p>\n\n<p>闲逛进程的特性：</p>\n<ul>\n  <li>优先级最低</li>\n  <li>可以是0地址指令，占一个完整的指令周期（指令周期末尾例行检查中断）</li>\n  <li>能耗低</li>\n</ul>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B9%9D-%E8%B0%83%E5%BA%A6%E5%99%A8-Scheduler-%E5%92%8C%E9%97%B2%E9%80%9B%E8%BF%9B%E7%A8%8B/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十九）调度器（Scheduler）和闲逛进程'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-24T12:26:52+10:00'>Apr 24, 2022</time> </span> </div><h2 class='article__title'>操作系统（十九）调度器（Scheduler）和闲逛进程</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十八）进程调度的时机、切换与过程、方式",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E5%85%AB-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA-%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B-%E6%96%B9%E5%BC%8F/",
      "date"     : "Apr 23, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#时机\" id=\"markdown-toc-时机\">时机</a>    <ol>\n      <li><a href=\"#需要进行进程调度与切换的情况\" id=\"markdown-toc-需要进行进程调度与切换的情况\">需要进行进程调度与切换的情况</a></li>\n      <li><a href=\"#不能进行进程调度与切换的情况\" id=\"markdown-toc-不能进行进程调度与切换的情况\">不能进行进程调度与切换的情况</a></li>\n      <li><a href=\"#操作系统内核程序临界区中不能进行调度与切换\" id=\"markdown-toc-操作系统内核程序临界区中不能进行调度与切换\">操作系统内核程序临界区中不能进行调度与切换</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#方式\" id=\"markdown-toc-方式\">方式</a>    <ol>\n      <li><a href=\"#非剥夺调度方式非抢占式\" id=\"markdown-toc-非剥夺调度方式非抢占式\">非剥夺调度方式（非抢占式）</a></li>\n      <li><a href=\"#剥夺调度方式抢占式\" id=\"markdown-toc-剥夺调度方式抢占式\">剥夺调度方式（抢占式）</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#切换与过程\" id=\"markdown-toc-切换与过程\">切换与过程</a></li>\n</ol>\n\n<h2 id=\"时机\">时机</h2>\n\n<p><strong>进程调度（低级调度）</strong>，就是按照某种算法从就绪队列中选择一个进程为其分配处理机。</p>\n\n<h3 id=\"需要进行进程调度与切换的情况\">需要进行进程调度与切换的情况</h3>\n\n<p><strong>需要进行</strong>进程调度与切换的情况主要分为两种，<strong>主动放弃</strong>和<strong>被动放弃</strong>。</p>\n\n<p>当前运行的进程<strong>主动放弃</strong>处理机：</p>\n<ul>\n  <li>进程正常终止；</li>\n  <li>运行过程中发生异常而终止；</li>\n  <li>进程主动请求阻塞（如等待I/O）。</li>\n</ul>\n\n<p>当前运行的进程<strong>被动放弃</strong>处理机：</p>\n<ul>\n  <li>分给进程的时间片用完；</li>\n  <li>有更紧急的事需要处理（如I/O中断）；</li>\n  <li>有更高优先级的进程进入就绪队列。</li>\n</ul>\n\n<h3 id=\"不能进行进程调度与切换的情况\">不能进行进程调度与切换的情况</h3>\n\n<p><strong>不能进行</strong>进程调度与切换的情况：</p>\n<ul>\n  <li>在<strong>处理中断的过程中</strong>。中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换；</li>\n  <li>进程在<strong>操作系统内核程序临界区</strong>中；</li>\n  <li>在原子操作过程中（原语）。原子操作不可中断，要一气呵成（如修改PCB中进程状态的标识，并把PCB放到相应队列）。</li>\n</ul>\n\n<h3 id=\"操作系统内核程序临界区中不能进行调度与切换\">操作系统内核程序临界区中不能进行调度与切换</h3>\n\n<p>临界资源：一个时间段内只允许一个进程使用的资源。各进程需要<strong>互斥地</strong>访问临界资源。</p>\n\n<p>临界区：访问临界资源的那段代码。</p>\n\n<p><strong>内核程序临界区</strong>一般是用来访问某种<strong>内核数据结构</strong>的，比如进程的就绪队列（由各就绪进程的PCB组成）</p>\n\n<p>内核程序临界区访问的临界资源如果不尽快释放的话，极有可能影响到操作系统内核的其他管理工作。因此在访问内核程序临界区期间不能进行调度与切换。</p>\n\n<p>如图，访问进程的就绪队列时，由于就绪队列被访问，操作系统不能进行调度与切换。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程调度时机1.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>普通临界区访问的临界资源不会直接影响操作系统内核的管理工作，因此在访问普通临界区时可以进行调度与切换。</p>\n\n<p>如图，在打印机打印完成之前，进程一直处于临界区内，临界资源不会解锁。但打印机又是慢速设备，此时如果一直不允许进程调度的话就会导致CPU一直空闲。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程调度时机2.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"方式\">方式</h2>\n\n<p>有的系统中，只允许进程主动放弃处理机；</p>\n\n<p>而有的系统中，进程可以主动放弃处理机，当有更紧急的任务需要处理时，也会强行剥夺处理机。</p>\n\n<p>因此，可以将进程调度的方式分为<strong>非剥夺调度方式</strong>和<strong>剥夺调度方式</strong>。</p>\n\n<h3 id=\"非剥夺调度方式非抢占式\">非剥夺调度方式（非抢占式）</h3>\n\n<p><strong>非剥夺调度方式，又称非抢占方式</strong>。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。</p>\n\n<p>非剥夺调度方式实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统。</p>\n\n<h3 id=\"剥夺调度方式抢占式\">剥夺调度方式（抢占式）</h3>\n\n<p><strong>剥夺调度方式，又称抢占方式</strong>。当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</p>\n\n<p>剥夺调度方式可以优先处理更紧急的进程,也可实现让各进程按时间片轮流执行的功能（通过时钟中断）。适合于分时操作系统、实时操作系统。</p>\n\n<h2 id=\"切换与过程\">切换与过程</h2>\n\n<p>狭义的进程调度和进程切换：</p>\n\n<p><strong>狭义的进程调度</strong>指的是从就绪队列中<strong>选中一个要运行的进程</strong>。\n（这个进程可以是刚刚被暂停执行的进程，也可能是<strong>另一个进程</strong>，后一种情况就需要<strong>进程切换</strong>）</p>\n\n<p><strong>进程切换</strong>是指一个进程让出处理机，由另一个进程占用处理机的过程。</p>\n\n<p><strong>广义的进程调度</strong>包含了选择一个进程和进程切换两个步骤。</p>\n\n<p>进程切换的过程主要完成了：</p>\n\n<ol>\n  <li>对原来运行进程各种数据的保存；</li>\n  <li>对新的进程各种数据的恢复。（如:程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块）</li>\n</ol>\n\n<p>注意：<strong>进程切换是有代价的</strong>，因此如果<strong>过于频繁的</strong>进行进程<strong>调度、切换</strong>，必然会使整个<strong>系统的效率降低</strong>，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。</p>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E5%85%AB-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA-%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B-%E6%96%B9%E5%BC%8F/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十八）进程调度的时机、切换与过程、方式'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-23T22:05:19+10:00'>Apr 23, 2022</time> </span> </div><h2 class='article__title'>操作系统（十八）进程调度的时机、切换与过程、方式</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十七）调度的概念和层次",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%83-%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%B1%82%E6%AC%A1/",
      "date"     : "Apr 23, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#调度的概念\" id=\"markdown-toc-调度的概念\">调度的概念</a></li>\n  <li><a href=\"#调度的三个层次\" id=\"markdown-toc-调度的三个层次\">调度的三个层次</a>    <ol>\n      <li><a href=\"#高级调度\" id=\"markdown-toc-高级调度\">高级调度</a></li>\n      <li><a href=\"#低级调度\" id=\"markdown-toc-低级调度\">低级调度</a></li>\n      <li><a href=\"#中级调度\" id=\"markdown-toc-中级调度\">中级调度</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程的挂起态与七状态模型\" id=\"markdown-toc-进程的挂起态与七状态模型\">进程的挂起态与七状态模型</a></li>\n  <li><a href=\"#三层调度的联系和对比\" id=\"markdown-toc-三层调度的联系和对比\">三层调度的联系和对比</a></li>\n</ol>\n\n<h2 id=\"调度的概念\">调度的概念</h2>\n<p>背景：\n在银行取款时，普通客户一般先到先服务，但VIP客户可以优先被服务；\n假设有一群人需要使用厕所，他们可以用先排队先使用的方式，也可以经过讨论后时间短的人优先使用。</p>\n\n<p>类似的，当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定<strong>某种规则</strong>来<strong>决定</strong>处理这些任务的<strong>顺序</strong>，这就是“调度”研究的问题。</p>\n\n<h2 id=\"调度的三个层次\">调度的三个层次</h2>\n\n<h3 id=\"高级调度\">高级调度</h3>\n\n<p>作业的定义：一个具体的任务</p>\n\n<p>用户向系统提交一个作业≈用户让操作系统启动一个程序（来处理一个具体的任务）</p>\n\n<p>当用户向系统提交大量作业时，有时内存空间有限，有时无法将用户提交的作业全部放入内存，此时需要采用高级调度，即作业调度的方式，决定哪些程序该优先启动。</p>\n\n<p><strong>高级调度（作业调度）</strong>：按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。<strong>每个作业只调入一次，调出一次</strong>。作业调入时会建立PCB，调出时才撤销PCB。</p>\n\n<h3 id=\"低级调度\">低级调度</h3>\n\n<p><strong>低级调度（进程调度/处理机调度）</strong>：按照某种策略从就绪队列中选取一个进程，将处理机分配给它。</p>\n\n<p>进程调度是操作系统中<strong>最基本的一种调度</strong>，在一般的操作系统中都必须配置进程调度。进程调度的<strong>频率很高</strong>，一般几十毫秒一次。</p>\n\n<h3 id=\"中级调度\">中级调度</h3>\n\n<p>在内存不够时，可将某些进程的数据调出外存。等内存空闲或者进程需要运行时再重新调入内存。</p>\n\n<p>暂时调到外存等待的进程状态为<strong>挂起状态</strong>。被挂起的进程PCB会被组织成<strong>挂起队列</strong>。</p>\n\n<p><strong>中级调度（内存调度）</strong>：按照某种策略决定将哪个处于挂起状态的进程重新调入内存。一个进程可能会被多次调出、调入内存，因此<strong>中级调度发生的频率要比高级调度更高</strong>。</p>\n\n<h2 id=\"进程的挂起态与七状态模型\">进程的挂起态与七状态模型</h2>\n\n<p>暂时调到外存等待的进程状态为<strong>挂起状态（挂起态，suspend）</strong>，挂起态又可以进一步细分为<strong>就绪挂起</strong>、<strong>阻塞挂起</strong>两种状态。</p>\n\n<p>加入挂起态后，进程的五状态模型可以扩展到七状态模型：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-七状态模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>注意“挂起”和“阻塞”的区别，两种状态都是暂时不能获得CPU的服务，但挂起态是将进程映像调到外存去了，而阻塞态下进程映像还在内存中。</p>\n\n<p>有的操作系统会把就绪挂起、阻塞挂起分为两个挂起队列，甚至会根据阻塞原因不同再把阻塞挂起进程进一步细分为多个队列。</p>\n\n<h2 id=\"三层调度的联系和对比\">三层调度的联系和对比</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th> </th>\n      <th>行为</th>\n      <th>调度位置</th>\n      <th>频率</th>\n      <th>对进程状态的影响</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>高级调度（作业调度）</td>\n      <td>按照某种规则，从后备队列中选择合适的作业将其调入内存，并为其创建进程</td>\n      <td>外存→内存（面向作业）</td>\n      <td>最低</td>\n      <td>无→创建态→就绪态</td>\n    </tr>\n    <tr>\n      <td>中级调度（内存调度）</td>\n      <td>按照某种规则，从挂起队列中选择合适的进程将其数据调回内存</td>\n      <td>外存→内存（面向进程）</td>\n      <td>中等</td>\n      <td>挂起态→就绪态（阻塞挂起→阻塞态）</td>\n    </tr>\n    <tr>\n      <td>低级调度（进程调度）</td>\n      <td>按照某种规则，从就绪队列中选择一个进程为其分配处理机</td>\n      <td>内存→CPU</td>\n      <td>最高</td>\n      <td>就绪态→运行态</td>\n    </tr>\n  </tbody>\n</table>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%83-%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%B1%82%E6%AC%A1/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十七）调度的概念和层次'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-23T19:38:13+10:00'>Apr 23, 2022</time> </span> </div><h2 class='article__title'>操作系统（十七）调度的概念和层次</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十六）线程的状态与转换",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E5%85%AD-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/",
      "date"     : "Apr 23, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#线程的三状态模型\" id=\"markdown-toc-线程的三状态模型\">线程的三状态模型</a></li>\n  <li><a href=\"#线程的组织与控制\" id=\"markdown-toc-线程的组织与控制\">线程的组织与控制</a></li>\n</ol>\n\n<h2 id=\"线程的三状态模型\">线程的三状态模型</h2>\n\n<p>让线程在各种状态间来回切换叫做<strong>线程控制</strong>，线程的状态与转换和进程的状态与转换几乎一样，通常只关心<strong>线程的就绪、运行和阻塞态</strong>，即线程的三状态模型。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-线程的三状态模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"线程的组织与控制\">线程的组织与控制</h2>\n\n<p>与进程类似，操作系统使用<strong>线程控制块（TCB）</strong>和<strong>线程表（Thread table）</strong>完成线程的组织与控制</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-线程控制块.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>线程控制块：</p>\n<ul>\n  <li>线程标识符：TID，与PID类似</li>\n  <li>程序计数器PC：线程执行到哪里（指向下一条指令地址）</li>\n  <li>其他寄存器：线程运行的中间结果</li>\n  <li>堆栈指针：堆栈保存函数调用信息、局部变量等</li>\n  <li>线程运行状态：运行/就绪/阻塞</li>\n  <li>优先级：线程调度、资源分配的参考</li>\n</ul>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-线程表.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>线程表：\n可以在操作系统每个进程中设置一张线程表或以系统当前所有线程组成一张线程表，把各个TCB组织起来，分类管理，这叫<strong>线程组织</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E5%85%AD-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十六）线程的状态与转换'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-23T12:05:43+10:00'>Apr 23, 2022</time> </span> </div><h2 class='article__title'>操作系统（十六）线程的状态与转换</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十五）线程的实现方式和多线程模型",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%BA%94-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/",
      "date"     : "Apr 22, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#线程的背景\" id=\"markdown-toc-线程的背景\">线程的背景</a></li>\n  <li><a href=\"#线程的实现方式\" id=\"markdown-toc-线程的实现方式\">线程的实现方式</a>    <ol>\n      <li><a href=\"#用户级线程\" id=\"markdown-toc-用户级线程\">用户级线程</a></li>\n      <li><a href=\"#内核级线程\" id=\"markdown-toc-内核级线程\">内核级线程</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#多线程模型\" id=\"markdown-toc-多线程模型\">多线程模型</a>    <ol>\n      <li><a href=\"#一对一模型\" id=\"markdown-toc-一对一模型\">一对一模型</a></li>\n      <li><a href=\"#多对一模型\" id=\"markdown-toc-多对一模型\">多对一模型</a></li>\n      <li><a href=\"#多对多模型\" id=\"markdown-toc-多对多模型\">多对多模型</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"线程的背景\">线程的背景</h2>\n\n<h2 id=\"线程的实现方式\">线程的实现方式</h2>\n\n<h3 id=\"用户级线程\">用户级线程</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-用户级线程.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ol>\n  <li>用户级线程（User-Level Thread，ULT）由应用程序通过线程库实现，所有的<strong>线程管理工作</strong>都由<strong>应用程序负责</strong>（包括线程切换）；</li>\n  <li>用户级线程中，<strong>线程切换</strong>可以在<strong>用户态下即可完成</strong>，无需操作系统干预；</li>\n  <li>在用户看来，是有多个线程。但是在操作系统内核看来，并意识不到线程的存在。<strong>“用户级线程”</strong>就是<strong>“从用户视角看能看到的线程”</strong>。</li>\n</ol>\n\n<p>用户级线程的优缺点：</p>\n<ul>\n  <li>优点：用户级线程的切换在用户空间即可完成，不需要切换到内核态，线程管理的系统开销小，效率高；</li>\n  <li>缺点：当一个用户级线程被阻塞后。整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并行运行。</li>\n</ul>\n\n<h3 id=\"内核级线程\">内核级线程</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-内核级线程.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ol>\n  <li><strong>内核级线程（Kernel-Level Thread，KLT）的管理工作</strong>由<strong>操作系统内核</strong>完成；</li>\n  <li>线程调度、切换等工作都由内核负责，因此<strong>内核级线程的切换</strong>必然需要在<strong>内核态</strong>下才能完成；</li>\n  <li>操作系统会为每个内核级线程建立相应的TCB (Thread Control Block，线程控制块)，通过TCB对线程进行管理。<strong>“内核级线程”</strong>就是<strong>“从操作系统内核视角看能看到的线程”</strong>。</li>\n</ol>\n\n<p>内核级线程的优缺点：</p>\n<ul>\n  <li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并行执行；</li>\n  <li>缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高，开销大。</li>\n</ul>\n\n<h2 id=\"多线程模型\">多线程模型</h2>\n\n<p>在支持内核级线程的系统中，根据用户级线程和内核级线程的映射关系，可以划分为几种多线程模型。</p>\n\n<h3 id=\"一对一模型\">一对一模型</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-一对一模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>一对一模型：一个用户级线程映射到一个内核级线程，每个用户进程有与用户级线程同数量的内核级线程。</p>\n<ul>\n  <li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并行执行。</li>\n  <li>缺点：一个用户进程会占用多个内核级线程,线程切换由操作系统内核完成，需要切换到内核态，因此线程管理的成本高，开销大。</li>\n</ul>\n\n<h3 id=\"多对一模型\">多对一模型</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-多对一模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>多对一模型：多个用户级线程映射到一个内核级线程，且一个进程只被分配一个内核级线程。</p>\n<ul>\n  <li>优点：用户级线程的切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高</li>\n  <li>缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并行运行</li>\n  <li>注意：操作系统只“看得见”内核级线程，因此只有<strong>内核级线程才是处理机分配的单位</strong>。</li>\n</ul>\n\n<h3 id=\"多对多模型\">多对多模型</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-多对多模型.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>多对多模型：<strong>n用户及线程映射到m个内核级线程（n&gt;=m）</strong>。每个用户进程对应m个内核级线程。</p>\n\n<p>克服了多对一模型并发度不高的缺点（一个阻塞全体阻塞），又克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</p>\n\n<p>可以这么理解：用户级线程是“代码逻辑”的载体；内核级线程是“运行机会”的载体。<strong>内核级线程才是处理机分配的单位</strong>，多核CPU环境下，上图这个进程最多能被分配两个核。\n一段“代码逻辑”只有获得了“运行机会”才能被CPU执行。\n内核级线程中可以运行任意一个有映射关系的用户级线程代码，只有两个内核级线程中正在运行的代码逻辑都阻塞时，这个进程才会阻塞。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%BA%94-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十五）线程的实现方式和多线程模型'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-22T04:46:02+10:00'>Apr 22, 2022</time> </span> </div><h2 class='article__title'>操作系统（十五）线程的实现方式和多线程模型</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十四）线程的概念",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E5%9B%9B-%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "Apr 22, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#为什么要引入线程\" id=\"markdown-toc-为什么要引入线程\">为什么要引入线程？</a></li>\n  <li><a href=\"#引入线程后带来的变化\" id=\"markdown-toc-引入线程后带来的变化\">引入线程后带来的变化</a></li>\n  <li><a href=\"#线程的属性\" id=\"markdown-toc-线程的属性\">线程的属性</a></li>\n</ol>\n\n<h2 id=\"为什么要引入线程\">为什么要引入线程？</h2>\n\n<p>在一个程序运行过程中，可能需要同时进行视频聊天、传输文件等多种功能，而进程是程序的一次执行，这些功能显然不能通过一个程序顺序处理就能实现。</p>\n\n<p>有的进程可能需要“同时”做很多事，而传统的进程只能串行地执行一系列程序。为此，引入了“线程”，来增加并发度。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-线程概念.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>传统的进程是程序执行流的最小单位；引入线程后，线程成为程序执行流的最小单位。</p>\n\n<p>可以把线程理解为“轻量级进程”。</p>\n\n<p><strong>线程</strong>是一个<strong>基本的CPU执行单元</strong>，也是<strong>程序执行流的最小单位</strong>。\n引入线程之后，不仅是进程之间可以并发，进程内的<strong>各线程之间也可以并发</strong>，从而进一步<strong>提升了系统的并发度</strong>，使得一个进程内也可以并发处理各种任务（如QQ视频、文字聊天、传文件）。</p>\n\n<p>引入线程后，<strong>进程</strong>只作为<strong>除CPU之外的系统资源的分配单元</strong>（如打印机、内存地址空间等都是分配给进程的）。</p>\n\n<h2 id=\"引入线程后带来的变化\">引入线程后带来的变化</h2>\n\n<p>资源分配、调度：</p>\n<ul>\n  <li>传统进程机制中，进程是资源分配、调度的基本单位；</li>\n  <li>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位。</li>\n</ul>\n\n<p>并发性：</p>\n<ul>\n  <li>传统进程机制中，只能进程间并发；</li>\n  <li>引入线程后，各线程间也能并发，提升了并发度。</li>\n</ul>\n\n<p>系统开销：</p>\n<ul>\n  <li>传统的进程间并发，需要切换进程的运行环境，系统开销很大；</li>\n  <li>线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小；</li>\n  <li>引入线程后，并发所带来的系统开销减小。</li>\n</ul>\n\n<h2 id=\"线程的属性\">线程的属性</h2>\n\n<ol>\n  <li>线程是处理机调度的单位；</li>\n  <li>多CPU计算机中，各个线程可占用不同的CPU；</li>\n  <li>每个线程都有一个线程ID、线程控制块（TCB）；</li>\n  <li>线程也有就绪、阻塞、运行三种基本状态；</li>\n  <li>线程几乎不拥有系统资源；</li>\n  <li>同一进程的不同线程间共享进程的资源；</li>\n  <li>由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预；</li>\n  <li>同一进程中的线程切换，不会引起进程切换；</li>\n  <li>不同进程中的线程切换，会引起进程切换；</li>\n  <li>切换同进程内的线程，系统开销很小；</li>\n  <li>切换进程，系统开销较大。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E5%9B%9B-%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十四）线程的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-22T04:24:51+10:00'>Apr 22, 2022</time> </span> </div><h2 class='article__title'>操作系统（十四）线程的概念</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十三）进程通信",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%89-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/",
      "date"     : "Apr 22, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#为什么进程通信需要操作系统支持\" id=\"markdown-toc-为什么进程通信需要操作系统支持\">为什么进程通信需要操作系统支持?</a></li>\n  <li><a href=\"#共享存储\" id=\"markdown-toc-共享存储\">共享存储</a></li>\n  <li><a href=\"#消息传递\" id=\"markdown-toc-消息传递\">消息传递</a>    <ol>\n      <li><a href=\"#直接通信方式\" id=\"markdown-toc-直接通信方式\">直接通信方式</a></li>\n      <li><a href=\"#间接通信方式\" id=\"markdown-toc-间接通信方式\">间接通信方式</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#管道通信\" id=\"markdown-toc-管道通信\">管道通信</a></li>\n</ol>\n\n<h2 id=\"为什么进程通信需要操作系统支持\">为什么进程通信需要操作系统支持?</h2>\n\n<p>进程间通信（Inter-Process Communication，<strong>IPC</strong>）是指两个进程之间产生数据交互。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程间通信.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>进程是分配系统资源的单位（包括内存地址空间），因此<strong>各进程</strong>拥有的<strong>内存地址空间相互独立</strong>。</p>\n\n<p>为了保证安全，<strong>一个进程不能直接访问另一个进程的地址空间</strong>。</p>\n\n<p>进程通信的方式主要有共享存储、消息传递和管道通信。</p>\n\n<h2 id=\"共享存储\">共享存储</h2>\n\n<p>操作系统在内存中开辟一块<strong>共享空间</strong>，允许通信进程<strong>互斥访问</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-共享存储.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>为避免出错，各个进程对共享空间的<strong>访问</strong>应该是<strong>互斥</strong>的。</p>\n\n<p>各个进程可使用操作系统内核提供的同步互斥工具（如P、V操作）。</p>\n\n<p>注：通过“增加页表项/段表项”即可将同一片共享内存区映射到各个进程的地址空间中。</p>\n\n<p>Linux中如何实现共享内存：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">shm_open</span><span class=\"p\">()</span> <span class=\"p\">;</span> <span class=\"c1\">// 通过shm_open系统调用，申请一片共享内存区</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"nf\">mmap</span><span class=\"p\">();</span> <span class=\"c1\">//通过mmap系统调用，将共享内存区映射到进程自己的地址空间</span>\n</code></pre></div></div>\n\n<p>共享存储包括基于数据结构的共享和基于存储区的共享：</p>\n\n<p><strong>基于数据结构</strong>的共享：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种<strong>低级通信</strong>方式。</p>\n\n<p><strong>基于存储区</strong>的共享:操作系统在内存中划出块共享存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种<strong>高级通信</strong>方式。</p>\n\n<h2 id=\"消息传递\">消息传递</h2>\n\n<p>进程间的数据交换以<strong>格式化的消息（Message）</strong>为单位。进程通过操作系统提供的“发送消息/接收消息”两个<strong>原语</strong>进行数据交换。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-消息传递.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>消息传递包括直接通信方式和间接通信方式。</p>\n\n<h3 id=\"直接通信方式\">直接通信方式</h3>\n\n<p>直接通信方式指的是消息发送进程要指明接收进程ID的通信方式。</p>\n\n<p>假设存在两个进程P和Q，在进程P运行过程中，进程P的地址空间存放有一条消息<code class=\"language-plaintext highlighter-rouge\">msg</code>需要发送给进程Q，我们通过描述两个进程的直接通信来展示直接通信方式的过程。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-直接通信.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ol>\n  <li>首先，在操作系统内核的地址空间中存放着进程Q的PCB，而<strong>进程Q的PCB</strong>中存放着<strong>进程Q的消息队列</strong>；</li>\n  <li>进程P使用发送原语<code class=\"language-plaintext highlighter-rouge\">send(Q, msg);</code>，操作系统将消息<code class=\"language-plaintext highlighter-rouge\">msg</code><strong>添加到进程Q的PCB的消息队列</strong>中去；</li>\n  <li>进程Q在运行中执行了接收原语<code class=\"language-plaintext highlighter-rouge\">receive(P,&amp;msg);</code>，操作系统检查进程Q的PCB的消息队列，查看哪条消息是由进程P发来的，并把这条消息<code class=\"language-plaintext highlighter-rouge\">msg</code>移动到进程Q的地址空间。</li>\n</ol>\n\n<h3 id=\"间接通信方式\">间接通信方式</h3>\n\n<p>间接通信方式是以“信箱”作为中间实体进行消息传递，又称信箱通信方式。</p>\n\n<p>同样以上述场景为例子，我们通过描述两个进程的间接通信来展示间接通信方式的过程。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-间接通信.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ol>\n  <li>首先，在操作系统内核的地址空间中存放着<strong>数个信箱</strong>；</li>\n  <li>进程P使用发送原语<code class=\"language-plaintext highlighter-rouge\">send(A, msg);</code>，操作系统将消息<code class=\"language-plaintext highlighter-rouge\">msg</code><strong>添加到操作系统内核的地址空间的信箱A</strong>中去；</li>\n  <li>进程Q在运行中执行了接收原语<code class=\"language-plaintext highlighter-rouge\">receive(A,&amp;msg);</code>，操作系统从信箱A中获取消息<code class=\"language-plaintext highlighter-rouge\">msg</code>移动到进程Q的地址空间。</li>\n</ol>\n\n<p>这个过程中，可以多个进程往同一个信箱send消息，也可以多个进程从同一个信箱中receive消息。</p>\n\n<h2 id=\"管道通信\">管道通信</h2>\n\n<p>“管道”是一个特殊的共享文件，又名pipe文件，其实就是在内存中开辟一个大小固定的内存缓冲区。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-管道通信.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<ol>\n  <li>管道只能采用<strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现<strong>双向同时通信</strong>，则<strong>需要设置两个管道</strong>。</li>\n  <li>各进程互斥地访问管道（由操作系统实现）</li>\n  <li>当<strong>管道写满</strong>时，<strong>写进程</strong>将<strong>阻塞</strong>，直到读进程将管道中的数据取走，即可唤醒写进程。</li>\n  <li>当<strong>管道读空</strong>时，<strong>读进程</strong>将<strong>阻塞</strong>，直到写进程往管道中写入数据，即可唤醒读进程。</li>\n  <li>管道中的数据一旦被读出，就彻底消失。因此，当多个进程读同一个管道时，可能会错乱。通常的解决方案是<strong>一个管道允许多个写进程，一个读进程</strong>，但在Linux中允许进程轮流从管道中读取数据，即<strong>允许有多个写进程，多个读进程。</strong></li>\n</ol>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%89-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十三）进程通信'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-22T01:59:35+10:00'>Apr 22, 2022</time> </span> </div><h2 class='article__title'>操作系统（十三）进程通信</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十二）进程控制",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#原语\" id=\"markdown-toc-原语\">原语</a>    <ol>\n      <li><a href=\"#为何进程控制状态转换的过程要一气呵成\" id=\"markdown-toc-为何进程控制状态转换的过程要一气呵成\">为何进程控制（状态转换）的过程要“一气呵成”？</a></li>\n      <li><a href=\"#原语执行原理\" id=\"markdown-toc-原语执行原理\">原语执行原理</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程控制原语\" id=\"markdown-toc-进程控制原语\">进程控制原语</a>    <ol>\n      <li><a href=\"#进程的创建\" id=\"markdown-toc-进程的创建\">进程的创建</a></li>\n      <li><a href=\"#进程的终止\" id=\"markdown-toc-进程的终止\">进程的终止</a></li>\n      <li><a href=\"#进程的阻塞和唤醒\" id=\"markdown-toc-进程的阻塞和唤醒\">进程的阻塞和唤醒</a></li>\n      <li><a href=\"#进程的切换\" id=\"markdown-toc-进程的切换\">进程的切换</a></li>\n      <li><a href=\"#运行环境信息\" id=\"markdown-toc-运行环境信息\">运行环境信息</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。</p>\n\n<p>简化理解：进程控制就是要实现进程状态转换。</p>\n\n<h2 id=\"原语\">原语</h2>\n\n<h3 id=\"为何进程控制状态转换的过程要一气呵成\">为何进程控制（状态转换）的过程要“一气呵成”？</h3>\n\n<p>假设此时进程2等待的事件发生，则操作系统中，负责进程控制的内核程序至少需要做这样两件事：</p>\n<ol>\n  <li>将PCB2的state设为1</li>\n  <li>将PCB2从阻塞队列放到就绪队列</li>\n</ol>\n\n<p>完成了第一步后收到中断信号，那么PCB2的state=1，但是它却被放在阻塞队列里。</p>\n\n<p>如果不能“一气呵成”，就有可能导致操作系统中的某些关键数据结构信息不统一的情况，这会影响操作系统进行别的管理工作。</p>\n\n<h3 id=\"原语执行原理\">原语执行原理</h3>\n\n<p><strong>原语</strong>的执行具有<strong>原子性</strong>，即执行过程只能一气呵成，期间<strong>不允许被中断</strong>。\n可以用“<strong>关中断</strong>指令”和“<strong>开中断</strong>指令”这两个<strong>特权指令</strong>实现原子性。</p>\n\n<p>在正常情况下，CPU<strong>每执行完一条指令</strong>都会例行<strong>检查是否有中断信号</strong>需要处理，\n如果有，则暂停运行当前这段程序，转而执行相应的中断处理程序。</p>\n\n<p>CPU执行了<strong>关中断指令</strong>之后，就不再例行检查中断信号，直到执行<strong>开中断指令</strong>之后才会恢复检查。</p>\n\n<p>这样，关中断、开中断之间的这些指令序列就是不可被中断的，这就实现了“原子性”。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-原语.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"进程控制原语\">进程控制原语</h2>\n\n<p>无论哪个进程控制原语，要做的无非三类事情：</p>\n<ol>\n  <li>更新PCB中的信息（修改进程状态state，保存/恢复运行环境）；</li>\n  <li>将PCB插入合适的队列；</li>\n  <li>分配/回收资源。</li>\n</ol>\n\n<h3 id=\"进程的创建\">进程的创建</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的创建.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"进程的终止\">进程的终止</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的终止.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"进程的阻塞和唤醒\">进程的阻塞和唤醒</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的阻塞和唤醒.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>注意：阻塞和唤醒原语必须成对使用。</p>\n\n<h3 id=\"进程的切换\">进程的切换</h3>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程的切换.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"运行环境信息\">运行环境信息</h3>\n\n<p>在执行程序指令的过程中，CPU中会设置很多“寄存器”，用来存放程序运行过程中所需的某些数据，如：</p>\n<ul>\n  <li>PSW：程序状态字寄存器</li>\n  <li>PC：程序计数器，存放下一条指令地址</li>\n  <li>IR：指令寄存器，存放当前正在执行的指令</li>\n  <li>通用寄存器：存放其它一些必要信息</li>\n</ul>\n\n<p>在指令顺序执行的过程中，很多中间结果是放在各种寄存器中的。如执行如下代码时：</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* ... */</span>\n<span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"n\">x</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"cm\">/* ... */</span>\n</code></pre></div></div>\n\n<p>此时该进程在内存中结构如图：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-运行环境信息.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>当执行到指令3时，CPU寄存器中的数据如下：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-运行环境信息-寄存器.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>执行完指令3后，另一个进程开始上CPU运行。由于另一个进程在运行过程中也会使用各个寄存器，CPU寄存器数据将被覆盖。</p>\n\n<p>为了解决这个问题，在进程切换时先<strong>在PCB中保存这个进程的运行环境</strong>（保存一些必要的寄存器信息），当原来的进程再次投入运行时，可以<strong>通过PCB恢复它的运行环境</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%BA%8C-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十二）进程控制'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T19:48:42+10:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十二）进程控制</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十一）进程的状态、转换和组织方式",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%80-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81-%E8%BD%AC%E6%8D%A2%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#进程的状态\" id=\"markdown-toc-进程的状态\">进程的状态</a>    <ol>\n      <li><a href=\"#创建态及就绪态\" id=\"markdown-toc-创建态及就绪态\">创建态及就绪态</a></li>\n      <li><a href=\"#运行态\" id=\"markdown-toc-运行态\">运行态</a></li>\n      <li><a href=\"#阻塞态\" id=\"markdown-toc-阻塞态\">阻塞态</a></li>\n      <li><a href=\"#终止态\" id=\"markdown-toc-终止态\">终止态</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程的状态转换\" id=\"markdown-toc-进程的状态转换\">进程的状态转换</a></li>\n  <li><a href=\"#进程的组织方式\" id=\"markdown-toc-进程的组织方式\">进程的组织方式</a>    <ol>\n      <li><a href=\"#链接方式\" id=\"markdown-toc-链接方式\">链接方式</a></li>\n      <li><a href=\"#索引方式\" id=\"markdown-toc-索引方式\">索引方式</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"进程的状态\">进程的状态</h2>\n\n<p>进程的状态分为运行、就绪、阻塞、创建和终止五种，其中<strong>运行、就绪和阻塞</strong>三种状态为<strong>进程的基本状态</strong>。</p>\n\n<p>进程的整个生命周期中，大部分时间都处于三种基本状态。</p>\n\n<p>单CPU情况下，同一时刻只会有一个进程处于运行态，多核CPU情况下，可能有多个进程处于运行态。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程状态.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"创建态及就绪态\">创建态及就绪态</h3>\n\n<p>进程正在被创建时，它的状态是“创建态”，在这个阶段操作系统会为进程分配资源、初始化PCB；</p>\n\n<p>当进程创建完成后，便进入“就绪态”；</p>\n\n<p>处于<strong>就绪态</strong>的进程已经<strong>具备运行条件</strong>，但由于<strong>没有空闲CPU</strong>，就暂时不能运行。</p>\n\n<h3 id=\"运行态\">运行态</h3>\n\n<p>系统中可能会有很多个进程都处于就绪态；</p>\n\n<p>当CPU空闲时，操作系统就会选择一个就绪进程让它上处理机运行。</p>\n\n<p>如果<strong>一个进程此时在CPU上运行</strong>，那么这个进程处于“<strong>运行态</strong>”。CPU会执行该进程对应的程序（执行指令序列）。</p>\n\n<h3 id=\"阻塞态\">阻塞态</h3>\n\n<p>在进程运行的过程中，可能会请求<strong>等待某个事件的发生（如等待某种系统资源的分配，或者等待其他进程的响应）</strong>。</p>\n\n<p>在这个事件发生之前，进程无法继续往下执行，此时<strong>操作系统会让这个进程下CPU</strong>，并让它进入“<strong>阻塞态</strong>”。</p>\n\n<p>当CPU空闲时，又会选择另一个“就绪态”进程上CPU运行。</p>\n\n<p>此后，若资源成功分配给阻塞进程，即阻塞进程所等待的事件已经发生，此时操作系统将进程转变为就绪态。</p>\n\n<h3 id=\"终止态\">终止态</h3>\n\n<p>一个进程可以执行exit系统调用，请求操作系统终止该进程。\n此时该进程会进入“终止态”，操作系统会让该进程下CPU，并回收内存空间等资源，最后还要回收该进程的PCB。</p>\n\n<p>当终止进程的工作完成之后，这个进程就彻底消失了。</p>\n\n<h2 id=\"进程的状态转换\">进程的状态转换</h2>\n\n<p>进程状态转换过程可以用进程五状态模型进行表示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程状态转换图.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>注意：</p>\n<ul>\n  <li>阻塞态→就绪态是不是进程自身能控制的，是一种<strong>被动行为</strong>。</li>\n  <li>运行态→阻塞态是一种进程自身做出的<strong>主动行为</strong>。</li>\n  <li><strong>不能由阻塞态直接转换为运行态，也不能由就绪态直接转换为阻塞态</strong>（因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求）。</li>\n</ul>\n\n<h2 id=\"进程的组织方式\">进程的组织方式</h2>\n\n<p>进程PCB中，会有一个变量state来表示进程的当前状态。如：1表示创建态、2表示就绪态、3表示运行态…\n为了对同一个状态下的各个进程进行统一的管理，操作系统会将各个进程的PCB组织起来。</p>\n\n<h3 id=\"链接方式\">链接方式</h3>\n<p>在链接方式中，操作系统按照进程状态将PCB分为<strong>多个队列</strong>；操作系统持有<strong>指向各个队列的指针</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-链接方式.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h3 id=\"索引方式\">索引方式</h3>\n<p>在索引方式中，操作系统根据进程状态的不同，建立<strong>几张索引表</strong>；操作系统持有<strong>指向各个索引表的指针</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-索引方式.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81%E4%B8%80-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81-%E8%BD%AC%E6%8D%A2%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十一）进程的状态、转换和组织方式'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T18:38:00+10:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十一）进程的状态、转换和组织方式</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（十）进程的概念、组成和特征",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5-%E7%BB%84%E6%88%90%E5%92%8C%E7%89%B9%E5%BE%81/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#理解进程和程序的区别\" id=\"markdown-toc-理解进程和程序的区别\">理解“进程”和“程序”的区别</a></li>\n  <li><a href=\"#一个进程实体由哪些部分组成\" id=\"markdown-toc-一个进程实体由哪些部分组成\">一个进程实体由哪些部分组成</a>    <ol>\n      <li><a href=\"#进程控制块pcb\" id=\"markdown-toc-进程控制块pcb\">进程控制块（PCB）</a></li>\n      <li><a href=\"#进程实体的组成\" id=\"markdown-toc-进程实体的组成\">进程实体的组成</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#进程有哪些重要的特征\" id=\"markdown-toc-进程有哪些重要的特征\">进程有哪些重要的特征</a></li>\n</ol>\n\n<h2 id=\"理解进程和程序的区别\">理解“进程”和“程序”的区别</h2>\n\n<p>程序：是<strong>静态的</strong>，就是个存放在磁盘里的可执行文件，就是一系列的指令集合。</p>\n\n<p>进程（Process）：是<strong>动态的</strong>，是程序的一次执行过程（同一个程序多次执行会对应多个进程）。</p>\n\n<h2 id=\"一个进程实体由哪些部分组成\">一个进程实体由哪些部分组成</h2>\n\n<h3 id=\"进程控制块pcb\">进程控制块（PCB）</h3>\n\n<p>当进程被创建时，操作系统会为该进程分配一个<strong>唯一的、不重复的</strong>“身份证号”——进程ID（Process ID，<strong>PID</strong>）。</p>\n\n<p>操作系统要记录PID、进程所属用户ID（UID）等基本的进程描述信息，以让操作系统区分各个进程。</p>\n\n<p>还要记录给进程分配了哪些资源（如分配了多少内存、正在使用哪些I/O设备、正在使用哪些文件），用于实现操作系统对资源的管理。</p>\n\n<p>还要记录进程的运行情况（如CPU使用时间、磁盘使用情况、网络流量使用情况等），用于实现操作系统对进程的控制、调度。</p>\n\n<p>这些信息都被保存在一个数据结构<strong>PCB（Process Control Block）</strong>中，即<strong>进程控制块</strong>。PCB是进程存在的唯一标志，当进程被创建时，操作系统为其创建PCB，当进程结束时，会回收其PCB。</p>\n\n<p>操作系统需要对各个并发运行的进程进行管理，<strong>但凡管理时所需要的信息，都会被放在PCB中。</strong></p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程控制块.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"进程实体的组成\">进程实体的组成</h3>\n\n<p>在进程的组成部分中，PCB是给操作系统用的。程序段、数据段是给进程自己用的。PCB、程序段及数据段在内存中的位置如下图：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程组成.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:80%;\" /></p>\n\n<p>一个<strong>进程实体（进程映像）</strong>由<strong>PCB、程序段、数据段</strong>组成。<strong>进程</strong>是<strong>动态</strong>的，<strong>进程实体（进程映像）</strong>是<strong>静态</strong>的，类似于进程的一个快照。</p>\n\n<p>进程实体反映了进程在某一时刻的状态（如x++后，x=2）。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-进程-进程实体.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<ul>\n  <li>PCB是给操作系统使用的；</li>\n  <li>程序段、数据段是给进程自己用的，与进程自身的运行逻辑有关。</li>\n</ul>\n\n<p><strong>程序段、数据段、PCB</strong>三部分组成了<strong>进程实体（进程映像）</strong>。</p>\n\n<p>引入进程实体的概念后，可把进程定义为：\n<strong>进程</strong>是进程实体的<strong>运行过程</strong>，是系统进行<strong>资源分配和调度</strong>的一个独立单位。</p>\n\n<p>注意：PCB是进程存在的唯一标志。</p>\n\n<h2 id=\"进程有哪些重要的特征\">进程有哪些重要的特征</h2>\n\n<p>程序是静态的，进程是动态的，相比于程序，进程拥有以下特征：</p>\n\n<ol>\n  <li><strong>动态性</strong>：进程是程序的一次执行过程，是动态地产生、变化和消亡的；</li>\n  <li>并发性：内存中有多个进程实体，各进程可并发执行；</li>\n  <li>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位；</li>\n  <li>异步性：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题；</li>\n  <li>结构性：每个进程都会配置一个PCB。结构上看，进程由程序段、数据段、PCB组成。</li>\n</ol>\n\n<p>其中，<strong>动态性是进程最基本的特征</strong>，异步性会导致并发程序执行结果的不确定性。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%8D%81-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5-%E7%BB%84%E6%88%90%E5%92%8C%E7%89%B9%E5%BE%81/'> <img src='/images/covers/操作系统-cover2.png' alt='操作系统（十）进程的概念、组成和特征'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T05:22:32+10:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（十）进程的概念、组成和特征</h2> <p class='article__excerpt'>进程（Process）是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（九）虚拟机",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B9%9D-%E8%99%9A%E6%8B%9F%E6%9C%BA/",
      "date"     : "Apr 21, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#虚拟机的定义\" id=\"markdown-toc-虚拟机的定义\">虚拟机的定义</a></li>\n  <li><a href=\"#第一类虚拟机\" id=\"markdown-toc-第一类虚拟机\">第一类虚拟机</a></li>\n  <li><a href=\"#第二类虚拟机\" id=\"markdown-toc-第二类虚拟机\">第二类虚拟机</a></li>\n  <li><a href=\"#两类虚拟机的对比\" id=\"markdown-toc-两类虚拟机的对比\">两类虚拟机的对比</a></li>\n  <li><a href=\"#更多指令等级\" id=\"markdown-toc-更多指令等级\">更多指令等级</a></li>\n</ol>\n\n<h2 id=\"虚拟机的定义\">虚拟机的定义</h2>\n\n<p>在同一台操作系统上并发运行某些进程，可能存在安全隐患；如果将其运行在不同硬件上，则会浪费大量硬件资源。</p>\n\n<p>虚拟机：使用虚拟化技术，将一台物理机器虚拟化为多台虚拟机器（Virtual Machine，VM），每个虚拟机器都可以独立运行一个操作系统。</p>\n\n<p>同义术语：虚拟机管理程序/虚拟机监控程序/Virtual Machine Monitor/Hypervisor</p>\n\n<h2 id=\"第一类虚拟机\">第一类虚拟机</h2>\n<p>第一类虚拟机管理程序直接运行在硬件上。虚拟机管理程序将一个物理机器虚拟化为多台虚拟机器。\n第一类虚拟机管理程序会把一个总的硬件资源划分为多个部分，每一台虚拟机上可以安装各自的操作系统，如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-第一类虚拟机.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>在运行过程中，CPU的时间片被分给若干个虚拟机器，在上层操作系统看来自己分配的是独立的CPU；而磁盘和内存这些则是按空间进行划分。每台机器都拥有自己独立的资源。</p>\n\n<p>在第一类虚拟机中，<strong>只有虚拟机管理程序是运行在内核态</strong>的，可以使用那些最高特权的指令。\n上层<strong>虚拟内核空间运行在用户态</strong>，但它以为自己运行在内核态，会执行特权指令，此时这个<strong>特权指令会被虚拟机管理程序截获并进行等价转换</strong>。</p>\n\n<h2 id=\"第二类虚拟机\">第二类虚拟机</h2>\n<p>第二类虚拟机管理程序运行在宿主操作系统（Host OS）上。</p>\n\n<p>常用第二类虚拟机：VirtualBox、VMWare</p>\n\n<p>第二类虚拟机想要为虚拟机器分配硬件资源时，需要请求操作系统为其分配。<strong>硬件资源的管理者依旧是宿主操作系统</strong>。</p>\n\n<p>注意：在第二类虚拟机中，<strong>部分虚拟机管理程序运行在内核态</strong>，这部分是<strong>以虚拟机驱动程序的方式加载到操作系统内核</strong>当中的。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-第二类虚拟机.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"两类虚拟机的对比\">两类虚拟机的对比</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th> </th>\n      <th>第一类VMM</th>\n      <th>第二类VMM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>对物理资源的控制权</td>\n      <td>直接运行在硬件之上，能直接控制和分配物理资源。</td>\n      <td>运行在Host OS之上，依赖于Host OS为其分配物理资源。</td>\n    </tr>\n    <tr>\n      <td>资源分配方式</td>\n      <td>在安装Guest OS时，VMM要在原本的硬盘上自行分配存储空间，类似于”外核“的分配方式，分配未经抽象的物理硬件。</td>\n      <td>Guest OS拥有自己的虚拟磁盘，该盘实际上是Host OS文件系统中的一个大文件。Guest OS分配到的内存是虚拟内存。</td>\n    </tr>\n    <tr>\n      <td>性能</td>\n      <td>性能较好。</td>\n      <td>性能更差，需要Host OS作为”中介“。</td>\n    </tr>\n    <tr>\n      <td>可支持的虚拟机数量</td>\n      <td>更多，不需要和Host OS竞争资源，相同的硬件资源可以支持更多的虚拟机。</td>\n      <td>更少，Host OS本身需要使用物理资源，Host OS上运行的其他进程也需要物理资源。</td>\n    </tr>\n    <tr>\n      <td>虚拟机的可迁移性</td>\n      <td>更差。</td>\n      <td>更好，只需导出虚拟机镜像文件即可迁移到另一台Host OS 上，商业化应用更广泛。</td>\n    </tr>\n    <tr>\n      <td>运行模式</td>\n      <td>第一类VMM运行在最高特权级（Ring 0），可以执行最高特权的指令。</td>\n      <td>第二类VMM部分运行在用户态、部分运行在内核态。Guest OS发出的系统调用会被VMM截获，并转化为VMM对Host OS的系统调用。</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"更多指令等级\">更多指令等级</h2>\n<p>支持虚拟化的CPU通常分为更多的指令等级，如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-虚拟化CPU指令等级.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>其中，Ring 0表示最高特权级指令；Ring 3表示最低特权级指令。</p>\n\n<p>在第一类虚拟机中，可以使VMM运行在Ring 0，虚拟内核空间运行在Ring 1，虚拟用户空间运行在Ring 2。这样可以保证在运行特权指令Ring 1和Ring 2时，虚拟机管理程序无需介入，提升运行效率。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B9%9D-%E8%99%9A%E6%8B%9F%E6%9C%BA/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（九）虚拟机'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-21T00:39:30+10:00'>Apr 21, 2022</time> </span> </div><h2 class='article__title'>操作系统（九）虚拟机</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（八）操作系统引导（Boot）",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AB-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC-Boot/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是操作系统引导\" id=\"markdown-toc-什么是操作系统引导\">什么是操作系统引导</a></li>\n  <li><a href=\"#与开机相关的数据\" id=\"markdown-toc-与开机相关的数据\">与开机相关的数据</a></li>\n  <li><a href=\"#操作系统引导的过程\" id=\"markdown-toc-操作系统引导的过程\">操作系统引导的过程</a></li>\n</ol>\n\n<h2 id=\"什么是操作系统引导\">什么是操作系统引导</h2>\n\n<p>开机的时候，怎么让操作系统运行起来？</p>\n\n<h2 id=\"与开机相关的数据\">与开机相关的数据</h2>\n\n<p><img src=\"\\images\\posts\\操作系统-磁盘数据.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:80%;\" /></p>\n\n<ul>\n  <li>ROM（Basic Input/Output System，BIOS）引导程序：指示CPU将磁盘的主引导记录读入RAM；</li>\n  <li>主引导记录（MBR）：CPU可以执行其中的磁盘引导程序，判断主分区的位置，读入分区引导记录；</li>\n  <li>分区引导记录（PBR）：执行引导程序，在分区根目录下的某个位置找到并读入启动管理器；</li>\n  <li>启动管理器：执行启动管理器，完成操作系统初始化的一系列工作。</li>\n</ul>\n\n<h2 id=\"操作系统引导的过程\">操作系统引导的过程</h2>\n\n<ol>\n  <li>CPU从一个特定主存地址开始取指令，执行<strong>ROM（BIOS）中的引导程序</strong>（先进行硬件自检，再开机）；</li>\n  <li>将磁盘的第一块——<strong>主引导记录（MBR）</strong>读入内存，执行磁盘引导程序，扫描分区表；</li>\n  <li>从活动分区（又称主分区，即安装了操作系统的分区）读入<strong>分区引导记录（PBR）</strong>，执行其中的程序；</li>\n  <li>从根目录下找到完整的<strong>操作系统初始化程序（即启动管理器）</strong>并执行，完成“开机”的一系列动作。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AB-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC-Boot/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（八）操作系统引导（Boot）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T22:24:43+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（八）操作系统引导（Boot）</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（七）操作系统体系结构",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%83-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#操作系统的内核\" id=\"markdown-toc-操作系统的内核\">操作系统的内核</a></li>\n  <li><a href=\"#宏内核大内核单内核和微内核\" id=\"markdown-toc-宏内核大内核单内核和微内核\">宏内核（大内核/单内核）和微内核</a></li>\n  <li><a href=\"#分层结构\" id=\"markdown-toc-分层结构\">分层结构</a></li>\n  <li><a href=\"#模块化\" id=\"markdown-toc-模块化\">模块化</a></li>\n  <li><a href=\"#外核\" id=\"markdown-toc-外核\">外核</a></li>\n</ol>\n\n<h2 id=\"操作系统的内核\">操作系统的内核</h2>\n\n<p>操作系统内部的层次结构可以进一步划分，如下图所示：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-操作系统分层.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<ul>\n  <li>非内核部分：Ubuntu、CentOS的开发团队，其主要工作是实现非内核功能，而内核都是用了Linux内核。</li>\n  <li>时钟中断：利用时钟中断实现计时功能；</li>\n  <li>原语：原语是一种特殊的程序，具有原子性。也就是说，这段程序的运行必须一气呵成，不可被“中断”。</li>\n</ul>\n\n<p>操作系统内部可以划分为内核和非内核部分，<strong>内核</strong>是操作系统最基本、最核心的部分，实现操作系统内核功能的程序是内核程序。</p>\n\n<p>其中，<strong>时钟管理、中断处理和原语等</strong>部分是<strong>与硬件关联较紧密的模块</strong>；而<strong>管理模块</strong>负责的管理工作更多的是<strong>对数据结构的操作，不会直接涉及硬件</strong>。</p>\n\n<p><strong>操作系统内核</strong>需要运行在<strong>内核态</strong>；</p>\n\n<p><strong>操作系统的非内核功能</strong>运行在<strong>用户态</strong>。</p>\n<h2 id=\"宏内核大内核单内核和微内核\">宏内核（大内核/单内核）和微内核</h2>\n\n<p>把所有功能都包含在内的体系结构叫做宏内核；</p>\n\n<p><img src=\"\\images\\posts\\操作系统-宏内核体系结构.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>内核当中只保留与硬件关联最紧密部分的体系结构叫微内核。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-微内核体系结构.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>现在，应用程序想要请求操作系统的服务，这个服务的处理同时涉及到进程管理、存储管理、设备管理。</p>\n\n<p>此时使用宏内核结构需要进行两次变态，而使用微内核结构需要进行六次变态。</p>\n\n<p><strong>变态的过程是有成本的</strong>，要消耗不少时间，<strong>频繁地变态会降低系统性能</strong>。</p>\n\n<p>宏内核的特点</p>\n\n<p>所有的系统功能都放在内核里（宏内核结构的OS通常也采用了”模块化”的设计思想）。</p>\n\n<p>宏内核的优点</p>\n\n<p>性能高，内核内部各种功能都可以直接相互调用。</p>\n\n<p>宏内核的缺点</p>\n\n<ol>\n  <li>内核庞大功能复杂，难以维护；</li>\n  <li>内核中某个功能模块出错，就可能导致整个系统崩溃。</li>\n</ol>\n\n<p>微内核的特点</p>\n\n<p>只把中断、原语、进程通信等最核心的功能放入内核。进程管理、文件管理、设备管理等功能以用户进程的形式运行在用户态。</p>\n\n<p>微内核的优点</p>\n\n<ol>\n  <li>内核小功能少、易于维护，内核可靠性高；</li>\n  <li>内核外的某个功能模块出错不会导致整个系统崩溃。</li>\n</ol>\n\n<p>微内核的缺点</p>\n\n<ol>\n  <li>性能低，需要频繁的切换用户态/核心态。用户态下的各功能模块不可以直接相互调用，只能通过内核的”消息传递“来间接通信；</li>\n  <li>用户态下的各功能模块不可以直接相互调用，只能通过内核的”消息传递“来间接通信。</li>\n</ol>\n\n<h2 id=\"分层结构\">分层结构</h2>\n\n<p>分层结构的特点</p>\n\n<p><img src=\"\\images\\posts\\操作系统-分层结构.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>内核分多层，每层可单向调用更低一层提供的接口。</p>\n\n<p>分层结构的优点</p>\n\n<ol>\n  <li>便于调试和验证，自底向上逐层调试验证；</li>\n  <li>易扩充和易维护，各层之间调用接口清晰固定。</li>\n</ol>\n\n<p>分层结构的缺点</p>\n\n<ol>\n  <li>仅可调用相邻低层，难以合理定义各层的边界；</li>\n  <li>效率低，不可跨层调用，系统调用执行时间长。</li>\n</ol>\n\n<h2 id=\"模块化\">模块化</h2>\n\n<p>模块化是将操作系统按功能划分为若干个具有一定独立性的模块。每个模块具有某方面的管理功能，并<strong>规定好各模块间的接口</strong>，使各模块之间能通过接口进行通信。\n还可以进一步将各模块细分为若干个具有一定功能的子模块，同样也<strong>规定好各子模块之间的接口</strong>。\n把这种设计方法称为<strong>模块-接口法</strong>，下图为由模块、子模块等组成的模块化操作系统结构：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-模块化.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>模块化的特点</p>\n\n<p>将内核划分为多个模块，各模块之间相互协作。</p>\n\n<p>内核=主模块+可加载内核模块；</p>\n\n<p>主模块︰只负责核心功能，如进程调度、内存管理；</p>\n\n<p>可加载内核模块︰可以动态加载新模块到内核，而无需重新编译整个内核。</p>\n\n<p>模块化的优点</p>\n\n<ol>\n  <li>模块间逻辑清晰易于维护，确定模块间接口后即可多模块同时开发；</li>\n  <li>支持动态加载新的内核模块（如：安装设备驱动程序、安装新的文件系统模块到内核），增强OS适应性；</li>\n  <li>任何模块都可以直接调用其他模块，无需采用消息传递进行通信，效率高。</li>\n</ol>\n\n<p>模块化的缺点</p>\n\n<ol>\n  <li>模块间的接口定义未必合理、实用；</li>\n  <li>模块间相互依赖，更难调试和验证。</li>\n</ol>\n\n<h2 id=\"外核\">外核</h2>\n\n<p>外核的特点</p>\n\n<p>内核负责进程调度、进程通信等功能，外核负责为用户进程分配未经抽象的硬件资源，且由外核负责保证资源使用安全。</p>\n\n<p>外核的优点</p>\n\n<ol>\n  <li>外核可直接给用户进程分配”不虚拟、不抽象“的硬件资源，使用户进程可以更灵活地使用硬件资源；</li>\n  <li>减少了虚拟硬件资源的”映射层“，提升效率。</li>\n</ol>\n\n<p>外核的缺点</p>\n\n<ol>\n  <li>降低了系统的一致性；</li>\n  <li>使系统变得更复杂。</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%83-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（七）操作系统体系结构'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T21:29:07+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（七）操作系统体系结构</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（六）系统调用",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AD-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#什么是系统调用系统调用的作用\" id=\"markdown-toc-什么是系统调用系统调用的作用\">什么是系统调用？系统调用的作用</a></li>\n  <li><a href=\"#系统调用与库函数的区别\" id=\"markdown-toc-系统调用与库函数的区别\">系统调用与库函数的区别</a></li>\n  <li><a href=\"#为什么系统调用是必须的\" id=\"markdown-toc-为什么系统调用是必须的\">为什么系统调用是必须的？</a></li>\n  <li><a href=\"#什么功能要用系统调用实现\" id=\"markdown-toc-什么功能要用系统调用实现\">什么功能要用系统调用实现</a></li>\n  <li><a href=\"#系统调用的过程\" id=\"markdown-toc-系统调用的过程\">系统调用的过程</a>    <ol>\n      <li><a href=\"#陷入指令系统调用\" id=\"markdown-toc-陷入指令系统调用\">陷入指令系统调用</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"什么是系统调用系统调用的作用\">什么是系统调用？系统调用的作用</h2>\n<p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中程序接口由一组<strong>系统调用</strong>组成。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的作用1.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，<strong>应用程序可以通过系统调用来请求获得操作系统内核的服务</strong>。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的作用2.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h2 id=\"系统调用与库函数的区别\">系统调用与库函数的区别</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>普通应用程序</th>\n      <th>可直接进行系统调用，也可使用库函数。有的库函数涉及系统调用，有的不涉及。</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>编程语言</td>\n      <td>向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使程序员编程更加方便。</td>\n    </tr>\n    <tr>\n      <td>操作系统</td>\n      <td>向上提供系统调用，使得上层程序能请求内核的服务。</td>\n    </tr>\n    <tr>\n      <td>裸机</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用和库函数1.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>不涉及系统调用的库函数：如“取绝对值”的函数；</p>\n\n<p>涉及系统调用的库函数：如“创建一个新文件”的函数。</p>\n\n<h2 id=\"为什么系统调用是必须的\">为什么系统调用是必须的？</h2>\n\n<p>生活场景：去学校打印店打印论文，你按下了WPS的“打印”选项，打印机开始工作。</p>\n\n<p>你的论文打印到一半时，另一位同学按下了Word的“打印”按钮，开始打印他自己的论文。</p>\n\n<p>如果两个进程可以随意地、并发地共享打印机资源，打印机设备交替地收到WPS和Word两个进程发来的打印请求，两篇论文的内容混杂在一起了…</p>\n\n<p>解决方法：<strong>由操作系统内核对共享资源进行统一管理</strong>，并向上提供“系统调用”用户进程想要使用打印机这种共享资源，只能通过系统调用向操作系统内核发出请求。内核会对各个请求进行协调处理。</p>\n\n<h2 id=\"什么功能要用系统调用实现\">什么功能要用系统调用实现</h2>\n\n<p>应用程序通过系统调用请求操作系统的服务。\n而系统中的各种共享资源都由操作系统内核统一掌管，因此<strong>凡是与共享资源有关的操作(如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求</strong>，由操作系统内核代为完成。\n这样可以<strong>保证系统的稳定性和安全性</strong>，防止用户进行非法操作。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的功能.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h2 id=\"系统调用的过程\">系统调用的过程</h2>\n\n<h3 id=\"陷入指令系统调用\">陷入指令系统调用</h3>\n<ol>\n  <li>应用程序执行传参指令，<strong>将传递的参数（参数1、参数2…）存放于CPU寄存器</strong>，参数可以指明系统调用类型；</li>\n  <li>应用程序执行<strong>陷入指令</strong>，引发一个内中断信号。该中断由陷入指令引发，因此转入相应中断处理程序，即系统调用的入口程序；</li>\n  <li>处理器转变为内核态运行，执行<strong>系统调用入口程序</strong>，根据寄存器中的参数判断用户需要哪种系统调用服务；</li>\n  <li>运行<strong>系统调用所对应的处理程序</strong>；</li>\n  <li>完成系统调用，CPU转变为用户态。</li>\n</ol>\n\n<p>即传递系统调用参数→执行陷入指令（用户态）→执行相应的内请求核程序处理系统调用（内核态）→返回应用程序。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用的过程1.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:80%;\" /></p>\n\n<p>注意：</p>\n<ol>\n  <li><strong>陷入指令</strong>是在<strong>用户态</strong>执行的，执行陷入指令之后立即<strong>引发一个内中断</strong>，使CPU<strong>进入内核态</strong>；</li>\n  <li><strong>发出系统调用请求是在用户态</strong>，而<strong>对系统调用的相应处理在核心态</strong>下进行。</li>\n</ol>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%85%AD-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（六）系统调用'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T20:35:40+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（六）系统调用</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（五）中断和异常",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%94-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#中断的作用\" id=\"markdown-toc-中断的作用\">中断的作用</a></li>\n  <li><a href=\"#中断的类型\" id=\"markdown-toc-中断的类型\">中断的类型</a>    <ol>\n      <li><a href=\"#内中断异常类型\" id=\"markdown-toc-内中断异常类型\">内中断（异常）类型：</a></li>\n      <li><a href=\"#外中断类型\" id=\"markdown-toc-外中断类型\">外中断类型：</a></li>\n      <li><a href=\"#内中断异常示例\" id=\"markdown-toc-内中断异常示例\">内中断（异常）示例</a></li>\n      <li><a href=\"#外中断示例\" id=\"markdown-toc-外中断示例\">外中断示例</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#中断机制的基本原理\" id=\"markdown-toc-中断机制的基本原理\">中断机制的基本原理</a></li>\n</ol>\n\n<h2 id=\"中断的作用\">中断的作用</h2>\n<p>CPU上会运行两种程序，一种是<strong>操作系统内核程序</strong>，一种是<strong>应用程序</strong>。</p>\n\n<p>在合适的情况下，操作系统内核会把CPU的使用权主动让给应用程序。</p>\n\n<p>“中断”是<strong>让操作系统内核夺回CPU使用权的唯一途径</strong>。</p>\n\n<p>如果没有“中断”机制，那么一旦应用程序上CPU运行，CPU就会一直运行这个应用程序（没有中断，就没有并发）。</p>\n\n<h2 id=\"中断的类型\">中断的类型</h2>\n\n<p>广义上中断包括内中断（又称异常）和外中断（狭义上的中断）两种。</p>\n\n<p>内中断与当前执行的<strong>指令有关</strong>，中断信号来源于<strong>CPU内部</strong>。</p>\n\n<p>外中断与当前执行的<strong>指令无关</strong>，中断信号来源于<strong>CPU外部</strong>。</p>\n\n<h3 id=\"内中断异常类型\">内中断（异常）类型：</h3>\n<ol>\n  <li>陷入（trap）：由陷入指令引发，是应用程序故意引发的；</li>\n  <li>故障（fault）：由错误条件引起的，可能被内核程序修复。内核程序修复故障后会把CPU使用权还给应用程序，让它继续执行下去。如缺页故障等；</li>\n  <li>终止（abort）：由致命错误引起，内核程序无法修复该错误，因此一般不再将CPU使用权还给引发终止的应用程序，而是直接终止该应用程序。如整数除0、非法使用特权指令等。</li>\n</ol>\n\n<h3 id=\"外中断类型\">外中断类型：</h3>\n<p>包括时钟中断、I/O中断等。</p>\n\n<h3 id=\"内中断异常示例\">内中断（异常）示例</h3>\n\n<p><strong>终止指令</strong>：若当前执行的指令是非法的，则会引发一个中断信号。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 试图在用户态下执行特权指令\n2. 执行除法指令时发现除数为0\n</code></pre></div></div>\n\n<p><strong>陷入指令</strong>：有时候应用程序想请求操作系统内核的服务，此时会执行一条特殊的指令――陷入指令，该指令会引发一个内部中断信号。</p>\n\n<p>执行“陷入指令”，意味着应用程序主动地将CPU控制权还给操作系统内核。“系统调用”就是通过陷入指令完成的。</p>\n\n<h3 id=\"外中断示例\">外中断示例</h3>\n\n<p><strong>每一条指令执行结束时</strong>，CPU都会例行检查是否有外中断信号。</p>\n\n<p>时钟中断：时钟部件每隔一个时间片（如50ms）会给CPU发送一个时钟中断信号。时钟中断的过程如下：</p>\n\n<ol>\n  <li>在应用程序1的执行过程中，执行时间达到一个时间片，CPU分给该应用程序的时间耗尽。</li>\n  <li>此时时钟部件向CPU发送一个时钟中断信号，CPU转变为内核态并执行处理时钟中断的内核程序。操作系统内核决定接下来让应用程序2在上CPU运行。</li>\n  <li>接下来切换为用户态执行应用程序2，如此往复。</li>\n</ol>\n\n<p>I/O中断：由输入/输出设备发来的中断信号。当输入/输出任务完成后，向CPU发送中断信号。</p>\n\n<h2 id=\"中断机制的基本原理\">中断机制的基本原理</h2>\n\n<p>不同的中断信号，需要用不同的中断处理程序来处理。当CPU检测到中断信号后，会根据中断信号的类型去查询“<strong>中断向量表</strong>”，以此来找到相应的中断处理程序在内存中的存放位置。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-中断向量表示例.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p><strong>中断处理程序一定是内核程序</strong>，因此需要运行在“内核态”。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%94-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（五）中断和异常'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T20:09:49+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（五）中断和异常</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（四）操作系统的运行机制",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#程序是如何运行的\" id=\"markdown-toc-程序是如何运行的\">程序是如何运行的</a></li>\n  <li><a href=\"#内核程序和应用程序\" id=\"markdown-toc-内核程序和应用程序\">内核程序和应用程序</a></li>\n  <li><a href=\"#特权指令和非特权指令\" id=\"markdown-toc-特权指令和非特权指令\">特权指令和非特权指令</a></li>\n  <li><a href=\"#处理器的内核态和用户态\" id=\"markdown-toc-处理器的内核态和用户态\">处理器的内核态和用户态</a>    <ol>\n      <li><a href=\"#内核态和用户态之间的转换\" id=\"markdown-toc-内核态和用户态之间的转换\">内核态和用户态之间的转换</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"程序是如何运行的\">程序是如何运行的</h2>\n<p>在完成代码编写后，编译器将高级语言“翻译”成二进制的机器指令，<strong>程序运行的过程其实就是CPU执行一条一条机器指令的过程</strong>。</p>\n\n<p>“指令”就是处理器（CPU）能识别、执行的最基本命令。</p>\n\n<p>很多人习惯把Linux、Windows、MacOS的“小黑框”中使用的命令也称为“指令”，其实这是“交互式命令接口”，注意与本节的“指令”区别开。本节中的“指令”指二进制机器指令。</p>\n\n<h2 id=\"内核程序和应用程序\">内核程序和应用程序</h2>\n<p>普通程序员写的程序就是“<strong>应用程序</strong>”；</p>\n\n<p>微软、苹果有一帮人负责实现操作系统，他们写的是“<strong>内核程序</strong>”由很多内核程序组成了“<strong>操作系统内核</strong>”，或简称“<strong>内核（Kernel）</strong>”，内核是操作系统最重要最核心的部分，也是<strong>最接近硬件的部分</strong>。</p>\n\n<p>一个操作系统只要有内核就够了（比如Docker仅需Linux内核）。操作系统的功能未必都在内核中，如GUI。</p>\n\n<h2 id=\"特权指令和非特权指令\">特权指令和非特权指令</h2>\n<p>操作系统内核作为“管理者”，有时会让CPU执行一些“特权指令”，如内存清零指令。这些指令影响重大，只允许“管理者”，即操作系统内核来使用。</p>\n\n<p>应用程序只能使用“非特权指令”，如加法指令、减法指令等。</p>\n\n<p>在<strong>CPU设计和生产的时候就划分了特权指令和非特权指令</strong>，因此CPU执行一条指令前就能判断出其类型。</p>\n\n<h2 id=\"处理器的内核态和用户态\">处理器的内核态和用户态</h2>\n<p>虽然CPU能判断出指令类型，但是它怎么区分此时正在运行的是内核程序还是应用程序?</p>\n\n<p>CPU有两种状态，“<strong>内核态</strong>”和“<strong>用户态</strong>”</p>\n\n<p>处于内核态时，说明此时<strong>正在运行的是内核程序</strong>，此时<strong>可以执行特权指令</strong>；</p>\n\n<p>处于用户态时，说明此时<strong>正在运行的是应用程序</strong>，此时<strong>只能执行非特权指令</strong>。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CPU中有一个寄存器叫程序状态字寄存器（PSW），其中有个二进制位，1表示“内核态”，0表示“用户态”。\n</code></pre></div></div>\n\n<h3 id=\"内核态和用户态之间的转换\">内核态和用户态之间的转换</h3>\n\n<ol>\n  <li>刚开机时，CPU为“内核态”，操作系统内核程序先上CPU运行；</li>\n  <li>开机完成后，用户可以启动某个应用程序；</li>\n  <li>操作系统内核程序在合适的时候主动让出CPU，让该应用程序上CPU运行（操作系统内核在让出CPU之前，会<strong>用一条特权指令把PSW的标志位设置为“用户态”</strong>）；</li>\n  <li>应用程序运行在“用户态”；</li>\n  <li>应用程序中植入了一条特权指令，CPU发现接下来要执行的这条指令是特权指令，但是自己又处于“用户态”；</li>\n  <li>因此，这个事件会引发一个<strong>中断信号</strong>（<strong>CPU检测到中断信号后</strong>，会立即<strong>变为“内核态”</strong>，并停止运行当前的应用程序，转而运行处理中断信号的内核程序）；</li>\n  <li>“中断”使操作系统再次夺回CPU的控制权；</li>\n  <li>操作系统会对引发中断的事件进行处理，处理完了再把CPU使用权交给别的应用程序。</li>\n</ol>\n\n<p>内核态→用户态：执行一条<strong>特权指令——修改PSW</strong>的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权。</p>\n\n<p>用户态→内核态：由“<strong>中断</strong>”引发，<strong>硬件自动完成变态过程</strong>，触发中断信号意味着操作系统将强行夺回CPU的使用权（除了非法使用特权指令之外，还有很多事件会触发中断信号。一个共性是，<strong>但凡需要操作系统介入的地方，都会触发中断信号</strong>）。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9B%9B-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（四）操作系统的运行机制'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T19:45:27+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（四）操作系统的运行机制</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（三）操作系统的发展和分类",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%92%8C%E5%88%86%E7%B1%BB/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#手工操作阶段\" id=\"markdown-toc-手工操作阶段\">手工操作阶段</a></li>\n  <li><a href=\"#批处理阶段\" id=\"markdown-toc-批处理阶段\">批处理阶段</a>    <ol>\n      <li><a href=\"#单道批处理系统\" id=\"markdown-toc-单道批处理系统\">单道批处理系统</a></li>\n      <li><a href=\"#多道批处理系统\" id=\"markdown-toc-多道批处理系统\">多道批处理系统</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#分时操作系统\" id=\"markdown-toc-分时操作系统\">分时操作系统</a></li>\n  <li><a href=\"#实时操作系统\" id=\"markdown-toc-实时操作系统\">实时操作系统</a></li>\n  <li><a href=\"#其它操作系统\" id=\"markdown-toc-其它操作系统\">其它操作系统</a></li>\n</ol>\n\n<p>操作系统的发展主要包含以下发展阶段及分类：</p>\n\n<p><img src=\"\\images\\posts\\操作系统-操作系统的分类.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h2 id=\"手工操作阶段\">手工操作阶段</h2>\n\n<p>在操作系统的手工操作阶段，由于大量时间被消耗在纸带的装取及读写上，计算机的计算效率极低。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-手工操作.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>手工操作阶段的主要缺点是<strong>用户独占全机、人机速度矛盾导致资源利用率极低</strong>。</p>\n\n<h2 id=\"批处理阶段\">批处理阶段</h2>\n\n<h3 id=\"单道批处理系统\">单道批处理系统</h3>\n\n<p>引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-单道批处理示意.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>用户通过外围机把程序提前存到磁带里，磁带的读写速度比纸带快很多。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-单道批处理.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。</p>\n\n<p>主要缺点：<strong>内存中仅能有一道程序运行</strong>，只有该程序运行结束之后才能调入下一道程序。<strong>CPU有大量的时间是在空闲等待I/O完成</strong>，资源利用率依然很低。</p>\n\n<h3 id=\"多道批处理系统\">多道批处理系统</h3>\n\n<p>每次往内存中读入多道程序，此时操作系统正式诞生，用于支持多道程序并发运行。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-多道批处理.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>主要优点：多道程序<strong>并发</strong>执行，<strong>共享</strong>计算机资源。<strong>资源利用率大幅提升</strong>，CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大。</p>\n\n<p>主要缺点：用户响应时间长，<strong>没有人机交互功能</strong>（用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行。比如无法调试程序/无法在程序运行过程中输入一些参数）</p>\n\n<h2 id=\"分时操作系统\">分时操作系统</h2>\n\n<p>分时操作系统的计算机以<strong>时间片</strong>为单位<strong>轮流为各个用户/作业服务</strong>，各个用户可通过终端与计算机进行交互。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-分时操作系统示意.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>主要优点：用户请求可以被即时响应，<strong>解决了人机交互问题</strong>。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。</p>\n\n<p>主要缺点：<strong>不能优先处理一些紧急任务</strong>。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。</p>\n\n<h2 id=\"实时操作系统\">实时操作系统</h2>\n\n<p>主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。</p>\n\n<p>在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且<strong>要在严格的时限内处理完事件</strong>。实时操作系统的主要特点是<strong>及时性和可靠性</strong>。</p>\n\n<p>实时操作系统主要包含硬实时系统和软实时系统。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 硬实时系统必须在绝对严格的规定时间内完成处理（如导弹控制系统、自动驾驶系统）；\n2. 软实时系统能接收偶尔违反时间规定（如抢票系统）。\n</code></pre></div></div>\n\n<h2 id=\"其它操作系统\">其它操作系统</h2>\n\n<p>网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，<strong>实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信</strong>。（如：Windows NT就是一种典型的网络操作系统，网站服务器就可以使用）</p>\n\n<p>分布式操作系统：主要特点是<strong>分布性和并行性</strong>。系统中的各台计算机地位相同，<strong>任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</strong>。</p>\n\n<p>个人计算机操作系统：如Windows XP、Mac OS，方便个人使用。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%89-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%92%8C%E5%88%86%E7%B1%BB/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（三）操作系统的发展和分类'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T18:26:17+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（三）操作系统的发展和分类</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（二）操作系统的特征",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#并发\" id=\"markdown-toc-并发\">并发</a></li>\n  <li><a href=\"#共享\" id=\"markdown-toc-共享\">共享</a>    <ol>\n      <li><a href=\"#互斥共享方式\" id=\"markdown-toc-互斥共享方式\">互斥共享方式</a></li>\n      <li><a href=\"#同时共享方式\" id=\"markdown-toc-同时共享方式\">同时共享方式</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#并发和共享的关系\" id=\"markdown-toc-并发和共享的关系\">并发和共享的关系</a></li>\n  <li><a href=\"#虚拟\" id=\"markdown-toc-虚拟\">虚拟</a></li>\n  <li><a href=\"#异步\" id=\"markdown-toc-异步\">异步</a></li>\n</ol>\n\n<p>操作系统主要包括并发、共享、虚拟及异步四个特征。其中并发和共享二者互为存在条件，且没有并发和共享，就谈不上虚拟和异步，因此<strong>并发和共享是操作系统的两个最基本的特征</strong>。</p>\n\n<h2 id=\"并发\">并发</h2>\n\n<p><strong>并发</strong>：指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。</p>\n\n<p><strong>并行</strong>：指两个或多个事件在同一时刻同时发生。</p>\n\n<p><strong>操作系统的并发性</strong>指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。</p>\n\n<p>操作系统是伴随着“多道程序技术”而出现的。因此操作系统和程序并发是一起诞生的。</p>\n\n<p>单核CPU同一时刻只能执行一个程序，各个程序只能并发执行；多核CPU同一时刻可以同时执行多个程序，多个程序可以并行执行。</p>\n\n<p>Intel第八代i3处理器就是4核CPU，意味着可以并行地执行4个程序。但即使是对于4核CPU来说，只要有4个以上的程序需要“同时”运行，那么并发性依然是必不可少的，因此并发性是操作系统一个最基本的特性。</p>\n\n<h2 id=\"共享\">共享</h2>\n<p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n\n<p>共享主要包括互斥共享和同时共享两种共享方式。</p>\n\n<h3 id=\"互斥共享方式\">互斥共享方式</h3>\n<p>系统中的某些资源，虽然可以提供给多个进程使用，但<strong>一个时间段内只允许一个进程访问该资源</strong>。</p>\n\n<p>比如使用QQ和微信进行视频通话，同一时间段摄像头只能分配给其中一个进程。</p>\n\n<h3 id=\"同时共享方式\">同时共享方式</h3>\n<p>系统中的某些资源，<strong>允许一个时间段内由多个进程“同时”对它们进行访问</strong>。但所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问的（即分时共享）。</p>\n\n<p>比如使用QQ发送文件A，同时使用微信发送文件B。宏观上看，两边都在同时读取并发送文件，说明两个进程都在访问硬盘资源，从中读取数据。微观上看，两个进程是交替着访问硬盘的。</p>\n\n<h2 id=\"并发和共享的关系\">并发和共享的关系</h2>\n<p><strong>并发性</strong>指计算机系统中同时存在着多个运行着的程序。</p>\n\n<p><strong>共享性</strong>是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n\n<p>在比如使用QQ发送文件A，同时使用微信发送文件B这一过程中，</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 两个进程正在并发执行（并发性）\n2. 需要共享地访问硬盘资源（共享性）\n</code></pre></div></div>\n\n<p>如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义；如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。</p>\n\n<h2 id=\"虚拟\">虚拟</h2>\n<p>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者)是用户感受到的。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>GTA5需要4GB的运行内存，QQ需要256MB的内存，迅雷需要256MB的内存，网易云音乐需要256MB的内存......\n我的电脑:4GB内存\n问题:这些程序同时运行需要的内存远大于4GB，那么为什么它们还可以在我的电脑上同时运行呢?\n答:这是虚拟存储器技术。实际只有4GB的内存，在用户看来似乎远远大于4GB\n</code></pre></div></div>\n\n<p>虚拟存储器技术用到了<strong>空分复用技术</strong>。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>某用户在单核CPU的电脑上同时打开了6个应用程序。\n问题:既然一个程序需要被分配CPU才能正常执行，那么为什么单核CPU的电脑中能同时运行这么多个程序呢?\n答:这是虚拟处理器技术。实际上只有一个单核CPU，在用户看来似乎有6个CPU在同时为自己服务\n</code></pre></div></div>\n\n<p>这里用到虚拟技术中的<strong>时分复用技术</strong>。微观上处理机在各个微小的时间段内交替为各个进程服务。</p>\n\n<p>显然，如果失去了并发性，则<strong>一个时间段内系统中只需运行一道程序，那么就失去了实现虚拟性的意义了</strong>。因此，<strong>没有并发性，就谈不上虚拟性</strong>。</p>\n\n<h2 id=\"异步\">异步</h2>\n<p>异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p>\n\n<p>由于并发运行的程序会争抢着使用系统资源，而系统中的资源有限，因此进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。</p>\n\n<p>如果失去了并发性，即系统只能串行地运行各个程序，那么每个程序的执行会一贯到底。<strong>只有系统拥有并发性，才有可能导致异步性</strong>。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%BA%8C-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（二）操作系统的特征'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T05:45:10+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（二）操作系统的特征</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "操作系统（一）操作系统的概念和功能",
      "category" : "",
      "tags"     : "操作系统",
      "url"      : "/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8A%9F%E8%83%BD/",
      "date"     : "Apr 20, 2022",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#声明\" id=\"markdown-toc-声明\">声明</a></li>\n  <li><a href=\"#操作系统的定义\" id=\"markdown-toc-操作系统的定义\">操作系统的定义</a></li>\n  <li><a href=\"#操作系统的功能和目标\" id=\"markdown-toc-操作系统的功能和目标\">操作系统的功能和目标</a>    <ol>\n      <li><a href=\"#作为系统资源的管理者\" id=\"markdown-toc-作为系统资源的管理者\">作为系统资源的管理者</a></li>\n      <li><a href=\"#向上层提供方便易用的服务\" id=\"markdown-toc-向上层提供方便易用的服务\">向上层提供方便易用的服务</a>        <ol>\n          <li><a href=\"#封装思想\" id=\"markdown-toc-封装思想\">封装思想</a></li>\n          <li><a href=\"#操作系统提供的服务示例\" id=\"markdown-toc-操作系统提供的服务示例\">操作系统提供的服务示例</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#作为最接近硬件的层次\" id=\"markdown-toc-作为最接近硬件的层次\">作为最接近硬件的层次</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"声明\">声明</h2>\n<p>本系列主要参考了\n<a href=\"https://www.bilibili.com/video/BV1YE411D7nH\">王道计算机考研 操作系统</a>\n完成，准确来说是作者的学习笔记，读者可以视频为主，以本文为辅进行学习。</p>\n\n<h2 id=\"操作系统的定义\">操作系统的定义</h2>\n\n<p>在了解操作系统的定义前，为了方便起见，我们可以将计算机系统抽象为包含如下四层的层次结构。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-计算机系统层次结构2.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<p>明确操作系统在计算机系统所在位置后，可以给出操作系统的定义</p>\n\n<p>操作系统（Operating System，OS）是指控制和<strong>管理</strong>整个计算机系统的<strong>硬件和软件</strong>资源，并合理地组织调度计算机的工作和资源的分配；以<strong>提供给用户和其他软件方便的接口和环境</strong>；它是计算机系统中最基本的、最接近系统硬件的<strong>系统软件</strong>。</p>\n\n<p>在任务管理器中可以看到操作系统对应用程序使用的管理及对硬件资源的监控。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-任务管理器.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<h2 id=\"操作系统的功能和目标\">操作系统的功能和目标</h2>\n\n<h3 id=\"作为系统资源的管理者\">作为系统资源的管理者</h3>\n\n<p>操作系统作为系统资源的管理者，其提供的四种功能包括<strong>处理机管理、存储器管理、文件管理及设备管理</strong>。其主要目标包括<strong>安全和高效</strong>。</p>\n\n<p>使用QQ进行视频聊天时，操作系统的工作主要包含四步：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. 在各个文件夹中找到QQ安装的位置；（逐层打开文件夹，找到QQ的可执行文件存放位置。）\n2. 用户双击打开QQ；（将该程序相关数据放入内存，执行一个程序前**需要将该程序放到内存中**，才能被CPU处理。）\n3. QQ程序正常运行；（对应进程被处理机（CPU）处理。）\n4. 开始视频聊天。（需要将摄像头设备分配给进程。）\n</code></pre></div></div>\n\n<h3 id=\"向上层提供方便易用的服务\">向上层提供方便易用的服务</h3>\n\n<h4 id=\"封装思想\">封装思想</h4>\n\n<p>操作系统把一些丑陋的硬件功能封装成简单易用的服务，使用户能更方便地使用计算机,用户无需关心底层硬件的原理，只需要对操作系统发出命令即可。</p>\n\n<p>硬件只听得懂二进制指令，如：<code class=\"language-plaintext highlighter-rouge\">01010111101110111010101</code>，对外暴露了“丑陋”、不友好的交互接口。</p>\n\n<p>在硬件之上安装了操作系统，操作系统对外暴露了“美丽”、友好的交互接口。</p>\n\n<h4 id=\"操作系统提供的服务示例\">操作系统提供的服务示例</h4>\n\n<p>操作系统提供的服务包括图形化用户接口、命令接口及程序接口，其中命令接口和程序接口统称用户接口。</p>\n\n<p>（1）图形化用户接口(Graphical User Interface，GUI)</p>\n\n<p>用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>比如在Windows操作系统中，删除一个文件只需要把文件“拖拽”到回收站即可。\n</code></pre></div></div>\n\n<p>（2）联机命令接口(交互式命令接口)</p>\n\n<p>由一组键盘操作命令及命令解释程序组成（通过命令解释程序对用户从键盘输入的命令进行检查命令格式、完成命令的执行）。</p>\n\n<p>即用户说一句，系统做一句。</p>\n\n<p>（3）脱机命令接口(批处理命令接口)</p>\n\n<p>由一组作业控制语言（JCL）组成。</p>\n\n<p>比如.bat、.sh等批处理文件。即用户说一堆，系统做一堆。</p>\n\n<p>（4）程序接口</p>\n\n<p>可以在程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用。</p>\n\n<p><img src=\"\\images\\posts\\操作系统-系统调用.svg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:100%;\" /></p>\n\n<h3 id=\"作为最接近硬件的层次\">作为最接近硬件的层次</h3>\n\n<p>操作系统作为最接近硬件的层次，需要实现<strong>对硬件机器的拓展</strong>。</p>\n\n<p>没有任何软件支持的计算机称为<strong>裸机</strong>。在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强、使用更方便的机器。</p>\n\n<p>通常把覆盖了软件的机器成为<strong>扩充机器</strong>，又称之为<strong>虚拟机</strong>。</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>类比于汽车，硬件级别的发动机和轮胎无法直接衔接，使用传动系统让发动机带动轮子，即完成了对原始硬件机器的拓展。\n</code></pre></div></div>\n\n<p>操作系统对硬件机器的拓展：将CPU、内存、磁盘、显示器、键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能。</p>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2022/04/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8A%9F%E8%83%BD/'> <img src='/images/covers/操作系统-cover1.png' alt='操作系统（一）操作系统的概念和功能'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2022-04-20T04:17:03+10:00'>Apr 20, 2022</time> </span> </div><h2 class='article__title'>操作系统（一）操作系统的概念和功能</h2> <p class='article__excerpt'>操作系统（Operating System，OS）是指控制和管理计算机系统软硬件资源，合理组织调度计算机工作和资源分配，提供给用户和其它软件方便的接口和环境。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/操作系统' class='article__tag'>操作系统</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "双指针问题（二）滑动窗口",
      "category" : "",
      "tags"     : "算法, 指针, 链表, and 数据结构",
      "url"      : "/zh-cn/2021/10/20/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
      "date"     : "Oct 20, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a></li>\n  <li><a href=\"#209-长度最小的子数组\" id=\"markdown-toc-209-长度最小的子数组\">209. 长度最小的子数组</a></li>\n  <li><a href=\"#713-乘积小于k的子数组\" id=\"markdown-toc-713-乘积小于k的子数组\">713. 乘积小于K的子数组</a></li>\n  <li><a href=\"#3-无重复字符的最长子串\" id=\"markdown-toc-3-无重复字符的最长子串\">3. 无重复字符的最长子串</a></li>\n  <li><a href=\"#438-找到字符串中所有字母异位词\" id=\"markdown-toc-438-找到字符串中所有字母异位词\">438. 找到字符串中所有字母异位词</a></li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>滑动窗口是在数组上通过双指针同向移动而解决问题的方法。这样的问题我们不必为它们专门命名一个名字，它们的解法其实是很自然的。</p>\n\n<p>滑动窗口通常是暴力解法的优化，掌握这一类问题最好的办法就是练习，然后思考清楚为什么可以使用滑动窗口。</p>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></h2>\n\n<p>该题是最基本的滑动窗口问题，我们可以用两个指针\\(l\\)和\\(r\\)表示窗口的左右段，然后让指针\\(r\\)持续向右移动，同时用一个变量\\(sum\\)记录\\([l,r]\\)的区间和，若\\(sum\\)满足条件，则记录\\(l\\)和\\(r\\)的差作为答案，并移动指针\\(l\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">INT_MAX</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h2 id=\"713-乘积小于k的子数组\"><a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">713. 乘积小于K的子数组</a></h2>\n\n<p>这道题的解法与上道题非常相似，但求的不再是区间长度而是连续子区间数量。</p>\n\n<p>对于子区间数量，我们可以发现，若\\([l,r]\\)是一个符合条件的窗口，则\\([l+i,r],(0&lt;i≤r-l)\\)也必然是符合条件的窗口</p>\n\n<p>即对于任何符合条件的区间\\([l,r]\\)，以\\(r\\)结尾的子集个数永远是\\(r-l+1\\)，因此我们要在每次更新\\(r\\)之前为答案加上\\(r-l+1\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSubarrayProductLessThanK</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">/=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">3. 无重复字符的最长子串</a></h2>\n\n<p>与前面的连续子序列不同的是，这道题要求的是连续子串的长度，因此我们需要修改一下判定条件，若窗口区间内出现重复字符，则更新\\(l\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLongestSubstring</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h2 id=\"438-找到字符串中所有字母异位词\"><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">438. 找到字符串中所有字母异位词</a></h2>\n\n<p>这道题解法与上一题大同小异，是把字符的判据改为了字符串的比较。同时，该题的窗口长度始终保持不变，为\\(p\\)的长度</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">findAnagrams</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">target</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n                <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2021/10/20/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/'> <img src='https://www.bing.com/th?id=OHR.IndianStarTortoise_EN-US4160827746_1920x1080.jpg' alt='双指针问题（二）滑动窗口'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-20T00:41:33+11:00'>Oct 20, 2021</time> </span> </div><h2 class='article__title'>双指针问题（二）滑动窗口</h2> <p class='article__excerpt'>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/指针' class='article__tag'>指针</a>  <a href='/zh-cn/tag/链表' class='article__tag'>链表</a>  <a href='/zh-cn/tag/数据结构' class='article__tag'>数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二分查找（Binary Search）",
      "category" : "",
      "tags"     : "算法",
      "url"      : "/zh-cn/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/",
      "date"     : "Oct 15, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#模板\" id=\"markdown-toc-模板\">模板</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#题目\" id=\"markdown-toc-题目\">题目</a>    <ol>\n      <li><a href=\"#34-在排序数组中查找元素的第一个和最后一个位置\" id=\"markdown-toc-34-在排序数组中查找元素的第一个和最后一个位置\">34. 在排序数组中查找元素的第一个和最后一个位置</a></li>\n      <li><a href=\"#74-搜索二维矩阵\" id=\"markdown-toc-74-搜索二维矩阵\">74. 搜索二维矩阵</a></li>\n      <li><a href=\"#33-搜索旋转排序数组\" id=\"markdown-toc-33-搜索旋转排序数组\">33. 搜索旋转排序数组</a></li>\n      <li><a href=\"#153-寻找旋转排序数组中的最小值\" id=\"markdown-toc-153-寻找旋转排序数组中的最小值\">153. 寻找旋转排序数组中的最小值</a></li>\n      <li><a href=\"#162-寻找峰值\" id=\"markdown-toc-162-寻找峰值\">162. 寻找峰值</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>二分查找是对已排好序的数组查找特定值的常用方法，二分查找不必遍历整个序列，只需关注序列的边界及中间值即可，因此时间复杂度可以达到\\(O(logn)\\)</p>\n\n<h3 id=\"模板\">模板</h3>\n\n<p>在一个有序序列中查找关键字\\(key\\)的模板代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h2 id=\"题目\">题目</h2>\n\n<p>二分的题目模板一般都是固定的，主要是能否想到的对什么进行二分，怎样二分。</p>\n\n<h3 id=\"34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3>\n\n<p>该题不仅要求元素出现的第一个位置，还要求出元素出现的最后一个位置。在模板代码中，若<code class=\"language-plaintext highlighter-rouge\">nums[i] &lt; key</code>，才会继续查找左边，如果我们想在已经找到元素后继续查找，则需要修改为<code class=\"language-plaintext highlighter-rouge\">nums[i] &lt;= key</code>。这样查找的结果是大于\\(key\\)的第一个元素的位置。因此该题的代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">searchRange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">),</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">};</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"74-搜索二维矩阵\"><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\">74. 搜索二维矩阵</a></h3>\n\n<p>依题可知待查找元素必大于或等于该行第一个元素，因此我们先对列进行一次二分查找，寻找不大于\\(target\\)的最大元素</p>\n\n<p>之后对该行进行基本的二分查找，即可得到结果。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">searchMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"c1\">// 先找小于target的第一个数的位置</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>  \t\t\t\t\t     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\t\t\t\t\t\t   <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"33-搜索旋转排序数组\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\">33. 搜索旋转排序数组</a></h3>\n\n<p>该题只保证了数组的局部有序，但对数组进行二分后，会发现总有一半的数组是有序的，此时可以继续对有序的数组进行二分查找，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"153-寻找旋转排序数组中的最小值\"><a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\">153. 寻找旋转排序数组中的最小值</a></h3>\n\n<p>该题要查找的是上一题中旋转的排序数组的最小值，也即旋转点的值，我们依然利用部分有序的性质，二分查找数组最小值，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findMin</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"162-寻找峰值\"><a href=\"https://leetcode-cn.com/problems/find-peak-element/\">162. 寻找峰值</a></h3>\n\n<p>我们可以用\\([l,r]\\)来存储可能存在峰值的区间，根据\\(mid\\)进行二分，若<code class=\"language-plaintext highlighter-rouge\">nums[mid] &lt; nums[mid + 1]</code>则说明在区间\\([mid+1,r]\\)存在峰值，反之则说明在区间[l,mid]存在峰值，因此代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findPeakElement</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 用l,r表示可能存在峰值的区间</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"c1\">//mid+1-r更大</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span><span class=\"c1\">//l-mid更大</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/'> <img src='/images/covers/blackrock2.jpg' alt='二分查找（Binary Search）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2021-10-15T23:51:55+11:00'>Oct 15, 2021</time> </span> </div><h2 class='article__title'>二分查找（Binary Search）</h2> <p class='article__excerpt'>二分查找是对已排好序的数组查找特定值的常用方法，二分查找不必遍历整个序列，只需关注序列的边界及中间值即可，因此时间复杂度可以达到 O(log n)</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（四）最长上升子序列（LIS）",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "算法 and 动态规划",
      "url"      : "/zh-cn/dynamic%20programming%20fundamentals/2021/10/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/",
      "date"     : "Oct 12, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#动态规划\" id=\"markdown-toc-动态规划\">动态规划</a></li>\n  <li><a href=\"#树状数组\" id=\"markdown-toc-树状数组\">树状数组</a></li>\n</ol>\n\n<p><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">300.最长递增子序列</a></p>\n\n<h2 id=\"动态规划\">动态规划</h2>\n<p>我们可以定义\\(dp[i]\\)为以\\(i\\)结尾的递增子序列长度的最大值（数组\\(dp\\)的常用套路），则我们可以写出状态转移方程为\n\\(dp[i]=max(dp[j])+1,(0≤j&lt;i, nums[j]&lt;nums[i])\\)</p>\n\n<p>最后，此题的结果便是\\(max(dp[i])\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>该解法时间复杂度为\\(O(n^2)\\)</p>\n\n<h2 id=\"树状数组\">树状数组</h2>\n<p>LIS问题的本质是偏序问题，我们之前在二维偏序问题中提到过，树状数组可以轻松的解决这类问题。但之前的问题中，我们求的是数对的数量，而不是序列的长度。为了能够求得序列长度，我们要对树状数组进行修改。</p>\n\n<p>我们可以用树状数组存储以\\(i\\)结尾的递增子序列最大值，修改树状数组结构如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>随后用和\\(dp\\)同样的方式进行遍历，可以得出正确结果，同时要注意数据的离散化，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Fenwick</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">lowbit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">Fenwick</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>该解法时间复杂度为\\(O(nlogn)\\)</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/dynamic%20programming%20fundamentals/2021/10/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/'> <img src='/images/covers/village.jpg' alt='动态规划（四）最长上升子序列（LIS）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-12T00:19:19+11:00'>Oct 12, 2021</time> </span> </div><h2 class='article__title'>动态规划（四）最长上升子序列（LIS）</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二叉树基础（三） 线段树（Segment Tree）",
      "category" : "",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/zh-cn/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/",
      "date"     : "Oct 9, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#结构\" id=\"markdown-toc-结构\">结构</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#基本操作\" id=\"markdown-toc-基本操作\">基本操作</a>    <ol>\n      <li><a href=\"#线段树的建立\" id=\"markdown-toc-线段树的建立\">线段树的建立</a></li>\n      <li><a href=\"#区间查询\" id=\"markdown-toc-区间查询\">区间查询</a></li>\n      <li><a href=\"#区间修改\" id=\"markdown-toc-区间修改\">区间修改</a></li>\n      <li><a href=\"#懒惰标记\" id=\"markdown-toc-懒惰标记\">懒惰标记</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#整体代码\" id=\"markdown-toc-整体代码\">整体代码</a></li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>线段树是常用于<strong>维护区间信息</strong>的数据结构</p>\n\n<p>线段树可以在$O(logn)$的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作</p>\n\n<h3 id=\"结构\">结构</h3>\n\n<p>线段树将每个长度不为$1$的区间划分成左右两个区间递归求解，把整个线段划分为一个树形结构，通过合并左右两区间信息来求得该区间的信息。这种数据结构可以方便的进行大部分的区间操作。</p>\n\n<p>假设以线段树存储数组$a=[6,7,8,9,10]$，设线段树的根节点编号为$1$，用数组$node$来保存线段树，$node[i]$用来保存线段树上编号为$i$的节点的值</p>\n\n<p>该线段树的结构如下</p>\n\n<p><img src=\"/images/posts/segmenttree1.png\" alt=\"在这里插入图片描述\" />\n代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// 线段树下标从1开始</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// 辅助建树</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h2 id=\"基本操作\">基本操作</h2>\n<h3 id=\"线段树的建立\">线段树的建立</h3>\n\n<p>对于节点$i$，其子节点的编号为$2i$以及$2i+1$，若节点$i$存储的区间为$[a,b]$，则节点$2i$存储的区间应该是$[a,\\frac{a+b}{2}]$，相应地，节点$2i+1$存储的区间为$[\\frac{a+b}{2}+1,b]$。我们可以采用递归的方式建树，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i表示当前节点, l表示左边界, r表示右边界</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"区间查询\">区间查询</h3>\n<p>若查询的区间为$[1,5]$，我们只需直接返回$node[1]$，但如果我们查询的是$[3,5]$，则需要合并$[3,3]$和$[4,5]$的答案，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//i表示当前节点, [l,r]是查询区间, [s,t]表示当前节点包含区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接返回</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归查询存在交集的子区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询左字串</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询右字串</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"区间修改\">区间修改</h3>\n<p>和区间查询相同，若区间存在包含关系，我们可以为其直接加上所需要更新的值，而当区间存在交集时，进行递归更新，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接更新</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归更新存在交集的子区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新左字串</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新右字串</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"懒惰标记\">懒惰标记</h3>\n<p>当我们按照上面的方法对$[6,7,8,9,10]$的区间$[3,5]$加上$2$后，更新后的线段树结构如下\n<img src=\"/images/posts/segmenttree2.png\" alt=\"在这里插入图片描述\" />\n我们会发现，在进行递归更新时，递归执行到节点$3$时就已经结束了，因此节点$3$的两个子节点没有被更新</p>\n\n<p>遇到这种情况，我们需要给递归结束的节点打上一个标记，在下一次查询操作时将没有更新的子节点更新，这个标记被称为懒惰标记，这样更新时效果如图</p>\n\n<p><img src=\"/images/posts/segmenttree3.png\" alt=\"在这里插入图片描述\" /></p>\n\n<p>而查询后的效果如下</p>\n\n<p><img src=\"/images/posts/segmenttree4.png\" alt=\"在这里插入图片描述\" />\n我们可以用<code class=\"language-plaintext highlighter-rouge\">vector&lt;int&gt; lazy</code>来存储懒惰标记，下方懒惰标记的代码如下</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// 下放懒惰标记</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// 将懒惰标记的值加给子树</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>然后在查询和更新函数中调用<code class=\"language-plaintext highlighter-rouge\">push_down()</code>即可</p>\n\n<h2 id=\"整体代码\">整体代码</h2>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SegmentTree</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// 线段树下标从1开始</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lazy</span><span class=\"p\">;</span> <span class=\"c1\">// 懒惰标记</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// 辅助建树</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">SegmentTree</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">nums</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i表示当前节点, l表示左边界, r表示右边界</span>\n        <span class=\"n\">N</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// 下放懒惰标记</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// 将懒惰标记的值加给子树</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//i表示当前节点, [l,r]是查询区间, [s,t]表示当前节点包含区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接返回</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归查询存在交集的子区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询左字串</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询右字串</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接更新</span>\n            <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归更新存在交集的子区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新左字串</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新右字串</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/'> <img src='/images/covers/数据结构-cover1.png' alt='二叉树基础（三） 线段树（Segment Tree）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>9 min read <time class='article__date' datetime='2021-10-09T22:00:50+11:00'>Oct 9, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（三） 线段树（Segment Tree）</h2> <p class='article__excerpt'>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/zh-cn/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/zh-cn/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "双指针问题（一）对撞指针和快慢指针",
      "category" : "",
      "tags"     : "算法, 指针, 链表, and 数据结构",
      "url"      : "/zh-cn/2021/10/09/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/",
      "date"     : "Oct 9, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a></li>\n  <li><a href=\"#双指针问题\" id=\"markdown-toc-双指针问题\">双指针问题</a>    <ol>\n      <li><a href=\"#对撞指针\" id=\"markdown-toc-对撞指针\">对撞指针</a></li>\n      <li><a href=\"#快慢指针\" id=\"markdown-toc-快慢指针\">快慢指针</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p>\n\n<p>广义上来说，双指针是指用两个变量在线性结构上遍历而解决的问题。</p>\n\n<p>狭义上说：</p>\n\n<ul>\n  <li>对于数组，指两个变量在数组上相向移动解决的问题；</li>\n  <li>对于链表，指两个变量在链表上同向移动解决的问题，也称为「快慢指针」问题。</li>\n</ul>\n\n<h2 id=\"双指针问题\">双指针问题</h2>\n<h3 id=\"对撞指针\">对撞指针</h3>\n<p>对撞指针将最左侧的索引定义为左指针(left)，最右侧的定义为右指针(right)，从两头向中间进行数组遍历</p>\n\n<p>对撞指针适用于<strong>有序的数组和字符串</strong></p>\n\n<p>对撞指针的时间复杂度为\\(O(n)\\)</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/\">剑指 Offer 21</a></p>\n\n<p>此题要求分奇偶调整数组的顺序，我们可以用左指针寻找奇数，右指针寻找偶数，当左指针找到偶数且右指针找到奇数时，对调两数。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">exchange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\">剑指 Offer 57</a></p>\n\n<p>此题要求寻找和为\\(target\\)数对，由于此题数组已经做好排序，我们可以确定</p>\n\n<p>若数对\\((nums[i+1],nums[j])&lt;target\\)</p>\n\n<p>则必有\\((nums[i],nums[j])&lt;target\\)</p>\n\n<p>同理，若数对\\((nums[i],nums[j])&gt;target\\)</p>\n\n<p>则\\((nums[i+1],nums[j])&gt;target\\)</p>\n\n<p>因此这道题也可以用对撞指针求解，当\\(nums[l]+nums[r]&lt;target\\)时，\\(l\\)向右移动，反之，\\(nums[l]+nums[r]&gt;target\\)时，r向左移动，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">twoSum</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">target</span><span class=\"p\">){</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]);</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n            <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"快慢指针\">快慢指针</h3>\n<p>快慢指针在序列中定义了一对不同速度的指针，以进行单向序列问题的求解。</p>\n\n<p>快慢指针的时间复杂度为\\(O(n)\\)，空间复杂度为\\(O(1)\\)</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">141. 环形链表</a></p>\n\n<p>此题要判断链表是否有环，可以定义一个快指针和一个慢指针，随后进行移动，若快指针可以追上慢指针，则表示链表一定有环，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">hasCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">142. 环形链表 II</a></p>\n\n<p>此题需要在求出是否成环的同时找到入环的第一个节点，我们可以根据快指针速度始终是慢指针的两倍这一条件进行推理</p>\n\n<p><img src=\"/images/posts/doublepoint1.png\" alt=\"在这里插入图片描述\" /></p>\n\n<p>假设快慢指针在\\(bc\\)交点相遇，此时慢指针走的距离应该是\\(a+b\\)，而快指针已经走了\\(a+b+k(b+c)\\)\n又有快指针的速度是慢指针的两倍，因此</p>\n\n<p>\\(a+b+k(b+c)=2(a+b)\\)，</p>\n\n<p>即\\(a=k(b+c)-b=(k-1)(b+c)+c\\)</p>\n\n<p>因此，当快慢指针相遇时，相遇点距离入环节点的距离总是\\(a\\)，因此我们可以再用一个指针\\(cur\\)寻找入环节点，同时更新\\(cur\\)和慢指针，当二者相遇时，相遇节点即入环节点。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"nf\">detectCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">cur</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2021/10/09/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/'> <img src='https://www.bing.com/th?id=OHR.IndianStarTortoise_EN-US4160827746_1920x1080.jpg' alt='双指针问题（一）对撞指针和快慢指针'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2021-10-09T00:14:13+11:00'>Oct 9, 2021</time> </span> </div><h2 class='article__title'>双指针问题（一）对撞指针和快慢指针</h2> <p class='article__excerpt'>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/指针' class='article__tag'>指针</a>  <a href='/zh-cn/tag/链表' class='article__tag'>链表</a>  <a href='/zh-cn/tag/数据结构' class='article__tag'>数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二叉树基础（二）二叉搜索树（BST）",
      "category" : "",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/zh-cn/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/",
      "date"     : "Oct 5, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#性质\" id=\"markdown-toc-性质\">性质</a></li>\n      <li><a href=\"#结构\" id=\"markdown-toc-结构\">结构</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#代码\" id=\"markdown-toc-代码\">代码</a>    <ol>\n      <li><a href=\"#基本操作\" id=\"markdown-toc-基本操作\">基本操作</a>        <ol>\n          <li><a href=\"#find\" id=\"markdown-toc-find\">$find()$</a></li>\n          <li><a href=\"#insert\" id=\"markdown-toc-insert\">$insert()$</a></li>\n          <li><a href=\"#delete\" id=\"markdown-toc-delete\">$delete()$</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p><strong>二叉搜索树（Binary Search Tree）</strong>（又：二叉查找树，二叉排序树），它或者是一棵空树，或者是具有下列性质的二叉树：\n若它的左子树非空，则左子树上所有结点的值均小于它的根结点的值； \n若它的右子树非空，则右子树上所有结点的值均大于它的根结点的值；\n它的左、右子树也分别是二叉搜索树。\n二叉搜索树作为一种经典的数据结构，既有快速插入与删除操作的特点，又有快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</p>\n<h3 id=\"性质\">性质</h3>\n<p>二叉搜索树有以下性质：</p>\n<ul>\n  <li>若左子树非空，则左子树上的所有节点值均小于根节点的值。</li>\n  <li>若右子树非空，则右子树上的所有节点值均小于根节点的值。</li>\n  <li>左右子树是二叉搜索树。</li>\n</ul>\n\n<h3 id=\"结构\">结构</h3>\n<p>BST是以二叉树来构建的，除了key和位置数据之外，每个结点还包含属性lchild、rchild，如果某个孩子结点不存在，则相应属性的值为空。</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                               <span class=\"c1\">// 数据</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span>  \t\t\t<span class=\"c1\">// 左右子树</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BST</span><span class=\"p\">,</span> <span class=\"n\">BSTNode</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<h2 id=\"代码\">代码</h2>\n<h3 id=\"基本操作\">基本操作</h3>\n\n<p>BST的构造和析构与普通二叉树相同，这里不多赘述。相比于普通二叉树，BST的主要功能增加了查找，插入和删除</p>\n\n<h4 id=\"find\">$find()$</h4>\n<p>$find()$函数的作用是查找某一个数据值已知的节点是否在树中，并返回节点值。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">BST</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">BST</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"insert\">$insert()$</h4>\n<p>$insert()$函数的作用是在树中插入一个节点。BST中所有的节点都是作为叶子节点插入的，因此在创建节点$p$后，要找到合适的父节点$f$并插入其中。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// 记录f为p的父节点</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// 查找data是否已经在树中</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BSTNode</span><span class=\"p\">));</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>             <span class=\"c1\">// 创建节点</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"delete\">$delete()$</h4>\n<p>二叉搜索树进行删除操作后，仍然要保证它的排序正确，因此我们的删除操作分为三种情况：</p>\n\n<ul>\n  <li>待删除节点无左孩子，则用右孩子代替其位置</li>\n  <li>待删除节点无右孩子，则用左孩子代替其位置</li>\n  <li>待删除节点拥有左右孩子，则用左子树最大节点或右子树最小节点代替其位置</li>\n</ul>\n\n<p>代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// 记录f为p的父节点</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// 查找data的位置</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>       <span class=\"c1\">// 若未找到，则返回false</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"c1\">// 情况1</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"nf\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">){</span>        <span class=\"c1\">// 情况2</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">{</span>                       <span class=\"c1\">// 情况3</span>\n        <span class=\"n\">BST</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">,</span><span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/'> <img src='/images/covers/数据结构-cover1.png' alt='二叉树基础（二）二叉搜索树（BST）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-05T04:14:28+11:00'>Oct 5, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（二）二叉搜索树（BST）</h2> <p class='article__excerpt'>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/zh-cn/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/zh-cn/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（三）股票问题系列",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "算法 and 动态规划",
      "url"      : "/zh-cn/dynamic%20programming%20fundamentals/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 29, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#121-买卖股票的最佳时机\" id=\"markdown-toc-121-买卖股票的最佳时机\">121. 买卖股票的最佳时机</a>    <ol>\n      <li><a href=\"#状态转移方程\" id=\"markdown-toc-状态转移方程\">状态转移方程</a>        <ol>\n          <li><a href=\"#如何表示price_min\" id=\"markdown-toc-如何表示price_min\">如何表示$price_{min}$</a></li>\n          <li><a href=\"#边界条件\" id=\"markdown-toc-边界条件\">边界条件</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#代码\" id=\"markdown-toc-代码\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#122-买卖股票的最佳时机-ii\" id=\"markdown-toc-122-买卖股票的最佳时机-ii\">122. 买卖股票的最佳时机 II</a>    <ol>\n      <li><a href=\"#状态转移方程-1\" id=\"markdown-toc-状态转移方程-1\">状态转移方程</a></li>\n      <li><a href=\"#代码-1\" id=\"markdown-toc-代码-1\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#714-买卖股票的最佳时机含手续费\" id=\"markdown-toc-714-买卖股票的最佳时机含手续费\">714. 买卖股票的最佳时机含手续费</a>    <ol>\n      <li><a href=\"#状态转移方程-2\" id=\"markdown-toc-状态转移方程-2\">状态转移方程</a></li>\n      <li><a href=\"#代码-2\" id=\"markdown-toc-代码-2\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#309-最佳买卖股票时机含冷冻期\" id=\"markdown-toc-309-最佳买卖股票时机含冷冻期\">309. 最佳买卖股票时机含冷冻期</a>    <ol>\n      <li><a href=\"#状态转移方程-3\" id=\"markdown-toc-状态转移方程-3\">状态转移方程</a></li>\n      <li><a href=\"#代码-3\" id=\"markdown-toc-代码-3\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#123-买卖股票的最佳时机-iii\" id=\"markdown-toc-123-买卖股票的最佳时机-iii\">123. 买卖股票的最佳时机 III</a>    <ol>\n      <li><a href=\"#思路\" id=\"markdown-toc-思路\">思路</a></li>\n      <li><a href=\"#代码-4\" id=\"markdown-toc-代码-4\">代码</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#188-买卖股票的最佳时机-iv\" id=\"markdown-toc-188-买卖股票的最佳时机-iv\">188. 买卖股票的最佳时机 IV</a></li>\n  <li><a href=\"#股票问题的一般通解\" id=\"markdown-toc-股票问题的一般通解\">股票问题的一般通解</a>    <ol>\n      <li><a href=\"#状态转移方程-4\" id=\"markdown-toc-状态转移方程-4\">状态转移方程</a>        <ol>\n          <li><a href=\"#边界条件-1\" id=\"markdown-toc-边界条件-1\">边界条件</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#结束语\" id=\"markdown-toc-结束语\">结束语</a></li>\n</ol>\n\n<h2 id=\"121-买卖股票的最佳时机\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\">121. 买卖股票的最佳时机</a></h2>\n<h3 id=\"状态转移方程\">状态转移方程</h3>\n<p>我们可以用$dp[i]$来表示，在前$i$日我们可以得到的最大利润，那么我们第$i$日的操作有两种选择：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1.我们在第i日卖出得到的利润可能比之前的利润（dp[i-1]）更高\n2.我们之前的利润要比现在更高，不用进行任何操作\n</code></pre></div></div>\n\n<p>对于情况1，我们得到状态转移方程$dp[i]=prices[i]-price_{min}$\n而对于情况2，我们有$dp[i]=dp[i-1]$\n综合两种情况，也就得到此题的状态转移方程：</p>\n\n<p>$dp[i]=max(dp[i-1],prices[i]-price_{min})$</p>\n\n<p>那么剩下的问题就在于如何表示$price_{min}$。</p>\n\n<h4 id=\"如何表示price_min\">如何表示$price_{min}$</h4>\n<p>我们发现，$price_{min}$的计算也是一个无后效性的问题，我们同样可以通过动态规划来求解，用$dp_{price_{min}}[i]$来表示前i日股票的最低价格，则$dp_{price_{min}}[i]$的状态转移方程可以写成：</p>\n\n<p>$dp_{price_{min}}[i]$ = $min(prices[i],dp_{price_{min}}[i-1])$</p>\n\n<p>可能这时候你就要说了，你这不是脱了裤子放屁吗？那我们不妨换一个思维方式，还是上面的状态转移方程不变，<strong>我们用$dp[i][j]$表示前$i$天手上有$j$个股票时我们的最大利润。</strong> 这时候你不妨停下来思考一会，该如何写出状态转移方程呢？</p>\n\n<p>联立上面两个转移方程，得到$dp[i][j]$的状态转移方程：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(-prices[i], dp[i - 1][1]);$</p>\n\n<p>没错，此时的$dp[i][1]$就是之前我们的开销，用来辅助我们计算第$i$天的最大利润，也就是$dp[i][0]$</p>\n\n<h4 id=\"边界条件\">边界条件</h4>\n<p>$dp[0][0]$表示在第0天我们手上有0支股票时的最大利润，因此$dp[0][0]=0$</p>\n\n<p>$dp[0][1]$表示在第0天我们手上有1支股票时的最大利润，因此$dp[0][0]=-prices[0]$</p>\n\n<h3 id=\"代码\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> \n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>篇幅关系，空间复杂度的优化留给读者自己思考，我这里不作展开</p>\n\n<h2 id=\"122-买卖股票的最佳时机-ii\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\">122. 买卖股票的最佳时机 II</a></h2>\n<h3 id=\"状态转移方程-1\">状态转移方程</h3>\n<p>122.题与121.题的不同点在于，122.是可以无限进行购买操作的，相应的，我们的状态转移方程也有所改变。</p>\n\n<p>根据我们第一题的状态转移方程，在第一题里，一但我们前面卖出了股票，下次再想购买股票时，总利润便会变成$-prices[i]$，但在这道题中，由于我们不再受购买次数的限制，因此我们的利润就可以一直累计下去，如何理解这种累计呢？</p>\n\n<p>在前$i-1$天，我们的最大利润达到了$dp[i-1][0]$，而在第$i$天我们要购入股票，此时的利润就会变为$dp[i-1][0]-prices[i]$</p>\n\n<p>即$dp[i][1]$的状态转移方程变为：</p>\n\n<p>$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>读者应该也注意到，在我们把状态转移方程分成两部分后，我们对转移方程的解读方式也转变了，这里我再次阐述一遍，$dp[i][0]$表示手上没有股票时的最大利润，$dp[i][1]$表示手上有一枚股票时的最大利润。</p>\n\n<p>综上，状态转移方程为：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>边界条件与之前相同。</p>\n\n<h3 id=\"代码-1\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"714-买卖股票的最佳时机含手续费\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">714. 买卖股票的最佳时机含手续费</a></h2>\n<h3 id=\"状态转移方程-2\">状态转移方程</h3>\n<p>如果你认真阅读了题714.并理解了题122.那这道题你其实可以直接过的，因为这道题和题122.的不同之处就在于，它在售卖时多了手续费这个固定消耗，因此在决定卖出股票的第$i$天里，如果收益不足以抵消掉手续费，那我们会选择之前的利润作为最优解，即：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$</p>\n\n<p>整体的转移方程表示为：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$\n$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>边界条件仍与之前相同</p>\n\n<h3 id=\"代码-2\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">fee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">fee</span><span class=\"p\">),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"309-最佳买卖股票时机含冷冻期\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">309. 最佳买卖股票时机含冷冻期</a></h2>\n<h3 id=\"状态转移方程-3\">状态转移方程</h3>\n<p>这道题的变化在于，之前我们只有$(0)$卖出、$(1)$买入两种状态，但这道题引入了一个新的新的状态$(2)$冷冻期，而这个冷冻期状态是在卖出操作后出现，如果我们用$dp[i][2]$来表示当我们在第$i$天的冷冻期收益，则$dp[i][2]$可以用$dp$表示为：</p>\n\n<p>$dp[i][2] = dp[i-1][0]$</p>\n\n<p>买入状态的转移方程也有所变化，因为此题中买入状态必须由冷冻期状态进入，也就是：</p>\n\n<p>$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$</p>\n\n<p>最后，综合三式就可以得到我们新的状态转移方程：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])$\n$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$\n$dp[i][2] = dp[i - 1][0]$</p>\n\n<p>边界条件仍然不变</p>\n\n<h3 id=\"代码-3\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"c1\">//</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"123-买卖股票的最佳时机-iii\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\">123. 买卖股票的最佳时机 III</a></h2>\n<h3 id=\"思路\">思路</h3>\n<p>如果没有前面的铺垫直接来看这道题，难度瞬间就高起来了。但现在带着前面的经验再来对比这道题，我们会发现这道题和题121. 题122.有着很大的关联。</p>\n\n<p>假设在第$i$天卖出了股票，当我们是第一次或第二次操作时，我们的利润是可以积累的。但如果是在第三次操作，那么我们就要重新累计利润了。</p>\n\n<p>我们不妨将$dp$升到三维数组，用第三维来区分第一次操作和第二次操作，即得到代码如下：</p>\n<h3 id=\"代码-4\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>这个代码并不优雅，但对于问题的解决无疑是直接而有效的</p>\n\n<h2 id=\"188-买卖股票的最佳时机-iv\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/\">188. 买卖股票的最佳时机 IV</a></h2>\n\n<p>当问题扩充到$k$时，我们解决题123.的思路仍然有效，我们可以用初始化边界为$0$，再用一个$for$循环写出结果。</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">110</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span>  <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]),</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">];</span>\n <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"股票问题的一般通解\">股票问题的一般通解</h2>\n<h3 id=\"状态转移方程-4\">状态转移方程</h3>\n<p>股票问题的三个限定条件是</p>\n\n<ul>\n  <li>当前天数$i$</li>\n  <li>手持股票$j$</li>\n  <li>允许的最大操作次数$k$</li>\n</ul>\n\n<p>我们设在第$i$天，手持股票为$j$，操作次数为$k$时我们的利润为$dp[i][j][k]$，视每次购买股票为进行一次操作，则我们的状态转移方程为：</p>\n\n<p>$dp[i][0][k] = max(dp[i-1][1][k] + prices[i], dp[i-1][0][k])$\n$dp[i][1][k] = max(dp[i-1][0][k-1] - prices[i], dp[i-1][1][k])$</p>\n\n<h4 id=\"边界条件-1\">边界条件</h4>\n<p>$dp[0][1][k] = -prices[0]$\n其余值都为0</p>\n\n<h2 id=\"结束语\">结束语</h2>\n<p>股票问题系列和打家劫舍系列的不同点在于，股票问题的每一个系列问题都对状态转移方程进行了改动。面临一道动态规划问题时，要想迅速找到子问题并写出状态转移方程，关键还是要多了解不同的动归题型。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/dynamic%20programming%20fundamentals/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（三）股票问题系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2021-09-29T22:29:46+10:00'>Sep 29, 2021</time> </span> </div><h2 class='article__title'>动态规划（三）股票问题系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "二叉树基础（一）二叉树的概念",
      "category" : "Fundamentals of Data Structures",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/zh-cn/fundamentals%20of%20data%20structures/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "Sep 28, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#概念\" id=\"markdown-toc-概念\">概念</a>    <ol>\n      <li><a href=\"#二叉树的定义\" id=\"markdown-toc-二叉树的定义\">二叉树的定义</a></li>\n      <li><a href=\"#基本形态\" id=\"markdown-toc-基本形态\">基本形态</a></li>\n      <li><a href=\"#特殊类型\" id=\"markdown-toc-特殊类型\">特殊类型</a></li>\n      <li><a href=\"#相关术语\" id=\"markdown-toc-相关术语\">相关术语</a></li>\n      <li><a href=\"#性质\" id=\"markdown-toc-性质\">性质</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#二叉树的c实现\" id=\"markdown-toc-二叉树的c实现\">二叉树的C++实现</a>    <ol>\n      <li><a href=\"#二叉树的顺序存储\" id=\"markdown-toc-二叉树的顺序存储\">二叉树的顺序存储</a>        <ol>\n          <li><a href=\"#实现代码\" id=\"markdown-toc-实现代码\">实现代码</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#二叉树的链式存储\" id=\"markdown-toc-二叉树的链式存储\">二叉树的链式存储</a>        <ol>\n          <li><a href=\"#实现代码-1\" id=\"markdown-toc-实现代码-1\">实现代码</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#二叉树的递归遍历\" id=\"markdown-toc-二叉树的递归遍历\">二叉树的递归遍历</a>        <ol>\n          <li><a href=\"#先序遍历dlr\" id=\"markdown-toc-先序遍历dlr\">先序遍历（DLR）</a></li>\n          <li><a href=\"#中序遍历ldr\" id=\"markdown-toc-中序遍历ldr\">中序遍历（LDR）</a></li>\n          <li><a href=\"#后序遍历lrd\" id=\"markdown-toc-后序遍历lrd\">后序遍历（LRD）</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"概念\">概念</h2>\n<p>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p>\n\n<h3 id=\"二叉树的定义\">二叉树的定义</h3>\n<p>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树</p>\n\n<h3 id=\"基本形态\">基本形态</h3>\n<p><img src=\"/images/posts/tree1.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n  <li>空二叉树</li>\n  <li>只有一个根节点的二叉树</li>\n  <li>根节点只有左子树的二叉树</li>\n  <li>根节点只有右子树的二叉树</li>\n  <li>根节点既有左子树，又有右子树的<strong>完全二叉树</strong>\n    <h3 id=\"特殊类型\">特殊类型</h3>\n  </li>\n  <li>满二叉树：只有度为0和2的节点，且度为0的结点在同一层上</li>\n  <li>完全二叉树：深度为k且每一个节点都与深度为k的满二叉树中编号从1到n的结点一一对应\n<img src=\"/images/posts/tree2.png\" alt=\"在这里插入图片描述\" />\n    <h3 id=\"相关术语\">相关术语</h3>\n  </li>\n  <li>节点：包含一个数据元素及若干指向子树分支的信息</li>\n  <li>节点的度：一个节点拥有子树的数目</li>\n  <li>叶节点：也称为终端节点，没有子树的节点或度为0的节点</li>\n  <li>分支节点：也称为非终端节点，度不为0的节点</li>\n  <li>树的度：树中所有节点度的最大值</li>\n  <li>节点的层次：从根节点开始，根节点为第0层，根节点的子节点为第1层，依此类推</li>\n  <li>树的深度：也称树的高度，树中所有节点层次的最大值</li>\n  <li>有序树：如果树中各棵子树的次序有先后次序，则该树为有序树</li>\n  <li>无序树：如果树中各棵子树的次序没有先后次序，则该树为无序树</li>\n  <li>森林：由m（m≥0）棵互不相交的树构成一片森林。如果把一棵非空的树的根结点删除，则该树就变成了一片森林，森林中的树由原来根结点的各棵子树构成\n    <h3 id=\"性质\">性质</h3>\n  </li>\n  <li>一棵二叉树的第i层最多有$2^i$个节点 $(i≥0)$</li>\n  <li>深度为k的二叉树最多有$2^{k+1}-1$个节点 $(k≥0)$</li>\n  <li>对于1棵二叉树，度为0的节点为$n_0$，度为2的节点为$n_2$，则$n_0=n_2+1$</li>\n  <li>满二叉树定理：非空满二叉树的叶子节点数等于分支节点数$+1$</li>\n  <li>满二叉树定理推论：在一棵具有$n$个结点的二叉树中,所有结点的空子树等于$n+1$</li>\n  <li>$n$个节点的完全二叉树高度为$log_2(n+1)$，深度为$log_2(n+1)-1$</li>\n</ul>\n\n<h2 id=\"二叉树的c实现\">二叉树的C++实现</h2>\n\n<h3 id=\"二叉树的顺序存储\">二叉树的顺序存储</h3>\n\n<p>我们可以使用一个数组来存储所有的节点，按数组下标进行存储，根节点存储在下标\\(0\\)处，\n其左孩子存储于下标\\(2*0+1\\)，右孩子存储于下标\\(2*0+2\\)….依此类推，对于下标为\\(i\\)的节点，左右孩子分别存储于下标为\\({2*i+1}\\)和\\({2*i+2}\\)处。</p>\n<h4 id=\"实现代码\">实现代码</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">BinaryTree</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"二叉树的链式存储\">二叉树的链式存储</h3>\n<p>二叉树的顺序存储结构一般适用于完全二叉树，通常我们使用链式存储结构表示二叉树。</p>\n<h4 id=\"实现代码-1\">实现代码</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                     <span class=\"c1\">// 数据</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"c1\">// 左右子树</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BinaryTree</span><span class=\"p\">,</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"o\">&amp;</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">input</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n    <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"二叉树的递归遍历\">二叉树的递归遍历</h3>\n<h4 id=\"先序遍历dlr\">先序遍历（DLR）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>访问当前节点</li>\n  <li>先序遍历左子树</li>\n  <li>先序遍历右子树</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">DLR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"中序遍历ldr\">中序遍历（LDR）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>中序遍历左子树</li>\n  <li>访问当前节点</li>\n  <li>中序遍历右子树</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LDR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"后序遍历lrd\">后序遍历（LRD）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>后序遍历左子树</li>\n  <li>后序遍历右子树</li>\n  <li>访问当前节点</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LRD</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/fundamentals%20of%20data%20structures/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/数据结构-cover1.png' alt='二叉树基础（一）二叉树的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2021-09-28T15:58:19+10:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（一）二叉树的概念</h2> <p class='article__excerpt'>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/zh-cn/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/zh-cn/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（二）最优子序列系列",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "算法 and 动态规划",
      "url"      : "/zh-cn/dynamic%20programming%20fundamentals/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 28, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#动态规划核心思想\" id=\"markdown-toc-动态规划核心思想\">动态规划核心思想</a></li>\n  <li><a href=\"#198-打家劫舍\" id=\"markdown-toc-198-打家劫舍\">198. 打家劫舍</a></li>\n</ol>\n\n<h2 id=\"动态规划核心思想\">动态规划核心思想</h2>\n<p>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p>\n\n<p>Dynamic Programming Fundamentals</p>\n\n<p>我们可以举个例子：</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B ( 计算 ) : 8</p>\n\n  <p>A: 在上面等式的左边写上 “1+” 呢？</p>\n\n  <p>B (脱口而出): 9</p>\n\n  <p>A: 你怎么这么快就得到答案了？</p>\n\n  <p>B: 只要在8的基础上加1就好了</p>\n\n  <p>A: 所以你不用重新计算，因为你记住了第一个等式的值为8。动态规划算法也可以说是记住求过的解来节省时间</p>\n</blockquote>\n\n<h2 id=\"198-打家劫舍\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. 打家劫舍</a></h2>\n\n<ol>\n  <li>只有一间房屋时，我们选择偷这间房屋</li>\n  <li>存在两间房屋时，选择偷两间中较大的那间</li>\n  <li>如果房屋数量大于两间时，比如第三间，我们要考虑，第一间和第三间房屋的价值总和与第二间房屋的价值相比，哪个更大？如果第一间和第三间房屋的价值总和较大的话，我们会选择偷第一间和第三间；否则，我们则会选择不偷第一间和第三间，去偷第二间</li>\n  <li>将其推广到一般情况，对于前i间房子，我们偷窃的方案有两种：\n    <ol>\n      <li>偷窃第i间房子，得到的总金额是第i间房子的价值与偷窃前i-2间房子的总金额之和</li>\n      <li>不偷窃第i间房子，得到的总金额是偷窃前i-1间房子的总金额</li>\n    </ol>\n  </li>\n</ol>\n\n<p>我们总会选择1、2中可以得到更高金额的选项，这时我们用$d[i]$来表示偷窃前i间房子的总金额，并且用$d[i]$来表示选项1、2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n\n<p>hello</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/dynamic%20programming%20fundamentals/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（二）最优子序列系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-28T13:12:38+10:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>动态规划（二）最优子序列系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "动态规划（一）打家劫舍系列",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "算法 and 动态规划",
      "url"      : "/zh-cn/dynamic%20programming%20fundamentals/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 27, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#动态规划核心思想\" id=\"markdown-toc-动态规划核心思想\">动态规划核心思想</a></li>\n  <li><a href=\"#198-打家劫舍\" id=\"markdown-toc-198-打家劫舍\">198. 打家劫舍</a></li>\n</ol>\n\n<h2 id=\"动态规划核心思想\">动态规划核心思想</h2>\n<p>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p>\n\n<p>我们可以举个例子：</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B (计算) : 8</p>\n\n  <p>A: 在上面等式的左边写上 “1+” 呢？</p>\n\n  <p>B (脱口而出): 9</p>\n\n  <p>A: 你怎么这么快就得到答案了？</p>\n\n  <p>B: 只要在8的基础上加1就好了</p>\n\n  <p>A: 所以你不用重新计算，因为你记住了第一个等式的值为8。动态规划算法也可以说是记住求过的解来节省时间</p>\n</blockquote>\n\n<h2 id=\"198-打家劫舍\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. 打家劫舍</a></h2>\n\n<ol>\n  <li>只有一间房屋时，我们选择偷这间房屋</li>\n  <li>存在两间房屋时，选择偷两间中较大的那间</li>\n  <li>如果房屋数量大于两间时，比如第三间，我们要考虑，第一间和第三间房屋的价值总和与第二间房屋的价值相比，哪个更大？如果第一间和第三间房屋的价值总和较大的话，我们会选择偷第一间和第三间；否则，我们则会选择不偷第一间和第三间，去偷第二间</li>\n  <li>将其推广到一般情况，对于前i间房子，我们偷窃的方案有两种：\n    <ol>\n      <li>偷窃第i间房子，得到的总金额是第i间房子的价值与偷窃前i-2间房子的总金额之和</li>\n      <li>不偷窃第i间房子，得到的总金额是偷窃前i-1间房子的总金额</li>\n    </ol>\n  </li>\n</ol>\n\n<p>我们总会选择1、2中可以得到更高金额的选项，这时我们用\\(d[i]\\)来表示偷窃前i间房子的总金额，并且用\\(d[i]\\)来表示选项1、2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n\n<p>hello</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/dynamic%20programming%20fundamentals/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（一）打家劫舍系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-27T22:12:45+10:00'>Sep 27, 2021</time> </span> </div><h2 class='article__title'>动态规划（一）打家劫舍系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/算法' class='article__tag'>算法</a>  <a href='/zh-cn/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "阳光体育一键汉姆",
      "category" : "",
      "tags"     : "计算机网络",
      "url"      : "/zh-cn/2019/10/11/%E9%98%B3%E5%85%89%E4%BD%93%E8%82%B2%E4%B8%80%E9%94%AE%E6%B1%89%E5%A7%86/",
      "date"     : "Oct 11, 2019",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#登录过程\" id=\"markdown-toc-登录过程\">登录过程</a></li>\n  <li><a href=\"#申请跑步\" id=\"markdown-toc-申请跑步\">申请跑步</a></li>\n  <li><a href=\"#结束跑步\" id=\"markdown-toc-结束跑步\">结束跑步</a></li>\n  <li><a href=\"#密码表\" id=\"markdown-toc-密码表\">密码表</a></li>\n</ol>\n\n<p>这篇博客介绍了一种阳光体育平台下基于HTTP请求完成汉姆的方式，与虚拟定位方式相比，该种方式速度更快，使用更加便捷</p>\n\n<p>此博客基于李叶学长的项目启发完成，<a href=\"https://github.com/HackerLiye/fuckhanmu\">点此链接</a>传送至该项目</p>\n\n<h2 id=\"登录过程\">登录过程</h2>\n\n<p>登录过程是<strong>获取<code class=\"language-plaintext highlighter-rouge\">token</code>的过程</strong>，在这个过程中需要用到用户的<code class=\"language-plaintext highlighter-rouge\">IMEI</code></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">IMEI</code>是一个<strong>32位16进制数</strong>，可以在阳光体育平台的登录过程进行抓包获得</p>\n\n<p>登录过程中，我们要将<code class=\"language-plaintext highlighter-rouge\">IMEI</code>作为参数代入，如下：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://client3.aipao.me/api/{token}/QM_Users/Login_AndroidSchool?IMEICode=00000000000000000000000000000000\n</code></pre></div></div>\n\n<p>同时，我们需要在header中加入当前的<strong>乐跑版本号<code class=\"language-plaintext highlighter-rouge\">version</code></strong>，<code class=\"language-plaintext highlighter-rouge\">version</code>一般为2.40即可</p>\n\n<p>该http请求会获取一个<code class=\"language-plaintext highlighter-rouge\">json</code>，其中<code class=\"language-plaintext highlighter-rouge\">Data</code>下的<code class=\"language-plaintext highlighter-rouge\">token</code>即为我们需要获取的值</p>\n\n<h2 id=\"申请跑步\">申请跑步</h2>\n\n<p>跑步过程用到的请求基于上文的<code class=\"language-plaintext highlighter-rouge\">token</code>，请求的链接及参数如下</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://client3.aipao.me/api/{token}/QM_Runs/SRS?S1=30.534737&amp;S2=114.367785&amp;S3=2000\n</code></pre></div></div>\n\n<p>可以注意到，其存在三个参数S1、S2和S3，分别代表着跑步所在的<strong>经纬度</strong>和<strong>路程</strong></p>\n\n<p>上述链接中所采用的参数为武汉大学信息学部操场及2000米路程</p>\n\n<p>发送该请求后，即可<strong>获得<code class=\"language-plaintext highlighter-rouge\">RunId</code>并进入跑步状态</strong></p>\n\n<h2 id=\"结束跑步\">结束跑步</h2>\n\n<p>在李叶学长的代码中，是存在等待跑步结束这一过程的，这是为了保证数据的准确性和一致性。\n而在实测中发现，我们其实不必等待跑步的过程，直接请求跑步结束即可提交汉姆成绩。</p>\n\n<p>此时请求的链接如下</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://client3.aipao.me/api/{token}/QM_Runs/ES\n</code></pre></div></div>\n\n<p>此时需要提交的参数较多，我们逐一讲解</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>参数</th>\n      <th>含义</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>S1</td>\n      <td>RunId，由申请跑步时获得</td>\n    </tr>\n    <tr>\n      <td>S4</td>\n      <td>跑步消耗时间，合理即可</td>\n    </tr>\n    <tr>\n      <td>S5</td>\n      <td>实际跑步距离，一般比理论距离多1到2米</td>\n    </tr>\n    <tr>\n      <td>S5</td>\n      <td>实际跑步距离，一般比理论距离多1到2米</td>\n    </tr>\n    <tr>\n      <td>S8</td>\n      <td>密码表，后文会介绍</td>\n    </tr>\n    <tr>\n      <td>S9</td>\n      <td>步数，合理即可</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"密码表\">密码表</h2>\n\n<p>在结束跑步的参数中，凡是整数类参数都以密码表的方式进行加密。\n其原理类似凯撒密码，将数字和字母一一对应，提交时同时提交密文和密码表</p>\n\n<p>提交时，我们要<strong>保证密码表与数值正确对应</strong>，方可提交成功</p>\n\n<p>跑步距离加密示范</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>实际值</th>\n      <th>加密值</th>\n      <th>密码表</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>2000</td>\n      <td>caaa</td>\n      <td>abcdefghijklmnopqrstuvwxyz</td>\n    </tr>\n    <tr>\n      <td>246</td>\n      <td>oqs</td>\n      <td>mnopqrstuvwxyzabcdefghijkl</td>\n    </tr>\n  </tbody>\n</table>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/zh-cn/2019/10/11/%E9%98%B3%E5%85%89%E4%BD%93%E8%82%B2%E4%B8%80%E9%94%AE%E6%B1%89%E5%A7%86/'> <img src='https://src.onlinedown.net/images/h_imges/wdj/3/logo/c76a697a57cfc446c777513a033e19b1_256_256.png' alt='阳光体育一键汉姆'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2019-10-11T14:59:11+11:00'>Oct 11, 2019</time> </span> </div><h2 class='article__title'>阳光体育一键汉姆</h2> <p class='article__excerpt'>这篇博客介绍了一种阳光体育平台下基于HTTP请求完成汉姆的方式，与虚拟定位方式相比，该种方式速度更快，使用更加便捷</p><div class='article__bottom'><div class='article__author'> <a href='/zh-cn/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/zh-cn/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/zh-cn/tag/计算机网络' class='article__tag'>计算机网络</a> </span></div></div></div></div></div>"
       } 
  
]
