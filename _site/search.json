[
  
    {
      "title"    : "使用ChatGPT控制Arduino设备",
      "category" : "",
      "tags"     : "ChatGPT, Arduino, and 智能家庭",
      "url"      : "/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/",
      "date"     : "Apr 24, 2023",
      "content"  : "<p>这篇博客中将介绍如何使用ChatGPT来控制Arduino设备。ChatGPT是由OpenAI开发的一种自然语言处理模型，其强大的功能引发了很大的讨论。本文介绍了ChatGPT与外部系统集成的一种方法，通过ChatGPT作为控制器实现对Arduino设备的控制，以探索自然语言命令控制家庭设备的可能性及智能家庭设备的发展方向。</p>\n\n<p>这篇博客的代码公开在我的github仓库，<a href=\"https://github.com/MortalreminderPT/HomeGPT-Intelligent-Home-Assistant\">点此链接</a>传送至该项目。</p>\n\n<h2 id=\"chatgpt接入\">ChatGPT接入</h2>\n\n<h3 id=\"prompt编写与测试\">Prompt编写与测试</h3>\n\n<p>我们期望ChatGPT以json格式输出命令实现对设备的控制，因此首先需要编写一个合适的提示（prompt），用于告诉ChatGPT我们的需求。在这个提示中，我们应该明确表达我们希望ChatGPT理解并回答的问题，如打开/关闭LED灯、控制电机转速等。经过数次测试之后，我们使用python代码整合了我们的全部需求，</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">possible_device</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">air-conditioner</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">curtain</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">As an Intelligent Assistant you need to rely on my words to determine what to do with some of devices.</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">your reply contain a list with json [device] only from these devices: </span><span class=\"si\">{</span><span class=\"n\">possible_device</span><span class=\"si\">}</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\"> and only write json list without any discourse.</span><span class=\"sh\">'</span>\n    <span class=\"k\">return</span> <span class=\"n\">prompt</span>\n</code></pre></div></div>\n\n<p>在ChatGPT官网测试该提示词，发现ChatGPT可以正确理解我们的需求并做出回应。</p>\n\n<p><img src=\"\\images\\posts\\gpt1.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>此时，我们相信ChatGPT可以集成到我们的项目中。</p>\n\n<h3 id=\"openai-api接入\">OpenAI API接入</h3>\n\n<p>OpenAI提供了官方API，以实现通过发送请求与ChatGPT进行实时交互。</p>\n\n<p>首先，我们需要获得OpenAI API的访问密钥。在OpenAI的开发者门户网站上可以注册一个账户并获取API密钥。将API密钥保存在安全的地方，因为它将用于与OpenAI API进行通信。</p>\n\n<p>接下来，我们可以通过引入OpenAI API包来实现与ChatGPT的交互，这个过程仍然被放在了一个函数中：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">mask</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n        <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">completions</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n        <span class=\"k\">return</span> <span class=\"n\">message</span>\n</code></pre></div></div>\n\n<p>执行代码并观察输出结果，发现我们成功与ChatGPT完成交互。</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>In: As an Intelligent Assistant you need to rely on my words to determine what to <span class=\"k\">do </span>with some of devices.\n我很冷，你可以帮我些什么吗\nyour reply contain a list with json <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"device_1\"</span>,<span class=\"s2\">\"param\"</span>:0<span class=\"o\">}]</span> only from these devices: <span class=\"o\">[{</span><span class=\"s1\">'light'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'air-conditioner'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'curtain'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}]</span> and only wr\nite json list without any discourse.\n\nOut: <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"air-conditioner\"</span>,<span class=\"s2\">\"param\"</span>:1<span class=\"o\">}]</span>\n</code></pre></div></div>\n\n<h2 id=\"基于flask搭建服务器\">基于Flask搭建服务器</h2>\n<p>在上一部分中，我们完成了与ChatGPT的对话和集成。为了便于用户的使用及与Arduino的交互，我们将使用Flask框架搭建一个服务器，以通过网络实现交互。</p>\n\n<h3 id=\"flask框架搭建\">Flask框架搭建</h3>\n<p>Flask是一个轻量级的Python Web框架，非常适合用于构建简单的Web应用程序。我们将使用Flask来搭建一个简单的服务器，以接收用户或Arduino的请求。</p>\n\n<p>首先，我们需要安装Flask。可以使用pip命令来安装Flask：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>flask\n</code></pre></div></div>\n\n<p>随后创建Flask主文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">import</span> <span class=\"n\">flask_restful</span> <span class=\"k\">as</span> <span class=\"n\">restful</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">restful</span><span class=\"p\">.</span><span class=\"nc\">Api</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">default_mediatype</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>此时RESTful风格Flask框架已经搭建完成，我们需要为其添加用户及Arduino交互接口。</p>\n<h3 id=\"添加用户api\">添加用户API</h3>\n<p>定义一个用户API文件order.py，用于向服务器发送请求并获取响应。核心代码如下所示：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">OrderApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">text_dict</span> <span class=\"o\">=</span> <span class=\"nc\">RequestParser</span><span class=\"p\">()</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> \\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n            \n        <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">mask_reply</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]})</span>\n\n        <span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n        <span class=\"n\">reply</span><span class=\"o\">=</span><span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask_reply</span><span class=\"o\">=</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n        <span class=\"n\">update_state</span><span class=\"o\">=</span><span class=\"nf\">match_json</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">update_state</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>随后我们需要在主文件中注册API文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">OrderApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>此时用户可以通过POST请求实现对Arduino设备状态的控制。</p>\n<h3 id=\"arduino-api\">Arduino API</h3>\n\n<p>Arduino设备主要工作内容为读取当前设备工作状态并做出对应调整，因此只需编写简单GET请求响应：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ArduinoApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>同样在主文件中注册API文件：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">ArduinoApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/arduino</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>通过Postman测试，发现可以服务器已经可以正常工作。</p>\n\n<p><img src=\"\\images\\posts\\gpt2.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"使用mongodb存储设备状态\">使用MongoDB存储设备状态</h2>\n\n<p>为了防止停电等因素对设备开关记忆的影响，我们使用数据库对设备状态进行持久化。MongoDB作为一种基于键值对的通用NoSQL数据库，非常适合实现这个需求。</p>\n\n<h3 id=\"mongodb数据库结构\">MongoDB数据库结构</h3>\n<p>在我们开始之前，我们需要定义设备状态的数据结构。在这个例子中，我们假设我们的设备有一个LED灯，可以打开或关闭。我们可以使用以下JSON格式来表示设备状态：</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"device\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"light\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"param\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>在上面的示例中，device是设备的唯一标识符，param表示LED灯的状态。</p>\n\n<h3 id=\"flask接入mongodb\">Flask接入MongoDB</h3>\n<p>为了与MongoDB进行交互，我们将使用MongoDB的官方Python驱动程序pymongo。我们需要先安装它：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>pymongo\n</code></pre></div></div>\n<p>接下来，我们需要在Flask应用程序中添加与MongoDB的连接和数据访问逻辑。</p>\n\n<p>在app.py文件中添加pymongo库：</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask_pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">PyMongo</span>\n<span class=\"n\">mongo</span> <span class=\"o\">=</span> <span class=\"nc\">PyMongo</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">MONGO_URI</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"与数据库的交互及数据缓存\">与数据库的交互及数据缓存</h3>\n\n<p>我们编写一个DeviceStates类与数据库进行交互，为了提升设备响应的即时性，我们还可以给数据库添加缓存。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">DeviceStates</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">device_state</span> <span class=\"ow\">in</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">projection</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})):</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">device_state</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">device_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dict</span><span class=\"p\">:</span><span class=\"n\">DeviceState</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">update_device</span><span class=\"p\">,</span> <span class=\"n\">update_state</span> <span class=\"ow\">in</span> <span class=\"n\">update_dict</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">update_one</span><span class=\"p\">({</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">update_device</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">$set</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"o\">**</span><span class=\"n\">update_state</span><span class=\"p\">}},</span> <span class=\"n\">upsert</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">update_device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">update_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">delete_many</span><span class=\"p\">({}).</span><span class=\"n\">deleted_count</span>\n</code></pre></div></div>\n\n<h2 id=\"编写qqbot实现qq平台控制\">编写QQbot实现QQ平台控制</h2>\n<p>本节编写了一个简单的QQbot，用户可以在QQ平台与QQbot简单对话，完成对Arduino设备状态的控制。</p>\n\n<p>安装botpy包：</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>botpy\n</code></pre></div></div>\n\n<p>为QQbot编写交互代码如下：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">botpy</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy</span> <span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.ext.cog_yaml</span> <span class=\"kn\">import</span> <span class=\"n\">read</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">test_config</span> <span class=\"o\">=</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">config.yaml</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">get_logger</span><span class=\"p\">()</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">accept-language</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">zh-CN,zh;q=0.9,en;q=0.8</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">content-type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">application/json</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_ready</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">robot 「</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">robot</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">」 on_ready!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_at_message_create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">avatar</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">sleep</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">server</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n        <span class=\"kn\">import</span> <span class=\"n\">re</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">&lt;.*?&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">POST</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">reply</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">unicode_escape</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">intents</span> <span class=\"o\">=</span> <span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"nc\">Intents</span><span class=\"p\">(</span><span class=\"n\">public_guild_messages</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">intents</span><span class=\"o\">=</span><span class=\"n\">intents</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">appid</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">appid</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">token</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>此时，我们可以在QQ频道与QQbot对话，以实现对Arduino设备的控制</p>\n\n<p><img src=\"\\images\\posts\\gpt3.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"arduino状态控制\">Arduino状态控制</h2>\n<p>在服务器及交互平台搭建完成后，本部分展示了Arduino设备代码实现，其原理主要为发出GET请求获取设备状态，随后通过字符串匹配控制设备的状态。</p>\n\n<h3 id=\"arduino设备代码实现\">Arduino设备代码实现</h3>\n\n<p><strong>这部分代码是由我的队友编写的，他速成了Arduino代码编写并实现了设备状态控制，感谢他在该项目的贡献。</strong></p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ESP8266WiFi.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;SoftwareSerial.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ESP8266HTTPClient.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ArduinoJson.h&gt;</span><span class=\"cp\">\n</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">ssid</span><span class=\"p\">;</span> <span class=\"c1\">//Enter your Wi-Fi SSID</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">password</span><span class=\"p\">;</span> <span class=\"c1\">//Enter you Wi-Fi Password</span>\n<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">ledpin</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"n\">String</span> <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n<span class=\"n\">define</span> <span class=\"n\">URL</span> <span class=\"s\">\"http://localhost:5000/arduino\"</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">WIFI_STA</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"mi\">115200</span><span class=\"p\">);</span>\n    <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">);</span>\n    <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"开始连接\"</span><span class=\"p\">);</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"正在连接到\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">WL_CONNECTED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"waiting for \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"s...\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"WiFi connected!\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"IP address: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">localIP</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFiClient</span> <span class=\"n\">tcpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">HTTPClient</span> <span class=\"n\">httpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">tcpClient</span><span class=\"p\">,</span> <span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">httpCode</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">GET</span><span class=\"p\">();</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Send GET request to URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">httpCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">getString</span><span class=\"p\">();</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Server Response Payload: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span>\n    <span class=\"n\">StaticJsonDocument</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span> <span class=\"o\">&gt;</span> <span class=\"n\">doc</span><span class=\"p\">;</span>\n    <span class=\"n\">DeserializationError</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">deserializeJson</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s\">\"light\"</span><span class=\"p\">][</span><span class=\"s\">\"param\"</span><span class=\"p\">];</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">HIGH</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">LOW</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n    <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"结果展示\">结果展示</h2>\n\n<p>如图所示，在向QQbot提出需求后，ChatGPT成功接收并理解了我们的需求并将其转化为指令，Arduino设备状态也随之发生改变。</p>\n\n<p><img src=\"\\images\\posts\\gpt4.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>ChatGPT在此次实验中的强大作用向我们展示了大语言模型在智能家庭的重大潜力。包括但不限于识别并发掘深度需求，多模态智能家居控制，个性化用户体验等多种潜在方向。</p>\n\n<p>同样，该项应用也存在隐私保护，数据安全等问题，需要人们的进一步思考和解决。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/'> <img src='https://api.wannote.com/image/bing.php?day=2' alt='使用ChatGPT控制Arduino设备'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>11 min read <time class='article__date' datetime='2023-04-24T00:00:00+08:00'>Apr 24, 2023</time> </span> </div><h2 class='article__title'>使用ChatGPT控制Arduino设备</h2> <p class='article__excerpt'>本文介绍了ChatGPT与外部系统集成的一种方法，通过ChatGPT作为控制器实现对Arduino设备的控制，以探索自然语言命令控制家庭设备的可能性及智能家庭设备的发展方向。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/ChatGPT' class='article__tag'>ChatGPT</a>  <a href='/tag/Arduino' class='article__tag'>Arduino</a>  <a href='/tag/智能家庭' class='article__tag'>智能家庭</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "双指针问题（二）滑动窗口",
      "category" : "",
      "tags"     : "算法, 指针, 链表, and 数据结构",
      "url"      : "/2021/10/19/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
      "date"     : "Oct 19, 2021",
      "content"  : "<h2 id=\"概念\">概念</h2>\n<p>滑动窗口是在数组上通过双指针同向移动而解决问题的方法。这样的问题我们不必为它们专门命名一个名字，它们的解法其实是很自然的。</p>\n\n<p>滑动窗口通常是暴力解法的优化，掌握这一类问题最好的办法就是练习，然后思考清楚为什么可以使用滑动窗口。</p>\n\n<h2 id=\"209-长度最小的子数组\"><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></h2>\n\n<p>该题是最基本的滑动窗口问题，我们可以用两个指针\\(l\\)和\\(r\\)表示窗口的左右段，然后让指针\\(r\\)持续向右移动，同时用一个变量\\(sum\\)记录\\([l,r]\\)的区间和，若\\(sum\\)满足条件，则记录\\(l\\)和\\(r\\)的差作为答案，并移动指针\\(l\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">INT_MAX</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h2 id=\"713-乘积小于k的子数组\"><a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">713. 乘积小于K的子数组</a></h2>\n\n<p>这道题的解法与上道题非常相似，但求的不再是区间长度而是连续子区间数量。</p>\n\n<p>对于子区间数量，我们可以发现，若\\([l,r]\\)是一个符合条件的窗口，则\\([l+i,r],(0&lt;i≤r-l)\\)也必然是符合条件的窗口</p>\n\n<p>即对于任何符合条件的区间\\([l,r]\\)，以\\(r\\)结尾的子集个数永远是\\(r-l+1\\)，因此我们要在每次更新\\(r\\)之前为答案加上\\(r-l+1\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSubarrayProductLessThanK</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">/=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">3. 无重复字符的最长子串</a></h2>\n\n<p>与前面的连续子序列不同的是，这道题要求的是连续子串的长度，因此我们需要修改一下判定条件，若窗口区间内出现重复字符，则更新\\(l\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLongestSubstring</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h2 id=\"438-找到字符串中所有字母异位词\"><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">438. 找到字符串中所有字母异位词</a></h2>\n\n<p>这道题解法与上一题大同小异，是把字符的判据改为了字符串的比较。同时，该题的窗口长度始终保持不变，为\\(p\\)的长度</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">findAnagrams</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">target</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n                <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/19/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/'> <img src='https://api.dujin.org/bing/1920.php' alt='双指针问题（二）滑动窗口'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-19T21:41:33+08:00'>Oct 19, 2021</time> </span> </div><h2 class='article__title'>双指针问题（二）滑动窗口</h2> <p class='article__excerpt'>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/指针' class='article__tag'>指针</a>  <a href='/tag/链表' class='article__tag'>链表</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "二分查找（Binary Search）",
      "category" : "",
      "tags"     : "算法",
      "url"      : "/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/",
      "date"     : "Oct 15, 2021",
      "content"  : "<h2 id=\"概念\">概念</h2>\n<p>二分查找是对已排好序的数组查找特定值的常用方法，二分查找不必遍历整个序列，只需关注序列的边界及中间值即可，因此时间复杂度可以达到\\(O(logn)\\)</p>\n\n<h3 id=\"模板\">模板</h3>\n\n<p>在一个有序序列中查找关键字\\(key\\)的模板代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h2 id=\"题目\">题目</h2>\n\n<p>二分的题目模板一般都是固定的，主要是能否想到的对什么进行二分，怎样二分。</p>\n\n<h3 id=\"34-在排序数组中查找元素的第一个和最后一个位置\"><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3>\n\n<p>该题不仅要求元素出现的第一个位置，还要求出元素出现的最后一个位置。在模板代码中，若<code class=\"language-plaintext highlighter-rouge\">nums[i] &lt; key</code>，才会继续查找左边，如果我们想在已经找到元素后继续查找，则需要修改为<code class=\"language-plaintext highlighter-rouge\">nums[i] &lt;= key</code>。这样查找的结果是大于\\(key\\)的第一个元素的位置。因此该题的代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">searchRange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">),</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">};</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"74-搜索二维矩阵\"><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\">74. 搜索二维矩阵</a></h3>\n\n<p>依题可知待查找元素必大于或等于该行第一个元素，因此我们先对列进行一次二分查找，寻找不大于\\(target\\)的最大元素</p>\n\n<p>之后对该行进行基本的二分查找，即可得到结果。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">searchMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"c1\">// 先找小于target的第一个数的位置</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>  \t\t\t\t\t     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\t\t\t\t\t\t   <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"33-搜索旋转排序数组\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\">33. 搜索旋转排序数组</a></h3>\n\n<p>该题只保证了数组的局部有序，但对数组进行二分后，会发现总有一半的数组是有序的，此时可以继续对有序的数组进行二分查找，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"153-寻找旋转排序数组中的最小值\"><a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\">153. 寻找旋转排序数组中的最小值</a></h3>\n\n<p>该题要查找的是上一题中旋转的排序数组的最小值，也即旋转点的值，我们依然利用部分有序的性质，二分查找数组最小值，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findMin</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<h3 id=\"162-寻找峰值\"><a href=\"https://leetcode-cn.com/problems/find-peak-element/\">162. 寻找峰值</a></h3>\n\n<p>我们可以用\\([l,r]\\)来存储可能存在峰值的区间，根据\\(mid\\)进行二分，若<code class=\"language-plaintext highlighter-rouge\">nums[mid] &lt; nums[mid + 1]</code>则说明在区间\\([mid+1,r]\\)存在峰值，反之则说明在区间[l,mid]存在峰值，因此代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findPeakElement</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 用l,r表示可能存在峰值的区间</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"c1\">//mid+1-r更大</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span><span class=\"c1\">//l-mid更大</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/'> <img src='/images/covers/blackrock2.jpg' alt='二分查找（Binary Search）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2021-10-15T20:51:55+08:00'>Oct 15, 2021</time> </span> </div><h2 class='article__title'>二分查找（Binary Search）</h2> <p class='article__excerpt'>二分查找是对已排好序的数组查找特定值的常用方法，二分查找不必遍历整个序列，只需关注序列的边界及中间值即可，因此时间复杂度可以达到 O(log n)</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "动态规划（四）最长上升子序列（LIS）",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/10/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/",
      "date"     : "Oct 11, 2021",
      "content"  : "<p><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">300.最长递增子序列</a></p>\n\n<h2 id=\"动态规划\">动态规划</h2>\n<p>我们可以定义\\(dp[i]\\)为以\\(i\\)结尾的递增子序列长度的最大值（数组\\(dp\\)的常用套路），则我们可以写出状态转移方程为\n\\(dp[i]=max(dp[j])+1,(0≤j&lt;i, nums[j]&lt;nums[i])\\)</p>\n\n<p>最后，此题的结果便是\\(max(dp[i])\\)，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>该解法时间复杂度为\\(O(n^2)\\)</p>\n\n<h2 id=\"树状数组\">树状数组</h2>\n<p>LIS问题的本质是偏序问题，我们之前在二维偏序问题中提到过，树状数组可以轻松的解决这类问题。但之前的问题中，我们求的是数对的数量，而不是序列的长度。为了能够求得序列长度，我们要对树状数组进行修改。</p>\n\n<p>我们可以用树状数组存储以\\(i\\)结尾的递增子序列最大值，修改树状数组结构如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>随后用和\\(dp\\)同样的方式进行遍历，可以得出正确结果，同时要注意数据的离散化，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Fenwick</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">lowbit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">Fenwick</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>该解法时间复杂度为\\(O(nlogn)\\)</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/10/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/'> <img src='/images/covers/village.jpg' alt='动态规划（四）最长上升子序列（LIS）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-11T21:19:19+08:00'>Oct 11, 2021</time> </span> </div><h2 class='article__title'>动态规划（四）最长上升子序列（LIS）</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "二叉树基础（三） 线段树（Segment Tree）",
      "category" : "",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/",
      "date"     : "Oct 9, 2021",
      "content"  : "<h2 id=\"概念\">概念</h2>\n<p>线段树是常用于<strong>维护区间信息</strong>的数据结构</p>\n\n<p>线段树可以在$O(logn)$的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作</p>\n\n<h3 id=\"结构\">结构</h3>\n\n<p>线段树将每个长度不为$1$的区间划分成左右两个区间递归求解，把整个线段划分为一个树形结构，通过合并左右两区间信息来求得该区间的信息。这种数据结构可以方便的进行大部分的区间操作。</p>\n\n<p>假设以线段树存储数组$a=[6,7,8,9,10]$，设线段树的根节点编号为$1$，用数组$node$来保存线段树，$node[i]$用来保存线段树上编号为$i$的节点的值</p>\n\n<p>该线段树的结构如下</p>\n\n<p><img src=\"/images/posts/segmenttree1.png\" alt=\"在这里插入图片描述\" />\n代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// 线段树下标从1开始</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// 辅助建树</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h2 id=\"基本操作\">基本操作</h2>\n<h3 id=\"线段树的建立\">线段树的建立</h3>\n\n<p>对于节点$i$，其子节点的编号为$2i$以及$2i+1$，若节点$i$存储的区间为$[a,b]$，则节点$2i$存储的区间应该是$[a,\\frac{a+b}{2}]$，相应地，节点$2i+1$存储的区间为$[\\frac{a+b}{2}+1,b]$。我们可以采用递归的方式建树，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i表示当前节点, l表示左边界, r表示右边界</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"区间查询\">区间查询</h3>\n<p>若查询的区间为$[1,5]$，我们只需直接返回$node[1]$，但如果我们查询的是$[3,5]$，则需要合并$[3,3]$和$[4,5]$的答案，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//i表示当前节点, [l,r]是查询区间, [s,t]表示当前节点包含区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接返回</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归查询存在交集的子区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询左字串</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询右字串</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"区间修改\">区间修改</h3>\n<p>和区间查询相同，若区间存在包含关系，我们可以为其直接加上所需要更新的值，而当区间存在交集时，进行递归更新，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接更新</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归更新存在交集的子区间</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新左字串</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新右字串</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"懒惰标记\">懒惰标记</h3>\n<p>当我们按照上面的方法对$[6,7,8,9,10]$的区间$[3,5]$加上$2$后，更新后的线段树结构如下\n<img src=\"/images/posts/segmenttree2.png\" alt=\"在这里插入图片描述\" />\n我们会发现，在进行递归更新时，递归执行到节点$3$时就已经结束了，因此节点$3$的两个子节点没有被更新</p>\n\n<p>遇到这种情况，我们需要给递归结束的节点打上一个标记，在下一次查询操作时将没有更新的子节点更新，这个标记被称为懒惰标记，这样更新时效果如图</p>\n\n<p><img src=\"/images/posts/segmenttree3.png\" alt=\"在这里插入图片描述\" /></p>\n\n<p>而查询后的效果如下</p>\n\n<p><img src=\"/images/posts/segmenttree4.png\" alt=\"在这里插入图片描述\" />\n我们可以用<code class=\"language-plaintext highlighter-rouge\">vector&lt;int&gt; lazy</code>来存储懒惰标记，下方懒惰标记的代码如下</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// 下放懒惰标记</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// 将懒惰标记的值加给子树</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>然后在查询和更新函数中调用<code class=\"language-plaintext highlighter-rouge\">push_down()</code>即可</p>\n\n<h2 id=\"整体代码\">整体代码</h2>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SegmentTree</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// 线段树下标从1开始</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lazy</span><span class=\"p\">;</span> <span class=\"c1\">// 懒惰标记</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// 辅助建树</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">SegmentTree</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">nums</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i表示当前节点, l表示左边界, r表示右边界</span>\n        <span class=\"n\">N</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// 下放懒惰标记</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// 将懒惰标记的值加给子树</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//i表示当前节点, [l,r]是查询区间, [s,t]表示当前节点包含区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接返回</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归查询存在交集的子区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询左字串</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// 递归查询右字串</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 若[s,t]是[l,r]的子区间，直接更新</span>\n            <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//递归更新存在交集的子区间</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新左字串</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// 递归更新右字串</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/'> <img src='https://api.dujin.org/bing/1920.php' alt='二叉树基础（三） 线段树（Segment Tree）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>9 min read <time class='article__date' datetime='2021-10-09T19:00:50+08:00'>Oct 9, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（三） 线段树（Segment Tree）</h2> <p class='article__excerpt'>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "双指针问题（一）对撞指针和快慢指针",
      "category" : "",
      "tags"     : "算法, 指针, 链表, and 数据结构",
      "url"      : "/2021/10/08/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/",
      "date"     : "Oct 8, 2021",
      "content"  : "<h2 id=\"概念\">概念</h2>\n<p>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p>\n\n<p>广义上来说，双指针是指用两个变量在线性结构上遍历而解决的问题。</p>\n\n<p>狭义上说：</p>\n\n<ul>\n  <li>对于数组，指两个变量在数组上相向移动解决的问题；</li>\n  <li>对于链表，指两个变量在链表上同向移动解决的问题，也称为「快慢指针」问题。</li>\n</ul>\n\n<h2 id=\"双指针问题\">双指针问题</h2>\n<h3 id=\"对撞指针\">对撞指针</h3>\n<p>对撞指针将最左侧的索引定义为左指针(left)，最右侧的定义为右指针(right)，从两头向中间进行数组遍历</p>\n\n<p>对撞指针适用于<strong>有序的数组和字符串</strong></p>\n\n<p>对撞指针的时间复杂度为\\(O(n)\\)</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/\">剑指 Offer 21</a></p>\n\n<p>此题要求分奇偶调整数组的顺序，我们可以用左指针寻找奇数，右指针寻找偶数，当左指针找到偶数且右指针找到奇数时，对调两数。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">exchange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\">剑指 Offer 57</a></p>\n\n<p>此题要求寻找和为\\(target\\)数对，由于此题数组已经做好排序，我们可以确定</p>\n\n<p>若数对\\((nums[i+1],nums[j])&lt;target\\)</p>\n\n<p>则必有\\((nums[i],nums[j])&lt;target\\)</p>\n\n<p>同理，若数对\\((nums[i],nums[j])&gt;target\\)</p>\n\n<p>则\\((nums[i+1],nums[j])&gt;target\\)</p>\n\n<p>因此这道题也可以用对撞指针求解，当\\(nums[l]+nums[r]&lt;target\\)时，\\(l\\)向右移动，反之，\\(nums[l]+nums[r]&gt;target\\)时，r向左移动，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">twoSum</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">target</span><span class=\"p\">){</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]);</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n            <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"快慢指针\">快慢指针</h3>\n<p>快慢指针在序列中定义了一对不同速度的指针，以进行单向序列问题的求解。</p>\n\n<p>快慢指针的时间复杂度为\\(O(n)\\)，空间复杂度为\\(O(1)\\)</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">141. 环形链表</a></p>\n\n<p>此题要判断链表是否有环，可以定义一个快指针和一个慢指针，随后进行移动，若快指针可以追上慢指针，则表示链表一定有环，代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">hasCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">142. 环形链表 II</a></p>\n\n<p>此题需要在求出是否成环的同时找到入环的第一个节点，我们可以根据快指针速度始终是慢指针的两倍这一条件进行推理</p>\n\n<p><img src=\"/images/posts/doublepoint1.png\" alt=\"在这里插入图片描述\" /></p>\n\n<p>假设快慢指针在\\(bc\\)交点相遇，此时慢指针走的距离应该是\\(a+b\\)，而快指针已经走了\\(a+b+k(b+c)\\)\n又有快指针的速度是慢指针的两倍，因此</p>\n\n<p>\\(a+b+k(b+c)=2(a+b)\\)，</p>\n\n<p>即\\(a=k(b+c)-b=(k-1)(b+c)+c\\)</p>\n\n<p>因此，当快慢指针相遇时，相遇点距离入环节点的距离总是\\(a\\)，因此我们可以再用一个指针\\(cur\\)寻找入环节点，同时更新\\(cur\\)和慢指针，当二者相遇时，相遇节点即入环节点。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"nf\">detectCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">cur</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/08/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/'> <img src='https://api.dujin.org/bing/1920.php' alt='双指针问题（一）对撞指针和快慢指针'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2021-10-08T21:14:13+08:00'>Oct 8, 2021</time> </span> </div><h2 class='article__title'>双指针问题（一）对撞指针和快慢指针</h2> <p class='article__excerpt'>双指针是在遍历的过程中，使用两个方向相同或相反的指针进行扫描，从而达到相应目的的算法。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/指针' class='article__tag'>指针</a>  <a href='/tag/链表' class='article__tag'>链表</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "二叉树基础（二）二叉搜索树（BST）",
      "category" : "",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/",
      "date"     : "Oct 5, 2021",
      "content"  : "<h2 id=\"概念\">概念</h2>\n<p><strong>二叉搜索树（Binary Search Tree）</strong>（又：二叉查找树，二叉排序树），它或者是一棵空树，或者是具有下列性质的二叉树：\n若它的左子树非空，则左子树上所有结点的值均小于它的根结点的值； \n若它的右子树非空，则右子树上所有结点的值均大于它的根结点的值；\n它的左、右子树也分别是二叉搜索树。\n二叉搜索树作为一种经典的数据结构，既有快速插入与删除操作的特点，又有快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</p>\n<h3 id=\"性质\">性质</h3>\n<p>二叉搜索树有以下性质：</p>\n<ul>\n  <li>若左子树非空，则左子树上的所有节点值均小于根节点的值。</li>\n  <li>若右子树非空，则右子树上的所有节点值均小于根节点的值。</li>\n  <li>左右子树是二叉搜索树。</li>\n</ul>\n\n<h3 id=\"结构\">结构</h3>\n<p>BST是以二叉树来构建的，除了key和位置数据之外，每个结点还包含属性lchild、rchild，如果某个孩子结点不存在，则相应属性的值为空。</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                               <span class=\"c1\">// 数据</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span>  \t\t\t<span class=\"c1\">// 左右子树</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BST</span><span class=\"p\">,</span> <span class=\"n\">BSTNode</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<h2 id=\"代码\">代码</h2>\n<h3 id=\"基本操作\">基本操作</h3>\n\n<p>BST的构造和析构与普通二叉树相同，这里不多赘述。相比于普通二叉树，BST的主要功能增加了查找，插入和删除</p>\n\n<h4 id=\"find\">$find()$</h4>\n<p>$find()$函数的作用是查找某一个数据值已知的节点是否在树中，并返回节点值。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">BST</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">BST</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"insert\">$insert()$</h4>\n<p>$insert()$函数的作用是在树中插入一个节点。BST中所有的节点都是作为叶子节点插入的，因此在创建节点$p$后，要找到合适的父节点$f$并插入其中。代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// 记录f为p的父节点</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// 查找data是否已经在树中</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BSTNode</span><span class=\"p\">));</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>             <span class=\"c1\">// 创建节点</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"delete\">$delete()$</h4>\n<p>二叉搜索树进行删除操作后，仍然要保证它的排序正确，因此我们的删除操作分为三种情况：</p>\n\n<ul>\n  <li>待删除节点无左孩子，则用右孩子代替其位置</li>\n  <li>待删除节点无右孩子，则用左孩子代替其位置</li>\n  <li>待删除节点拥有左右孩子，则用左子树最大节点或右子树最小节点代替其位置</li>\n</ul>\n\n<p>代码如下</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// 记录f为p的父节点</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// 查找data的位置</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>       <span class=\"c1\">// 若未找到，则返回false</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"c1\">// 情况1</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"nf\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">){</span>        <span class=\"c1\">// 情况2</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">{</span>                       <span class=\"c1\">// 情况3</span>\n        <span class=\"n\">BST</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">,</span><span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/'> <img src='https://api.dujin.org/bing/1920.php' alt='二叉树基础（二）二叉搜索树（BST）'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2021-10-05T01:14:28+08:00'>Oct 5, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（二）二叉搜索树（BST）</h2> <p class='article__excerpt'>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "动态规划（三）股票问题系列",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 29, 2021",
      "content"  : "<h2 id=\"121-买卖股票的最佳时机\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\">121. 买卖股票的最佳时机</a></h2>\n<h3 id=\"状态转移方程\">状态转移方程</h3>\n<p>我们可以用$dp[i]$来表示，在前$i$日我们可以得到的最大利润，那么我们第$i$日的操作有两种选择：</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1.我们在第i日卖出得到的利润可能比之前的利润（dp[i-1]）更高\n2.我们之前的利润要比现在更高，不用进行任何操作\n</code></pre></div></div>\n\n<p>对于情况1，我们得到状态转移方程$dp[i]=prices[i]-price_{min}$\n而对于情况2，我们有$dp[i]=dp[i-1]$\n综合两种情况，也就得到此题的状态转移方程：</p>\n\n<p>$dp[i]=max(dp[i-1],prices[i]-price_{min})$</p>\n\n<p>那么剩下的问题就在于如何表示$price_{min}$。</p>\n\n<h4 id=\"如何表示price_min\">如何表示$price_{min}$</h4>\n<p>我们发现，$price_{min}$的计算也是一个无后效性的问题，我们同样可以通过动态规划来求解，用$dp_{price_{min}}[i]$来表示前i日股票的最低价格，则$dp_{price_{min}}[i]$的状态转移方程可以写成：</p>\n\n<p>$dp_{price_{min}}[i]$ = $min(prices[i],dp_{price_{min}}[i-1])$</p>\n\n<p>可能这时候你就要说了，你这不是脱了裤子放屁吗？那我们不妨换一个思维方式，还是上面的状态转移方程不变，<strong>我们用$dp[i][j]$表示前$i$天手上有$j$个股票时我们的最大利润。</strong> 这时候你不妨停下来思考一会，该如何写出状态转移方程呢？</p>\n\n<p>联立上面两个转移方程，得到$dp[i][j]$的状态转移方程：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(-prices[i], dp[i - 1][1]);$</p>\n\n<p>没错，此时的$dp[i][1]$就是之前我们的开销，用来辅助我们计算第$i$天的最大利润，也就是$dp[i][0]$</p>\n\n<h4 id=\"边界条件\">边界条件</h4>\n<p>$dp[0][0]$表示在第0天我们手上有0支股票时的最大利润，因此$dp[0][0]=0$</p>\n\n<p>$dp[0][1]$表示在第0天我们手上有1支股票时的最大利润，因此$dp[0][0]=-prices[0]$</p>\n\n<h3 id=\"代码\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> \n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>篇幅关系，空间复杂度的优化留给读者自己思考，我这里不作展开</p>\n\n<h2 id=\"122-买卖股票的最佳时机-ii\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\">122. 买卖股票的最佳时机 II</a></h2>\n<h3 id=\"状态转移方程-1\">状态转移方程</h3>\n<p>122.题与121.题的不同点在于，122.是可以无限进行购买操作的，相应的，我们的状态转移方程也有所改变。</p>\n\n<p>根据我们第一题的状态转移方程，在第一题里，一但我们前面卖出了股票，下次再想购买股票时，总利润便会变成$-prices[i]$，但在这道题中，由于我们不再受购买次数的限制，因此我们的利润就可以一直累计下去，如何理解这种累计呢？</p>\n\n<p>在前$i-1$天，我们的最大利润达到了$dp[i-1][0]$，而在第$i$天我们要购入股票，此时的利润就会变为$dp[i-1][0]-prices[i]$</p>\n\n<p>即$dp[i][1]$的状态转移方程变为：</p>\n\n<p>$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>读者应该也注意到，在我们把状态转移方程分成两部分后，我们对转移方程的解读方式也转变了，这里我再次阐述一遍，$dp[i][0]$表示手上没有股票时的最大利润，$dp[i][1]$表示手上有一枚股票时的最大利润。</p>\n\n<p>综上，状态转移方程为：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>边界条件与之前相同。</p>\n\n<h3 id=\"代码-1\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"714-买卖股票的最佳时机含手续费\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">714. 买卖股票的最佳时机含手续费</a></h2>\n<h3 id=\"状态转移方程-2\">状态转移方程</h3>\n<p>如果你认真阅读了题714.并理解了题122.那这道题你其实可以直接过的，因为这道题和题122.的不同之处就在于，它在售卖时多了手续费这个固定消耗，因此在决定卖出股票的第$i$天里，如果收益不足以抵消掉手续费，那我们会选择之前的利润作为最优解，即：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$</p>\n\n<p>整体的转移方程表示为：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$\n$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<p>边界条件仍与之前相同</p>\n\n<h3 id=\"代码-2\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">fee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">fee</span><span class=\"p\">),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"309-最佳买卖股票时机含冷冻期\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">309. 最佳买卖股票时机含冷冻期</a></h2>\n<h3 id=\"状态转移方程-3\">状态转移方程</h3>\n<p>这道题的变化在于，之前我们只有$(0)$卖出、$(1)$买入两种状态，但这道题引入了一个新的新的状态$(2)$冷冻期，而这个冷冻期状态是在卖出操作后出现，如果我们用$dp[i][2]$来表示当我们在第$i$天的冷冻期收益，则$dp[i][2]$可以用$dp$表示为：</p>\n\n<p>$dp[i][2] = dp[i-1][0]$</p>\n\n<p>买入状态的转移方程也有所变化，因为此题中买入状态必须由冷冻期状态进入，也就是：</p>\n\n<p>$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$</p>\n\n<p>最后，综合三式就可以得到我们新的状态转移方程：</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])$\n$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$\n$dp[i][2] = dp[i - 1][0]$</p>\n\n<p>边界条件仍然不变</p>\n\n<h3 id=\"代码-3\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"c1\">//</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"123-买卖股票的最佳时机-iii\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\">123. 买卖股票的最佳时机 III</a></h2>\n<h3 id=\"思路\">思路</h3>\n<p>如果没有前面的铺垫直接来看这道题，难度瞬间就高起来了。但现在带着前面的经验再来对比这道题，我们会发现这道题和题121. 题122.有着很大的关联。</p>\n\n<p>假设在第$i$天卖出了股票，当我们是第一次或第二次操作时，我们的利润是可以积累的。但如果是在第三次操作，那么我们就要重新累计利润了。</p>\n\n<p>我们不妨将$dp$升到三维数组，用第三维来区分第一次操作和第二次操作，即得到代码如下：</p>\n<h3 id=\"代码-4\">代码</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>这个代码并不优雅，但对于问题的解决无疑是直接而有效的</p>\n\n<h2 id=\"188-买卖股票的最佳时机-iv\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/\">188. 买卖股票的最佳时机 IV</a></h2>\n\n<p>当问题扩充到$k$时，我们解决题123.的思路仍然有效，我们可以用初始化边界为$0$，再用一个$for$循环写出结果。</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">110</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span>  <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]),</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">];</span>\n <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"股票问题的一般通解\">股票问题的一般通解</h2>\n<h3 id=\"状态转移方程-4\">状态转移方程</h3>\n<p>股票问题的三个限定条件是</p>\n\n<ul>\n  <li>当前天数$i$</li>\n  <li>手持股票$j$</li>\n  <li>允许的最大操作次数$k$</li>\n</ul>\n\n<p>我们设在第$i$天，手持股票为$j$，操作次数为$k$时我们的利润为$dp[i][j][k]$，视每次购买股票为进行一次操作，则我们的状态转移方程为：</p>\n\n<p>$dp[i][0][k] = max(dp[i-1][1][k] + prices[i], dp[i-1][0][k])$\n$dp[i][1][k] = max(dp[i-1][0][k-1] - prices[i], dp[i-1][1][k])$</p>\n\n<h4 id=\"边界条件-1\">边界条件</h4>\n<p>$dp[0][1][k] = -prices[0]$\n其余值都为0</p>\n\n<h2 id=\"结束语\">结束语</h2>\n<p>股票问题系列和打家劫舍系列的不同点在于，股票问题的每一个系列问题都对状态转移方程进行了改动。面临一道动态规划问题时，要想迅速找到子问题并写出状态转移方程，关键还是要多了解不同的动归题型。</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（三）股票问题系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2021-09-29T20:29:46+08:00'>Sep 29, 2021</time> </span> </div><h2 class='article__title'>动态规划（三）股票问题系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "二叉树基础（一）二叉树的概念",
      "category" : "数据结构基础",
      "tags"     : "算法, 数据结构, 二叉树, and 树型数据结构",
      "url"      : "/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "Sep 28, 2021",
      "content"  : "<h2 id=\"概念\">概念</h2>\n<p>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p>\n\n<h3 id=\"二叉树的定义\">二叉树的定义</h3>\n<p>二叉树（Binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树</p>\n\n<h3 id=\"基本形态\">基本形态</h3>\n<p><img src=\"/images/posts/tree1.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n  <li>空二叉树</li>\n  <li>只有一个根节点的二叉树</li>\n  <li>根节点只有左子树的二叉树</li>\n  <li>根节点只有右子树的二叉树</li>\n  <li>根节点既有左子树，又有右子树的<strong>完全二叉树</strong>\n    <h3 id=\"特殊类型\">特殊类型</h3>\n  </li>\n  <li>满二叉树：只有度为0和2的节点，且度为0的结点在同一层上</li>\n  <li>完全二叉树：深度为k且每一个节点都与深度为k的满二叉树中编号从1到n的结点一一对应\n<img src=\"/images/posts/tree2.png\" alt=\"在这里插入图片描述\" />\n    <h3 id=\"相关术语\">相关术语</h3>\n  </li>\n  <li>节点：包含一个数据元素及若干指向子树分支的信息</li>\n  <li>节点的度：一个节点拥有子树的数目</li>\n  <li>叶节点：也称为终端节点，没有子树的节点或度为0的节点</li>\n  <li>分支节点：也称为非终端节点，度不为0的节点</li>\n  <li>树的度：树中所有节点度的最大值</li>\n  <li>节点的层次：从根节点开始，根节点为第0层，根节点的子节点为第1层，依此类推</li>\n  <li>树的深度：也称树的高度，树中所有节点层次的最大值</li>\n  <li>有序树：如果树中各棵子树的次序有先后次序，则该树为有序树</li>\n  <li>无序树：如果树中各棵子树的次序没有先后次序，则该树为无序树</li>\n  <li>森林：由m（m≥0）棵互不相交的树构成一片森林。如果把一棵非空的树的根结点删除，则该树就变成了一片森林，森林中的树由原来根结点的各棵子树构成\n    <h3 id=\"性质\">性质</h3>\n  </li>\n  <li>一棵二叉树的第i层最多有$2^i$个节点 $(i≥0)$</li>\n  <li>深度为k的二叉树最多有$2^{k+1}-1$个节点 $(k≥0)$</li>\n  <li>对于1棵二叉树，度为0的节点为$n_0$，度为2的节点为$n_2$，则$n_0=n_2+1$</li>\n  <li>满二叉树定理：非空满二叉树的叶子节点数等于分支节点数$+1$</li>\n  <li>满二叉树定理推论：在一棵具有$n$个结点的二叉树中,所有结点的空子树等于$n+1$</li>\n  <li>$n$个节点的完全二叉树高度为$log_2(n+1)$，深度为$log_2(n+1)-1$</li>\n</ul>\n\n<h2 id=\"二叉树的c实现\">二叉树的C++实现</h2>\n\n<h3 id=\"二叉树的顺序存储\">二叉树的顺序存储</h3>\n\n<p>我们可以使用一个数组来存储所有的节点，按数组下标进行存储，根节点存储在下标\\(0\\)处，\n其左孩子存储于下标\\(2*0+1\\)，右孩子存储于下标\\(2*0+2\\)….依此类推，对于下标为\\(i\\)的节点，左右孩子分别存储于下标为\\({2*i+1}\\)和\\({2*i+2}\\)处。</p>\n<h4 id=\"实现代码\">实现代码</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">BinaryTree</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"二叉树的链式存储\">二叉树的链式存储</h3>\n<p>二叉树的顺序存储结构一般适用于完全二叉树，通常我们使用链式存储结构表示二叉树。</p>\n<h4 id=\"实现代码-1\">实现代码</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                     <span class=\"c1\">// 数据</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"c1\">// 左右子树</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BinaryTree</span><span class=\"p\">,</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"o\">&amp;</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">input</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n    <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"二叉树的递归遍历\">二叉树的递归遍历</h3>\n<h4 id=\"先序遍历dlr\">先序遍历（DLR）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>访问当前节点</li>\n  <li>先序遍历左子树</li>\n  <li>先序遍历右子树</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">DLR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"中序遍历ldr\">中序遍历（LDR）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>中序遍历左子树</li>\n  <li>访问当前节点</li>\n  <li>中序遍历右子树</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LDR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"后序遍历lrd\">后序遍历（LRD）</h4>\n<p>若二叉树为空，则空操作，否则：</p>\n\n<ol>\n  <li>后序遍历左子树</li>\n  <li>后序遍历右子树</li>\n  <li>访问当前节点</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LRD</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='https://api.dujin.org/bing/1920.php' alt='二叉树基础（一）二叉树的概念'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2021-09-28T13:58:19+08:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>二叉树基础（一）二叉树的概念</h2> <p class='article__excerpt'>二叉树（Binary tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/数据结构' class='article__tag'>数据结构</a>  <a href='/tag/二叉树' class='article__tag'>二叉树</a>  <a href='/tag/树型数据结构' class='article__tag'>树型数据结构</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "动态规划（二）最优子序列系列",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 28, 2021",
      "content"  : "<h2 id=\"动态规划核心思想\">动态规划核心思想</h2>\n<p>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p>\n\n<p>我们可以举个例子：</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B ( 计算 ) : 8</p>\n\n  <p>A: 在上面等式的左边写上 “1+” 呢？</p>\n\n  <p>B (脱口而出): 9</p>\n\n  <p>A: 你怎么这么快就得到答案了？</p>\n\n  <p>B: 只要在8的基础上加1就好了</p>\n\n  <p>A: 所以你不用重新计算，因为你记住了第一个等式的值为8。动态规划算法也可以说是记住求过的解来节省时间</p>\n</blockquote>\n\n<h2 id=\"198-打家劫舍\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. 打家劫舍</a></h2>\n\n<ol>\n  <li>只有一间房屋时，我们选择偷这间房屋</li>\n  <li>存在两间房屋时，选择偷两间中较大的那间</li>\n  <li>如果房屋数量大于两间时，比如第三间，我们要考虑，第一间和第三间房屋的价值总和与第二间房屋的价值相比，哪个更大？如果第一间和第三间房屋的价值总和较大的话，我们会选择偷第一间和第三间；否则，我们则会选择不偷第一间和第三间，去偷第二间</li>\n  <li>将其推广到一般情况，对于前i间房子，我们偷窃的方案有两种：\n    <ol>\n      <li>偷窃第i间房子，得到的总金额是第i间房子的价值与偷窃前i-2间房子的总金额之和</li>\n      <li>不偷窃第i间房子，得到的总金额是偷窃前i-1间房子的总金额</li>\n    </ol>\n  </li>\n</ol>\n\n<p>我们总会选择1、2中可以得到更高金额的选项，这时我们用$d[i]$来表示偷窃前i间房子的总金额，并且用$d[i]$来表示选项1、2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n\n<p>hello</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（二）最优子序列系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-28T11:12:38+08:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>动态规划（二）最优子序列系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "动态规划（一）打家劫舍系列",
      "category" : "动态规划基础",
      "tags"     : "算法 and 动态规划",
      "url"      : "/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 27, 2021",
      "content"  : "<h2 id=\"动态规划核心思想\">动态规划核心思想</h2>\n<p>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p>\n\n<p>我们可以举个例子：</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B ( 计算 ) : 8</p>\n\n  <p>A: 在上面等式的左边写上 “1+” 呢？</p>\n\n  <p>B (脱口而出): 9</p>\n\n  <p>A: 你怎么这么快就得到答案了？</p>\n\n  <p>B: 只要在8的基础上加1就好了</p>\n\n  <p>A: 所以你不用重新计算，因为你记住了第一个等式的值为8。动态规划算法也可以说是记住求过的解来节省时间</p>\n</blockquote>\n\n<h2 id=\"198-打家劫舍\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. 打家劫舍</a></h2>\n\n<ol>\n  <li>只有一间房屋时，我们选择偷这间房屋</li>\n  <li>存在两间房屋时，选择偷两间中较大的那间</li>\n  <li>如果房屋数量大于两间时，比如第三间，我们要考虑，第一间和第三间房屋的价值总和与第二间房屋的价值相比，哪个更大？如果第一间和第三间房屋的价值总和较大的话，我们会选择偷第一间和第三间；否则，我们则会选择不偷第一间和第三间，去偷第二间</li>\n  <li>将其推广到一般情况，对于前i间房子，我们偷窃的方案有两种：\n    <ol>\n      <li>偷窃第i间房子，得到的总金额是第i间房子的价值与偷窃前i-2间房子的总金额之和</li>\n      <li>不偷窃第i间房子，得到的总金额是偷窃前i-1间房子的总金额</li>\n    </ol>\n  </li>\n</ol>\n\n<p>我们总会选择1、2中可以得到更高金额的选项，这时我们用\\(d[i]\\)来表示偷窃前i间房子的总金额，并且用\\(d[i]\\)来表示选项1、2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n\n<p>hello</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%9F%BA%E7%A1%80/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='动态规划（一）打家劫舍系列'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-27T20:12:45+08:00'>Sep 27, 2021</time> </span> </div><h2 class='article__title'>动态规划（一）打家劫舍系列</h2> <p class='article__excerpt'>动态规划最核心的思想，就在于将问题拆分为一个个子问题，保留之前的计算结果，以达到减少计算量的效果。</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/算法' class='article__tag'>算法</a>  <a href='/tag/动态规划' class='article__tag'>动态规划</a> </span></div></div></div></div></div>"
    } 
  
]
