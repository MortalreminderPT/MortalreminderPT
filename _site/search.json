[
  
    {
      "title"    : "Kubernetes Notes (Part 3) - Concepts of Master and Worker",
      "category" : "",
      "tags"     : "Kubernetes",
      "url"      : "/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%B8%89/",
      "date"     : "May 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#master-node\" id=\"markdown-toc-master-node\">Master Node</a></li>\n  <li><a href=\"#worker-node\" id=\"markdown-toc-worker-node\">Worker Node</a></li>\n</ol>\n<h2 id=\"master-node\">Master Node</h2>\n\n<p>The Master node is the control center of the Kubernetes cluster, responsible for managing the cluster’s state, scheduling applications, handling cluster events, and monitoring the cluster’s health. The Master node typically includes the following core components:</p>\n\n<ul>\n  <li>\n    <p><strong>API Server (kube-apiserver)</strong>: Acts as the frontend interface for the Kubernetes cluster. All management operations are conducted through the API Server. It receives and processes requests from users, command-line tools, and other components, forwarding them to the appropriate component for handling.</p>\n  </li>\n  <li>\n    <p><strong>Scheduler (kube-scheduler)</strong>: Responsible for scheduling Pods to available Worker nodes based on the application’s resource requirements and the cluster’s state. The scheduler selects the optimal node to run a Pod according to predefined scheduling policies.</p>\n  </li>\n  <li>\n    <p><strong>Controller Manager (kube-controller-manager)</strong>: Contains multiple controllers that maintain the cluster’s desired state. Common controllers include the Replication Controller, Namespace Controller, Node Controller, etc. These controllers ensure that various resources in the cluster are in the expected state.</p>\n  </li>\n  <li>\n    <p><strong>etcd</strong>: A distributed key-value store used to store the configuration and state information of the Kubernetes cluster. As the data storage backend of the Master node, etcd provides persistent storage and high availability.</p>\n  </li>\n</ul>\n\n<h2 id=\"worker-node\">Worker Node</h2>\n\n<p>Worker nodes are the workhorses of the Kubernetes cluster, responsible for running the container instances of applications. Each Worker node runs a program called kubelet, which communicates with the Master node and manages the lifecycle of Pods on the node. Additionally, Worker nodes include the following core components:</p>\n\n<ul>\n  <li>\n    <p><strong>kubelet</strong>: An agent running on each Worker node, responsible for receiving Pod creation requests from the API Server and ensuring that the Pods are running. It manages the containers on the node, including creation, start, stop operations, and interacts with the Master node to obtain Pod scheduling information. kubelet also monitors the containers on the node and reports their status to the Master node.</p>\n  </li>\n  <li>\n    <p><strong>Kube-proxy</strong>: Provides network proxy and load balancing services for Pods. It maintains the network rules in the cluster and routes requests to the correct Pods.</p>\n  </li>\n  <li>\n    <p><strong>Container Runtime</strong>: Responsible for running containers on the Worker node. Common container runtimes include Docker, containerd, etc. These runtimes manage the lifecycle of containers, their file systems, and network configurations.</p>\n  </li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%B8%89/'> <img src='/images/covers/k8s.png' alt='Kubernetes Notes (Part 3) - Concepts of Master and Worker'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-05-24T20:18:52+10:00'>May 24, 2024</time> </span> </div><h2 class='article__title'>Kubernetes Notes (Part 3) - Concepts of Master and Worker</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Kubernetes' class='article__tag'>Kubernetes</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Kubernetes Notes (Part 2) - Basic Concepts (Part 2)",
      "category" : "",
      "tags"     : "Kubernetes",
      "url"      : "/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%BA%8C/",
      "date"     : "May 24, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#supplement-to-kubernetes-concepts\" id=\"markdown-toc-supplement-to-kubernetes-concepts\">Supplement to Kubernetes Concepts</a>    <ol>\n      <li><a href=\"#namespace\" id=\"markdown-toc-namespace\">Namespace</a></li>\n      <li><a href=\"#configmap-and-secret\" id=\"markdown-toc-configmap-and-secret\">ConfigMap and Secret</a>        <ol>\n          <li><a href=\"#configmap\" id=\"markdown-toc-configmap\">ConfigMap</a></li>\n          <li><a href=\"#secret\" id=\"markdown-toc-secret\">Secret</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#volume\" id=\"markdown-toc-volume\">Volume</a></li>\n      <li><a href=\"#statefulset\" id=\"markdown-toc-statefulset\">StatefulSet</a></li>\n      <li><a href=\"#daemonset\" id=\"markdown-toc-daemonset\">DaemonSet</a></li>\n      <li><a href=\"#service-accounts-and-rbac\" id=\"markdown-toc-service-accounts-and-rbac\">Service Accounts and RBAC</a>        <ol>\n          <li><a href=\"#service-accounts\" id=\"markdown-toc-service-accounts\">Service Accounts</a></li>\n          <li><a href=\"#rbac\" id=\"markdown-toc-rbac\">RBAC</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n<h2 id=\"supplement-to-kubernetes-concepts\">Supplement to Kubernetes Concepts</h2>\n\n<p>In addition to the basic concepts discussed in part one, there are some additional concepts that are still worth understanding.</p>\n\n<h3 id=\"namespace\">Namespace</h3>\n\n<p>A namespace in Kubernetes is a logical space used to isolate different resources. Through namespaces, resources can be divided into different groups to achieve resource isolation and management.</p>\n\n<h3 id=\"configmap-and-secret\">ConfigMap and Secret</h3>\n\n<h4 id=\"configmap\">ConfigMap</h4>\n\n<p>ConfigMap is an API object used to store non-sensitive data in key-value pairs. When used, a <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">Pod</a> can use it as environment variables, command-line parameters, or configuration files in volumes.</p>\n\n<p>ConfigMap decouples your environment configuration from your <a href=\"https://kubernetes.io/docs/reference/glossary/?all=true#term-image\">container image</a>, making it easier to modify application configurations.</p>\n\n<p>ConfigMap does not provide confidentiality or encryption features. If you need to store sensitive data, use <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Secret</a> or other third-party tools to ensure the confidentiality of your data, rather than ConfigMap.</p>\n\n<p>Use ConfigMap to separate your configuration data from your application code.</p>\n\n<h4 id=\"secret\">Secret</h4>\n\n<p>Secret is an object that contains a small amount of sensitive information such as passwords, tokens, or keys. Such information may be included in the specification of a <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">Pod</a> or in an image. Using Secret means you don’t need to include sensitive data in your application code.</p>\n\n<p>Because creating Secret can be done independently of Pods that use them, there is less risk of exposing Secrets (and their data) in workflows for creating, viewing, and editing Pods. Kubernetes and applications running in the cluster can also take additional precautions with Secrets, such as avoiding writing sensitive data to non-volatile storage.</p>\n\n<p>Secrets are similar to <a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/\">ConfigMap</a> but are specifically used to store sensitive data.</p>\n\n<p>Secrets can be used in the following scenarios:</p>\n\n<ul>\n  <li><a href=\"https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#define-container-environment-variables-using-secret-data\">Setting environment variables for containers</a>.</li>\n  <li><a href=\"https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#provide-prod-test-creds\">Providing credentials such as SSH keys or passwords to Pods</a>.</li>\n  <li><a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\">Allowing kubelet to pull images from private image repositories</a>.</li>\n</ul>\n\n<p>Kubernetes control planes also use Secrets; for example, <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/#bootstrap-token-secrets\">bootstrap token Secrets</a> are a mechanism to help automate node registration.</p>\n\n<h3 id=\"volume\">Volume</h3>\n\n<p>Volume is a mechanism in Kubernetes used to persist data.</p>\n\n<p>Files in containers are temporarily stored on disk, which poses some challenges for running critical applications in containers. When a container crashes or stops, a problem arises. At this point, the container state is not saved, so all files created or modified during the container’s lifecycle are lost. During a crash, kubelet restarts the container in a clean state. Another problem arises when multiple containers run in a Pod and need to share files. It is challenging to set up and access a shared file system across all containers.</p>\n\n<h3 id=\"statefulset\">StatefulSet</h3>\n\n<p>StatefulSet and Deployment in Kubernetes are both objects used to manage application replicas, but they have some important differences:</p>\n\n<ol>\n  <li><strong>Stable Identifiers</strong>:\n    <ul>\n      <li>In Deployment, each replica is interchangeable, with no specific identifier between them. This means that if one replica fails, it can be replaced by any new replica, and the new replica may have a different IP address or hostname.</li>\n      <li>In StatefulSet, each replica has a stable identifier, usually named with an ordered numerical sequence, such as <code class=\"language-plaintext highlighter-rouge\">pod-0</code>, <code class=\"language-plaintext highlighter-rouge\">pod-1</code>, <code class=\"language-plaintext highlighter-rouge\">pod-2</code>, etc. This means that each replica will maintain the same identifier throughout its lifecycle, without changing with restarts or replacements.</li>\n    </ul>\n  </li>\n  <li><strong>Persistent Storage</strong>:\n    <ul>\n      <li>StatefulSet is designed for applications that require persistent storage, such as databases. It supports assigning persistent volumes to each replica, ensuring that data remains unchanged even if replicas are restarted or replaced.</li>\n      <li>Deployment is typically used for stateless applications that do not require persistent storage, where replicas can be replaced without affecting the application’s state.</li>\n    </ul>\n  </li>\n  <li><strong>Pod Ordering and Management</strong>:\n    <ul>\n      <li>In StatefulSet, the creation, deletion, and updating order of Pods are guaranteed. Each Pod is created and deleted in order of its index, ensuring that Pods with larger indices are deleted before Pods with smaller indices, to ensure data stability.</li>\n      <li>In Deployment, the creation, deletion, and updating order of Pods are not deterministic. There is no guarantee of order between them, and each Pod may be created, deleted, or updated at any time.</li>\n    </ul>\n  </li>\n</ol>\n\n<p>In summary, StatefulSet and Deployment have different characteristics and use cases when managing application replicas. StatefulSet is more suitable for stateful applications that require stable identifiers and persistent storage, while Deployment is more suitable for stateless applications.</p>\n\n<h3 id=\"daemonset\">DaemonSet</h3>\n\n<p>DaemonSet is like a robot assigning tasks to your applications.</p>\n\n<p>Imagine you have a delivery company with many vehicles, each responsible for delivering packages in specific areas. DaemonSet is like giving each vehicle a task list to deliver packages in its assigned area.</p>\n\n<p>For example, suppose your delivery company needs to place a surveillance camera (Pod) on every street in each city (Node). You can use DaemonSet to manage the deployment of these surveillance cameras. DaemonSet ensures that there is <strong>one camera running on each node</strong>, and this camera only runs on nodes responsible for monitoring, not on other nodes.</p>\n\n<p>Additionally, if your delivery company needs to automatically deploy surveillance cameras when adding a new city, DaemonSet can help you with that task. It automatically deploys cameras on new nodes, ensuring that new cities are also monitored.</p>\n\n<p>In summary, DaemonSet is like a robot assigning tasks to your applications, ensuring that your required applications run on every node as needed and automatically deploying new application replicas as needed.</p>\n\n<h3 id=\"service-accounts-and-rbac\">Service Accounts and RBAC</h3>\n\n<p>Service Accounts and RBAC (Role-Based Access Control) are two distinct security mechanisms in Kubernetes, each responsible for managing different levels of permissions and access control.</p>\n\n<ol>\n  <li><strong>Service Accounts</strong>:\n    <ul>\n      <li>Service Accounts are mechanisms in Kubernetes used for identity authentication, allowing Pods or other Kubernetes resources to authenticate and authorize themselves within the cluster.</li>\n      <li>Each Pod is associated with a Service Account, representing the Pod’s identity. Service Accounts can be assigned to Pods, enabling them to perform various operations within the cluster, such as communicating with other services, accessing volumes, etc.</li>\n      <li>Service Accounts are typically used to identify and differentiate between different applications or services, allowing Kubernetes to recognize and control their behaviors.</li>\n    </ul>\n  </li>\n  <li><strong>RBAC (Role-Based Access Control)</strong>:\n    <ul>\n      <li>RBAC is a mechanism in Kubernetes used to control the access permissions of users or service accounts to cluster resources.</li>\n      <li>RBAC allows cluster administrators to define a set of roles, where each role defines a set of permissions (such as read, write, delete, etc.), and then assign these roles to users or service accounts.</li>\n      <li>RBAC also allows cluster administrators to define role bindings, associating roles with users or service accounts, to tell Kubernetes who can perform what operations within the cluster.</li>\n      <li>RBAC has a broader scope of influence, as it can control the access permissions of users or service accounts to any resource within the cluster, not just limited to identity authentication.</li>\n    </ul>\n  </li>\n</ol>\n\n<p>In summary, Service Accounts are primarily used for identity authentication, to identify and differentiate between different applications or services, while RBAC is used to control the access permissions of users or service accounts to cluster resources, achieving fine-grained permission control through defining roles and role bindings. While they serve different functions and scopes of application, both Service Accounts and RBAC play essential roles in ensuring the security and stability of the Kubernetes cluster.</p>\n\n<h4 id=\"service-accounts\">Service Accounts</h4>\n\n<p>Service Account is like giving your application an ID card.</p>\n\n<p>Imagine you bring your ID card to handle various tasks, such as opening a bank account, shopping, or verifying identity. In Kubernetes, Service Account plays a similar role. It provides an identity for your application, allowing your application to perform various operations in the cluster, such as creating, deleting, or modifying resources.</p>\n\n<p>For example, suppose your application needs to retrieve data from other services or write data to a database. These operations typically require authentication to ensure that only authorized applications can perform them. Service Account provides this authentication mechanism, ensuring that your application can safely perform operations in the Kubernetes cluster.</p>\n\n<p>Additionally, Service Account can help your application communicate with other Kubernetes resources, such as calling other services, accessing volumes, or monitoring events in the cluster.</p>\n\n<p>In summary, Service Account is like giving your application an ID card, providing authentication and authorization mechanisms for your application to safely perform various operations in the Kubernetes cluster.</p>\n\n<h4 id=\"rbac\">RBAC</h4>\n\n<p>RBAC is like an access control system for applications.</p>\n\n<p>Imagine you have a large building with many rooms and many people. To protect the security of the building, you install an access control system. This system determines which rooms each person can enter based on their identity and permissions.</p>\n\n<p>In Kubernetes, RBAC plays a similar role. It allows you to set permissions for different users or service accounts to control their access to resources and perform operations. For example, you can set one user to only read Pods in a specific namespace, while another user can read and write all Deployments.</p>\n\n<p>The working principle of RBAC is simple: you define roles and role bindings, and then assign them to users or service accounts. Roles define a set of permissions, such as read, write, delete, etc., while role bindings associate roles with users or service accounts, telling Kubernetes who can do what.</p>\n\n<p>In summary, RBAC is like installing an access control system for your applications, controlling the access and operations of users or service accounts to Kubernetes resources, and protecting the security of your cluster.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/05/24/K8s%E7%AC%94%E8%AE%B0-%E4%BA%8C/'> <img src='/images/covers/k8s.png' alt='Kubernetes Notes (Part 2) - Basic Concepts (Part 2)'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2024-05-24T14:20:48+10:00'>May 24, 2024</time> </span> </div><h2 class='article__title'>Kubernetes Notes (Part 2) - Basic Concepts (Part 2)</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Kubernetes' class='article__tag'>Kubernetes</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Kubernetes Notes (Part One) - Basic Concepts (Part 1)",
      "category" : "",
      "tags"     : "Kubernetes",
      "url"      : "/2024/05/23/K8s%E7%AC%94%E8%AE%B0-%E4%B8%80/",
      "date"     : "May 23, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#kubernetes-architecture-diagram\" id=\"markdown-toc-kubernetes-architecture-diagram\">Kubernetes Architecture Diagram</a></li>\n  <li><a href=\"#kubernetes-concepts\" id=\"markdown-toc-kubernetes-concepts\">Kubernetes Concepts</a>    <ol>\n      <li><a href=\"#node-pod-and-control-plane\" id=\"markdown-toc-node-pod-and-control-plane\">Node, Pod, and Control Plane</a>        <ol>\n          <li><a href=\"#understanding-node\" id=\"markdown-toc-understanding-node\">Understanding Node</a></li>\n          <li><a href=\"#understanding-pod\" id=\"markdown-toc-understanding-pod\">Understanding Pod</a></li>\n          <li><a href=\"#understanding-control-plane\" id=\"markdown-toc-understanding-control-plane\">Understanding Control Plane</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#replicaset-deployment-and-service\" id=\"markdown-toc-replicaset-deployment-and-service\">ReplicaSet, Deployment, and Service</a>        <ol>\n          <li><a href=\"#understanding-replicaset\" id=\"markdown-toc-understanding-replicaset\">Understanding ReplicaSet</a>            <ol>\n              <li><a href=\"#using-replicaset\" id=\"markdown-toc-using-replicaset\">Using ReplicaSet</a></li>\n            </ol>\n          </li>\n          <li><a href=\"#understanding-deployment\" id=\"markdown-toc-understanding-deployment\">Understanding Deployment</a>            <ol>\n              <li><a href=\"#using-deployment\" id=\"markdown-toc-using-deployment\">Using Deployment</a></li>\n            </ol>\n          </li>\n          <li><a href=\"#understanding-service\" id=\"markdown-toc-understanding-service\">Understanding Service</a></li>\n          <li><a href=\"#service-deployment-and-replicaset-working-together\" id=\"markdown-toc-service-deployment-and-replicaset-working-together\">Service, Deployment, and ReplicaSet Working Together</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<p>Today, I attended a <a href=\"https://www.meetup.com/k8s-au/\">K8SUG</a> meetup (focused on GitOps, FluxCD, and more), and realized my understanding of Kubernetes was limited to managing containerized microservices. Therefore, I’ve decided to invest some time in learning Kubernetes, starting with getting a Quick Start running.</p>\n\n<h2 id=\"kubernetes-architecture-diagram\">Kubernetes Architecture Diagram</h2>\n\n<p><img src=\"https://kubernetes.io/images/docs/kubernetes-cluster-architecture.svg\" alt=\"Kubernetes Components\" /></p>\n\n<h2 id=\"kubernetes-concepts\">Kubernetes Concepts</h2>\n\n<h3 id=\"node-pod-and-control-plane\">Node, Pod, and Control Plane</h3>\n\n<p>A set of working machines, called <a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/\">nodes</a> (in K8s, these are the machines, or servers, running containerized applications), run containerized applications. Every cluster has at least one working node (worker node).</p>\n\n<p>Worker nodes host <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">Pods</a> (representing a group of running containers on your cluster), with Pods serving as the smallest deployable units of computing that can be created and managed in Kubernetes. The <a href=\"https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane\">Control plane</a> (or the control plane) manages the worker nodes and the Pods in the cluster. In production environments, the control plane typically runs across multiple computers, with a cluster usually running multiple nodes to provide fault tolerance and high availability.</p>\n\n<p>A properly functioning Kubernetes cluster looks like this:</p>\n\n<p><img src=\"https://kubernetes.io/images/docs/components-of-kubernetes.svg\" alt=\"Kubernetes Components\" /></p>\n\n<h4 id=\"understanding-node\">Understanding Node</h4>\n\n<p>Kubernetes executes your workloads (applications running on Kubernetes) by placing containers into Pods running on Nodes. A Node can be a virtual or physical machine. Each node contains the services necessary to run Pods.</p>\n\n<p>Typically, there are several Nodes in a cluster; however, in a learning environment or resource-constrained setting, your cluster might consist of just one Node.</p>\n\n<p><a href=\"https://kubernetes.io/docs/concepts/overview/components/#node-components\">node-components</a> on a node include <a href=\"https://kubernetes.io/docs/reference/generated/kubelet\">kubelet</a> (an agent that ensures containers are running in Pods on the node), <a href=\"https://kubernetes.io/docs/setup/production-environment/container-runtimes\">container runtimes</a> (software responsible for running containers), and <a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/\">kube-proxy</a> (a network proxy for the node).</p>\n\n<h4 id=\"understanding-pod\">Understanding Pod</h4>\n\n<p>When we talk about Pods in Kubernetes, think of them as a collection of containers, like a “box” containing multiple smaller containers. These containers could be different parts of your application, such as the frontend, backend, or database. Pods provide a place for containers to “live,” allowing them to work together and share resources.</p>\n\n<p>In practical terms, you can think of a Pod as a car carrying passengers, with each container being a passenger. These passengers may be different members of a team who need to reach a destination together. The Pod acts as the vehicle, providing space for the containers to live and allowing them to share resources like air conditioning and audio systems.</p>\n\n<p>Furthermore, a Pod can be seen as a small working unit, like a project team within an organization. Each member has their own task, but they need to collaborate to complete the project. The Pod acts as this team, with containers working together inside to fulfill the functions of the application.</p>\n\n<p>In summary, understanding Pods in Kubernetes means understanding that they are a place where containers live and work together, providing an environment for resource sharing and collaboration, enabling efficient operation and management of applications.</p>\n\n<h4 id=\"understanding-control-plane\">Understanding Control Plane</h4>\n\n<p>When we talk about the Control Plane in Kubernetes, think of it as a manager or commander responsible for overseeing the operation and behavior of the entire Kubernetes cluster. This control plane is like a command center, responsible for coordinating and managing various activities within the cluster.</p>\n\n<p>Imagine you’re playing a large-scale game, and the Control Plane is like the “game administrator” within it. They monitor all activities in the game, ensuring that everything is running according to the rules. If a player needs resources or there’s a problem to solve, the administrator intervenes and takes action.</p>\n\n<p>In Kubernetes, the Control Plane serves a similar role to this game administrator. It consists of multiple components, such as the API Server, Scheduler, Controller Manager, and etcd. These components work together to monitor and manage various resources in the cluster, such as Pods, Services, and Volumes.</p>\n\n<p>Therefore, understanding the Control Plane in Kubernetes means understanding that it is the manager of the cluster, responsible for supervising and coordinating various activities within the cluster, ensuring everything runs smoothly.</p>\n\n<h3 id=\"replicaset-deployment-and-service\">ReplicaSet, Deployment, and Service</h3>\n\n<h4 id=\"understanding-replicaset\">Understanding ReplicaSet</h4>\n\n<p>When you start using Kubernetes (often abbreviated as K8s), you’ll encounter something called ReplicaSet. ReplicaSet functions somewhat like creating backups for your applications. You can tell ReplicaSet how many replicas (copies) of your application you want to run, and it ensures that many replicas are always running, even if some encounter issues and need to be automatically repaired. For example, if you tell ReplicaSet you want three replicas of an application, it will ensure there are always three running. If one fails, it automatically starts a new one to maintain the count at three.</p>\n\n<p>It’s like having a spare tire. If one tire goes flat, you can replace it with the spare, and the vehicle can keep moving. In the Kubernetes world, ReplicaSet serves as this spare tire.</p>\n\n<h5 id=\"using-replicaset\">Using ReplicaSet</h5>\n\n<p>When managing your applications with Kubernetes, you may want to ensure that your applications are always available, even in case of failures. This is where ReplicaSet comes in handy.</p>\n\n<p>Imagine you have an online store with thousands of users shopping every day. Your website is managed by Kubernetes, and ReplicaSet is one of the tools Kubernetes uses to ensure your website is always online.</p>\n\n<p>You tell ReplicaSet you want three replicas (i.e., three identical websites) to be running. This way, if one server encounters an issue, the other two can continue serving users. If a user is using the server that has an issue, Kubernetes automatically redirects them to a functioning server, ensuring they are not affected.</p>\n\n<p>Therefore, ReplicaSet’s primary use case is to ensure your applications are always online and capable of automatically recovering from failures to maintain system stability and availability.</p>\n\n<h4 id=\"understanding-deployment\">Understanding Deployment</h4>\n\n<p>When managing your applications in Kubernetes, you’ll often hear about something called Deployment. Deployment functions like managing a team.</p>\n\n<p>Imagine you have a basketball team, and you want to ensure you always have enough players for every game. Additionally, if a player gets injured or sick, you want to be able to easily replace them.</p>\n\n<p>Deployment acts as your team manager. You tell Deployment how many players (i.e., replicas of your application) you want for each game, and it ensures there are always that many players available. If a player gets injured, it automatically calls in a substitute. Moreover, Deployment can help you with other tasks, such as updating application versions, ensuring all players are on the same version.</p>\n\n<p>Therefore, the main role of Deployment is to ensure your applications remain in the desired state and to facilitate easy management and updates of your applications.</p>\n\n<h5 id=\"using-deployment\">Using Deployment</h5>\n\n<p>Deployment has two main use cases:</p>\n\n<ol>\n  <li>\n    <p><strong>Application Deployment and Updates</strong>:\nImagine you have an online store website, and you want to deploy new versions easily while ensuring website stability. Deployment can help with this. You tell Deployment how many replicas of the new version of the application you want to run, and it automatically starts new replicas. It ensures the old version of the application continues running until the new version is successfully started, ensuring website stability. Once the new version is running successfully, Deployment gradually replaces the old version, ensuring a smooth transition.</p>\n  </li>\n  <li>\n    <p><strong>Scaling Applications</strong>:\nSuppose your online store is having a promotion, and you expect more users to visit your website. You can modify the Deployment configuration to tell Kubernetes to start more replicas to handle increased traffic. Once the promotion ends, you can reduce the number of replicas to save resources and costs. Deployment can automate these operations without manual management of each replica’s start and stop.</p>\n  </li>\n</ol>\n\n<p>Deployment simplifies deployment, updates, and management of applications, making them more straightforward and reliable.</p>\n\n<h4 id=\"understanding-service\">Understanding Service</h4>\n\n<p>When managing your applications in Kubernetes, you may encounter something called Service. Service acts as the facade of your application.</p>\n\n<p>Imagine you have a popular café with many customers coming in for coffee every day. To make it convenient for customers, you set up a service counter at the entrance where customers can place orders, pay, and then have their coffee delivered to their seats.</p>\n\n<p>In Kubernetes, Service is similar to this service counter. Your application may consist of multiple replicas, and the IP addresses of these replicas may change constantly. Service acts as the facade of your application, with a fixed IP address and a stable domain name. Customers (other applications) only need to know this IP address or domain name to access your application, without needing to know the specific replica providing the service.</p>\n\n<p>Additionally, Service can distribute traffic to different replicas based on your application’s requirements, ensuring each replica can handle requests evenly, thereby improving the application’s stability and reliability.</p>\n\n<p>Therefore, Service plays a crucial role in Kubernetes, providing a stable entry point for your application and helping manage traffic to ensure the application’s availability.</p>\n\n<p>Service has several main functionalities in Kubernetes:</p>\n\n<ol>\n  <li>\n    <p><strong>Stable Entry Point</strong>:\nService provides a fixed IP address and a stable domain name as the entry point for your application. Regardless of changes in the background replicas, customers (other applications) only need to know the Service’s IP address or domain name to access your application without worrying about which replica is serving them.</p>\n  </li>\n  <li>\n    <p><strong>Load Balancing</strong>:\nWhen your application consists of multiple replicas, Service can evenly distribute traffic among these replicas to ensure each replica can handle incoming requests. This improves the performance and reliability of the application.</p>\n  </li>\n  <li>\n    <p><strong>Service Discovery</strong>:\nService helps other applications discover and connect to your application. By querying Kubernetes’ DNS or accessing the Service’s IP address through environment variables, other applications can easily find and communicate with your application.</p>\n  </li>\n  <li>\n    <p><strong>Internal Communication</strong>:\nDifferent components within the same Kubernetes cluster often need to communicate, and these components may consist of different replicas. Service facilitates communication between these components over the internal network without exposing them to the public network.</p>\n  </li>\n</ol>\n\n<p>Service provides stable entry points, load balancing, service discovery, and internal communication, helping you build and manage reliable distributed applications.</p>\n\n<h4 id=\"service-deployment-and-replicaset-working-together\">Service, Deployment, and ReplicaSet Working Together</h4>\n\n<p>Imagine you’re the owner of an online store with a warehouse stocked with various products. Your store is managed using Kubernetes, and your products are your applications.</p>\n\n<p>First, you need Deployment to manage your products. Deployment acts as your warehouse manager, responsible for managing the quantity of products in stock. You tell Deployment how many products (replicas) you want in stock, and it automatically maintains that quantity, just like a warehouse manager ensuring stock levels. If a product goes out of stock, it automatically replenishes it.</p>\n\n<p>Next, you need ReplicaSet to help Deployment achieve this functionality. ReplicaSet acts as an assistant to Deployment, helping ensure there are enough copies of products in stock. It monitors the stock levels in the warehouse, automatically replenishing products if it detects any shortages, ensuring the stock levels meet your requirements.</p>\n\n<p>Finally, you need Service to allow customers to purchase products. Service acts as the front desk of your store, accepting customer orders and passing them to the warehouse manager. Customers only need to know the front desk’s address to buy the products they want, without needing to directly contact the warehouse manager. Service acts as the bridge connecting customers and the warehouse manager, ensuring customers can purchase products smoothly.</p>\n\n<p>In summary, Service, Deployment, and ReplicaSet work together in a mutually supportive and collaborative manner, building a stable and reliable application management system.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/05/23/K8s%E7%AC%94%E8%AE%B0-%E4%B8%80/'> <img src='/images/covers/k8s.png' alt='Kubernetes Notes (Part One) - Basic Concepts (Part 1)'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>10 min read <time class='article__date' datetime='2024-05-23T11:15:00+10:00'>May 23, 2024</time> </span> </div><h2 class='article__title'>Kubernetes Notes (Part One) - Basic Concepts (Part 1)</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Kubernetes' class='article__tag'>Kubernetes</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Edit-xlsx Development Log (Part 1)",
      "category" : "Edit-xlsx",
      "tags"     : "rust",
      "url"      : "/edit-xlsx/2024/01/30/Edit-xlsx%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E4%B8%80/",
      "date"     : "Jan 30, 2024",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#genesis\" id=\"markdown-toc-genesis\">Genesis</a></li>\n  <li><a href=\"#introduction-to-openxml-and-xlsx\" id=\"markdown-toc-introduction-to-openxml-and-xlsx\">Introduction to OpenXml and Xlsx</a></li>\n  <li><a href=\"#processing-xlsx-files\" id=\"markdown-toc-processing-xlsx-files\">Processing XLSX Files</a>    <ol>\n      <li><a href=\"#introduction-to-zip\" id=\"markdown-toc-introduction-to-zip\">Introduction to Zip</a></li>\n      <li><a href=\"#introduction-to-walkdir\" id=\"markdown-toc-introduction-to-walkdir\">Introduction to Walkdir</a></li>\n      <li><a href=\"#introduction-to-serde\" id=\"markdown-toc-introduction-to-serde\">Introduction to Serde</a></li>\n      <li><a href=\"#introduction-to-quick-xml\" id=\"markdown-toc-introduction-to-quick-xml\">Introduction to Quick-xml</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n<h2 id=\"genesis\">Genesis</h2>\n<p>When I encountered a Java library called POI during my work, I began to ponder: why can’t I find a Rust library like POI that can edit XLSX files? This question sparked the idea of developing a Rust library named edit-xlsx.</p>\n\n<p>During my work, I realized that while there are Rust libraries available for reading and writing XLSX files, there isn’t one specifically tailored for editing them. That’s why I decided to embark on developing the edit-xlsx library.</p>\n\n<p>The goal of edit-xlsx is simple: to provide users with a convenient and easy-to-use tool to effortlessly edit existing XLSX files. This means users can modify, add, or delete content from files without manually handling the complex details of the XLSX format.</p>\n\n<p>Through the development of the edit-xlsx library, I aim to fill this gap in the Rust ecosystem and provide developers with a handy tool to more easily handle XLSX files without relying on other languages or platforms. This project is driven by my passion for the Rust language and my desire to solve real-world problems.</p>\n\n<p>By the time you read this blog post, I have already released the <a href=\"https://crates.io/crates/edit-xlsx\">edit-xlsx</a> project on crates.io. Additionally, I will periodically document its updates.</p>\n\n<h2 id=\"introduction-to-openxml-and-xlsx\">Introduction to OpenXml and Xlsx</h2>\n\n<p>OpenXML is an open file format based on XML (eXtensible Markup Language) used for creating and managing electronic documents such as documents, spreadsheets, and presentations. It was introduced by Microsoft in 2006 and became part of the Office Open XML (OOXML) standard. XLSX files are one of the spreadsheet file formats created using the OpenXML standard.</p>\n\n<p>The OpenXML standard defines the structure and content of XLSX files, enabling them to be read and edited by different applications without the need for specific software such as Office, LibreOffice, Numbers, or WPS. XLSX files are compressed XML files containing data, formatting, charts, metadata, and other information related to the file.</p>\n\n<p>An XLSX file is essentially a compressed package containing multiple files and folders, collectively forming the structure and content of the spreadsheet.</p>\n\n<p>To facilitate understanding the structure of XLSX files, let’s create an XLSX document containing the most basic content.\nNote: An XLSX file may contain more than just these files. Furthermore, a document containing only the following files may not necessarily function properly (depending on the processing software and version of the XLSX document).</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- new_excel.xlsx\n    - _rels/\n        .rels\n    - <span class=\"o\">[</span>Content_Types].xml\n    - docProps/\n        - app.xml\n        - core.xml\n    - xl/\n            - _rels/\n            - workbook.xml\n            - styles.xml\n            - worksheets/\n                - sheet1.xml\n</code></pre></div></div>\n\n<p>Subsequently, we can gradually understand the purpose of each file:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">_rels</code>: Contains XML files defining relationships between files. The <code class=\"language-plaintext highlighter-rouge\">.rels</code> file specifies the relationships between the workbook and worksheets.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Content_Types.xml</code>: Defines the types of all XML files contained in the XLSX file. It informs applications about the content type of each XML file for proper parsing and handling.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">docProps</code>: Contains document property information, typically metadata describing the document’s author, creation date, last modification date, etc. It includes the following files:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">app.xml</code>: Contains application-related metadata such as the document’s title, author, subject, etc.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">core.xml</code>: Contains core metadata such as the document’s creator, creation date, last modifier, last modification date, etc.</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">xl</code>: This folder contains the main content.\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">_rels</code>: Contains XML files defining relationships between different sections of the workbook. For example, the <code class=\"language-plaintext highlighter-rouge\">workbook.xml.rels</code> file defines relationships between worksheets and shared string files (shared strings will be introduced later).</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">worksheets</code>: Contains data for each worksheet. In our example, there is only one file named <code class=\"language-plaintext highlighter-rouge\">sheet1.xml</code>, which contains data and formatting information for the worksheet.\n        <ul>\n          <li><code class=\"language-plaintext highlighter-rouge\">sheet1.xml</code>: Contains data, cell styles, and formatting information for the worksheet.</li>\n        </ul>\n      </li>\n      <li><code class=\"language-plaintext highlighter-rouge\">workbook.xml</code>: Defines the structure of the workbook, including worksheets, names, and external links. It describes information such as the names and positions of all worksheets contained in the workbook.</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">styles.xml</code>: Defines styles in the workbook, including fonts, colors, number formats, etc.</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"processing-xlsx-files\">Processing XLSX Files</h2>\n<p>We know that XLSX files are essentially compressed packages of XML files (and folders). Therefore, processing XLSX files mainly involves handling compressed packages (decompression and compression) and XML processing (serialization and deserialization).</p>\n\n<p>Below, I list the libraries I currently depend on to accomplish these tasks. There may be additions or reductions in the dependencies in the future, and I will document these modifications.</p>\n\n<h4 id=\"introduction-to-zip\">Introduction to Zip</h4>\n<p><a href=\"https://crates.io/crates/zip\">Zip</a> is the most downloaded compression library on crates.io (probably due to its name). This library supports the deflate algorithm used by XLSX files, making it suitable for our needs. Therefore, we use the zip library to compress and decompress XLSX files.</p>\n\n<h4 id=\"introduction-to-walkdir\">Introduction to Walkdir</h4>\n<p><a href=\"https://crates.io/crates/walkdir\">Walkdir</a> is a Rust library for recursively traversing directory structures and listing files and subdirectories within them. Importantly, this library is recommended by Zip for implementing compression methods. Thus, we combine this library with Zip to achieve compression functionality for XLSX files.</p>\n\n<h4 id=\"introduction-to-serde\">Introduction to Serde</h4>\n<p><a href=\"https://crates.io/crates/serde\">Serde</a> is one of the most popular serialization and deserialization libraries in Rust. Its name is derived from the combination of “serialize” and “deserialize,” aiming to provide a simple and flexible way to convert Rust data structures to and from various data formats.</p>\n\n<p>In our project, we primarily use its derive feature to quickly implement serialization and deserialization for structures and enums.</p>\n\n<h4 id=\"introduction-to-quick-xml\">Introduction to Quick-xml</h4>\n<p><a href=\"https://crates.io/crates/quick-xml\">Quick-xml</a> is the XML serialization/deserialization tool I experimented with extensively and found most suitable for XLSX XML formats. Compared to projects like fast-xml, this project supports a more comprehensive range of features, such as reading XML structure attributes, values, etc., using <code class=\"language-plaintext highlighter-rouge\">@</code>, <code class=\"language-plaintext highlighter-rouge\">$</code>, and other methods. Moreover, this project is still maintained, and I look forward to it adding more user-friendly features in the future.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This blog post documented the reasons behind the development of the edit-xlsx project and the expected technology stack. If time and resources permit, I will continue to document my development progress in this section.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/edit-xlsx/2024/01/30/Edit-xlsx%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E4%B8%80/'> <img src='/images/covers/edit-xlsx-cover.png' alt='Edit-xlsx Development Log (Part 1)'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-01-30T18:20:05+11:00'>Jan 30, 2024</time> </span> </div><h2 class='article__title'>Edit-xlsx Development Log (Part 1)</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/rust' class='article__tag'>rust</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 13) - Optional Dependencies and Dependency Exclusions",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%89-%E5%8F%AF%E9%80%89-optional-%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%92%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E6%8E%92%E9%99%A4-exclusion/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#optional-dependencies\" id=\"markdown-toc-optional-dependencies\">Optional Dependencies</a>    <ol>\n      <li><a href=\"#why-use-optional-dependencies\" id=\"markdown-toc-why-use-optional-dependencies\">Why Use Optional Dependencies?</a></li>\n      <li><a href=\"#how-to-use-the-optional-tag\" id=\"markdown-toc-how-to-use-the-optional-tag\">How to Use the Optional Tag?</a></li>\n      <li><a href=\"#how-optional-dependencies-work\" id=\"markdown-toc-how-optional-dependencies-work\">How Optional Dependencies Work?</a></li>\n      <li><a href=\"#example\" id=\"markdown-toc-example\">Example</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#dependency-exclusions\" id=\"markdown-toc-dependency-exclusions\">Dependency Exclusions</a>    <ol>\n      <li><a href=\"#how-to-use-dependency-exclusions\" id=\"markdown-toc-how-to-use-dependency-exclusions\">How to Use Dependency Exclusions</a></li>\n      <li><a href=\"#how-dependency-exclusions-work-and-when-to-use-as-a-last-resort\" id=\"markdown-toc-how-dependency-exclusions-work-and-when-to-use-as-a-last-resort\">How Dependency Exclusions Work and When to Use (As a Last Resort!)</a></li>\n      <li><a href=\"#why-exclude-based-on-dependency-rather-than-at-the-pom-level\" id=\"markdown-toc-why-exclude-based-on-dependency-rather-than-at-the-pom-level\">Why Exclude Based on Dependency Rather Than at the POM Level</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>This section will discuss optional dependencies and dependency exclusions. It will help users understand what they are, when and how to use them. This section also explains why exclusions are done based on dependency rather than at the POM level.</p>\n\n<h2 id=\"optional-dependencies\">Optional Dependencies</h2>\n\n<p>Optional dependencies are used in cases where a project cannot be split into sub-modules for some reason. The idea is that certain dependencies are only needed for specific functionalities within the project. Ideally, such functionalities would be split into a sub-module that depends on the core functionality project. This new sub-project would only have non-optional dependencies because if you decide to use the functionality of that sub-project, you’ll need all those dependencies.</p>\n\n<p>However, due to the inability to split the project (again, for whatever reason), these dependencies are declared as optional. If a user wants to use the functionality associated with optional dependencies, they must declare that optional dependency in their own project. It’s not the cleanest way to deal with such a situation, but optional dependencies and dependency exclusions are pragmatic solutions.</p>\n\n<h3 id=\"why-use-optional-dependencies\">Why Use Optional Dependencies?</h3>\n\n<p>Optional dependencies can save space and memory. They prevent problematic JARs (violating licensing agreements or causing classpath issues) from being bundled into WARs, EARs, fat JARs, or similar files.</p>\n\n<h3 id=\"how-to-use-the-optional-tag\">How to Use the Optional Tag?</h3>\n\n<p>By setting the <code class=\"language-plaintext highlighter-rouge\">&lt;optional&gt;</code> element to true in the dependency declaration, you declare the dependency as optional:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"c\">&lt;!-- declare the dependency to be set as optional --&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;optional&gt;</span>true<span class=\"nt\">&lt;/optional&gt;</span> <span class=\"c\">&lt;!-- value will be true or false only --&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"how-optional-dependencies-work\">How Optional Dependencies Work?</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-A -&gt; Project-B\n</code></pre></div></div>\n\n<p>The above illustrates that Project A depends on Project B. When A declares B as an optional dependency in its POM, this relationship remains unchanged. Just like normal compilation, Project B gets added to Project A’s classpath.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-X -&gt; Project-A\n</code></pre></div></div>\n\n<p>When another project (Project-X) declares Project-A as a dependency in its POM, the optional nature of the dependency comes into play. Project-B isn’t included in Project-X’s classpath. You need to declare it directly in Project-X’s POM for it to be included.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Imagine a project called X2, similar to Hibernate. It supports multiple databases like MySQL, PostgreSQL, and various versions of Oracle. Each supported database requires an additional dependency on a driver JAR. When compiling X2, you need all these dependencies. However, your project only uses a specific database and doesn’t need drivers for other databases. X2 can declare these dependencies as optional, so when your project declares X2 as a direct dependency in its POM, all the drivers supported by X2 won’t automatically be included in your project’s classpath. You’ll need to explicitly add dependencies for the specific driver of the database you’re using.</p>\n\n<h2 id=\"dependency-exclusions\">Dependency Exclusions</h2>\n\n<p>Since Maven resolves dependencies transiently, it’s possible to include unwanted dependencies in a project’s classpath. For example, an older JAR might have security issues or be incompatible with the Java version you’re using. To address this, Maven allows you to exclude specific dependencies. Exclusions are set on specific dependencies in the POM and target specific groupId and artifactId. When building the project, that artifact won’t be added to the project’s classpath through the dependency declared with exclusions.</p>\n\n<h3 id=\"how-to-use-dependency-exclusions\">How to Use Dependency Exclusions</h3>\n\n<p>Add the <code class=\"language-plaintext highlighter-rouge\">&lt;exclusions&gt;</code> element within the <code class=\"language-plaintext highlighter-rouge\">&lt;dependency&gt;</code> element to include the problematic JAR.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>  <span class=\"c\">&lt;!-- declare the exclusion here --&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectB<span class=\"nt\">&lt;/groupId&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>Project-B<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span> \n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"how-dependency-exclusions-work-and-when-to-use-as-a-last-resort\">How Dependency Exclusions Work and When to Use (As a Last Resort!)</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-A\n   -&gt; Project-B\n        -&gt; Project-D &lt;!-- This dependency should be excluded --&gt;\n              -&gt; Project-E\n              -&gt; Project-F\n   -&gt; Project C\n</code></pre></div></div>\n\n<p>In the above graph, Project A depends on Project B and C, and Project B depends on Project D. By default, Project A’s classpath includes:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>B, C, D, E, F\n</code></pre></div></div>\n\n<p>Suppose you don’t want Project D and its dependencies added to Project A’s classpath because some of Project D’s dependencies are missing from the repository, and you don’t need the functionality from Project D that Project B relies on. Project B’s developers could have marked Project D’s dependencies as <code class=\"language-plaintext highlighter-rouge\">&lt;optional&gt;true&lt;/optional&gt;</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectD<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>ProjectD<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;optional&gt;</span>true<span class=\"nt\">&lt;/optional&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>Unfortunately, they didn’t. As a last resort, you can exclude it in your Project A POM:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectB<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-B<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectD<span class=\"nt\">&lt;/groupId&gt;</span> <span class=\"c\">&lt;!-- Exclude Project-D from Project-B --&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>Project-D<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>If Project-A is deployed to the repository and Project-X declares a normal dependency on Project-A, will Project-D still be excluded from the classpath?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-X -&gt; Project-A\n</code></pre></div></div>\n\n<p>Yes, it will. Project A has declared it doesn’t need Project D to run, so it won’t be introduced as a transitive dependency of Project A.</p>\n\n<p>Now, consider Project-X depends on Project-Y, as shown below:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-X -&gt; Project-Y\n               -&gt; Project-B\n                    -&gt; Project-D\n                       ...\n</code></pre></div></div>\n\n<p>Project Y also depends on Project B, and indeed, it needs the functionality supported by Project D. Therefore, it doesn’t exclude Project D in its dependency list. Project Y might also provide an</p>\n\n<p>additional repository to address issues with Project E. In this case, it’s important that Project D isn’t globally excluded because it’s a legitimate dependency of Project Y.</p>\n\n<p>In another scenario, let’s say the unwanted dependency is Project-E, not Project-D. How do you exclude it? See the graph below:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Project-A\n   -&gt; Project-B\n        -&gt; Project-D \n              -&gt; Project-E <span class=\"c\">&lt;!-- Exclude this dependency --&gt;</span>\n              -&gt; Project-F\n   -&gt; Project C\n</code></pre></div></div>\n\n<p>Exclusions made at the declaration point apply to the entire dependency graph below. If you want to exclude Project-E instead of Project-D, simply point the exclusion to Project-E, but don’t move the exclusion down to Project-D. You can’t change Project-D’s POM. If you could, you might use optional dependencies instead of exclusions, or split Project-D into multiple sub-projects, each containing only necessary dependencies.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectA<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>Project-A<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectB<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>Project-B<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>sample.ProjectE<span class=\"nt\">&lt;/groupId&gt;</span> <span class=\"c\">&lt;!-- Exclude Project-E from Project-B --&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>Project-E<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"why-exclude-based-on-dependency-rather-than-at-the-pom-level\">Why Exclude Based on Dependency Rather Than at the POM Level</h3>\n\n<p>This is primarily to ensure the dependency graph is predictable and to prevent inheritance effects from excluding dependencies that shouldn’t be excluded. If you’re forced to use exclusions as a last resort, you should be absolutely certain which dependency is bringing in the unwanted transitive dependency.</p>\n\n<p>If you truly want to ensure a specific dependency doesn’t end up in the classpath (regardless of the path), you can configure dependency banning rules to fail the build when problematic dependencies are found. When the build fails, you’ll need to add specific exclusions on each path Enforcer finds.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%89-%E5%8F%AF%E9%80%89-optional-%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%92%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E6%8E%92%E9%99%A4-exclusion/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 13) - Optional Dependencies and Dependency Exclusions'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>7 min read <time class='article__date' datetime='2023-12-05T20:01:56+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 13) - Optional Dependencies and Dependency Exclusions</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 12) - Introduction to Dependency Mechanism",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/05/Maven-%E5%8D%81%E4%BA%8C-%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#transitive-dependencies\" id=\"markdown-toc-transitive-dependencies\">Transitive Dependencies</a></li>\n  <li><a href=\"#dependency-scopes\" id=\"markdown-toc-dependency-scopes\">Dependency Scopes</a></li>\n  <li><a href=\"#dependency-management\" id=\"markdown-toc-dependency-management\">Dependency Management</a>    <ol>\n      <li><a href=\"#importing-dependencies\" id=\"markdown-toc-importing-dependencies\">Importing Dependencies</a></li>\n      <li><a href=\"#bom\" id=\"markdown-toc-bom\">BOM</a></li>\n    </ol>\n  </li>\n</ol>\n\n<p>Dependency management is one of the core functionalities of Maven. Managing dependencies for a single project is straightforward. It’s also possible to manage dependencies for multi-module projects and applications consisting of hundreds of modules. Maven helps define, create, and maintain reproducible builds with clearly defined classpaths and library versions.</p>\n\n<h2 id=\"transitive-dependencies\">Transitive Dependencies</h2>\n\n<p>Maven eliminates the need to discover and specify your own dependencies by automatically including transitive dependencies.</p>\n\n<p>This functionality is achieved by reading project files of dependencies from specified remote repositories. Generally, all dependencies of these projects will be used in your project, and any dependencies inherited from the parent project or dependencies of dependencies will also be included.</p>\n\n<p>There’s no limit to the depth of dependency collection. Issues only arise when circular dependencies are detected.</p>\n\n<p>Due to transitive dependencies, the dependency graph can quickly grow large. Therefore, there are additional features to limit the scope of dependencies:</p>\n\n<ul>\n  <li><em>Dependency Mediation</em>: This determines which version of a dependency to use when encountering multiple versions. Maven selects the “nearest definition,” meaning it uses the version of the dependency closest to your project in the dependency tree. You can ensure versions by explicitly declaring them in the project’s POM. Note that if two dependency versions are at the same depth in the dependency tree, the version declared first takes precedence.\n    <ul>\n      <li>“Nearest definition” means the version used will be the one closest to your project in the dependency tree. Consider this dependency tree:</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  A\n  ├── B\n  │   └── C\n  │       └── D 2.0\n  └── E\n      └── D 1.0\n</code></pre></div></div>\n\n<p>If the dependencies of A, B, and C are defined as A -&gt; B -&gt; C -&gt; D:2.0 and A -&gt; E -&gt; D:1.0, then D:1.0 will be used when building A because the path from A to D via E is shorter. You can explicitly add a dependency on D:2.0 in A to force its usage, as shown below:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  A\n  ├── B\n  │   └── C\n  │       └── D 2.0\n  ├── E\n  │   └── D 1.0\n  │\n  └── D 2.0\n</code></pre></div></div>\n\n<ul>\n  <li>\n    <p><em>Dependency Management</em>: This allows project authors to directly specify the version to use when encountering a transitive dependency or a dependency without a specified version. In the example from the previous section, a dependency was directly added to A even though A does not directly use that dependency. Instead, A can include D in its dependency management section and directly control the version used when referencing D.</p>\n  </li>\n  <li>\n    <p><em>Dependency Scope</em>: This allows you to include dependencies suitable for the current build stage. This will be detailed further below.</p>\n  </li>\n  <li>\n    <p><em>Excluded Dependencies</em>: If project X -&gt; Y -&gt; Z, the owner of project X can explicitly exclude project Z as a dependency using the “exclusion” element.</p>\n  </li>\n  <li>\n    <p><em>Optional Dependencies</em>: If project Y -&gt; Z, the owner of project Y can mark project Z as an optional dependency using the “optional” element. When project X depends on project Y, X will only depend on Y and not on Y’s optional dependency Z. (Considering optional dependencies as “default exclusions” can be helpful.)</p>\n  </li>\n</ul>\n\n<p>While transitive dependencies can implicitly include the required dependencies, it’s still a good practice to explicitly specify dependencies that your source code directly uses. This best practice proves its value, especially when project dependencies change.</p>\n\n<p>For example, suppose project A specifies a dependency on another project B, and project B specifies a dependency on project C. If you directly use components from project C without specifying project C in project A, a sudden update/removal of the dependency from project B to project C could lead to build failures.</p>\n\n<p>Another reason for directly specifying dependencies is to provide better documentation for the project: simply by reading the project’s POM file or running <code class=\"language-plaintext highlighter-rouge\">mvn dependency:tree</code>, you can gather more information.</p>\n\n<p>Maven also provides the <a href=\"https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html\">dependency:analyze</a> plugin goal for analyzing dependencies, which helps make this best practice easier to implement.</p>\n\n<h2 id=\"dependency-scopes\">Dependency Scopes</h2>\n\n<p>Dependency scopes are used to limit the transitivity of dependencies and determine when dependencies are included in the classpath.</p>\n\n<p>There are six scopes:</p>\n\n<ul>\n  <li>\n    <p><em>compile</em>: This is the default scope used when no scope is specified. Compile dependencies are available in <strong>all classpaths of the project (compile, test, runtime)</strong>. Additionally, these dependencies are also propagated to dependent projects.</p>\n  </li>\n  <li>\n    <p><em>provided</em>: This is similar to <code class=\"language-plaintext highlighter-rouge\">compile</code>, but indicates that you expect the JDK or a container to provide the dependency at runtime. For example, when building web applications for Java Enterprise Edition, you would set the scope of dependencies on the Servlet API and related Java EE APIs to <code class=\"language-plaintext highlighter-rouge\">provided</code> because the web container provides these classes. Dependencies with this scope are added to the classpath for compilation and testing but not for runtime. It does not have transitivity.</p>\n  </li>\n  <li>\n    <p><em>runtime</em>: This scope indicates dependencies that are not required for compilation but are required at runtime. Maven includes dependencies with this scope in <strong>runtime and test classpaths</strong> but not in the compile classpath.</p>\n  </li>\n  <li>\n    <p><em>test</em>: This scope indicates dependencies that are not required for normal use of the application and are only available during <strong>test compilation and execution</strong>. This scope does not have transitivity. It’s commonly used for testing libraries like JUnit and Mockito. If a non-testing library (such as Apache Commons IO) is used in unit tests (<code class=\"language-plaintext highlighter-rouge\">src/test/java</code>) but not in the main code (<code class=\"language-plaintext highlighter-rouge\">src/main/java</code>), this scope can also be used.</p>\n  </li>\n  <li>\n    <p><em>system</em>: This scope is similar to <code class=\"language-plaintext highlighter-rouge\">provided</code>, but you must explicitly provide the JAR with this scope. (You can specify the path to the dependency JAR via the dependency’s systemPath element.) The artifact is always available and not looked up in the repository.</p>\n  </li>\n  <li>\n    <p><em>import</em>: This scope is only supported for POM-type dependencies in the <code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code> section. It indicates that the dependency will be replaced by the effective dependency list in the <code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code> section of the importing project’s POM. Since the dependency has been replaced, dependencies with the import scope do not actually participate in limiting the transitivity of dependencies.</p>\n  </li>\n</ul>\n\n<p>The table below shows how each scope (except <code class=\"language-plaintext highlighter-rouge\">import</code>) affects transitive dependencies. If a dependency is set to the scope in the left column, then the dependency between it and the scope in the top row will <strong>result in a dependency in the main project</strong> with the scope listed at the intersection. If no scope is listed, it means the dependency is omitted.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th> </th>\n      <th>compile</th>\n      <th>provided</th>\n      <th>runtime</th>\n      <th>test</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>compile</td>\n      <td>compile(*)</td>\n      <td>-</td>\n      <td>runtime</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>provided</td>\n      <td>provided</td>\n      <td>-</td>\n      <td>provided</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>runtime</td>\n      <td>runtime</td>\n      <td>-</td>\n      <td>runtime</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>test</td>\n      <td>test</td>\n      <td>-</td>\n      <td>test</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Note: This should</p>\n\n<p>be the runtime scope, so all compile dependencies must be explicitly listed. However, if the library you depend on extends classes from another library, both libraries must be available at compile time. Therefore, compile-time dependencies, even with transitivity, are still compile scope.</p>\n\n<h2 id=\"dependency-management\">Dependency Management</h2>\n\n<p>The dependency management section is a mechanism for centrally managing dependency information. When a group of projects inherit from a common parent project, all dependency-related information can be placed in a common POM, simplifying artifact references in child POMs. This mechanism can be well illustrated with a few examples. The following two POMs extend the same parent:</p>\n\n<p>Project A:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;exclusions&gt;</span>\n        <span class=\"nt\">&lt;exclusion&gt;</span>\n          <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n          <span class=\"nt\">&lt;artifactId&gt;</span>excluded-artifact<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;/exclusions&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project B:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>war<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>These two sample POMs have a common dependency, and each POM has a non-trivial dependency. This information can be placed in the parent POM like this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>artifact-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n\n        <span class=\"nt\">&lt;exclusions&gt;</span>\n          <span class=\"nt\">&lt;exclusion&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>excluded-artifact<span class=\"nt\">&lt;/artifactId&gt;</span>\n          <span class=\"nt\">&lt;/exclusion&gt;</span>\n        <span class=\"nt\">&lt;/exclusions&gt;</span>\n\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>war<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>This way, the two child POMs are simplified:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-a<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"c\">&lt;!-- This is not a jar dependency, so we must specify type. --&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-c<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"c\">&lt;!-- This is not a jar dependency, so we must specify type. --&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>war<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>group-a<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>artifact-b<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"c\">&lt;!-- This is not a jar dependency, so we must specify type. --&gt;</span>\n      <span class=\"nt\">&lt;type&gt;</span>bar<span class=\"nt\">&lt;/type&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>Note:</strong> In two of the dependency references, we must specify the <code class=\"language-plaintext highlighter-rouge\">&lt;type/&gt;</code> element. This is because the minimal information set that matches dependency references in the dependency management (<code class=\"language-plaintext highlighter-rouge\">dependencyManagement</code>) section is actually <strong>{groupId, artifactId, type, classifier}</strong>. In many cases, these dependencies reference artifacts with no <code class=\"language-plaintext highlighter-rouge\">classifier</code>. Since the default value for the type field is <code class=\"language-plaintext highlighter-rouge\">jar</code> and the default classifier is empty, we can abbreviate the identity set to <strong>{groupId, artifactId}</strong>.</p>\n\n<p>The second very important use of the dependency management section is to control the project versions used for transitive dependencies. Let’s illustrate this with an example:</p>\n\n<p>Project A:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n <span class=\"nt\">&lt;artifactId&gt;</span>A<span class=\"nt\">&lt;/artifactId&gt;</span>\n <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n <span class=\"nt\">&lt;name&gt;</span>A<span class=\"nt\">&lt;/name&gt;</span>\n <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n   <span class=\"nt\">&lt;dependencies&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>b<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>d<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n   <span class=\"nt\">&lt;/dependencies&gt;</span>\n <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project B:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>A<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>B<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>B<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>d<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>When Maven runs on Project B, versions 1.0 of a, b, c, and d will be used, regardless of what versions are specified in their POMs.</p>\n\n<ul>\n  <li>Both a and c are declared as dependencies of the project, so version 1.0 is used due to dependency mediation. Since they are directly specified with a <code class=\"language-plaintext highlighter-rouge\">runtime</code> scope, both have a <code class=\"language-plaintext highlighter-rouge\">runtime</code> scope.</li>\n  <li>b is defined in the parent’s dependency management section. Since for transitive dependencies, dependency management takes precedence over dependency mediation, if version 1.0 is referenced in the POMs of a or c, version 1.0 will be chosen.</li>\n  <li>Lastly, since d is specified in Project B’s dependency management section, if d is a dependency (or transitive dependency) of a or c, version 1.0 will be chosen as well, again because dependency management takes precedence over dependency mediation, and the declaration in the current POM takes precedence over its parent’s declaration.</li>\n</ul>\n\n<p>Reference information for the <code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code> tag can be found in the <a href=\"https://maven.apache.org/ref/current/maven-model/maven.html#class_DependencyManagement\">Project Descriptor Reference</a>.</p>\n\n<h3 id=\"importing-dependencies\">Importing Dependencies</h3>\n\n<p>The examples in the previous section demonstrated how to specify dependencies through inheritance. However, in large projects, it may not always be feasible as a project can only inherit from one parent project. To address this, projects can import dependencies from other projects. This can be achieved by declaring POM dependencies with <code class=\"language-plaintext highlighter-rouge\">&lt;scope&gt;import&lt;/scope&gt;</code>.</p>\n\n<p>Project B:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>B<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>B<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>A<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>d<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Assuming A is the POM defined in the previous example, the end result is the same. All dependency management relationships from A will be incorporated into B, except for d, as it’s defined in this POM.</p>\n\n<p>Project X:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n <span class=\"nt\">&lt;artifactId&gt;</span>X<span class=\"nt\">&lt;/artifactId&gt;</span>\n <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n <span class=\"nt\">&lt;name&gt;</span>X<span class=\"nt\">&lt;/name&gt;</span>\n <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n   <span class=\"nt\">&lt;dependencies&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.1<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>b<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n   <span class=\"nt\">&lt;/dependencies&gt;</span>\n <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project Y:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n <span class=\"nt\">&lt;artifactId&gt;</span>Y<span class=\"nt\">&lt;/artifactId&gt;</span>\n <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n <span class=\"nt\">&lt;name&gt;</span>Y<span class=\"nt\">&lt;/name&gt;</span>\n <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n   <span class=\"nt\">&lt;dependencies&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>a<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n     <span class=\"nt\">&lt;dependency&gt;</span>\n       <span class=\"nt\">&lt;groupId&gt;</span>test<span class=\"nt\">&lt;/groupId&gt;</span>\n       <span class=\"nt\">&lt;artifactId&gt;</span>c<span class=\"nt\">&lt;/artifactId&gt;</span>\n       <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n     <span class=\"nt\">&lt;/dependency&gt;</span>\n   <span class=\"nt\">&lt;/dependencies&gt;</span>\n <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Project Z:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>Z<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>Z<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>X<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>maven<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>Y<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>In the above examples, Z imports managed dependencies from X and Y. Both X and Y contain dependency a, but since X is declared first and a is not declared in Z’s dependency management, version 1.1 will be used instead of 1.2.</p>\n\n<p>This process is recursive. For instance, if X imports another POM Q, then when processing Z, all dependency management defined in Q will be found within X.</p>\n\n<h3 id=\"bom\">BOM</h3>\n\n<p>Importing is most effective when defining “libraries” containing artifacts that are typically part of multi-project builds. It’s common for a project to use one or more artifacts from these libraries. However, it can be challenging to ensure that the versions of artifacts used by projects remain in sync with those distributed in the library. The following pattern illustrates how to create a “Bill of Materials” (BOM) for use by other projects.</p>\n\n<p>The root of the project is the BOM POM. It defines the versions of all artifacts that will be created in the library. Other projects wishing to use the library should import this POM into their POM’s dependency management section.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;project1Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project1Version&gt;</span>\n    <span class=\"nt\">&lt;project2Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project2Version&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project1Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project2Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>parent<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">parent</code> submodule treats the BOM POM as its parent project. This is a standard multi-module POM.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.2.12<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>commons-logging<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>commons-logging<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.1.1<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>project1<span class=\"nt\">&lt;/module&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>project2<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Next are the actual project POMs:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>${project1Version}<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n \n<span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>${project2Version}<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>commons-logging<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>commons-logging<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>The following project demonstrates how to use the library in another project without specifying the versions of the dependent projects:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n     <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>use<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;type&gt;</span>pom<span class=\"nt\">&lt;/type&gt;</span>\n        <span class=\"nt\">&lt;scope&gt;</span>import<span class=\"nt\">&lt;/scope&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Finally, when creating <code class=\"language-plaintext highlighter-rouge\">import</code> dependencies in your project, please pay attention to the following:</p>\n\n<ul>\n  <li>Do not attempt to import a POM defined in a submodule of the current POM. Doing so will cause build failures because it cannot locate the POM.</li>\n  <li>Do not declare the imported POM as a parent of the target POM (or grandparent, etc.). This will not resolve cyclic issues and will throw exceptions.</li>\n  <li>When referencing artifacts with transitive dependencies in a POM, the project needs to specify the versions of these artifacts as managed dependencies. Failure to do so will result in build failures because the artifacts may not have specified versions. (In any case, this should be considered a best practice as it prevents the versions of artifacts from changing from one build to another).</li>\n</ul>\n\n<p>Starting from Maven 4.0, a new specific BOM wrapping has been introduced. It allows the definition of BOMs that are not used as parents in projects utilizing the newer 4.1.0 model, while remaining fully compatible with Maven 3.x clients and projects. During installation/deployment, this BOM wrapping utilizes the build/consumer POM functionality in Maven 4 to transform into the more common POM wrapping. Thus, it is fully compatible with Maven 3.x.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.1.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>bom<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>bom<span class=\"nt\">&lt;/packaging&gt;</span>\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;project1Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project1Version&gt;</span>\n    <span class=\"nt\">&lt;project2Version&gt;</span>1.0.0<span class=\"nt\">&lt;/project2Version&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n  <span class=\"nt\">&lt;dependencyManagement&gt;</span>\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project1<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project1Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n      <span class=\"nt\">&lt;dependency&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>com.test<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>project2<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>${project2Version}<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n  <span class=\"nt\">&lt;/dependencyManagement&gt;</span>\n <span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/05/Maven-%E5%8D%81%E4%BA%8C-%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 12) - Introduction to Dependency Mechanism'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>18 min read <time class='article__date' datetime='2023-12-05T19:10:42+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 12) - Introduction to Dependency Mechanism</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (11) - Standard Directory Structure",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%80-%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/",
      "date"     : "Dec 5, 2023",
      "content"  : "\n<p>Having a standard directory structure provides Maven project users with a sense of familiarity when transitioning from one project to another. This practice is akin to adopting a consistent look and feel across websites.</p>\n\n<p>The following section outlines the expected directory layout by Maven and the layout Maven creates. It’s advisable to adhere to this structure as closely as possible. If not feasible, these settings can be overridden through project descriptors.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Directory</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/java</code></td>\n      <td>Application/Library source code</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/resources</code></td>\n      <td>Application/Library resources</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/filters</code></td>\n      <td>Resource filter files</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/main/webapp</code></td>\n      <td>Web application source code</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/test/java</code></td>\n      <td>Test source code</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/test/resources</code></td>\n      <td>Test resources</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/test/filters</code></td>\n      <td>Test resource filter files</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/it</code></td>\n      <td>Integration tests (primarily for plugins)</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/assembly</code></td>\n      <td>Assembly descriptors</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">src/site</code></td>\n      <td>Website</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">LICENSE.txt</code></td>\n      <td>Project license</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">NOTICE.txt</code></td>\n      <td>Notice and attributions for dependencies</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">README.txt</code></td>\n      <td>Project readme</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>At the top level are files describing the project: the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> file. Additionally, there are text files like <code class=\"language-plaintext highlighter-rouge\">README.txt</code>, <code class=\"language-plaintext highlighter-rouge\">LICENSE.txt</code>, etc., for users to read upon receiving the source code.</p>\n\n<p>This structure consists of only two subdirectories: <code class=\"language-plaintext highlighter-rouge\">src</code> and <code class=\"language-plaintext highlighter-rouge\">target</code>. The only other directories needed here are metadata such as <code class=\"language-plaintext highlighter-rouge\">CVS</code>, <code class=\"language-plaintext highlighter-rouge\">.git</code>, or <code class=\"language-plaintext highlighter-rouge\">.svn</code>, and any subprojects in multi-project builds (each subproject follows the layout above).</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">target</code> directory is used to store all outputs from the build process.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">src</code> directory contains all source materials for building the project, website, etc. Each type has a subdirectory: <code class=\"language-plaintext highlighter-rouge\">main</code> for primary build artifacts, <code class=\"language-plaintext highlighter-rouge\">test</code> for unit test code and resources, <code class=\"language-plaintext highlighter-rouge\">site</code>, etc.</p>\n\n<p>Within the build artifacts directories (<code class=\"language-plaintext highlighter-rouge\">main</code> and <code class=\"language-plaintext highlighter-rouge\">test</code>), there’s a directory for <code class=\"language-plaintext highlighter-rouge\">java</code> language (with a regular package hierarchy underneath) and one for <code class=\"language-plaintext highlighter-rouge\">resources</code> (structured to be copied to the target classpath per default resource definitions).</p>\n\n<p>If there are other contributions to the build process, they reside in additional subdirectories. For example, <code class=\"language-plaintext highlighter-rouge\">src/main/antlr</code> contains Antlr grammar definition files.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/05/Maven-%E5%8D%81%E4%B8%80-%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (11) - Standard Directory Structure'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2023-12-05T14:41:05+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven (11) - Standard Directory Structure</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 10) - Introduction to Configuration Files (Profiles)",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/05/Maven-%E5%8D%81-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Profiles-%E7%AE%80%E4%BB%8B/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#different-types-of-configuration-files-and-where-theyre-defined\" id=\"markdown-toc-different-types-of-configuration-files-and-where-theyre-defined\">Different Types of Configuration Files and Where They’re Defined</a></li>\n  <li><a href=\"#activation-of-configurations\" id=\"markdown-toc-activation-of-configurations\">Activation of Configurations</a>    <ol>\n      <li><a href=\"#details-of-configuration-activation\" id=\"markdown-toc-details-of-configuration-activation\">Details of Configuration Activation</a>        <ol>\n          <li><a href=\"#explicit-activation\" id=\"markdown-toc-explicit-activation\">Explicit Activation</a></li>\n          <li><a href=\"#implicit-activation\" id=\"markdown-toc-implicit-activation\">Implicit Activation</a>            <ol>\n              <li><a href=\"#jdk-activation\" id=\"markdown-toc-jdk-activation\">JDK Activation</a></li>\n              <li><a href=\"#os-activation\" id=\"markdown-toc-os-activation\">OS Activation</a></li>\n              <li><a href=\"#property-activation\" id=\"markdown-toc-property-activation\">Property Activation</a></li>\n              <li><a href=\"#file-activation\" id=\"markdown-toc-file-activation\">File Activation</a></li>\n            </ol>\n          </li>\n          <li><a href=\"#multiple-condition-activation\" id=\"markdown-toc-multiple-condition-activation\">Multiple Condition Activation</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#disabling-configuration-files\" id=\"markdown-toc-disabling-configuration-files\">Disabling Configuration Files</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#content-that-can-be-specified-in-configurations\" id=\"markdown-toc-content-that-can-be-specified-in-configurations\">Content that can be Specified in Configurations</a>    <ol>\n      <li><a href=\"#external-file-configurations\" id=\"markdown-toc-external-file-configurations\">External File Configurations</a></li>\n      <li><a href=\"#pom-configurations\" id=\"markdown-toc-pom-configurations\">POM Configurations</a></li>\n      <li><a href=\"#pom-elements-outside-of-profiles\" id=\"markdown-toc-pom-elements-outside-of-profiles\">POM Elements Outside of <code class=\"language-plaintext highlighter-rouge\">&lt;profiles&gt;</code></a></li>\n    </ol>\n  </li>\n  <li><a href=\"#configuration-priority\" id=\"markdown-toc-configuration-priority\">Configuration Priority</a></li>\n  <li><a href=\"#misconceptions-about-configurations\" id=\"markdown-toc-misconceptions-about-configurations\">Misconceptions about Configurations</a>    <ol>\n      <li><a href=\"#external-property-definitions\" id=\"markdown-toc-external-property-definitions\">External Property Definitions</a></li>\n      <li><a href=\"#imprecise-configuration-of-natural-environment-sets\" id=\"markdown-toc-imprecise-configuration-of-natural-environment-sets\">Imprecise Configuration of Natural Environment Sets</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#how-to-determine-which-configuration-files-are-in-effect-during-the-build-process\" id=\"markdown-toc-how-to-determine-which-configuration-files-are-in-effect-during-the-build-process\">How to Determine Which Configuration Files are in Effect during the Build Process?</a></li>\n  <li><a href=\"#naming-conventions\" id=\"markdown-toc-naming-conventions\">Naming Conventions</a></li>\n</ol>\n\n<p>Apache Maven strives to ensure the portability of builds. Among other things, this means allowing build configurations in the POM, avoiding <strong>all filesystem references</strong> (in inheritance, dependencies, and elsewhere), and relying more on local repositories to store the metadata needed to achieve this.</p>\n\n<p>However, sometimes portability isn’t entirely feasible. In some cases, plugins may need to configure local filesystem paths. In others, slightly different sets of dependencies might be required, and even the artifact names of projects might need slight adjustments. Sometimes, entire plugins might need to be included in the build lifecycle depending on the detected build environment.</p>\n\n<p>For these scenarios, Maven supports configuration files. Configuration files are specified using a subset of elements available in the POM (plus an additional part) and are triggered in various ways. They modify the POM during the build, aiming to provide equivalent but different parameters for a set of target environments through complementary sets (e.g., providing paths to appserver root directories in development, testing, and production environments). As a result, configuration files can easily lead to different build results among different members of a team. However, when used properly, they can still maintain the project’s portability. This also minimizes the use of Maven’s <code class=\"language-plaintext highlighter-rouge\">-f</code> option, which allows users to create another POM and build with different parameters or configurations, making it easier to maintain as it only uses one POM.</p>\n\n<h2 id=\"different-types-of-configuration-files-and-where-theyre-defined\">Different Types of Configuration Files and Where They’re Defined</h2>\n\n<ul>\n  <li>\n    <p>Project Configuration</p>\n\n    <ul>\n      <li>Defined in the POM file <code class=\"language-plaintext highlighter-rouge\">(pom.xml)</code>.</li>\n    </ul>\n  </li>\n  <li>\n    <p>User Configuration</p>\n\n    <ul>\n      <li>Defined in the user’s <a href=\"https://maven.apache.org/ref/current/maven-settings/settings.html\">Maven settings</a> <code class=\"language-plaintext highlighter-rouge\">(%USER_HOME%/.m2/settings.xml)</code>.</li>\n    </ul>\n  </li>\n  <li>\n    <p>Global Configuration</p>\n\n    <ul>\n      <li>Defined in the global <a href=\"https://maven.apache.org/ref/current/maven-settings/settings.html\">Maven settings</a> <code class=\"language-plaintext highlighter-rouge\">(${maven.home}/conf/settings.xml)</code>.</li>\n    </ul>\n  </li>\n  <li>\n    <p>Configuration File Descriptors</p>\n\n    <ul>\n      <li>Descriptors located in the project basedir (<a href=\"https://maven.apache.org/ref/2.2.1/maven-profile/profiles.html\">profiles.xml</a>) (Profiles XML is no longer supported in Maven 3.0 and above; see <a href=\"https://cwiki.apache.org/confluence/display/MAVEN/Maven+3.x+Compatibility+Notes#Maven3.xCompatibilityNotes-profiles.xml\">Maven 3 Compatibility Notes</a>)</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"activation-of-configurations\">Activation of Configurations</h2>\n\n<p>Sub POMs do not inherit Profiles like other POM elements. Instead, they are resolved very early by the <a href=\"https://maven.apache.org/ref/3.9.6/maven-model-builder/\">Maven Model Builder</a>, and only the effects of activated profiles will be inherited (e.g., plugins defined in profiles). This also results in implicit profile activation only affecting surrounding profile containers and not any other profiles (even with the same id).</p>\n\n<p>How are configurations triggered? What are the different types of activation based on the type of scenario used?</p>\n\n<h3 id=\"details-of-configuration-activation\">Details of Configuration Activation</h3>\n\n<h4 id=\"explicit-activation\">Explicit Activation</h4>\n\n<p>Configuration files can be explicitly specified using the <code class=\"language-plaintext highlighter-rouge\">-P</code> command-line flag.</p>\n\n<p>The flag is followed by a comma-separated list of profile IDs. <strong>In addition to profiles activated through profile activation or the <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> element in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code>, profiles specified in this option will also be activated.</strong> Starting from Maven 4, Maven will reject profiles that cannot be resolved for activation or deactivation. To prevent this, prefix the profile identifier with <code class=\"language-plaintext highlighter-rouge\">?</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal <span class=\"nt\">-P</span> profile-1,profile-2,?profile-3\n</code></pre></div></div>\n\n<p>Profiles can be activated in Maven settings using the <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> element. This element contains a list of <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfile&gt;</code> elements, each containing a profile ID:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings&gt;</span>\n  ...\n  <span class=\"nt\">&lt;activeProfiles&gt;</span>\n    <span class=\"nt\">&lt;activeProfile&gt;</span>profile-1<span class=\"nt\">&lt;/activeProfile&gt;</span>\n  <span class=\"nt\">&lt;/activeProfiles&gt;</span>\n  ...\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div></div>\n\n<p>Profiles listed in the <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> tag will be activated by default every time the project is used. You can also use configurations similar to the following in the POM to activate profiles by default:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>profile-1<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;activeByDefault&gt;</span>true<span class=\"nt\">&lt;/activeByDefault&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>This profile will be automatically activated in all builds unless another profile in the same POM is activated using the aforementioned methods. <strong>When profiles in the POM are activated via command-line or activated profiles, all profiles activated by default are automatically deactivated.</strong></p>\n\n<h4 id=\"implicit-activation\">Implicit Activation</h4>\n\n<p>Configuration files can be triggered automatically based on the detected build environment state. These triggers are specified through the <code class=\"language-plaintext highlighter-rouge\">&lt;activation&gt;</code> section of the configuration file itself. <strong>Currently, this detection is limited to matching JDK versions, matching operating systems, or the existence/value of system properties.</strong> Implicit profile activation always applies to profile containers (rather than profiles in other modules with the same id). Below are some examples.</p>\n\n<h5 id=\"jdk-activation\">JDK Activation</h5>\n\n<p>The following configuration will trigger the profile when the JDK version starts with <code class=\"language-plaintext highlighter-rouge\">1.4</code> (e.g., <code class=\"language-plaintext highlighter-rouge\">1.4.0_08</code>, <code class=\"language-plaintext highlighter-rouge\">1.4.2_07</code>, <code class=\"language-plaintext highlighter-rouge\">1.4</code>). For newer versions like <code class=\"language-plaintext highlighter-rouge\">1.8</code> or <code class=\"language-plaintext highlighter-rouge\">11</code>, the profile won’t take effect:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;jdk&gt;</span>1.4<span class=\"nt\">&lt;/jdk&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>Ranges can also be used. The range value must start with <code class=\"language-plaintext highlighter-rouge\">[</code> or <code class=\"language-plaintext highlighter-rouge\">(</code>; otherwise, the value will be interpreted as a prefix. The following applies to versions <code class=\"language-plaintext highlighter-rouge\">1.3</code>, <code class=\"language-plaintext highlighter-rouge\">1.4</code>, and <code class=\"language-plaintext highlighter-rouge\">1.5</code>.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;jdk&gt;</span>[1.3,1.6)<span class=\"nt\">&lt;/jdk&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p><strong>Note: An upper limit like <code class=\"language-plaintext highlighter-rouge\">,1.5]</code> is likely to exclude most <code class=\"language-plaintext highlighter-rouge\">1.5</code> versions as they have an additional patch version like <code class=\"language-plaintext highlighter-rouge\">_05</code>, which isn’t considered in the range above.</strong></p>\n\n<h5 id=\"os-activation\">OS Activation</h5>\n\n<p>Activation based on the detected operating system. For more details on operating system values, refer to the <a href=\"https://maven.apache.org/enforcer/enforcer-rules/requireOS.html\">Maven Enforcer Plugin</a>.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;os&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>Windows XP<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;family&gt;</span>Windows<span class=\"nt\">&lt;/family&gt;</span>\n        <span class=\"nt\">&lt;arch&gt;</span>x86<span class=\"nt\">&lt;/arch&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>5.1.2600<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;/os&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<h5 id=\"property-activation\">Property Activation</h5>\n\n<ul>\n  <li>The following profile will be activated when the system property <code class=\"language-plaintext highlighter-rouge\">debug</code> is specified with any value:</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>debug<span class=\"nt\">&lt;/name&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/\n\nprofile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<ul>\n  <li>The following profile will be activated when the system property <code class=\"language-plaintext highlighter-rouge\">debug</code> is not defined at all:</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>!debug<span class=\"nt\">&lt;/name&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<ul>\n  <li>The following profile will be activated when the system property <code class=\"language-plaintext highlighter-rouge\">debug</code> is either not defined or defined with a value other than <code class=\"language-plaintext highlighter-rouge\">true</code>:</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>debug<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>!true<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>Both of the following commands can activate the aforementioned profile:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal\nmvn groupId:artifactId:goal <span class=\"nt\">-Ddebug</span><span class=\"o\">=</span><span class=\"nb\">false</span>\n</code></pre></div></div>\n\n<ul>\n  <li>The following profile will be activated when the system property <code class=\"language-plaintext highlighter-rouge\">environment</code> is specified as <code class=\"language-plaintext highlighter-rouge\">test</code>:</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>environment<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>test<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>To activate this profile, you can type the following in the command line:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal <span class=\"nt\">-Denvironment</span><span class=\"o\">=</span><span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<p>Starting from Maven 3.0, profiles in the POM can also be activated based on the attributes in <code class=\"language-plaintext highlighter-rouge\">activeProfiles</code> from <code class=\"language-plaintext highlighter-rouge\">settings.xml</code>.</p>\n\n<p>Note: Environment variables like <code class=\"language-plaintext highlighter-rouge\">FOO</code> can be used as properties in the form of <code class=\"language-plaintext highlighter-rouge\">env.FOO</code>. Also, note that environment variable names are standardized to uppercase on Windows systems.</p>\n\n<ul>\n  <li>From Maven 3.9.0 onwards, it’s also possible to evaluate the packaging of the POM by referencing the <code class=\"language-plaintext highlighter-rouge\">packaging</code> property. This is only useful when configuration file activation is defined in a common parent POM of multiple Maven modules. The following example will trigger the profile when building a project with packaging <code class=\"language-plaintext highlighter-rouge\">war</code>:</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;property&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>packaging<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;value&gt;</span>war<span class=\"nt\">&lt;/value&gt;</span>\n      <span class=\"nt\">&lt;/property&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<h5 id=\"file-activation\">File Activation</h5>\n\n<p>This example will trigger the profile when the generated file <code class=\"language-plaintext highlighter-rouge\">target/generated-sources/axistools/wsdl2java/org/apache/maven</code> is missing:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;profiles&gt;</span>\n  <span class=\"nt\">&lt;profile&gt;</span>\n    <span class=\"nt\">&lt;activation&gt;</span>\n      <span class=\"nt\">&lt;file&gt;</span>\n        <span class=\"nt\">&lt;missing&gt;</span>target/generated-sources/axistools/wsdl2java/org/apache/maven<span class=\"nt\">&lt;/missing&gt;</span>\n      <span class=\"nt\">&lt;/file&gt;</span>\n    <span class=\"nt\">&lt;/activation&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profile&gt;</span>\n<span class=\"nt\">&lt;/profiles&gt;</span>\n</code></pre></div></div>\n\n<p>Tags <code class=\"language-plaintext highlighter-rouge\">&lt;exists&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;missing&gt;</code> can be interpolated. Supported variables include system properties (like <code class=\"language-plaintext highlighter-rouge\">${user.home}</code>) and environment variables (like <code class=\"language-plaintext highlighter-rouge\">${env.HOME}</code>).</p>\n\n<p><strong>Note that properties and values defined in the POM cannot be used for interpolation here.</strong> For example, the activation in the above example cannot use <code class=\"language-plaintext highlighter-rouge\">${project.build.directory}</code> and needs to hardcode the target path.</p>\n\n<h4 id=\"multiple-condition-activation\">Multiple Condition Activation</h4>\n\n<p>Different types of implicit activation can be combined in one configuration file. The profile will only be activated if all conditions are met (since Maven 3.2.2, <a href=\"https://issues.apache.org/jira/browse/MNG-4565\">MNG-4565</a>). Using the same type multiple times in the same profile is not supported (<a href=\"https://issues.apache.org/jira/browse/MNG-5909\">MNG-5909</a>, <a href=\"https://issues.apache.org/jira/browse/MNG-3328\">MNG-3328</a>).</p>\n<h3 id=\"disabling-configuration-files\">Disabling Configuration Files</h3>\n\n<p>To disable one or more configuration files via the command line, you can prepend the identifier of the file with either <code class=\"language-plaintext highlighter-rouge\">!</code> or <code class=\"language-plaintext highlighter-rouge\">-</code>, as shown below.</p>\n\n<p>Please note that in Bash, ZSH, and other shells, <code class=\"language-plaintext highlighter-rouge\">!</code> needs to be escaped with <code class=\"language-plaintext highlighter-rouge\">\\</code> or enclosed in quotes because it has a special meaning. Additionally, there’s a known bug with command-line option values starting with <code class=\"language-plaintext highlighter-rouge\">-</code> (<a href=\"https://issues.apache.org/jira/browse/CLI-309\">CLI-309</a>), so it’s recommended to use the syntax <code class=\"language-plaintext highlighter-rouge\">-P=-profilename</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn groupId:artifactId:goal <span class=\"nt\">-P</span> <span class=\"se\">\\!</span>profile-1,<span class=\"se\">\\!</span>profile-2,<span class=\"se\">\\!</span>?profile-3\n<span class=\"c\">## Or</span>\nmvn groupId:artifactId:goal <span class=\"nt\">-P</span><span class=\"o\">=</span><span class=\"nt\">-profile-1</span>,-profile-2,-?profile-3\n</code></pre></div></div>\n\n<p>This can be used to disable configuration files marked as activeByDefault or activated through profile activation.</p>\n\n<h2 id=\"content-that-can-be-specified-in-configurations\">Content that can be Specified in Configurations</h2>\n\n<p>We’ve discussed where configurations can be specified and how to activate them, so it’s useful to discuss what content can be specified within configurations. Like other aspects of profile configurations, the answer to this question isn’t straightforward.</p>\n\n<p>Depending on where you choose to specify configuration files, you’ll have access to different POM configuration options.</p>\n\n<h3 id=\"external-file-configurations\">External File Configurations</h3>\n\n<p>Configuration files specified in external files (such as <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> or <code class=\"language-plaintext highlighter-rouge\">profiles.xml</code>) are strictly non-portable. Any content that seems likely to change the build result is limited to the inline configuration files in the POM. Things like repository lists may just be proprietary repositories for existing projects and won’t change the build result. Therefore, you can only modify the <code class=\"language-plaintext highlighter-rouge\">&lt;repositories&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">&lt;pluginRepositories&gt;</code> sections, along with additional <code class=\"language-plaintext highlighter-rouge\">&lt;properties&gt;</code> sections.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">&lt;properties&gt;</code> section allows you to specify key-value pairs in a free-form manner, which will be included in the POM’s interpolation process. This way, you can specify plugin configurations as <code class=\"language-plaintext highlighter-rouge\">${profile.provided.path}</code>.</p>\n\n<h3 id=\"pom-configurations\">POM Configurations</h3>\n\n<p>On the other hand, if it’s reasonable to specify configurations within the POM, you’ll have more options. Of course, the trade-off here is that you can only modify that project and its submodules. Since these configuration files are specified inline, there’s a better chance of maintaining portability, so you can add more information without the risk of other users not getting that information.</p>\n\n<p>Configurations specified within the POM can modify the following POM elements:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;repositories&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;pluginRepositories&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;dependencies&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;properties&gt;</code> (not actually provided in the main POM but used behind the scenes)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;modules&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;reports&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;reporting&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;dependencyManagement&gt;</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&lt;distributionManagement&gt;</code></li>\n  <li>A subset of the <code class=\"language-plaintext highlighter-rouge\">&lt;build&gt;</code> element, including:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;defaultGoal&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;resources&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;testResources&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;directory&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;finalName&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;filters&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;pluginManagement&gt;</code></li>\n      <li><code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code></li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"pom-elements-outside-of-profiles\">POM Elements Outside of <code class=\"language-plaintext highlighter-rouge\">&lt;profiles&gt;</code></h3>\n\n<p>We don’t allow modification of certain POM elements outside of profile configurations because runtime modifications to these elements won’t be distributed when the POM is deployed to a version control system, making the project built by that person completely different from other projects. Although you can achieve this to some extent with options in external configuration files, their danger is limited. Another reason is that sometimes this POM information is reused from the parent POM.</p>\n\n<p>Elements outside of the POM configuration files (such as <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> and <code class=\"language-plaintext highlighter-rouge\">profiles.xml</code>) also don’t support elements outside of POM files. Let’s elaborate on this scenario. When a valid POM is deployed to a remote version control system, anyone can retrieve its information from the version control and use it directly for building Maven projects. Now, imagine if <strong>we could set configuration files in dependencies (critical for building) or any other elements outside of <code class=\"language-plaintext highlighter-rouge\">POM-profiles</code> in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code>, then it’s very likely that we can’t expect others to use the POM from that version control and build it</strong>. We also have to consider how to share <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> with others. Note that having too many configuration files leads to confusion and is hard to maintain. In summary, since this is build data, it should be placed in the POM.</p>\n\n<h2 id=\"configuration-priority\">Configuration Priority</h2>\n\n<p>In a POM, all configuration elements from activated configuration files override or extend global elements with the same name in the POM. If multiple configuration files are activated in the same POM or external file, the <strong>configuration files defined later take precedence over those defined earlier</strong> (irrespective of the order of configuration file IDs and activation).</p>\n\n<p>Example:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;repositories&gt;</span>\n    <span class=\"nt\">&lt;repository&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>global-repo<span class=\"nt\">&lt;/id&gt;</span>\n      ...\n    <span class=\"nt\">&lt;/repository&gt;</span>\n  <span class=\"nt\">&lt;/repositories&gt;</span>\n  ...\n  <span class=\"nt\">&lt;profiles&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>profile-1<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;activeByDefault&gt;</span>true<span class=\"nt\">&lt;/activeByDefault&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;repositories&gt;</span>\n        <span class=\"nt\">&lt;repository&gt;</span>\n          <span class=\"nt\">&lt;id&gt;</span>profile-1-repo<span class=\"nt\">&lt;/id&gt;</span>\n          ...\n        <span class=\"nt\">&lt;/repository&gt;</span>\n      <span class=\"nt\">&lt;/repositories&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>profile-2<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;activeByDefault&gt;</span>true<span class=\"nt\">&lt;/activeByDefault&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;repositories&gt;</span>\n        <span class=\"nt\">&lt;repository&gt;</span>\n          <span class=\"nt\">&lt;id&gt;</span>profile-2-repo<span class=\"nt\">&lt;/id&gt;</span>\n          ...\n        <span class=\"nt\">&lt;/repository&gt;</span>\n      <span class=\"nt\">&lt;/repositories&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/profiles&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>This will result in the repository list: <code class=\"language-plaintext highlighter-rouge\">profile-2-repo</code>, <code class=\"language-plaintext highlighter-rouge\">profile-1-repo</code>, <code class=\"language-plaintext highlighter-rouge\">global-repo</code>.</p>\n\n<h2 id=\"misconceptions-about-configurations\">Misconceptions about Configurations</h2>\n\n<p>We’ve mentioned that adding configuration files to builds can potentially disrupt the project’s portability. We’ve even emphasized in which scenarios configuration files might disrupt project portability. However, as some misconceptions to avoid when using configuration files, it’s worth reiterating these points.</p>\n\n<p>When using configuration files, there are two main areas of concern. First is <strong>external property definitions</strong>, typically used for plugin configurations. These properties can potentially disrupt project portability. The other, more subtle aspect is <strong>the imprecise configuration of configuration for a set of natural environments</strong>.</p>\n\n<h3 id=\"external-property-definitions\">External Property Definitions</h3>\n\n<p>External property definitions refer to properties defined outside of <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> but not defined within the corresponding configuration file. In POMs, the most obvious use case is plugin configuration. The absence of a property, of course, disrupts project portability, and these small errors can have subtle impacts, leading to build failures. For example, specifying the appserver path in a configuration file specified in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> could lead to failure when other team members attempt to build integration testing plugins without a similar <code class=\"language-plaintext highlighter-rouge\">settings.xml</code>. Here’s a snippet of a web application project’s <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;plugins&gt;</span>\n      <span class=\"nt\">&lt;plugin&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.myco.plugins<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>spiffy-integrationTest-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;configuration&gt;</span>\n          <span class=\"nt\">&lt;appserverHome&gt;</span>${appserver.home}<span class=\"nt\">&lt;/appserverHome&gt;</span>\n        <span class=\"nt\">&lt;/configuration&gt;</span>\n      <span class=\"nt\">&lt;/plugin&gt;</span>\n      ...\n    <span class=\"nt\">&lt;/plugins&gt;</span>\n  <span class=\"nt\">&lt;/build\n\n&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>And in your local <code class=\"language-plaintext highlighter-rouge\">${user.home}/.m2/settings.xml</code> you have:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings&gt;</span>\n  ...\n  <span class=\"nt\">&lt;profiles&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>appserverConfig<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;appserver.home&gt;</span>/path/to/appserver<span class=\"nt\">&lt;/appserver.home&gt;</span>\n      <span class=\"nt\">&lt;/properties&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n  <span class=\"nt\">&lt;/profiles&gt;</span>\n \n  <span class=\"nt\">&lt;activeProfiles&gt;</span>\n    <span class=\"nt\">&lt;activeProfile&gt;</span>appserverConfig<span class=\"nt\">&lt;/activeProfile&gt;</span>\n  <span class=\"nt\">&lt;/activeProfiles&gt;</span>\n  ...\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div></div>\n\n<p>When you build the integration testing lifecycle phase, your tests pass because the provided path allows the testing plugin to install and test this web application.</p>\n\n<p>However, when your colleague attempts to build the integration test, their build fails, complaining that it can’t resolve the plugin configuration parameter <code class=\"language-plaintext highlighter-rouge\">&lt;appserverHome&gt;</code>, and worse, that the literal value of <code class=\"language-plaintext highlighter-rouge\">${appserver.home}</code> is invalid (if it warns you).</p>\n\n<p>Congratulations, your project is now non-portable. Embedding this configuration file in <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> helps mitigate this issue, but the obvious downside is that this information must now be specified at every project hierarchy level (considering the effects of inheritance). Given Maven’s support for project inheritance, this kind of configuration can be placed in the <code class=\"language-plaintext highlighter-rouge\">&lt;pluginManagement&gt;</code> section of a team-level POM or similar, then simply inherit the path.</p>\n\n<p>Another less attractive answer might be standardizing development environments. However, this often impacts the productivity gains that Maven can bring.</p>\n\n<h3 id=\"imprecise-configuration-of-natural-environment-sets\">Imprecise Configuration of Natural Environment Sets</h3>\n\n<p>In addition to the portability issues mentioned above, your configuration files are also prone to not covering all scenarios. If they don’t, it often leaves one environment in the target environment set stranded. Let’s revisit the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> snippet from above:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;plugins&gt;</span>\n      <span class=\"nt\">&lt;plugin&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.myco.plugins<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>spiffy-integrationTest-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;configuration&gt;</span>\n          <span class=\"nt\">&lt;appserverHome&gt;</span>${appserver.home}<span class=\"nt\">&lt;/appserverHome&gt;</span>\n        <span class=\"nt\">&lt;/configuration&gt;</span>\n      <span class=\"nt\">&lt;/plugin&gt;</span>\n      ...\n    <span class=\"nt\">&lt;/plugins&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Now, consider the configuration file below, which will specify inline in <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;profiles&gt;</span>\n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>appserverConfig-dev<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;property&gt;</span>\n          <span class=\"nt\">&lt;name&gt;</span>env<span class=\"nt\">&lt;/name&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>dev<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;appserver.home&gt;</span>/path/to/dev/appserver<span class=\"nt\">&lt;/appserver.home&gt;</span>\n      <span class=\"nt\">&lt;/properties&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n \n    <span class=\"nt\">&lt;profile&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>appserverConfig-dev-2<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;activation&gt;</span>\n        <span class=\"nt\">&lt;property&gt;</span>\n          <span class=\"nt\">&lt;name&gt;</span>env<span class=\"nt\">&lt;/name&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>dev-2<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/property&gt;</span>\n      <span class=\"nt\">&lt;/activation&gt;</span>\n      <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;appserver.home&gt;</span>/path/to/another/dev/appserver2<span class=\"nt\">&lt;/appserver.home&gt;</span>\n      <span class=\"nt\">&lt;/properties&gt;</span>\n    <span class=\"nt\">&lt;/profile&gt;</span>\n  <span class=\"nt\">&lt;/profiles&gt;</span>\n  ..\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>This configuration file is very similar to the one in the previous example but with some significant exceptions: it’s clearly geared towards the development environment, adds a new configuration file named <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code>, and has an activation section that triggers it when the system property contains <code class=\"language-plaintext highlighter-rouge\">env=dev</code> (for <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code>) and <code class=\"language-plaintext highlighter-rouge\">env=dev-2</code> (for <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code>). Thus, running the command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span>dev-2 integration-test\n</code></pre></div></div>\n\n<p>will successfully build using the properties given by the <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code> configuration. Moreover, when we run:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span>dev integration-test\n</code></pre></div></div>\n\n<p>it will successfully build using the properties given by the <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code> configuration. However, running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span>production integration-test\n</code></pre></div></div>\n\n<p>will fail to build. Why? Because the resulting <code class=\"language-plaintext highlighter-rouge\">${appserver.home}</code> property from this isn’t a valid path for deploying and testing the web application. In writing configuration files to handle such scenarios, it’s essential to consider the entire set of target environments where you might want to build the integration testing lifecycle phase.</p>\n\n<p>Additionally, user-specific configuration files can operate similarly. This means that when a team adds new developers, user-specific configurations for different environments will kick in. While I believe this could be useful training for newcomers, throwing them into the fray this way isn’t ideal. Again, emphasize the importance of considering the entire set of configuration files.</p>\n\n<h2 id=\"how-to-determine-which-configuration-files-are-in-effect-during-the-build-process\">How to Determine Which Configuration Files are in Effect during the Build Process?</h2>\n\n<p>Identifying activated configuration files helps users understand which specific configuration files were executed during the build process. We can use the <a href=\"https://maven.apache.org/plugins/maven-help-plugin/\">Maven Help Plugin</a> to understand which configuration files were executed during the build process.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles\n</code></pre></div></div>\n\n<p>Let’s further understand the plugin’s active-profiles goal through some small examples.</p>\n\n<p>From the last configuration file example in <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>, you’ll find two configuration files named <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code> and <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev-2</code>, each with different property values. If we continue with:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles <span class=\"nt\">-Denv</span><span class=\"o\">=</span>dev\n</code></pre></div></div>\n\n<p>The result will be a list, listing the active profiles with the activation property <code class=\"language-plaintext highlighter-rouge\">env=dev</code> and the source code declaring that configuration file. Here’s the example:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The following profiles are active:\n\n - appserverConfig-dev <span class=\"o\">(</span><span class=\"nb\">source</span>: pom<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>Now, if we declare a configuration file in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> (refer to the configuration file example in settings.xml) and set it as an active configuration file and execute:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles\n</code></pre></div></div>\n\n<p>The result should be:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The following profiles are active:\n\n - appserverConfig <span class=\"o\">(</span><span class=\"nb\">source</span>: settings.xml<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>Although we didn’t activate the property, a configuration file has been listed as active. Why? As mentioned earlier, configuration files set in <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> are automatically activated.</p>\n\n<p>Now, if we set a configuration file in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> as <code class=\"language-plaintext highlighter-rouge\">&lt;activeProfiles&gt;</code> and trigger a configuration file in POM. Which configuration file do you think will affect the build?</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:active-profiles <span class=\"nt\">-P</span> appserverConfig-dev\n</code></pre></div></div>\n\n<p>This will list the activated configuration files:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The following profiles are active:\n\n - appserverConfig-dev <span class=\"o\">(</span><span class=\"nb\">source</span>: pom<span class=\"o\">)</span>\n - appserverConfig <span class=\"o\">(</span><span class=\"nb\">source</span>: settings.xml<span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>Although it lists two active configuration files, we’re not sure which one is being applied. To see the impact on the build, execute:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">help</span>:effective-pom <span class=\"nt\">-P</span> appserverConfig-dev\n</code></pre></div></div>\n\n<p>This will print the effective POM for that build configuration to the console. Note that the configuration file set in <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> takes precedence over the one in the POM. Therefore, the applied configuration file here is <code class=\"language-plaintext highlighter-rouge\">appserverConfig</code>, not <code class=\"language-plaintext highlighter-rouge\">appserverConfig-dev</code>.</p>\n\n<p>If you want to redirect the output of the plugin to a file named <code class=\"language-plaintext highlighter-rouge\">effective-pom.xml</code>, use the command-line option</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-Doutput=effective-pom.xml</code>.</p>\n\n<h2 id=\"naming-conventions\">Naming Conventions</h2>\n\n<p>Now that you’ve noticed configuration files are a natural way to address different build configuration requirements for different target environments. It’s essential to provide intuitive hints in your configuration file IDs on their intended use. A good practice is to incorporate generic system property triggers as part of the configuration file names. <strong>This can lead to configuration file names triggered by the system property <code class=\"language-plaintext highlighter-rouge\">env</code> like <code class=\"language-plaintext highlighter-rouge\">env-dev</code>, <code class=\"language-plaintext highlighter-rouge\">env-test</code>, and <code class=\"language-plaintext highlighter-rouge\">env-prod</code>. Such systems provide very intuitive hints on how to activate builds targeting specific environments</strong>. Thus, to activate a build targeting the testing environment, you need to issue the following command to activate <code class=\"language-plaintext highlighter-rouge\">env-test</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-Denv</span><span class=\"o\">=</span><span class=\"nb\">test</span> &lt;phase&gt;\n</code></pre></div></div>\n\n<p>Simply replace the <code class=\"language-plaintext highlighter-rouge\">=</code> in the profile ID with <code class=\"language-plaintext highlighter-rouge\">-</code> to get the correct command-line option.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/05/Maven-%E5%8D%81-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-Profiles-%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 10) - Introduction to Configuration Files (Profiles)'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>21 min read <time class='article__date' datetime='2023-12-05T14:33:35+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 10) - Introduction to Configuration Files (Profiles)</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 9) - Introduction to POM",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/05/Maven-%E4%B9%9D-POM%E7%AE%80%E4%BB%8B/",
      "date"     : "Dec 5, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#what-is-pom\" id=\"markdown-toc-what-is-pom\">What is POM</a></li>\n  <li><a href=\"#super-pom\" id=\"markdown-toc-super-pom\">Super POM</a></li>\n  <li><a href=\"#minimal-pom\" id=\"markdown-toc-minimal-pom\">Minimal POM</a></li>\n  <li><a href=\"#project-inheritance\" id=\"markdown-toc-project-inheritance\">Project Inheritance</a>    <ol>\n      <li><a href=\"#example-1\" id=\"markdown-toc-example-1\">Example 1</a>        <ol>\n          <li><a href=\"#scenario\" id=\"markdown-toc-scenario\">Scenario</a></li>\n          <li><a href=\"#solution\" id=\"markdown-toc-solution\">Solution</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#example-2\" id=\"markdown-toc-example-2\">Example 2</a>        <ol>\n          <li><a href=\"#scenario-1\" id=\"markdown-toc-scenario-1\">Scenario</a></li>\n          <li><a href=\"#solution-1\" id=\"markdown-toc-solution-1\">Solution</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#project-aggregation\" id=\"markdown-toc-project-aggregation\">Project Aggregation</a>    <ol>\n      <li><a href=\"#example-3\" id=\"markdown-toc-example-3\">Example 3</a>        <ol>\n          <li><a href=\"#scenario-2\" id=\"markdown-toc-scenario-2\">Scenario</a></li>\n          <li><a href=\"#solution-2\" id=\"markdown-toc-solution-2\">Solution</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#example-4\" id=\"markdown-toc-example-4\">Example 4</a>        <ol>\n          <li><a href=\"#scenario-3\" id=\"markdown-toc-scenario-3\">Scenario</a></li>\n          <li><a href=\"#solution-3\" id=\"markdown-toc-solution-3\">Solution</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#comparison-between-inheritance-and-aggregation\" id=\"markdown-toc-comparison-between-inheritance-and-aggregation\">Comparison between Inheritance and Aggregation</a>    <ol>\n      <li><a href=\"#example-5\" id=\"markdown-toc-example-5\">Example 5</a>        <ol>\n          <li><a href=\"#scenario-4\" id=\"markdown-toc-scenario-4\">Scenario</a></li>\n          <li><a href=\"#solution-4\" id=\"markdown-toc-solution-4\">Solution</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#project-interpolation-and-variables\" id=\"markdown-toc-project-interpolation-and-variables\">Project Interpolation and Variables</a>    <ol>\n      <li><a href=\"#available-variables\" id=\"markdown-toc-available-variables\">Available Variables</a>        <ol>\n          <li><a href=\"#project-model-variables\" id=\"markdown-toc-project-model-variables\">Project Model Variables</a></li>\n          <li><a href=\"#special-variables\" id=\"markdown-toc-special-variables\">Special Variables</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"what-is-pom\">What is POM</h2>\n\n<p>The Project Object Model, or POM, serves as the cornerstone of Maven. It’s an XML file containing project information and detailed configurations for Maven to build the project. It encapsulates default values for most project parameters. For instance, the build directory defaults to <code class=\"language-plaintext highlighter-rouge\">target</code>, source code resides in <code class=\"language-plaintext highlighter-rouge\">src/main/java</code>, test source code in <code class=\"language-plaintext highlighter-rouge\">src/test/java</code>, and so forth. When tasks or goals are executed, Maven looks for the POM in the current directory. It reads the POM, extracts the required configuration, and proceeds with the goals.</p>\n\n<p>Configurations that can be specified within the POM include <strong>project dependencies, executable plugins or goals, build profiles</strong>, and more. Additionally, project version, description, developers, mailing lists, among other details, can be specified.</p>\n\n<h2 id=\"super-pom\">Super POM</h2>\n\n<p>The Super POM represents Maven’s default POM. Unless explicitly overridden, all POMs extend the Super POM, implying that any POM you create for your project inherits configurations specified in the Super POM.</p>\n\n<p>You can explore the Super POM for Maven 3.6.3 in the <a href=\"https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html\">Maven Core Reference Documentation</a>.</p>\n\n<h2 id=\"minimal-pom\">Minimal POM</h2>\n\n<p>The Minimal POM represents the bare minimum requirements for a POM. Its simplest structure includes:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">project</code> - the project root</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">modelVersion</code> - should be set to 4.0.0</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">groupId</code> - the ID of the project group</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">artifactId</code> - the ID of the artifact (project)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">version</code> - the version of the project within the group</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> looks like this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>The POM mandates the configuration of <code class=\"language-plaintext highlighter-rouge\">groupId</code>, <code class=\"language-plaintext highlighter-rouge\">artifactId</code>, and <code class=\"language-plaintext highlighter-rouge\">version</code>. These three values form the fully qualified artifact name of the project, structured as <code class=\"language-plaintext highlighter-rouge\">&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;</code>. In the example above, the fully qualified artifact name is <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>.</p>\n\n<p>As mentioned earlier, Maven utilizes default values when specific configurations are not provided. One such default is the packaging type. Each Maven project has a packaging type, defaulting to <code class=\"language-plaintext highlighter-rouge\">jar</code> if not specified in the POM.</p>\n\n<p>Notably, the Minimal POM does not specify repositories. If building a project with the Minimal POM, it inherits repository configurations from the Super POM. Thus, when Maven encounters dependencies in the Minimal POM, it knows to download them from the repository specified in the Super POM, typically <code class=\"language-plaintext highlighter-rouge\">https://repo.maven.apache.org/maven2</code>.</p>\n\n<h2 id=\"project-inheritance\">Project Inheritance</h2>\n\n<p>POM elements that can be inherited include:</p>\n\n<ul>\n  <li>dependencies</li>\n  <li>developers and contributors</li>\n  <li>plugin lists (including reports)</li>\n  <li>plugin executions with matching ids</li>\n  <li>plugin configuration</li>\n  <li>resources</li>\n</ul>\n\n<p>While the Super POM serves as an example of project inheritance, you can introduce your own parent POM by specifying the parent element within your POM, as illustrated in the following examples.</p>\n\n<h3 id=\"example-1\">Example 1</h3>\n\n<h4 id=\"scenario\">Scenario</h4>\n\n<p>Consider reusing the previous artifact <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> and introducing another artifact <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code>.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Let’s specify their directory structure as follows:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<p>Note: <code class=\"language-plaintext highlighter-rouge\">my-module/pom.xml</code> is the POM for <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code>, while <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> is the POM for <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>.</p>\n\n<h4 id=\"solution\">Solution</h4>\n\n<p>Now, to make <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> the parent artifact for <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code>, we need to modify the POM for <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code> as follows:</p>\n\n<p><strong>POM for com.mycompany.app:my-module:1</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Note that we’ve added a new section, namely the parent section. This section allows us to specify which artifact serves as the parent for the POM. To do so, we need to specify the fully qualified artifact name of the parent POM. With these settings, our module can inherit certain properties from the parent POM.</p>\n\n<p>Additionally, if you wish the module’s groupId or version to match the parent module, you can omit the groupId or version tags in the module’s POM:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>This allows the module to inherit the groupId and version from its parent POM.</p>\n\n<h3 id=\"example-2\">Example 2</h3>\n\n<h4 id=\"scenario-1\">Scenario</h4>\n\n<p>However, this approach is feasible only if the parent project is already installed in the local repository or structured in a specific directory hierarchy (i.e., the parent pom.xml is one level above the module’s pom.xml).</p>\n\n<p>But what if the parent project is not yet installed and the directory structure is as follows?</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> parent\n     <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<h4 id=\"solution-1\">Solution</h4>\n\n<p>To handle such directory structures (or any other structure), we must add a <code class=\"language-plaintext highlighter-rouge\">&lt;relativePath&gt;</code> element in the parent section.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;relativePath&gt;</span>../parent/pom.xml<span class=\"nt\">&lt;/relativePath&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n \n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>As the name suggests, it’s the relative path from the module’s `pom</p>\n\n<p>.xml<code class=\"language-plaintext highlighter-rouge\"> to the parent's </code>pom.xml`.</p>\n\n<h2 id=\"project-aggregation\">Project Aggregation</h2>\n\n<p>Project aggregation, similar to project inheritance, involves specifying modules from the parent POM rather than specifying a parent POM from the module. Thus, the parent project knows about its modules, and Maven commands executed for the parent project also apply to its modules. To aggregate projects, you need to:</p>\n\n<ul>\n  <li>Change the <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> value in the parent POM to <code class=\"language-plaintext highlighter-rouge\">pom</code>.</li>\n  <li>Specify the directories of its modules in the parent POM.</li>\n</ul>\n\n<h3 id=\"example-3\">Example 3</h3>\n\n<h4 id=\"scenario-2\">Scenario</h4>\n\n<p>The original POM and directory structure are as follows:</p>\n\n<p><strong>POM for com.mycompany.app:my-app:1</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>POM for com.mycompany.app:my-module:1</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>Directory Structure</strong></p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<h4 id=\"solution-2\">Solution</h4>\n\n<p>To aggregate <code class=\"language-plaintext highlighter-rouge\">my-module</code> into <code class=\"language-plaintext highlighter-rouge\">my-app</code>, we simply modify <code class=\"language-plaintext highlighter-rouge\">my-app</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>my-module<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>In the modified <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>, we’ve added the <code class=\"language-plaintext highlighter-rouge\">packaging</code> section and the <code class=\"language-plaintext highlighter-rouge\">modules</code> section. The <code class=\"language-plaintext highlighter-rouge\">packaging</code> is set to <code class=\"language-plaintext highlighter-rouge\">pom</code>, and the <code class=\"language-plaintext highlighter-rouge\">modules</code> section includes the element <code class=\"language-plaintext highlighter-rouge\">&lt;module&gt;my-module&lt;/module&gt;</code>. The value of <code class=\"language-plaintext highlighter-rouge\">&lt;module&gt;</code> is the relative path from <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code> to <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code>’s POM (following convention, we use the artifactId of the module as the directory name).</p>\n\n<p>Now, whenever Maven commands are executed for <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-app:1</code>, they’ll also be applied to <code class=\"language-plaintext highlighter-rouge\">com.mycompany.app:my-module:1</code>. Additionally, certain commands (especially goals) handle project aggregation differently.</p>\n\n<h3 id=\"example-4\">Example 4</h3>\n\n<h4 id=\"scenario-3\">Scenario</h4>\n\n<p>But what if we change the directory structure to the following?</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> parent\n     <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<p>How does the parent POM specify the module?</p>\n\n<h4 id=\"solution-3\">Solution</h4>\n\n<p>The solution is similar to Example 3, specifying the module’s path:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>../my-module<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"comparison-between-inheritance-and-aggregation\">Comparison between Inheritance and Aggregation</h2>\n\n<p>Inheritance: If you have multiple Maven projects with similar configurations, you can refactor your projects by extracting these common configurations and creating a parent project. Then, by making your Maven projects inherit from this parent project, these configurations will be applied across all projects.</p>\n\n<p>Aggregation: If you have a set of projects that are built or handled together, you can create a parent project and declare these projects as its modules. Consequently, by building the parent project, the other projects will follow suit.</p>\n\n<p>Using Inheritance and Aggregation together: Of course, you can also use project inheritance and project aggregation simultaneously. In other words, you can specify a parent project for your modules while also specifying those Maven projects as modules for the parent project. You just need to apply these three rules:</p>\n\n<ul>\n  <li>Specify the parent POM in each child POM.</li>\n  <li>Change the <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> value of the parent POM to <code class=\"language-plaintext highlighter-rouge\">pom</code>.</li>\n  <li>Specify the directories of its modules in the parent POM.</li>\n</ul>\n\n<h3 id=\"example-5\">Example 5</h3>\n\n<h4 id=\"scenario-4\">Scenario</h4>\n\n<p><strong>com.mycompany.app:my-app:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>com.mycompany.app:my-module:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Directory Structure</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">.</span>\n |-- my-module\n |   <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n <span class=\"sb\">`</span><span class=\"nt\">--</span> parent\n     <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n</code></pre></div></div>\n\n<h4 id=\"solution-4\">Solution</h4>\n\n<p>Applying the three rules, the solution is as follows:</p>\n\n<p><strong>com.mycompany.app:my-app:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span> \n  <span class=\"c\">&lt;!-- Change the packaging value to pom --&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>../my-module<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n  <span class=\"c\">&lt;!-- Declare the path of the module being aggregated --&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p><strong>com.mycompany.app:my-module:1’s POM</strong></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;relativePath&gt;</span>../parent/pom.xml<span class=\"nt\">&lt;/relativePath&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  <span class=\"c\">&lt;!-- Declare the parent project being inherited, and if the parent project is not installed, declare its relative path --&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-module<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Note: Property inheritance follows the same strategy as inheritance used by the POM itself.</p>\n\n<h2 id=\"project-interpolation-and-variables\">Project Interpolation and Variables</h2>\n\n<p>One of the practices Maven encourages is to avoid repetition. However, in certain cases, you may need to use the same value in multiple locations. To ensure that a value is specified only once, Maven allows you to use your own variables and predefined variables within the POM.</p>\n\n<p>For example, to access the project.version variable, you can reference it like this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;version&gt;</span>${project.version}<span class=\"nt\">&lt;/version&gt;</span>\n</code></pre></div></div>\n\n<p>One factor to note is that, as mentioned above, these variables are processed after inheritance. This means that if a variable is defined in the parent project and overridden in the child project, the child project will ultimately use its own definition rather than the parent project’s definition.</p>\n\n<h3 id=\"available-variables\">Available Variables</h3>\n\n<h4 id=\"project-model-variables\">Project Model Variables</h4>\n\n<p>Any single value element field in the POM can be referenced as a variable. For example, <code class=\"language-plaintext highlighter-rouge\">${project.groupId}</code>, <code class=\"language-plaintext highlighter-rouge\">${project.version}</code>, <code class=\"language-plaintext highlighter-rouge\">${project.build.sourceDirectory}</code>, and so on. Refer to the POM reference documentation for a complete list of properties.</p>\n\n<p>These variables are referenced with the prefix <code class=\"language-plaintext highlighter-rouge\">project.</code>. You may also encounter references with the prefix <code class=\"language-plaintext highlighter-rouge\">pom.</code> or without any prefix; these forms are deprecated and should no longer be used.</p>\n\n<h4 id=\"special-variables\">Special Variables</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th><code class=\"language-plaintext highlighter-rouge\">project.basedir</code></th>\n      <th>The directory where the current project resides.</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">project.baseUri</code></td>\n      <td>The directory where the current project resides, represented as a URI. Since <strong>Maven 2.1.0</strong></td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">maven.build.timestamp</code></td>\n      <td>Represents the timestamp when the build started (in UTC). Since <strong>Maven 2.1.0-M1</strong></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>You can customize the format of the build timestamp by declaring the <code class=\"language-plaintext highlighter-rouge\">maven.build.timestamp.format</code> property:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project&gt;</span>\n  ...\n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;maven.build.timestamp.format&gt;</span>yyyy-MM-dd'T'HH:mm:ss'Z'<span class=\"nt\">&lt;/maven.build.timestamp.format&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n  ...\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>The format pattern must comply with the rules outlined in the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\">SimpleDateFormat API documentation</a>. If this property is not present, the format defaults to the value given in the example.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/05/Maven-%E4%B9%9D-POM%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 9) - Introduction to POM'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>11 min read <time class='article__date' datetime='2023-12-05T12:36:12+11:00'>Dec 5, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 9) - Introduction to POM</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 8) - Build Lifecycle",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/04/Maven-%E5%85%AB-%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
      "date"     : "Dec 4, 2023",
      "content"  : "<h2 id=\"maven-part-8-build-lifecycle\">Maven (Part 8): Build Lifecycle</h2>\n\n<p>Maven is built upon the fundamental concept of build lifecycles. This means that the process of building and deploying specific artifacts (projects) is well-defined.</p>\n\n<p>For those building projects, this implies that they need to learn just a small set of commands to build any Maven project, and the POM ensures they get the desired results.</p>\n\n<p>There are three built-in build lifecycles: <code class=\"language-plaintext highlighter-rouge\">default</code>, <code class=\"language-plaintext highlighter-rouge\">clean</code>, and <code class=\"language-plaintext highlighter-rouge\">site</code>. The <code class=\"language-plaintext highlighter-rouge\">default</code> lifecycle deals with project deployment, the <code class=\"language-plaintext highlighter-rouge\">clean</code> lifecycle handles project cleaning, and the <code class=\"language-plaintext highlighter-rouge\">site</code> lifecycle deals with creating the project’s website.</p>\n\n<h3 id=\"build-lifecycles-comprise-several-phases\">Build Lifecycles Comprise Several Phases</h3>\n\n<p>Each build lifecycle is defined by a list of different build phases, where each build phase represents a step in the lifecycle.</p>\n\n<p>For example, the default lifecycle includes the following phases (for a complete list of lifecycle phases, refer to the <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference\">Lifecycle Reference</a>):</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">validate</code> - Validate the project is correct and all necessary information is available</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">compile</code> - Compile the source code of the project</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">test</code> - Test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">package</code> - Package the compiled code in its distributable format, such as a JAR.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">verify</code> - Run any checks on results of integration tests to ensure quality criteria are met</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">install</code> - Install the package into the local repository, for use as a dependency in other projects locally</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">deploy</code> - Done in the build environment, copy the final package to the remote repository for sharing with other developers and projects.</li>\n</ul>\n\n<p>These lifecycle phases (along with other lifecycle phases not shown here) are executed sequentially to complete the <code class=\"language-plaintext highlighter-rouge\">default</code> lifecycle. Given the above lifecycle phases, this means that when using the default lifecycle, Maven will first validate the project, then attempt to compile the source code, run tests against the compiled code, package the binaries (like jar), run integration tests against that package, verify the integration tests, install the verified package into the local repository, and finally deploy the installed package to a remote repository.</p>\n\n<h3 id=\"common-command-line-invocations\">Common Command Line Invocations</h3>\n\n<p>You should choose the phase that matches your expected outcome. If you want your jar, run package. If you want to run unit tests, run test.</p>\n\n<p>If you’re unsure what you want, the preferred invocation is:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn verify\n</code></pre></div></div>\n\n<p>This command will sequentially execute each default lifecycle phase (<code class=\"language-plaintext highlighter-rouge\">validate</code>, <code class=\"language-plaintext highlighter-rouge\">compile</code>, <code class=\"language-plaintext highlighter-rouge\">package</code>, etc.) before the <code class=\"language-plaintext highlighter-rouge\">verify</code> phase. You only need to call the last build phase you want to execute, which in this case is <code class=\"language-plaintext highlighter-rouge\">verify</code>. In most cases, the effect is the same as <code class=\"language-plaintext highlighter-rouge\">package</code>. However, if there are integration tests (<code class=\"language-plaintext highlighter-rouge\">test</code>), those will also be executed. Additionally, some extra checks can be done in the <code class=\"language-plaintext highlighter-rouge\">validate</code> phase, such as ensuring the code is written according to predefined validation rules.</p>\n\n<p>For clean and tidy build and deployment to a shared repository in the build environment, use:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn clean deploy\n</code></pre></div></div>\n\n<p>The same command <strong>can be used in multi-module situations</strong> (i.e., a project with one or more sub-projects). Maven will <strong>iterate through each submodule, performing the clean and then the deploy</strong> (including all the preceding build phases).</p>\n\n<h3 id=\"build-phases-comprise-plugin-goals\">Build Phases Comprise Plugin Goals</h3>\n\n<p>However, while the build phases are responsible for specific steps in the build lifecycle, how they fulfill their duties may vary. This is <strong>achieved by declaring plugin goals bound to these build phases</strong>.</p>\n\n<p><strong>Plugin goals represent specific tasks (finer than build phases) that help in building and managing a project</strong>. They can be bound to 0 or more build phases. Goals not bound to any build phase can be executed directly outside of the build lifecycle. The order of execution depends on the invocation order of goals and build phases. For example, consider the following command. The clean and package parameters are build phases, while dependency:copy-dependencies is a (plugin) goal.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn clean dependency:copy-dependencies package\n</code></pre></div></div>\n\n<p>When this goal is executed, it first performs the clean phase (meaning it will run all the preceding phases of the clean lifecycle, as well as the clean phase itself), then executes the dependency:copy-dependencies goal, and finally performs the package phase (along with all the preceding build phases of the default lifecycle).</p>\n\n<p>Additionally, if a goal is bound to one or more build phases, it will be called in all of those phases.</p>\n\n<p>Furthermore, a build phase can also be bound to 0 or more goals. If a build phase is not bound to any goals, then that build phase will not execute. But if it is bound to one or more goals, then all those goals will execute.</p>\n\n<p>(Note: In Maven 2.0.5 and above, multiple goals bound to a phase will execute in the order declared in the POM, but multiple instances of the same plugin are not supported. In Maven 2.0.11 and above, multiple instances of the same plugin are grouped together and executed in order).</p>\n\n<h3 id=\"certain-phases-are-typically-not-invoked-directly-from-the-command-line\">Certain Phases Are Typically Not Invoked Directly from the Command Line</h3>\n\n<p>Phases named with hyphens (<code class=\"language-plaintext highlighter-rouge\">pre-*</code>, <code class=\"language-plaintext highlighter-rouge\">post-*</code>, or <code class=\"language-plaintext highlighter-rouge\">process-*</code>) are typically not directly invoked from the command line. These phases are for organizing the build process, resulting in intermediate artifacts outside of the build process being useless. The environment might be left in a suspended state when invoking integration tests (<code class=\"language-plaintext highlighter-rouge\">integration-test</code>).</p>\n\n<p>Code coverage tools (like Jacoco) and execution container plugins (like Tomcat, Cargo, and Docker) bind goals to the pre-integration-test phase to prepare the integration test container environment. These plugins also bind goals to the post-integration-test phase to collect coverage statistics or tear down the integration test container.</p>\n\n<p>Fault-safe and code coverage plugins bind goals to the integration-test and verify phases. The end result is that test and coverage reports are available after the verify phase. If integration tests (<code class=\"language-plaintext highlighter-rouge\">integration-test</code>) are invoked from the command line, no reports will be generated. Worse yet, the integration test container environment will be left suspended; Tomcat web servers or Docker instances will still be running, and Maven might not even terminate on its own.</p>\n\n<h2 id=\"setting-up-projects-to-use-build-lifecycles\">Setting Up Projects to Use Build Lifecycles</h2>\n\n<p>Build lifecycles are straightforward and easy to use, but how do you assign tasks to each build phase when you build a Maven project?</p>\n\n<h3 id=\"packaging\">Packaging</h3>\n\n<p>The first and most common method is to set the packaging for the project through the <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> POM element, which has the same name as the phase. Some valid packaging values include <code class=\"language-plaintext highlighter-rouge\">jar</code>, <code class=\"language-plaintext highlighter-rouge\">war</code>, <code class=\"language-plaintext highlighter-rouge\">ear</code>, and <code class=\"language-plaintext highlighter-rouge\">pom</code>. If no packaging value is specified, it defaults to <code class=\"language-plaintext highlighter-rouge\">jar</code>.</p>\n\n<p>Each packaging contains a list of goals to be bound to the build lifecycle. For example, the <code class=\"language-plaintext highlighter-rouge\">jar</code> packaging binds the following goals to the build phases of the default lifecycle.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">jar</code> Packaging plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:compile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:testResources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:testCompile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">`</td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>test<code class=\"language-plaintext highlighter-rouge\">                   | </code>surefire:test<code class=\"language-plaintext highlighter-rouge\">                      |\n| </code>package<code class=\"language-plaintext highlighter-rouge\">                | </code>jar:jar<code class=\"language-plaintext highlighter-rouge\">                            |\n| </code>install<code class=\"language-plaintext highlighter-rouge\">                | </code>install:install<code class=\"language-plaintext highlighter-rouge\">                    |\n| </code>deploy<code class=\"language-plaintext highlighter-rouge\">                 | </code>deploy:deploy`                      |</p>\n\n<p>These are almost a set of <a href=\"https://maven.apache.org/ref/3.9.6/maven-core/default-bindings.html\">standard bindings</a>; however, some packaging types handle them differently. For example, metadata-only projects (packaging value <code class=\"language-plaintext highlighter-rouge\">pom</code>) only bind goals to the install and deploy phases (for a full list of bindings of goals to build phases for certain packaging types, see <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference\">Lifecycle Reference</a>).</p>\n\n<p>Note that to make certain packaging types available, you might also need to include specific plugins in the <code class=\"language-plaintext highlighter-rouge\">&lt;build&gt;</code> section of the POM, specifying <code class=\"language-plaintext highlighter-rouge\">&lt;extensions&gt;true&lt;/extensions&gt;</code> for that plugin. Plexus plugin is an example that requires this, providing <code class=\"language-plaintext highlighter-rouge\">plexus-application</code> and <code class=\"language-plaintext highlighter-rouge\">plexus-service</code> packaging.</p>\n\n<h3 id=\"plugins\">Plugins</h3>\n\n<p>The second method to add goals to phases is by configuring plugins in the project. Plugins are artifacts that provide goals to Maven. Additionally, a plugin may have one or more goals, where each goal represents an ability of that plugin. For example, the compiler plugin has two goals: <code class=\"language-plaintext highlighter-rouge\">compile</code> and <code class=\"language-plaintext highlighter-rouge\">testCompile</code>. The compiler plugin compiles the source code of the project.</p>\n\n<p>As you’ll see in later sections, plugins can contain <strong>instructions on which phase to bind goals to</strong>. Note that just adding plugin information alone is not enough; you must also specify the goals to run during the build process.</p>\n\n<p>The configured goals will be added to the goals already bound to the selected packaging lifecycle. If a specific phase is bound to multiple goals, the order used is to first execute the goals from the packaging and then execute the goals configured in the POM. Note that you can use the <code class=\"language-plaintext highlighter-rouge\">&lt;executions&gt;</code> element to control the order of goals for a specific goal.</p>\n\n<p>For example, the Modello plugin by default binds its <code class=\"language-plaintext highlighter-rouge\">modello:java</code> goal to the generate-sources phase (the <code class=\"language-plaintext highlighter-rouge\">modello:java</code> goal generates Java source code). So, to use the Modello plugin and have it generate source code from models and include it in the build, you would need to add the following to the <code class=\"language-plaintext highlighter-rouge\">&lt;plugins&gt;</code> section of the POM under <code class=\"language-plaintext highlighter-rouge\">&lt;build&gt;</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nt\">&lt;plugin&gt;</span>\n   <span class=\"nt\">&lt;groupId&gt;</span>org.codehaus.modello<span class=\"nt\">&lt;/groupId&gt;</span>\n   <span class=\"nt\">&lt;artifactId&gt;</span>modello-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n   <span class=\"nt\">&lt;version&gt;</span>1.8.1<span class=\"nt\">&lt;/version&gt;</span>\n   <span class=\"nt\">&lt;executions&gt;</span>\n     <span class=\"nt\">&lt;execution&gt;</span>\n       <span class=\"nt\">&lt;configuration&gt;</span>\n         <span class=\"nt\">&lt;models&gt;</span>\n           <span class=\"nt\">&lt;model&gt;</span>src/main/mdo/maven.mdo<span class=\"nt\">&lt;/model&gt;</span>\n         <span class=\"nt\">&lt;/models&gt;</span>\n         <span class=\"nt\">&lt;version&gt;</span>4.0.0<span class=\"nt\">&lt;/version&gt;</span>\n       <span class=\"nt\">&lt;/configuration&gt;</span>\n       <span class=\"nt\">&lt;goals&gt;</span>\n         <span class=\"nt\">&lt;goal&gt;</span>java<span class=\"nt\">&lt;/goal&gt;</span>\n       <span class=\"nt\">&lt;/goals&gt;</span>\n     <span class=\"nt\">&lt;/execution&gt;</span>\n   <span class=\"nt\">&lt;/executions&gt;</span>\n <span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div></div>\n\n<p>You might wonder why the <code class=\"language-plaintext highlighter-rouge\">&lt;executions&gt;</code> element is used. This allows you to run the same goal multiple times with different configurations as needed. You can also give an ID to individual executions, so when merging or applying configuration files, you can control whether the goal configuration is merged or transformed into additional executions.</p>\n\n<p>When given multiple executions that match a specific phase, those executions will be executed in the order specified in the POM, with inherited executions executing first.</p>\n\n<p>Now, for <code class=\"language-plaintext highlighter-rouge\">modello:java</code>, for example, it only makes sense in the generate-sources phase. But some goals can be used in multiple phases and might not have sensible defaults. For these goals, you can specify the phase yourself. For example, let’s assume there’s a <code class=\"language-plaintext highlighter-rouge\">display:time</code> goal that displays the current time on the command line, and you want it to run in the <code class=\"language-plaintext highlighter-rouge\">process-test-resources</code> phase to show when tests are starting. You can configure it like this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nt\">&lt;plugin&gt;</span>\n   <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.example<span class=\"nt\">&lt;/groupId&gt;</span>\n   <span class=\"nt\">&lt;artifactId&gt;</span>display-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n   <span class=\"nt\">&lt;version&gt;</span>1.0<span class=\"nt\">&lt;/version&gt;</span>\n   <span class=\"nt\">&lt;executions&gt;</span>\n     <span class=\"nt\">&lt;execution&gt;</span>\n       <span class=\"nt\">&lt;phase&gt;</span>process-test-resources<span class=\"nt\">&lt;/phase&gt;</span>\n       <span class=\"nt\">&lt;goals&gt;</span>\n         <span class=\"nt\">&lt;goal&gt;</span>time<span class=\"nt\">&lt;/goal&gt;</span>\n       <span class=\"nt\">&lt;/goals&gt;</span>\n     <span class=\"nt\">&lt;/execution&gt;</span>\n   <span class=\"nt\">&lt;/executions&gt;</span>\n <span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"lifecycle-reference\">Lifecycle Reference</h2>\n\n<h3 id=\"clean-lifecycle\">clean Lifecycle</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">pre-clean</code></td>\n      <td style=\"text-align: left\">Execute processes needed prior to the actual project cleaning</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">clean</code></td>\n      <td style=\"text-align: left\">Remove all files generated by the previous build</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">post-clean</code></td>\n      <td style=\"text-align: left\">Execute processes needed to finalize the project cleaning</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"site-lifecycle\">site Lifecycle</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">pre-site</code></td>\n      <td style=\"text-align: left\">Execute processes needed prior to the actual project site generation</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site</code></td>\n      <td style=\"text-align: left\">Generate the project’s site documentation</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">post-site</code></td>\n      <td style=\"text-align: left\">Execute processes needed to finalize the site generation, and to prepare for site deployment</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site-deploy</code></td>\n      <td style=\"text-align: left\">Deploy the generated site documentation to the specified web server</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"default-lifecycle\">default Lifecycle</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">validate</code></td>\n      <td style=\"text-align: left\">Validate the project is correct and all necessary information is available</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">initialize</code></td>\n      <td style=\"text-align: left\">Initialize build state, e.g., set properties or create directories</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-sources</code></td>\n      <td style=\"text-align: left\">Generate source code to include in compilation</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-sources</code></td>\n      <td style=\"text-align: left\">Process the source code, e.g., filter any values</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-resources</code></td>\n      <td style=\"text-align: left\">Generate resources included in the package</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\">Copy and process resources into the target directory, ready for packaging</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\">Compile the project’s source code</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-classes</code></td>\n      <td style=\"text-align: left\">Post-process the generated files, e.g., bytecode enhancement on Java classes</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-test-sources</code></td>\n      <td style=\"text-align: left\">Generate test source code to include in compilation</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-sources</code></td>\n      <td style=\"text-align: left\">Process the test source code, e.g., filter any values</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-test-resources</code></td>\n      <td style=\"text-align: left\">Create resources for testing</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\">Copy and process test resources into the target directory</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">`</td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>test-compile<code class=\"language-plaintext highlighter-rouge\">            | Compile the test source code into the test target directory    |\n| </code>process-test-classes<code class=\"language-plaintext highlighter-rouge\">    | Post-process the generated files from test compilation         |\n| </code>test<code class=\"language-plaintext highlighter-rouge\">                    | Run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed |\n| </code>prepare-package<code class=\"language-plaintext highlighter-rouge\">         | Perform any operations necessary to prepare a package before the actual packaging |\n| </code>package<code class=\"language-plaintext highlighter-rouge\">                 | Package the compiled code in its distributable format, e.g., JAR |\n| </code>pre-integration-test<code class=\"language-plaintext highlighter-rouge\">    | Perform actions required before integration tests are executed. This may involve setting up the required environment, etc. |\n| </code>integration-test<code class=\"language-plaintext highlighter-rouge\">        | Process and deploy the package if necessary into an environment where integration tests can be run |\n| </code>post-integration-test<code class=\"language-plaintext highlighter-rouge\">   | Perform actions required after integration tests have been executed. This may include cleaning up the environment, etc. |\n| </code>verify<code class=\"language-plaintext highlighter-rouge\">                  | Run any checks on results of integration tests to ensure quality criteria are met |\n| </code>install<code class=\"language-plaintext highlighter-rouge\">                 | Install the package into the local repository, for use as a dependency in other projects locally |\n| </code>deploy`                  | Done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects |</p>\n\n<h2 id=\"built-in-lifecycle-bindings\">Built-In Lifecycle Bindings</h2>\n\n<p>Some phases are bound by default. For the default lifecycle, these bindings depend on the packaging value. Here are some goals bound to phases of the build.</p>\n\n<h3 id=\"clean-lifecycle-binding\">clean Lifecycle Binding</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">clean</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">clean:clean</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"site-lifecycle-binding\">site Lifecycle Binding</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site:site</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site-deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">site:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"default-lifecycle-binding\">default Lifecycle Binding</h3>\n\n<h4 id=\"packaging-ejb--ejb3--jar--par--rar--war\">Packaging <code class=\"language-plaintext highlighter-rouge\">ejb</code> / <code class=\"language-plaintext highlighter-rouge\">ejb3</code> / <code class=\"language-plaintext highlighter-rouge\">jar</code> / <code class=\"language-plaintext highlighter-rouge\">par</code> / <code class=\"language-plaintext highlighter-rouge\">rar</code> / <code class=\"language-plaintext highlighter-rouge\">war</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:compile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:testResources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:testCompile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">surefire:test</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">jar:jar</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"packaging-ear\">Packaging <code class=\"language-plaintext highlighter-rouge\">ear</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">ear:generate-application-xml</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">ear:ear</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"packaging-maven-plugin\">Packaging <code class=\"language-plaintext highlighter-rouge\">maven-plugin</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">generate-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">plugin:descriptor</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:resources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:compile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">process-test-resources</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">resources:testResources</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test-compile</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">compiler:testCompile</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">test</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">surefire:test</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">jar:jar</code> <em>and</em> <code class=\"language-plaintext highlighter-rouge\">plugin:addPluginArtifactMetadata</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"packaging-pom\">Packaging <code class=\"language-plaintext highlighter-rouge\">pom</code></h4>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">Phase</th>\n      <th style=\"text-align: left\">plugin:goal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">package</code></td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">install:install</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy</code></td>\n      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">deploy:deploy</code></td>\n    </tr>\n  </tbody>\n</table>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/04/Maven-%E5%85%AB-%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 8) - Build Lifecycle'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>16 min read <time class='article__date' datetime='2023-12-04T19:56:23+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 8) - Build Lifecycle</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 7) - Naming Conventions Guide",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/04/Maven-%E4%B8%83-%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A%E6%8C%87%E5%8D%97/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#groupid\" id=\"markdown-toc-groupid\">groupId</a></li>\n  <li><a href=\"#artifactid\" id=\"markdown-toc-artifactid\">artifactId</a></li>\n  <li><a href=\"#version\" id=\"markdown-toc-version\">version</a></li>\n</ol>\n\n<h2 id=\"groupid\">groupId</h2>\n\n<p>The <strong>groupId</strong> uniquely identifies your project across all projects and should follow the <a href=\"https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7\">Java package naming rules</a>. This means it starts with a reversed domain name that you control. For example, <code class=\"language-plaintext highlighter-rouge\">org.apache.maven</code>, <code class=\"language-plaintext highlighter-rouge\">org.apache.commons</code>.</p>\n\n<p>While Maven doesn’t strictly enforce this rule, many traditional projects don’t adhere to this convention and use single-word IDs instead. However, new single-word IDs will find it challenging to be approved for inclusion in the Maven Central repository.</p>\n\n<p>You can create as many subgroups as needed. Using the project structure is a good way to determine the granularity of the <code class=\"language-plaintext highlighter-rouge\">groupId</code>. That is, if the current project is a multi-module project, you should append a new identifier to the parent project’s <code class=\"language-plaintext highlighter-rouge\">groupId</code>. For example, <code class=\"language-plaintext highlighter-rouge\">org.apache.maven</code>, <code class=\"language-plaintext highlighter-rouge\">org.apache.maven.plugins</code>, <code class=\"language-plaintext highlighter-rouge\">org.apache.maven.reporting</code>.</p>\n\n<h2 id=\"artifactid\">artifactId</h2>\n\n<p>The <strong>artifactId</strong> is the name of the jar file without the version. If it’s something you’ve created, you can choose any name you like (lowercase letters, no strange symbols). However, if it’s a third-party jar, you must use the distributed jar’s name. For example, <code class=\"language-plaintext highlighter-rouge\">maven</code>, <code class=\"language-plaintext highlighter-rouge\">commons-math</code>.</p>\n\n<h2 id=\"version\">version</h2>\n\n<p>If you’re releasing a version, you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1…). Avoid using dates as they’re usually associated with SNAPSHOT (nightly) versions. However, for third-party tools, you must use their version number, whatever it may be, even if it looks odd. For example, <code class=\"language-plaintext highlighter-rouge\">2.0</code>, <code class=\"language-plaintext highlighter-rouge\">2.0.1</code>, <code class=\"language-plaintext highlighter-rouge\">1.3.1</code>.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/04/Maven-%E4%B8%83-%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A%E6%8C%87%E5%8D%97/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 7) - Naming Conventions Guide'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-12-04T16:05:40+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 7) - Naming Conventions Guide</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 6) - Building Other Types of Projects and Sub-Projects",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/04/Maven-%E5%85%AD-%E6%9E%84%E5%BB%BA%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AD%90%E9%A1%B9%E7%9B%AE/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#building-other-types-of-projects\" id=\"markdown-toc-building-other-types-of-projects\">Building Other Types of Projects</a></li>\n  <li><a href=\"#building-multiple-projects-simultaneously\" id=\"markdown-toc-building-multiple-projects-simultaneously\">Building Multiple Projects Simultaneously</a></li>\n</ol>\n\n<h2 id=\"building-other-types-of-projects\">Building Other Types of Projects</h2>\n\n<p>The lifecycle is applicable to any project type. For instance, let’s create a simple web application in the base directory:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn archetype:generate <span class=\"se\">\\</span>\n    <span class=\"nt\">-DarchetypeGroupId</span><span class=\"o\">=</span>org.apache.maven.archetypes <span class=\"se\">\\</span>\n    <span class=\"nt\">-DarchetypeArtifactId</span><span class=\"o\">=</span>maven-archetype-webapp <span class=\"se\">\\</span>\n    <span class=\"nt\">-DgroupId</span><span class=\"o\">=</span>com.mycompany.app <span class=\"se\">\\</span>\n    <span class=\"nt\">-DartifactId</span><span class=\"o\">=</span>my-webapp\n</code></pre></div></div>\n\n<p>Note that these must be all in one line. This will create a directory named <code class=\"language-plaintext highlighter-rouge\">my-webapp</code>, containing the following project descriptor:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-webapp<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>war<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;finalName&gt;</span>my-webapp<span class=\"nt\">&lt;/finalName&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Notice the <code class=\"language-plaintext highlighter-rouge\">&lt;packaging&gt;</code> element—it tells Maven to build as a WAR. Navigate into the webapp project directory and try the command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn package\n</code></pre></div></div>\n\n<p>You’ll see <code class=\"language-plaintext highlighter-rouge\">target/my-webapp.war</code> has been built, and all the normal steps have been executed.</p>\n\n<h2 id=\"building-multiple-projects-simultaneously\">Building Multiple Projects Simultaneously</h2>\n\n<p>Maven has built-in support for dealing with multiple modules. In this section, we’ll demonstrate how to build both the WAR mentioned above and include the previous JAR in one go.</p>\n\n<p>First, we need to add a parent <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> file above the other two modules in the directory, so it should look like this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>+- pom.xml\n+- my-app\n| +- pom.xml\n| +- src\n|   +- main\n|     +- java\n+- my-webapp\n| +- pom.xml\n| +- src\n|   +- main\n|     +- webapp\n</code></pre></div></div>\n\n<p>The created POM file should contain the following:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>pom<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;modules&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>my-app<span class=\"nt\">&lt;/module&gt;</span>\n    <span class=\"nt\">&lt;module&gt;</span>my-webapp<span class=\"nt\">&lt;/module&gt;</span>\n  <span class=\"nt\">&lt;/modules&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>We need the dependency on the JAR in the web app, so add it to <code class=\"language-plaintext highlighter-rouge\">my-webapp/pom.xml</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n</code></pre></div></div>\n\n<p>Finally, in the other two <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> files in the subdirectories, add the following <code class=\"language-plaintext highlighter-rouge\">&lt;parent&gt;</code> element:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>app<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/parent&gt;</span>\n  ...\n</code></pre></div></div>\n\n<p>Now, execute the command from the parent directory:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn verify\n</code></pre></div></div>\n\n<p>You now have the WAR created in <code class=\"language-plaintext highlighter-rouge\">my-webapp/target/my-webapp.war</code>, including the JAR:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>jar tvf my-webapp/target/my-webapp-1.0-SNAPSHOT.war\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/\n 222 Fri Jun 24 10:59:54 EST 2005 META-INF/MANIFEST.MF\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/\n   0 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/\n3239 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/pom.xml\n   0 Fri Jun 24 10:59:56 EST 2005 WEB-INF/\n 215 Fri Jun 24 10:59:56 EST 2005 WEB-INF/web.xml\n 123 Fri Jun 24 10:59:56 EST 2005 META-INF/maven/com.mycompany.app/my-webapp/pom.properties\n  52 Fri Jun 24 10:59:56 EST 2005 index.jsp\n   0 Fri Jun 24 10:59:56 EST 2005 WEB-INF/lib/\n2713 Fri Jun 24 10:59:56 EST 2005 WEB-INF/lib/my-app-1.0-SNAPSHOT.jar\n</code></pre></div></div>\n\n<p>How does this work? First, the created parent POM (named <code class=\"language-plaintext highlighter-rouge\">app</code>) defines the <code class=\"language-plaintext highlighter-rouge\">pom</code> packaging and the list of modules. This tells Maven to operate on all projects in the project set, not just the current one (to override this behavior, you can use the <code class=\"language-plaintext highlighter-rouge\">--non-recursive</code> command-line option).</p>\n\n<p>Next, we tell the WAR that it needs the <code class=\"language-plaintext highlighter-rouge\">my-app</code> JAR. This is done for several reasons:</p>\n\n<ul>\n  <li>To make any code in the WAR (there’s no code in this example) available on the classpath.</li>\n  <li>To ensure the JAR is always compiled before the WAR.</li>\n  <li>To instruct the WAR plugin to include the JAR in its lib directory.</li>\n</ul>\n\n<p>You might have noticed that <code class=\"language-plaintext highlighter-rouge\">junit-4.11.jar</code> is a dependency but doesn’t end up in the WAR. This is because of the <code class=\"language-plaintext highlighter-rouge\">&lt;scope&gt;test&lt;/scope&gt;</code> element—it’s only for elements needed for testing, so it’s not included in the web app like the compile-time dependency <code class=\"language-plaintext highlighter-rouge\">my-app</code>.</p>\n\n<p>The final step is including the parent definition. This ensures that even if the projects are released separately from the parent project, the POM can still be found in the repository.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/04/Maven-%E5%85%AD-%E6%9E%84%E5%BB%BA%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AD%90%E9%A1%B9%E7%9B%AE/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 6) - Building Other Types of Projects and Sub-Projects'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2023-12-04T14:35:15+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 6) - Building Other Types of Projects and Sub-Projects</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 5) - External Dependencies, Remote Repositories, and Documentation",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/04/Maven-%E4%BA%94-%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%8F%8A%E6%96%87%E6%A1%A3/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#introducing-external-dependencies\" id=\"markdown-toc-introducing-external-dependencies\">Introducing External Dependencies</a></li>\n  <li><a href=\"#deploying-to-a-remote-repository\" id=\"markdown-toc-deploying-to-a-remote-repository\">Deploying to a Remote Repository</a></li>\n  <li><a href=\"#creating-documentation\" id=\"markdown-toc-creating-documentation\">Creating Documentation</a></li>\n</ol>\n\n<h2 id=\"introducing-external-dependencies\">Introducing External Dependencies</h2>\n\n<p>You may have noticed the <code class=\"language-plaintext highlighter-rouge\">dependencies</code> element in the POM we’ve been using as an example. Indeed, you’ve been using external dependencies all along, but here we’ll delve deeper into how they work. For a more comprehensive introduction, refer to our <a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\">Introduction to Dependency Mechanism</a>.</p>\n\n<p>The “dependencies” section in the pom.xml lists all the external dependencies required for building the project (whether it’s during compile time, testing, runtime, or other phases). For now, our project only depends on JUnit (I’ve removed all resource filtering for clarity):</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>For each external dependency, you need to define at least 4 elements: groupId, artifactId, version, and scope. groupId, artifactId, and version are the same as those given in the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> of the project building the dependency. The scope element indicates how the project uses that dependency, with values like <code class=\"language-plaintext highlighter-rouge\">compile</code>, <code class=\"language-plaintext highlighter-rouge\">test</code>, and <code class=\"language-plaintext highlighter-rouge\">runtime</code>. For more details on specifying contents for dependencies, refer to the <a href=\"https://maven.apache.org/ref/current/maven-model/maven.html\">Project Descriptor Reference</a>.</p>\n\n<p>With this information about dependencies, Maven can reference them during project builds. But where does Maven fetch dependencies from? Maven looks for all dependencies in the local repository (by default located at <code class=\"language-plaintext highlighter-rouge\">${user.home}/.m2/repository</code>). In the previous section, we installed the project’s artifact (<code class=\"language-plaintext highlighter-rouge\">my-app-1.0-SNAPSHOT.jar</code>) into the local repository. After installation, other projects only need to add dependency information in their pom.xml to reference that jar as a dependency:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-other-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  ...\n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    ...\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>But what about dependencies built elsewhere? How do they get into my local repository? Whenever a project references a dependency that isn’t in the local repository, Maven will download that dependency from a remote repository to the local repository. When you build your first project, you might notice Maven downloading a lot of things (these downloads are dependencies for various plugins used in building the project).</p>\n\n<p><strong>By default, Maven uses a remote repository located at https://repo.maven.apache.org/maven2/. You can also configure your own remote repository (perhaps a central repository for your company) to supplement or replace the default remote repository</strong>. For more about repositories, see the <a href=\"https://maven.apache.org/guides/introduction/introduction-to-repositories.html\">Introduction to Repositories</a>.</p>\n\n<p>Let’s add another dependency to the project. Suppose we added some logging to the code and need to add log4j as a dependency. First, we need to know the groupId, artifactId, and version of log4j. The corresponding directory on Maven Central is <code class=\"language-plaintext highlighter-rouge\">/maven2/log4j/log4j</code>. In that directory, there’s a file named <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code>. Here’s the content of log4j’s <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> file:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;metadata&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.1.3<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;versioning&gt;</span>\n    <span class=\"nt\">&lt;versions&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.1.3<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.4<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.5<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.6<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.7<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.8<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.9<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.12<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/versions&gt;</span>\n  <span class=\"nt\">&lt;/versioning&gt;</span>\n<span class=\"nt\">&lt;/metadata&gt;</span>\n</code></pre></div></div>\n\n<p>From this file, we can see the groupId we need is “log4j”, and the artifactId is “log4j”. We can see many different versions available.</p>\n\n<p>Now, let’s use just the latest version 1.2.12 (some <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> files might also specify the version of the current release; see <a href=\"https://maven.apache.org/ref/current/maven-repository-metadata/repository-metadata.html\">Repository Metadata Reference</a>).</p>\n\n<p>Next to the <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> file, we see directories corresponding to each version of the log4j library. Inside each directory, we find the actual jar file (like <code class=\"language-plaintext highlighter-rouge\">log4j-1.2.12.jar</code>) and a pom file (this is the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> for that dependency, specifying any other dependencies it might have and other information) and another <code class=\"language-plaintext highlighter-rouge\">maven-metadata.xml</code> file. Each file also has a corresponding md5 file containing the MD5 hash of these files. You can use it to verify the library or to find out the version of a particular library you might be using.</p>\n\n<p>Now that we have the necessary information, let’s add the dependency to pom.xml:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd\n\n/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>log4j<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.2.12<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>compile<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Now, when we compile the project (<code class=\"language-plaintext highlighter-rouge\">mvn compile</code>), we’ll see Maven downloading the log4j dependency for us.</p>\n\n<h2 id=\"deploying-to-a-remote-repository\">Deploying to a Remote Repository</h2>\n\n<p>To deploy jars to an external repository, you must configure the repository url in pom.xml and authentication information for connecting to the repository in settings.xml.</p>\n\n<p>Below is an example using scp and username/password authentication:</p>\n\n<p>POM.xml:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.codehaus.plexus<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>plexus-utils<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>1.0.4<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;filters&gt;</span>\n      <span class=\"nt\">&lt;filter&gt;</span>src/main/filters/filters.properties<span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/filters&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n  <span class=\"c\">&lt;!--\n   |\n   |\n   |\n   --&gt;</span>\n  <span class=\"nt\">&lt;distributionManagement&gt;</span>\n    <span class=\"nt\">&lt;repository&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>mycompany-repository<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;name&gt;</span>MyCompany Repository<span class=\"nt\">&lt;/name&gt;</span>\n      <span class=\"nt\">&lt;url&gt;</span>scp://repository.mycompany.com/repository/maven2<span class=\"nt\">&lt;/url&gt;</span>\n    <span class=\"nt\">&lt;/repository&gt;</span>\n  <span class=\"nt\">&lt;/distributionManagement&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>settings.xml:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;settings</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/SETTINGS/1.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  ...\n  <span class=\"nt\">&lt;servers&gt;</span>\n    <span class=\"nt\">&lt;server&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>mycompany-repository<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;username&gt;</span>jvanzyl<span class=\"nt\">&lt;/username&gt;</span>\n      <span class=\"c\">&lt;!-- Default value is ~/.ssh/id_dsa --&gt;</span>\n      <span class=\"nt\">&lt;privateKey&gt;</span>/path/to/identity<span class=\"nt\">&lt;/privateKey&gt;</span> (default is ~/.ssh/id_dsa)\n      <span class=\"nt\">&lt;passphrase&gt;</span>my_key_passphrase<span class=\"nt\">&lt;/passphrase&gt;</span>\n    <span class=\"nt\">&lt;/server&gt;</span>\n  <span class=\"nt\">&lt;/servers&gt;</span>\n  ...\n<span class=\"nt\">&lt;/settings&gt;</span>\n</code></pre></div></div>\n\n<p>Note that if you’re connecting to an openssh ssh server with the PasswordAuthentication parameter set to no in sshd_config, you’ll need to type the password every time you authenticate with username/password (although you can type the username and password into another ssh client). In this case, you might prefer using public key authentication.</p>\n\n<p>Be cautious when using passwords in settings.xml. For more information, see <a href=\"https://maven.apache.org/guides/mini/guide-encryption.html\">Password Encryption</a>.</p>\n\n<h2 id=\"creating-documentation\">Creating Documentation</h2>\n\n<p>To quickly start using Maven’s documentation system, you can use the archetype mechanism to generate a site for an existing project with the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn archetype:generate <span class=\"se\">\\</span>\n  <span class=\"nt\">-DarchetypeGroupId</span><span class=\"o\">=</span>org.apache.maven.archetypes <span class=\"se\">\\</span>\n  <span class=\"nt\">-DarchetypeArtifactId</span><span class=\"o\">=</span>maven-archetype-site <span class=\"se\">\\</span>\n  <span class=\"nt\">-DgroupId</span><span class=\"o\">=</span>com.mycompany.app <span class=\"se\">\\</span>\n  <span class=\"nt\">-DartifactId</span><span class=\"o\">=</span>my-app-site\n</code></pre></div></div>\n\n<p>Now head over to the <a href=\"https://maven.apache.org/guides/mini/guide-site.html\">Creating a Site Guide</a> to learn how to create documentation for your project.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/04/Maven-%E4%BA%94-%E5%A4%96%E9%83%A8%E4%BE%9D%E8%B5%96-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%8F%8A%E6%96%87%E6%A1%A3/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 5) - External Dependencies, Remote Repositories, and Documentation'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2023-12-04T13:23:42+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 5) - External Dependencies, Remote Repositories, and Documentation</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 4) - Adding and Filtering Resources",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/04/Maven-%E5%9B%9B-%E8%B5%84%E6%BA%90%E7%9A%84%E6%B7%BB%E5%8A%A0%E5%8F%8A%E8%BF%87%E6%BB%A4/",
      "date"     : "Dec 4, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#adding-resources-to-jar\" id=\"markdown-toc-adding-resources-to-jar\">Adding Resources to JAR</a></li>\n  <li><a href=\"#filtering-resource-files\" id=\"markdown-toc-filtering-resource-files\">Filtering Resource Files</a></li>\n</ol>\n\n<h2 id=\"adding-resources-to-jar\">Adding Resources to JAR</h2>\n\n<p>In Maven, another common use case that can be achieved without altering the POM above is to <strong>package resources within the JAR file</strong>. For this common task, Maven relies again on the <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">Standard Directory Layout</a>, meaning that by using the standard Maven convention, you simply need to place these <strong>resources within the standard directory structure to have them packaged into the JAR</strong>.</p>\n\n<p>As seen in the example below, we’ve added a directory <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/resources</code>, where we can place any resources we want to be packaged into the JAR. The simple rule Maven follows is this: any directory or file placed within the <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/resources</code> directory will be packaged into the JAR and will have the exact same structure starting from the bottom of the JAR.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my-app\n|-- pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> src\n    |-- main\n    |   |-- java\n    |   |   <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    |   |       <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n    |   |           <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n    |   |               <span class=\"sb\">`</span><span class=\"nt\">--</span> App.java\n    |   <span class=\"sb\">`</span><span class=\"nt\">--</span> resources\n    |       <span class=\"sb\">`</span><span class=\"nt\">--</span> META-INF\n    |           <span class=\"sb\">`</span><span class=\"nt\">--</span> application.properties\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> <span class=\"nb\">test</span>\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> java\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n                <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n                    <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n                        <span class=\"sb\">`</span><span class=\"nt\">--</span> AppTest.java\n</code></pre></div></div>\n\n<p>So, as you can see in our example, we have a <code class=\"language-plaintext highlighter-rouge\">META-INF</code> directory containing an <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file. If you unzip the JAR created by Maven and inspect it, you’ll see something like this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>|-- META-INF\n|   |-- MANIFEST.MF\n|   <span class=\"sb\">`</span><span class=\"nt\">--</span> application.properties\n|   <span class=\"sb\">`</span><span class=\"nt\">--</span> maven\n|       <span class=\"sb\">`</span><span class=\"nt\">--</span> com.mycompany.app\n|           <span class=\"sb\">`</span><span class=\"nt\">--</span> my-app\n|               |-- pom.properties\n|               <span class=\"sb\">`</span><span class=\"nt\">--</span> pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> App.class\n</code></pre></div></div>\n\n<p>As you can observe, the contents of <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/resources</code> can be found starting from the bottom of the JAR, and our <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file is located within the <code class=\"language-plaintext highlighter-rouge\">META-INF</code> directory. You’ll also notice other files such as <code class=\"language-plaintext highlighter-rouge\">META-INF/MANIFEST.MF</code>, and <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> and <code class=\"language-plaintext highlighter-rouge\">pom.properties</code>. These are standard configurations generated by Maven when building the JAR. You can choose to create your own manifest, but if you don’t, Maven will generate a default one. (<code class=\"language-plaintext highlighter-rouge\">pom.xml</code> and <code class=\"language-plaintext highlighter-rouge\">pom.properties</code> are packaged in the JAR, so every artifact generated by Maven is self-descriptive, and you can also use metadata in your own applications if needed. A simple use case might be retrieving the version of the application. Manipulating the POM files requires some Maven tools, but you can use standard Java APIs to use properties, as shown below:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Generated by Maven\n# Tue Oct 04 15:43:21 GMT-05:00 2005\n</span><span class=\"py\">version</span><span class=\"p\">=</span><span class=\"s\">1.0-SNAPSHOT</span>\n<span class=\"py\">groupId</span><span class=\"p\">=</span><span class=\"s\">com.mycompany.app</span>\n<span class=\"py\">artifactId</span><span class=\"p\">=</span><span class=\"s\">my-app</span>\n</code></pre></div></div>\n\n<p>To add resources to the classpath for unit tests, follow the same pattern as adding resources to the JAR, except the directory where resources are placed is <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/test/resources</code>. At this point, you’ll have a project directory structure like this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my-app\n|-- pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> src\n    |-- main\n    |   |-- java\n    |   |   <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    |   |       <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n    |   |           <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n    |   |               <span class=\"sb\">`</span><span class=\"nt\">--</span> App.java\n    |   <span class=\"sb\">`</span><span class=\"nt\">--</span> resources\n    |       <span class=\"sb\">`</span><span class=\"nt\">--</span> META-INF\n    |           |-- application.properties\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> <span class=\"nb\">test</span>\n        |-- java\n        |   <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n        |       <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n        |           <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n        |               <span class=\"sb\">`</span><span class=\"nt\">--</span> AppTest.java\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> resources\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> test.properties\n</code></pre></div></div>\n\n<p>In your unit tests, you can access resources required for testing using a simple code snippet like this:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// ...</span>\n<span class=\"c1\">// Retrieve the resource</span>\n<span class=\"nc\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"n\">getClass</span><span class=\"o\">().</span><span class=\"na\">getResourceAsStream</span><span class=\"o\">(</span><span class=\"s\">\"/test.properties\"</span><span class=\"o\">);</span>\n<span class=\"c1\">// Do something with the resource</span>\n<span class=\"c1\">// ...</span>\n</code></pre></div></div>\n\n<h2 id=\"filtering-resource-files\">Filtering Resource Files</h2>\n\n<p>Sometimes, resource files need to contain a <strong>value that can only be provided during the build</strong>.</p>\n\n<p>To achieve this in Maven, you can use the <code class=\"language-plaintext highlighter-rouge\">${&lt;property name&gt;}</code> syntax to reference a property containing that value within the resource file. This property can be defined in the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>, <code class=\"language-plaintext highlighter-rouge\">settings.xml</code>, an external properties file, or system properties.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>We must add the previously non-existent <code class=\"language-plaintext highlighter-rouge\">build</code>, <code class=\"language-plaintext highlighter-rouge\">resources</code>, and <code class=\"language-plaintext highlighter-rouge\">resource</code> elements. Additionally, we must explicitly declare that resources are located in the <code class=\"language-plaintext highlighter-rouge\">src/main/resources</code> directory. All this information was provided as default values before, but since the default value of <code class=\"language-plaintext highlighter-rouge\">filtering</code> is false, we need to add it to the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> to override this default value and set <code class=\"language-plaintext highlighter-rouge\">filtering</code> to true.</p>\n\n<p>To reference properties defined in <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>, the property name uses the XML element name where the defined value is, with <strong><code class=\"language-plaintext highlighter-rouge\">pom</code> as an alias for the project (root) element</strong>. Therefore, <code class=\"language-plaintext highlighter-rouge\">${project.name}</code> refers to the project’s name, <code class=\"language-plaintext highlighter-rouge\">${project.version}</code> refers to the project’s version, <code class=\"language-plaintext highlighter-rouge\">${project.build.finalName}</code> refers to the final name of the file created during the project packaging, and so on. Note that some</p>\n\n<p>elements in the POM have default values, so they can be used here without being explicitly defined in <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>. <strong>Similarly, values in the user’s <code class=\"language-plaintext highlighter-rouge\">settings.xml</code> can be referenced using property names starting with <code class=\"language-plaintext highlighter-rouge\">settings</code></strong> (for example, <code class=\"language-plaintext highlighter-rouge\">${settings.localRepository}</code> refers to the path of the user’s local repository).</p>\n\n<p>Continuing our example, let’s add a few properties in the <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file (located in the <code class=\"language-plaintext highlighter-rouge\">src/main/resources</code> directory) that will be provided when filtering resources:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">application.name</span><span class=\"p\">=</span><span class=\"s\">${project.name}</span>\n<span class=\"py\">application.version</span><span class=\"p\">=</span><span class=\"s\">${project.version}</span>\n</code></pre></div></div>\n\n<p>With these in place, you can execute the following command (<code class=\"language-plaintext highlighter-rouge\">process-resources</code> is a build lifecycle phase during which resources are copied and filtered):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn process-resources\n</code></pre></div></div>\n\n<p>And the <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file under <code class=\"language-plaintext highlighter-rouge\">target/classes</code> (which will eventually be placed in the JAR) will look like this:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">application.name</span><span class=\"p\">=</span><span class=\"s\">Maven Quick Start Archetype</span>\n<span class=\"py\">application.version</span><span class=\"p\">=</span><span class=\"s\">1.0-SNAPSHOT</span>\n</code></pre></div></div>\n\n<p>To reference properties defined in an external file, simply add a reference to that external file in the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>. First, let’s create an external properties file and name it <code class=\"language-plaintext highlighter-rouge\">src/main/filters/filter.properties</code>:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># filter.properties\n</span><span class=\"py\">my.filter.value</span><span class=\"p\">=</span><span class=\"s\">hello!</span>\n</code></pre></div></div>\n\n<p>Next, we’ll add a reference to this new file in <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;filters&gt;</span>\n      <span class=\"nt\">&lt;filter&gt;</span>src/main/filters/filter.properties<span class=\"nt\">&lt;/filter&gt;</span>\n    <span class=\"nt\">&lt;/filters&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Then, we can add a reference to this property in the <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">application.name</span><span class=\"p\">=</span><span class=\"s\">${project.name}</span>\n<span class=\"py\">application.version</span><span class=\"p\">=</span><span class=\"s\">${project.version}</span>\n<span class=\"py\">message</span><span class=\"p\">=</span><span class=\"s\">${my.filter.value}</span>\n</code></pre></div></div>\n\n<p>The next time you execute the <code class=\"language-plaintext highlighter-rouge\">mvn process-resources</code> command, the new property value will be added to <code class=\"language-plaintext highlighter-rouge\">application.properties</code>. If you don’t define the <code class=\"language-plaintext highlighter-rouge\">my.filter.value</code> property in the external file, you can also define it in the properties section of <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>, achieving the same effect (without needing to reference <code class=\"language-plaintext highlighter-rouge\">src/main/filters/filter.properties</code>):</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;packaging&gt;</span>jar<span class=\"nt\">&lt;/packaging&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://maven.apache.org<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;resources&gt;</span>\n      <span class=\"nt\">&lt;resource&gt;</span>\n        <span class=\"nt\">&lt;directory&gt;</span>src/main/resources<span class=\"nt\">&lt;/directory&gt;</span>\n        <span class=\"nt\">&lt;filtering&gt;</span>true<span class=\"nt\">&lt;/filtering&gt;</span>\n      <span class=\"nt\">&lt;/resource&gt;</span>\n    <span class=\"nt\">&lt;/resources&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n \n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;my.filter.value&gt;</span>hello<span class=\"nt\">&lt;/my.filter.value&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>Filtering resources can also fetch values from system properties; these properties can be Java built-in system properties (like <code class=\"language-plaintext highlighter-rouge\">java.version</code> or <code class=\"language-plaintext highlighter-rouge\">user.home</code>) or properties defined using standard Java <code class=\"language-plaintext highlighter-rouge\">-D</code> parameters on the command line. As a continued example, let’s change the <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file to look like this:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># application.properties\n</span><span class=\"py\">java.version</span><span class=\"p\">=</span><span class=\"s\">${java.version}</span>\n<span class=\"py\">command.line.prop</span><span class=\"p\">=</span><span class=\"s\">${command.line.prop}</span>\n</code></pre></div></div>\n\n<p>Now, when you execute the following command (note the definition of the <code class=\"language-plaintext highlighter-rouge\">command.line.prop</code> property in the command line), the <code class=\"language-plaintext highlighter-rouge\">application.properties</code> file will contain the values from system properties:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn process-resources <span class=\"s2\">\"-Dcommand.line.prop=hello again\"</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/04/Maven-%E5%9B%9B-%E8%B5%84%E6%BA%90%E7%9A%84%E6%B7%BB%E5%8A%A0%E5%8F%8A%E8%BF%87%E6%BB%A4/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 4) - Adding and Filtering Resources'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2023-12-04T12:25:23+11:00'>Dec 4, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 4) - Adding and Filtering Resources</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 3) - Snapshot Versions",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/03/Maven-%E4%B8%89-%E5%BF%AB%E7%85%A7%E7%89%88%E6%9C%AC/",
      "date"     : "Dec 3, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#snapshot-versions\" id=\"markdown-toc-snapshot-versions\">Snapshot Versions</a></li>\n</ol>\n\n<h2 id=\"snapshot-versions\">Snapshot Versions</h2>\n\n<p>It’s important to note that the <strong>version</strong> tag in the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> files shown below carries the suffix: <code class=\"language-plaintext highlighter-rouge\">-SNAPSHOT</code>.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span>\n  <span class=\"err\">...</span>\n  <span class=\"err\">&lt;groupId</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  ...\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;name&gt;</span>Maven Quick Start Archetype<span class=\"nt\">&lt;/name&gt;</span>\n  ...\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">SNAPSHOT</code> signifies that the value represents the <strong>“latest” code</strong> on the development branch, which isn’t guaranteed to be stable or static. In contrast, code in a “release” version (any version value without the <code class=\"language-plaintext highlighter-rouge\">SNAPSHOT</code> suffix) remains immutable.</p>\n\n<p>In other words, snapshot versions are the “in-progress” versions before the final “release” version. These snapshots are considered “older” than their release counterparts.</p>\n\n<p>During the <a href=\"https://maven.apache.org/plugins/maven-release-plugin/\">release process</a>, a version like <strong>x.y-SNAPSHOT</strong> transitions to <strong>x.y</strong>. Additionally, the release process increments the development version to <strong>x.(y+1)-SNAPSHOT</strong>. For example, version <strong>1.0-SNAPSHOT</strong> would be released as version <strong>1.0</strong>, while the new development version becomes <strong>1.1-SNAPSHOT</strong>.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/03/Maven-%E4%B8%89-%E5%BF%AB%E7%85%A7%E7%89%88%E6%9C%AC/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 3) - Snapshot Versions'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-12-03T14:40:34+11:00'>Dec 3, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 3) - Snapshot Versions</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 2) - Your First Maven Project",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/03/Maven-%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AAMaven%E9%A1%B9%E7%9B%AE/",
      "date"     : "Dec 3, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#your-first-maven-project\" id=\"markdown-toc-your-first-maven-project\">Your First Maven Project</a></li>\n  <li><a href=\"#compile-compiling-application-source\" id=\"markdown-toc-compile-compiling-application-source\">compile: Compiling Application Source</a></li>\n  <li><a href=\"#test-compiling-test-source-and-running-unit-tests\" id=\"markdown-toc-test-compiling-test-source-and-running-unit-tests\">test: Compiling Test Source and Running Unit Tests</a></li>\n  <li><a href=\"#package-and-install\" id=\"markdown-toc-package-and-install\">package and install</a></li>\n  <li><a href=\"#site-and-clean\" id=\"markdown-toc-site-and-clean\">site and clean</a></li>\n</ol>\n\n<h2 id=\"your-first-maven-project\">Your First Maven Project</h2>\n\n<p>Let’s dive right into creating your first Maven project! To create our first Maven project, we’ll employ Maven’s archetype mechanism. Archetypes are defined as <strong>original patterns or models from which all other similar things are made</strong>. In Maven, an <strong>archetype is a project template</strong> that, combined with some user input, generates a working Maven project tailored to the user’s needs. We’ll show you how the archetype mechanism works, but if you want to delve deeper into archetypes, check out our <a href=\"https://maven.apache.org/guides/introduction/introduction-to-archetypes.html\">Introduction to Archetypes</a>.</p>\n\n<p>Let’s kickstart your first project! To create the simplest Maven project, execute the following command from the command line:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nt\">-B</span> archetype:generate <span class=\"nt\">-DgroupId</span><span class=\"o\">=</span>com.mycompany.app <span class=\"nt\">-DartifactId</span><span class=\"o\">=</span>my-app <span class=\"nt\">-DarchetypeArtifactId</span><span class=\"o\">=</span>maven-archetype-quickstart <span class=\"nt\">-DarchetypeVersion</span><span class=\"o\">=</span>1.4\n</code></pre></div></div>\n\n<p>After executing this command, you’ll notice some action taking place. Firstly, you’ll observe a directory named <code class=\"language-plaintext highlighter-rouge\">my-app</code> being created, containing a file named <code class=\"language-plaintext highlighter-rouge\">pom.xml</code>, which should look like this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n  <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n \n  <span class=\"nt\">&lt;groupId&gt;</span>com.mycompany.app<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>my-app<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n \n  <span class=\"nt\">&lt;name&gt;</span>my-app<span class=\"nt\">&lt;/name&gt;</span>\n  <span class=\"c\">&lt;!-- FIXME change it to the project's website --&gt;</span>\n  <span class=\"nt\">&lt;url&gt;</span>http://www.example.com<span class=\"nt\">&lt;/url&gt;</span>\n \n  <span class=\"nt\">&lt;properties&gt;</span>\n    <span class=\"nt\">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class=\"nt\">&lt;/project.build.sourceEncoding&gt;</span>\n    <span class=\"nt\">&lt;maven.compiler.source&gt;</span>1.7<span class=\"nt\">&lt;/maven.compiler.source&gt;</span>\n    <span class=\"nt\">&lt;maven.compiler.target&gt;</span>1.7<span class=\"nt\">&lt;/maven.compiler.target&gt;</span>\n  <span class=\"nt\">&lt;/properties&gt;</span>\n \n  <span class=\"nt\">&lt;dependencies&gt;</span>\n    <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>junit<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>junit<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>4.11<span class=\"nt\">&lt;/version&gt;</span>\n      <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n    <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"nt\">&lt;/dependencies&gt;</span>\n \n  <span class=\"nt\">&lt;build&gt;</span>\n    <span class=\"nt\">&lt;pluginManagement&gt;</span><span class=\"c\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span>\n       ... lots of helpful plugins\n    <span class=\"nt\">&lt;/pluginManagement&gt;</span>\n  <span class=\"nt\">&lt;/build&gt;</span>\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> contains the Project Object Model (POM) for the project. <strong>The POM is the fundamental working unit in Maven</strong>. Remember this, as <strong>Maven is fundamentally project-centric, and everything revolves around the concept of a project</strong>. In essence, the POM contains every crucial piece of information about your project and is essentially a one-stop shop for finding anything related to your project. Understanding the POM is crucial, and new users are encouraged to refer to the <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html\">POM Introduction</a>.</p>\n\n<p>This is a very basic POM, but it still showcases key elements present in every POM, so let’s go through them one by one to acquaint you with the essentials of POM:</p>\n\n<ul>\n  <li><strong>project</strong>: This is the top-level element in all Maven <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> files.</li>\n  <li><strong>modelVersion</strong>: This element indicates the version of the object model that the POM is using. <strong>Changes to the model itself are rare</strong>, but when Maven developers deem it necessary to alter the model, it’s mandatory for ensuring stability.</li>\n  <li><strong>groupId</strong>: This element indicates the unique identifier of the organization or group that created the project. The groupId is one of the key identifiers for a project, usually based on the organization’s fully qualified domain name. For example, <code class=\"language-plaintext highlighter-rouge\">org.apache.maven.plugins</code> specifies the groupId for all Maven plugins.</li>\n  <li><strong>artifactId</strong>: This element indicates <strong>the unique base name of the primary artifact generated by this project</strong>. The primary artifact of a project is typically a JAR file. Secondary artifacts like source bundles also use the artifactId as part of their final name. The typical format for Maven-generated artifacts is &lt;artifactId&gt;-&lt;version&gt;.&lt;extension&gt; (e.g., <code class=\"language-plaintext highlighter-rouge\">myapp-1.0.jar</code>).</li>\n  <li><strong>version</strong>: This element indicates <strong>the version of the artifact generated by the project</strong>. Maven assists you significantly in version management, and you often see the <code class=\"language-plaintext highlighter-rouge\">SNAPSHOT</code> indicator in versions, denoting that <strong>the project is in a developmental state</strong>. <a href=\"https://maven.apache.org/guides/getting-started/index.html#what-is-a-snapshot-version\">We’ll discuss the use of snapshots</a> and how they further work in this guide.</li>\n  <li><strong>name</strong>: This element indicates <strong>the display name for the project</strong>. This is frequently used in Maven-generated documentation.</li>\n  <li><strong>url</strong>: This element indicates <strong>the location where the project’s site can be found</strong>. This is frequently used in Maven-generated documentation.</li>\n  <li><strong>properties</strong>: This element contains <strong>placeholders for values accessible throughout the POM</strong>.</li>\n  <li><strong>dependencies</strong>: This element’s children list the <a href=\"https://maven.apache.org/pom.html#dependencies\">dependencies</a> of the POM. The cornerstone of the POM.</li>\n  <li><strong>build</strong>: This element deals with things like <strong>declaring the project’s directory structure and managing plugins</strong>.</li>\n</ul>\n\n<p>For a complete reference of elements you can use in the POM, refer to our <a href=\"https://maven.apache.org/ref/current/maven-model/maven.html\">POM Reference</a>. Now let’s get back to our project at hand.</p>\n\n<p>Upon generating the prototype for the first project, you’ll also notice the following directory structure created:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my-app\n|-- pom.xml\n<span class=\"sb\">`</span><span class=\"nt\">--</span> src\n    |-- main\n    |   <span class=\"sb\">`</span><span class=\"nt\">--</span> java\n    |       <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n    |           <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n    |               <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n    |                   <span class=\"sb\">`</span><span class=\"nt\">--</span> App.java\n    <span class=\"sb\">`</span><span class=\"nt\">--</span> <span class=\"nb\">test</span>\n        <span class=\"sb\">`</span><span class=\"nt\">--</span> java\n            <span class=\"sb\">`</span><span class=\"nt\">--</span> com\n                <span class=\"sb\">`</span><span class=\"nt\">--</span> mycompany\n                    <span class=\"sb\">`</span><span class=\"nt\">--</span> app\n                        <span class=\"sb\">`</span><span class=\"nt\">--</span> AppTest.java\n</code></pre></div></div>\n\n<p>As you can see, the project created from the archetype has a POM, a tree for your application source, and another for your test source. This is the standard layout for a Maven project (application source resides in <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/main/java</code>, and test source resides in <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/src/test/java</code>, where <code class=\"language-plaintext highlighter-rouge\">${project.basedir}</code> denotes the directory containing the `pom</p>\n\n<p>.xml` file).</p>\n\n<p>This is the directory structure we recommend using if you’re manually creating a Maven project. It’s a Maven convention, and to learn more, you can read our <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">Introduction to the Standard Directory Layout</a>.</p>\n\n<p>Now that we have the POM, application source, and test source, let’s see how to compile them.</p>\n\n<h2 id=\"compile-compiling-application-source\">compile: Compiling Application Source</h2>\n\n<p>Navigate to the directory containing <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> and execute the following command to compile the application source:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn compile\n</code></pre></div></div>\n\n<p>After executing this command, you’ll see the following output:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>INFO] Scanning <span class=\"k\">for </span>projects...\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">----------------------</span>&lt; com.mycompany.app:my-app <span class=\"o\">&gt;</span><span class=\"nt\">----------------------</span>\n<span class=\"o\">[</span>INFO] Building my-app 1.0-SNAPSHOT\n<span class=\"o\">[</span>INFO] <span class=\"nt\">--------------------------------</span><span class=\"o\">[</span> jar <span class=\"o\">]</span><span class=\"nt\">---------------------------------</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-resources-plugin:3.0.2:resources <span class=\"o\">(</span>default-resources<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Using <span class=\"s1\">'UTF-8'</span> encoding to copy filtered resources.\n<span class=\"o\">[</span>INFO] skip non existing resourceDirectory &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/src/main/resources\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-compiler-plugin:3.8.0:compile <span class=\"o\">(</span>default-compile<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Changes detected - recompiling the module!\n<span class=\"o\">[</span>INFO] Compiling 1 <span class=\"nb\">source </span>file to &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/target/classes\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] BUILD SUCCESS\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Total <span class=\"nb\">time</span>:  0.899 s\n<span class=\"o\">[</span>INFO] Finished at: 2020-07-12T11:31:54+01:00\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n</code></pre></div></div>\n\n<p>Upon compiling for the first time (or any command for that matter), Maven <strong>will need to download all plugins and dependencies necessary to fulfill that command</strong>. From a fresh Maven installation, this might take quite some time (in the output above, it took almost 4 minutes). Upon subsequent executions of the command, Maven now possesses what it needs, so it doesn’t need to download anything new, making the command execution faster.</p>\n\n<p>From the output, you can see that the compiled classes are placed in <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/target/classes</code>, which is another standard convention used by Maven.</p>\n\n<h2 id=\"test-compiling-test-source-and-running-unit-tests\">test: Compiling Test Source and Running Unit Tests</h2>\n\n<p>Now that you’ve successfully compiled the application’s source code, and now that you have some unit tests you want to compile and execute (because every programmer always writes and runs their unit tests), execute the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn <span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<p>After executing this command, you should see the following output:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>......\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO]  T E S T S\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Running com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - <span class=\"k\">in </span>com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Results:\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] BUILD SUCCESS\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Total <span class=\"nb\">time</span>:  1.881 s\n<span class=\"o\">[</span>INFO] Finished at: 2020-07-12T12:00:33+01:00\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n</code></pre></div></div>\n\n<p>Some points to note about the output:</p>\n\n<ul>\n  <li>Maven this time downloaded more dependencies. These are dependencies and plugins necessary for executing tests (it already had dependencies needed for compilation and didn’t download them again).</li>\n  <li>Before compiling and executing tests, Maven compiles the main code (all these classes are up to date since we haven’t changed anything since the last compilation).</li>\n</ul>\n\n<p>If you only want to compile the test source (but not execute tests), you can execute the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn test-compile\n</code></pre></div></div>\n\n<p>Now you can compile the application source code, compile tests, and execute tests.</p>\n\n<p><strong>Note that the Surefire plugin (for executing tests) looks for tests contained within files with specific naming conventions</strong>. By default, included tests are:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/*Test.java</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/Test*.java</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/*TestCase.java</code></li>\n</ul>\n\n<p>Default exclusions are:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/Abstract*Test.java</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">**/Abstract*TestCase.java</code></li>\n</ul>\n\n<h2 id=\"package-and-install\">package and install</h2>\n\n<p>Creating a JAR file is as simple as executing the following command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn package\n</code></pre></div></div>\n\n<p>Now, you can check the <code class=\"language-plaintext highlighter-rouge\">${project.basedir}/target</code> directory, where you’ll find the generated JAR file.</p>\n\n<p>However, we also need to <strong>install the generated artifact (JAR file) in the local repository</strong> (<code class=\"language-plaintext highlighter-rouge\">${user.home}/.m2/repository</code> is the default location). For more information on repositories, you can refer to our <a href=\"https://maven.apache.org/guides/introduction/introduction-to-repositories.html\">Repository Introduction</a>, but let’s proceed to install our artifact! To do so, execute the following command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mvn install\n</code></pre></div></div>\n\n<p>After executing this command, you should see the following output:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>INFO] Scanning <span class=\"k\">for </span>projects...\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">----------------------</span>&lt; com.mycompany.app:my-app <span class=\"o\">&gt;</span><span class=\"nt\">----------------------</span>\n<span class=\"o\">[</span>INFO] Building my-app 1.0-SNAPSHOT\n<span class=\"o\">[</span>INFO] <span class=\"nt\">--------------------------------</span><span class=\"o\">[</span> jar <span class=\"o\">]</span><span class=\"nt\">---------------------------------</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-resources-plugin:3.0.2:resources <span class=\"o\">(</span>default-resources<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n...\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-compiler-plugin:3.8.0:compile <span class=\"o\">(</span>default-compile<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Nothing to compile - all classes are up to <span class=\"nb\">date</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-resources-plugin:3.0.2:testResources <span class=\"o\">(</span>default-testResources<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n...\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-compiler-plugin:3.8.0:testCompile <span class=\"o\">(</span>default-testCompile<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Nothing to compile - all classes are up to <span class=\"nb\">date</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-surefire-plugin:2.22.1:test <span class=\"o\">(</span>default-test<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO]  T E S T S\n<span class=\"o\">[</span>INFO] <span class=\"nt\">-------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Running com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - <span class=\"k\">in </span>com.mycompany.app.AppTest\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Results:\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-jar-plugin:3.0.2:jar <span class=\"o\">(</span>default-jar<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Building jar: &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/target/my-app-1.0-SNAPSHOT.jar\n<span class=\"o\">[</span>INFO]\n<span class=\"o\">[</span>INFO] <span class=\"nt\">---</span> maven-install-plugin:2.5.2:install <span class=\"o\">(</span>default-install<span class=\"o\">)</span> @ my-app <span class=\"nt\">---</span>\n<span class=\"o\">[</span>INFO] Installing &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/target/my-app-1.0-SNAPSHOT.jar to &lt;local-repository&gt;/com/mycompany/app\n\n/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.jar\n<span class=\"o\">[</span>INFO] Installing &lt;<span class=\"nb\">dir</span><span class=\"o\">&gt;</span>/my-app/pom.xml to &lt;local-repository&gt;/com/mycompany/app/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.pom\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] BUILD SUCCESS\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n<span class=\"o\">[</span>INFO] Total <span class=\"nb\">time</span>:  1.678 s\n<span class=\"o\">[</span>INFO] Finished at: 2020-07-12T12:04:45+01:00\n<span class=\"o\">[</span>INFO] <span class=\"nt\">------------------------------------------------------------------------</span>\n</code></pre></div></div>\n\n<p>You have now completed the process of setting up, building, testing, packaging, and installing a typical Maven project. This is likely what the majority of projects will use Maven for, and if you’ve noticed, everything you’ve been able to do so far is driven by an 18-line file (the project’s model or POM).</p>\n\n<h2 id=\"site-and-clean\">site and clean</h2>\n\n<p>Maven offers more functionalities without needing any additions to the current POM.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mvn site</code> is one of Maven’s highly praised functionalities. With no extra work, this POM has enough information to generate a website for your project! You’ll likely want to customize your Maven site, but if you’re in a hurry, executing that command will provide basic information about your project.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mvn clean</code> removes the <code class=\"language-plaintext highlighter-rouge\">target</code> directory containing all the build data, leaving it clean.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/03/Maven-%E4%BA%8C-%E7%AC%AC%E4%B8%80%E4%B8%AAMaven%E9%A1%B9%E7%9B%AE/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 2) - Your First Maven Project'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>11 min read <time class='article__date' datetime='2023-12-03T14:05:54+11:00'>Dec 3, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 2) - Your First Maven Project</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Maven (Part 1) - The Philosophy of Maven",
      "category" : "Maven",
      "tags"     : "Maven",
      "url"      : "/maven/2023/12/03/Maven-%E4%B8%80-Maven%E7%9A%84%E5%93%B2%E5%AD%A6/",
      "date"     : "Dec 3, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#introduction\" id=\"markdown-toc-introduction\">Introduction</a></li>\n  <li><a href=\"#the-philosophy-of-maven\" id=\"markdown-toc-the-philosophy-of-maven\">The Philosophy of Maven</a></li>\n  <li><a href=\"#maven-overview\" id=\"markdown-toc-maven-overview\">Maven Overview</a></li>\n  <li><a href=\"#goals-of-maven\" id=\"markdown-toc-goals-of-maven\">Goals of Maven</a>    <ol>\n      <li><a href=\"#simplifying-the-build-process\" id=\"markdown-toc-simplifying-the-build-process\">Simplifying the build process</a></li>\n      <li><a href=\"#providing-a-uniform-build-system\" id=\"markdown-toc-providing-a-uniform-build-system\">Providing a uniform build system</a></li>\n      <li><a href=\"#offering-quality-project-information\" id=\"markdown-toc-offering-quality-project-information\">Offering quality project information</a></li>\n      <li><a href=\"#encouraging-best-practice-development\" id=\"markdown-toc-encouraging-best-practice-development\">Encouraging best practice development</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#what-maven-isnt\" id=\"markdown-toc-what-maven-isnt\">What Maven Isn’t</a></li>\n</ol>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>As a commonly used Java build tool, I’ve used Maven several times without delving into its intricacies. Recently, due to work requirements, I’ve had the opportunity to reacquaint myself with Maven. This time, I’ve primarily relied on the official documentation for learning, and the main content of this blog is a translation of some of the more important parts of the official documentation.</p>\n\n<h2 id=\"the-philosophy-of-maven\">The Philosophy of Maven</h2>\n\n<p><img src=\"https://maven.apache.org/images/maven-logo-black-on-white.png\" alt=\"logo\" /></p>\n\n<p>Maven is often thought of by many as a build tool. Many who first encounter Maven are familiar with Ant, so it’s a natural association, but Maven is not just a build tool; nor is it merely a replacement for Ant. Maven is a completely different creature from Ant. While Ant is just a toolbox, <strong>Maven is an application of patterns</strong> to achieve an infrastructure with characteristics of <strong>visibility, reusability, maintainability, and comprehensibility</strong>.</p>\n\n<p>Without these characteristics, it’s impossible for multiple people to efficiently collaborate on a project. Without visibility, one person can’t know what another person has already accomplished, thus useful code might not be reused. When code isn’t reused, it’s challenging to create maintainable systems. When everyone is constantly trying to figure out all the different parts that make up your project, almost no one can understand the project as a whole. As a result, you end up with silos, a decline in shared knowledge, and a corresponding degree of frustration among team members. It’s a natural consequence when processes operate differently for each person.</p>\n\n<p>Maven’s birth came from a very practical desire: to have multiple Apache projects working in the same way. This would allow developers to move freely between these projects, understanding all projects by understanding the workings of one. If developers spend time understanding how one project is built, then when they move to the next project, they don’t have to go through that process again. The same idea extends to testing, generating documentation, generating metrics and reports, testing, and deployment. All projects have enough common features, and Maven attempts to leverage an understanding of these features in its general approach to project management. At a very high level, all projects need to build, test, package, document, and deploy. Of course, there are infinite variations within each of these steps, but this variation still occurs within a well-defined scope, and Maven attempts to present this path in a clear manner to everyone. The simplest way to have a clear path is to provide a set of patterns that can be shared by anyone involved in the project.</p>\n\n<h2 id=\"maven-overview\">Maven Overview</h2>\n\n<p>Maven is a <a href=\"https://en.wikipedia.org/wiki/Maven\">Yiddish word</a> meaning <em>accumulator of knowledge</em> and was originally created to simplify the build process of the Jakarta Turbine project. There were several projects, each with their own Ant build files, but with slight differences.</p>\n\n<p>We needed a standard way to build projects: a clear definition of project structure, a simple method to publish project information, and support for sharing JARs across multiple projects.</p>\n\n<p>Maven is now a tool that can be used to build and manage any Java-based project. Maven aims to make the daily work of Java developers easier and aids in understanding any Java-based project.</p>\n\n<h2 id=\"goals-of-maven\">Goals of Maven</h2>\n\n<p>The primary goal of Maven is to enable developers to understand the complete state of their development work in the <strong>shortest possible time</strong>. To achieve this goal, Maven addresses several areas that need attention:</p>\n\n<ul>\n  <li>Simplifying the build process</li>\n  <li>Providing a uniform build system</li>\n  <li>Offering quality project information</li>\n  <li>Encouraging better development practices</li>\n</ul>\n\n<h3 id=\"simplifying-the-build-process\">Simplifying the build process</h3>\n\n<p>While using Maven doesn’t eliminate the need to understand the underlying mechanisms, it does shield developers from needing to understand many details.</p>\n\n<h3 id=\"providing-a-uniform-build-system\">Providing a uniform build system</h3>\n\n<p>Maven uses its <strong>Project Object Model (POM)</strong> and a set of <strong>plugins</strong> to build projects. Once familiar with one Maven project, you know how all Maven projects are built. This saves time when browsing through many projects.</p>\n\n<h3 id=\"offering-quality-project-information\">Offering quality project information</h3>\n\n<p>Maven provides useful project information, partly derived from the POM and <strong>partly generated from the project’s sources</strong>. For example, Maven can provide:</p>\n\n<ul>\n  <li><strong>Change logs</strong> created directly from source code management</li>\n  <li><strong>Cross-reference sources</strong></li>\n  <li>Mailing lists managed by the project</li>\n  <li><strong>Dependencies</strong> used by the project</li>\n  <li>Unit test reports including coverage</li>\n</ul>\n\n<p>Third-party code analysis products also provide Maven plugins to add their reports to the standard information provided by Maven.</p>\n\n<h3 id=\"encouraging-best-practice-development\">Encouraging best practice development</h3>\n\n<p>Maven aims to collect current best practices in development and gently guide projects in that direction.</p>\n\n<p>Take unit testing, for example. The specification, execution, and reporting of unit tests are part of the normal build cycle with Maven. Current best practices for unit testing include:</p>\n\n<ul>\n  <li>Keeping test source code in a separate but parallel source tree</li>\n  <li>Using test case naming conventions to locate and execute tests</li>\n  <li>Letting test cases set up their environment rather than customizing build setup</li>\n</ul>\n\n<p>Maven also assists with project workflows, such as release and issue management.</p>\n\n<p>Maven also recommends a certain project directory layout. Once you understand the layout, you can easily work with other Maven projects. Due to historical reasons, some projects might not fit into this structure. While Maven is designed to be flexible to accommodate different project needs, it cannot satisfy all needs without affecting its goals.</p>\n\n<p>If your project has an unusual build structure that can’t be reorganized, you may have to forego some features of Maven or abandon its use altogether.</p>\n\n<h2 id=\"what-maven-isnt\">What Maven Isn’t</h2>\n\n<p>You may have heard some of the following about Maven:</p>\n\n<ul>\n  <li>Maven is a site and documentation tool.</li>\n  <li>Maven extends Ant to allow you to download dependencies.</li>\n  <li>Maven is a set of reusable Ant scriptlets.</li>\n</ul>\n\n<p>While Maven can do these things, as you can read in the above “What is Maven?” section, these aren’t Maven’s only functions, and its goals are quite different.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/maven/2023/12/03/Maven-%E4%B8%80-Maven%E7%9A%84%E5%93%B2%E5%AD%A6/'> <img src='/images/covers/maven-cover.jpg' alt='Maven (Part 1) - The Philosophy of Maven'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2023-12-03T11:40:06+11:00'>Dec 3, 2023</time> </span> </div><h2 class='article__title'>Maven (Part 1) - The Philosophy of Maven</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Maven' class='article__tag'>Maven</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 7) - Spring Boot Integration and Distributed Deployment",
      "category" : "Apollo",
      "tags"     : "configuration, configuration center, and Apollo",
      "url"      : "/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%83-Springboot%E9%9B%86%E6%88%90%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/",
      "date"     : "Nov 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#integrating-apollo-with-spring-boot\" id=\"markdown-toc-integrating-apollo-with-spring-boot\">Integrating Apollo with Spring Boot</a></li>\n  <li><a href=\"#distributed-deployment-guide\" id=\"markdown-toc-distributed-deployment-guide\">Distributed Deployment Guide</a></li>\n</ol>\n\n<h2 id=\"integrating-apollo-with-spring-boot\">Integrating Apollo with Spring Boot</h2>\n\n<p>Configuration for the <code class=\"language-plaintext highlighter-rouge\">account-service</code> project’s <code class=\"language-plaintext highlighter-rouge\">application.yml</code>:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">app</span><span class=\"pi\">:</span>\n    <span class=\"na\">id</span><span class=\"pi\">:</span> <span class=\"s\">account-service</span>\n<span class=\"na\">apollo</span><span class=\"pi\">:</span>\n    <span class=\"na\">meta</span><span class=\"pi\">:</span> <span class=\"s\">http://localhost:8080</span>\n    <span class=\"na\">bootstrap</span><span class=\"pi\">:</span>\n        <span class=\"na\">enabled</span><span class=\"pi\">:</span> <span class=\"kc\">true</span>\n        <span class=\"na\">namespaces</span><span class=\"pi\">:</span> <span class=\"s\">application,micro_service.spring-boot-http,spring-rocketmq,micro_service.spring-boot-druid</span>\n</code></pre></div></div>\n\n<p>Accessing configurations using annotations:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@RestController</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AccountController</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${sms.enable}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Boolean</span> <span class=\"n\">smsEnable</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/hi\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">hi</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"hi\"</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/sms\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getSmsConfig</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"smsEnable: \"</span> <span class=\"o\">+</span> <span class=\"n\">smsEnable</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${rocketmq.name-server}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">mqNameServer</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${rocketmq.producer.group}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">mqProducerGroup</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/mq\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getRocketMQConf</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">mqNameServer</span> <span class=\"o\">+</span> <span class=\"s\">\": \"</span> <span class=\"o\">+</span> <span class=\"n\">mqProducerGroup</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"/db-url\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getDBConfig</span><span class=\"o\">(</span><span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${spring.datasource.url}\"</span><span class=\"o\">)</span> <span class=\"nc\">String</span> <span class=\"n\">url</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">url</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>When accessing the URL <code class=\"language-plaintext highlighter-rouge\">http://localhost:10089/account-service/sms</code>, the result is as follows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>smsEnable: true\n</code></pre></div></div>\n\n<p>At this point, the Apollo client has been successfully integrated into the Spring Boot project.</p>\n\n<h2 id=\"distributed-deployment-guide\">Distributed Deployment Guide</h2>\n\n<p>The <a href=\"https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide\">Distributed Deployment Guide</a> explains how to compile, package, and deploy the Apollo Configuration Center in a distributed manner, enabling deployment in development, testing, and production environments.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%83-Springboot%E9%9B%86%E6%88%90%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 7) - Spring Boot Integration and Distributed Deployment'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-24T16:29:57+11:00'>Nov 24, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 7) - Spring Boot Integration and Distributed Deployment</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/configuration' class='article__tag'>configuration</a>  <a href='/tag/configuration center' class='article__tag'>configuration center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 6) - Server and Client Design",
      "category" : "Apollo",
      "tags"     : "Configuration, Configuration Center, and Apollo",
      "url"      : "/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%85%AD-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E8%AE%A1/",
      "date"     : "Nov 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#server-design-real-time-push-design-after-configuration-release\" id=\"markdown-toc-server-design-real-time-push-design-after-configuration-release\">Server Design (Real-time Push Design after Configuration Release)</a>    <ol>\n      <li><a href=\"#implementation-of-sending-releasemessages\" id=\"markdown-toc-implementation-of-sending-releasemessages\">Implementation of Sending ReleaseMessages</a></li>\n      <li><a href=\"#implementation-of-client-notification-by-config-service\" id=\"markdown-toc-implementation-of-client-notification-by-config-service\">Implementation of Client Notification by Config Service</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#client-design\" id=\"markdown-toc-client-design\">Client Design</a></li>\n</ol>\n\n<h2 id=\"server-design-real-time-push-design-after-configuration-release\">Server Design (Real-time Push Design after Configuration Release)</h2>\n\n<p>In a configuration center, one crucial function is to push configurations to clients in real-time after release. The following diagram briefly outlines the process of configuration release:</p>\n\n<p><img src=\"/images/posts/apollo-release-message-notification-design.png\" alt=\"Configuration Release Message Notification Design\" /></p>\n\n<ol>\n  <li>Users perform configuration release operations in the Portal.</li>\n  <li>The Portal invokes Admin Service’s interfaces for release operations.</li>\n  <li>After Admin Service releases the configuration, it sends ReleaseMessages to various Config Services.</li>\n  <li>Upon receiving ReleaseMessages, Config Services notify corresponding clients.</li>\n</ol>\n\n<h3 id=\"implementation-of-sending-releasemessages\">Implementation of Sending ReleaseMessages</h3>\n\n<p>Admin Service needs to notify all Config Services of configuration releases, so Config Services can inform respective clients to fetch the latest configurations.</p>\n\n<p>Conceptually, this is a typical messaging scenario where Admin Service acts as the producer of messages, and various Config Services act as consumers. Decoupling between Admin Service and Config Service is achieved through a messaging component (Message Queue).</p>\n\n<p>Considering Apollo’s practical usage scenarios and aiming to minimize external dependencies, Apollo implements a simple message queue using a database.</p>\n\n<p>The implementation steps are as follows:</p>\n\n<ol>\n  <li><strong>After configuration release, Admin Service inserts a message record into the ReleaseMessage table</strong>. The message content includes AppId, Cluster, and Namespace of the released configuration, as seen in DatabaseMessageSender.</li>\n  <li><strong>A thread in Config Service scans the ReleaseMessage table every second</strong> to check for new message records, as seen in ReleaseMessageScanner.</li>\n  <li>If Config Service detects new message records, it <strong>notifies all message listeners (ReleaseMessageListener)</strong>, such as NotificationControllerV2. The registration process for message listeners is outlined in ConfigServiceAutoConfiguration.</li>\n  <li>Upon receiving AppId, Cluster, and Namespace of the released configuration, NotificationControllerV2 <strong>notifies the corresponding clients</strong>.</li>\n</ol>\n\n<p>The diagram below illustrates this process:</p>\n\n<p><img src=\"/images/posts/apollo-release-message-design.png\" alt=\"Apollo Release Message Design\" /></p>\n\n<h3 id=\"implementation-of-client-notification-by-config-service\">Implementation of Client Notification by Config Service</h3>\n\n<p>How does NotificationControllerV2 notify clients upon configuration release?</p>\n\n<p>The implementation is as follows:</p>\n\n<ol>\n  <li>The client initiates an HTTP request to the notifications/v2 endpoint of Config Service, which is NotificationControllerV2, as seen in RemoteConfigLongPollService.</li>\n  <li><strong>NotificationControllerV2 does not immediately return the result</strong>. Instead, it suspends the request using Spring DeferredResult.</li>\n  <li>If there are no configuration releases of interest to the client within 60 seconds, NotificationControllerV2 returns an HTTP status code 304 to the client.</li>\n  <li>If there are configuration releases of interest to the client, NotificationControllerV2 calls the setResult method of DeferredResult, passing the namespace information with configuration changes. Simultaneously, the request returns immediately. Upon receiving the result, the client immediately requests Config Service for the latest configuration of that namespace.</li>\n</ol>\n\n<h2 id=\"client-design\">Client Design</h2>\n\n<p>The following diagram briefly outlines the implementation principle of the Apollo client:</p>\n\n<p><img src=\"/images/posts/apollo-client-architecture.png\" alt=\"Apollo Client Architecture\" /></p>\n\n<ol>\n  <li>The client maintains a long connection with the server to receive configuration update pushes promptly (implemented through HTTP Long Polling).</li>\n  <li>The client also periodically fetches the latest configuration of the application from the Apollo configuration center server.\n    <ul>\n      <li>This is a fallback mechanism to prevent configuration from not being updated in case the push mechanism fails.</li>\n      <li>The client’s periodic fetch reports the local version, so <strong>in general, for periodic fetching operations, the server returns 304 - Not Modified</strong>.</li>\n      <li>The default fetch frequency is once every 5 minutes, but the client can override this by specifying the System Property: apollo.refreshInterval at runtime, with the unit in minutes.</li>\n    </ul>\n  </li>\n  <li>Upon receiving the latest configuration of the application from the Apollo configuration center server, the client saves it in memory.</li>\n  <li>The client caches the configuration obtained from the server in the local file system.\n    <ul>\n      <li>This allows the client to restore configurations from the local cache in cases of server unavailability or network issues.</li>\n    </ul>\n  </li>\n  <li>Applications can retrieve the latest configurations from the Apollo client and subscribe to configuration update notifications.</li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%85%AD-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E8%AE%A1/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 6) - Server and Client Design'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2023-11-24T14:54:12+11:00'>Nov 24, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 6) - Server and Client Design</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Configuration' class='article__tag'>Configuration</a>  <a href='/tag/Configuration Center' class='article__tag'>Configuration Center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 5) - Gray Release",
      "category" : "Apollo",
      "tags"     : "configuration, configuration center, and Apollo",
      "url"      : "/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%94-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/",
      "date"     : "Nov 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#understanding-gray-release\" id=\"markdown-toc-understanding-gray-release\">Understanding Gray Release</a></li>\n  <li><a href=\"#gray-release-functionality-in-apollo\" id=\"markdown-toc-gray-release-functionality-in-apollo\">Gray Release Functionality in Apollo</a></li>\n</ol>\n\n<h2 id=\"understanding-gray-release\">Understanding Gray Release</h2>\n\n<p>Gray release is a deployment strategy that allows for a smooth transition between black and white, facilitating A/B testing where some users continue with feature A while others experience feature B. If users show no objections to feature B, the deployment gradually shifts until all users are on board.</p>\n\n<h2 id=\"gray-release-functionality-in-apollo\">Gray Release Functionality in Apollo</h2>\n\n<ol>\n  <li>For configurations with significant impacts on programs, they can be initially activated on one or more instances, observed for a period, and then fully deployed if no issues arise.</li>\n  <li>For configurations requiring tuning, gray release enables A/B testing. Different configurations can be applied to different machines, continuously adjusted and evaluated until optimal configurations are identified for full deployment.</li>\n</ol>\n\n<p>For details on how to implement gray release in Apollo, refer to the <a href=\"https://www.apolloconfig.com/#/zh/usage/apollo-user-guide\">Gray Release Guide</a> in the Apollo User Guide.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/24/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%94-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 5) - Gray Release'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-24T12:54:35+11:00'>Nov 24, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 5) - Gray Release</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/configuration' class='article__tag'>configuration</a>  <a href='/tag/configuration center' class='article__tag'>configuration center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 4) - Quick Start and User Guide",
      "category" : "Apollo",
      "tags"     : "Configuration, Configuration Center, and Apollo",
      "url"      : "/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%9B%9B-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#quick-start\" id=\"markdown-toc-quick-start\">Quick Start</a></li>\n  <li><a href=\"#user-guide\" id=\"markdown-toc-user-guide\">User Guide</a></li>\n</ol>\n\n<h2 id=\"quick-start\">Quick Start</h2>\n\n<p>To facilitate a quick understanding and hands-on experience with Apollo Configuration Center, Apollo has prepared a <a href=\"https://www.apolloconfig.com/#/en/deployment/quick-start\">Quick Start</a>, enabling deployment and launch of Apollo Configuration Center in a local environment within minutes.</p>\n\n<p>However, it’s important to note that the Quick Start is intended solely for local testing. For deployment in a production environment, please refer to the <a href=\"https://www.apolloconfig.com/#/en/deployment/distributed-deployment-guide\">Distributed Deployment Guide</a>.</p>\n\n<h2 id=\"user-guide\">User Guide</h2>\n\n<p>The core functionalities of Apollo encompass project management, configuration management, cluster management, and more. These aspects are detailed in the <a href=\"https://www.apolloconfig.com/#/en/usage/apollo-user-guide\">Apollo User Guide</a>.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%9B%9B-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 4) - Quick Start and User Guide'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-11-23T18:38:07+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 4) - Quick Start and User Guide</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Configuration' class='article__tag'>Configuration</a>  <a href='/tag/Configuration Center' class='article__tag'>Configuration Center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 3) - Working Principles and Core Concepts",
      "category" : "Apollo",
      "tags"     : "Configuration, Configuration Center, and Apollo",
      "url"      : "/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#working-principles\" id=\"markdown-toc-working-principles\">Working Principles</a></li>\n  <li><a href=\"#execution-flow\" id=\"markdown-toc-execution-flow\">Execution Flow</a></li>\n  <li><a href=\"#core-concepts\" id=\"markdown-toc-core-concepts\">Core Concepts</a></li>\n</ol>\n\n<h2 id=\"working-principles\">Working Principles</h2>\n\n<p>The architecture of Apollo is designed as depicted in the following diagram:</p>\n\n<p><img src=\"\\images\\posts\\apollo-overall-architecture.png\" alt=\"Apollo Overall Architecture\" style=\"display: block; margin-left: auto; margin-right: auto; zoom:100%;\" /></p>\n\n<p>Responsibilities of each module in the diagram are outlined below:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Module</th>\n      <th>Responsibilities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Config Service</td>\n      <td>Provides functions such as reading and pushing configurations, serving Apollo clients</td>\n    </tr>\n    <tr>\n      <td>Admin Service</td>\n      <td>Provides functions such as modifying and releasing configurations, serving Apollo Portal (management interface)</td>\n    </tr>\n    <tr>\n      <td>Eureka</td>\n      <td>Provides service registration and discovery. For simplicity, Eureka is currently deployed in the same JVM process as Config Service. Both Config Service and Admin Service are deployed in a stateless manner with multiple instances. Therefore, they need to register themselves with Eureka and maintain a heartbeat.</td>\n    </tr>\n    <tr>\n      <td>Meta Server</td>\n      <td>A layer built upon Eureka, encapsulating Eureka’s service discovery interface.</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li>Clients access Meta Server via domain name to obtain a list of Config Service instances (IP+Port), and then directly access the service via IP+Port. Load balancing and error retry are performed on the client side.</li>\n  <li>The Portal accesses Meta Server via domain name to obtain a list of Admin Service instances (IP+Port), and then directly accesses the service via IP+Port. Load balancing and error retry are performed on the Portal side.</li>\n  <li>To simplify deployment, Config Service, Eureka, and Meta Server are actually deployed in the same JVM process.</li>\n</ul>\n\n<h2 id=\"execution-flow\">Execution Flow</h2>\n\n<ol>\n  <li>Upon startup, Config/Admin Service automatically registers with the Eureka service registry and periodically sends keep-alive heartbeats.</li>\n  <li>Apollo Client and Portal management end access a Meta Server via the configured domain name, which is then load balanced by a Software Load Balancer before being assigned to a specific Meta Server.</li>\n  <li>Meta Server retrieves service information for Config Service and Admin Service from Eureka, acting as an Eureka Client.</li>\n  <li>Meta Server retries if it fails to obtain service information for Config Service and Admin Service (IP+Port).</li>\n  <li>Once the correct service information for Config Service and Admin Service is obtained, Apollo Client provides configuration acquisition and real-time update functions for the application via Config Service. The Apollo Portal management end provides configuration addition, modification, and release functions via Admin Service.</li>\n</ol>\n\n<h2 id=\"core-concepts\">Core Concepts</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>Concept</th>\n      <th>Understanding</th>\n      <th>Keywords</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>application</td>\n      <td>The application in which the Apollo client runs.</td>\n      <td>appId</td>\n    </tr>\n    <tr>\n      <td>environment</td>\n      <td>The environment in which the Apollo client runs.</td>\n      <td>env</td>\n    </tr>\n    <tr>\n      <td>cluster</td>\n      <td>A grouping of different instances under an application, such as grouping by data center.</td>\n      <td>cluster</td>\n    </tr>\n    <tr>\n      <td>namespace</td>\n      <td>A grouping of different configurations under an application.</td>\n      <td>namespaces</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>For a detailed understanding of namespaces, refer to the <a href=\"https://www.apolloconfig.com/#/zh/design/apollo-core-concept-namespace\">official documentation - What is a Namespace?</a>.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%89-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 3) - Working Principles and Core Concepts'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2023-11-23T14:59:46+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 3) - Working Principles and Core Concepts</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Configuration' class='article__tag'>Configuration</a>  <a href='/tag/Configuration Center' class='article__tag'>Configuration Center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 2) - Introduction to Apollo",
      "category" : "Apollo",
      "tags"     : "configuration, configuration center, and Apollo",
      "url"      : "/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%8C-Apollo%E7%AE%80%E4%BB%8B/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#introduction-to-apollo\" id=\"markdown-toc-introduction-to-apollo\">Introduction to Apollo</a>    <ol>\n      <li><a href=\"#features\" id=\"markdown-toc-features\">Features</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"introduction-to-apollo\">Introduction to Apollo</h2>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/logo/logo-simple.png\" alt=\"apollo-logo\" width=\"40%\" /></p>\n\n<p>Apollo (<a href=\"https://github.com/ctripcorp/apollo\">Github</a> <code>&#124;</code> <a href=\"https://www.apolloconfig.com/#/zh/README\">Official Documentation</a>) is a distributed configuration center developed by the framework department of Ctrip. It allows centralized management of configurations for different environments and clusters of applications. After configuration modifications, changes can be pushed to the application end in real-time. Apollo also features standardized permissions and process governance, making it suitable for microservices configuration management scenarios.</p>\n\n<p>Apollo consists of two parts: the server-side and the client-side.</p>\n\n<p>The server-side is developed based on Spring Boot and Spring Cloud. After packaging, it can be directly run without the need for additional application containers such as Tomcat.</p>\n\n<p>The Java client does not depend on any framework and can run in all Java runtime environments. It also has good support for Spring/Spring Boot environments.</p>\n\n<h3 id=\"features\">Features</h3>\n\n<p>Due to the nature of configuration-based operations, Apollo aspires to be a governance-capable configuration publishing platform from its inception. Currently, it provides the following features:</p>\n\n<ol>\n  <li>Unified management of configurations for different environments and clusters\n    <ul>\n      <li>Apollo provides a unified interface to centrally manage configurations for different environments, clusters, and namespaces.</li>\n      <li>The same code deployed in different clusters can have different configurations, such as zookeeper addresses.</li>\n      <li>Namespaces allow convenient support for multiple applications sharing the same configuration while allowing applications to override shared configurations.</li>\n    </ul>\n  </li>\n  <li>Real-time configuration updates (hot deployment)\n    <ul>\n      <li>After users modify and publish configurations in Apollo, clients can receive the latest configurations in real-time and notify the application.</li>\n    </ul>\n  </li>\n  <li>Version release management\n    <ul>\n      <li>All configuration releases have version concepts, making it easy to support configuration rollback.</li>\n    </ul>\n  </li>\n  <li>Gray release\n    <ul>\n      <li>Supports gray release of configurations. For example, after clicking on release, it only takes effect on some application instances. After observing for a period without issues, it can be pushed to all application instances.</li>\n    </ul>\n  </li>\n  <li>Permission management, release review, operation audit\n    <ul>\n      <li>There is a comprehensive permission management mechanism for managing applications and configurations, divided into editing and publishing stages to reduce human errors.</li>\n      <li>All operations are audited, making it easy to track issues.</li>\n    </ul>\n  </li>\n  <li>Monitoring of client configuration information\n    <ul>\n      <li>Configuration usage by instances can be conveniently viewed on the interface.</li>\n    </ul>\n  </li>\n  <li>Provides native Java and .Net clients\n    <ul>\n      <li>Provides native Java and .Net clients for easy application integration.</li>\n      <li>Supports Spring Placeholder, Annotation, and Spring Boot’s ConfigurationProperties for easy application use.</li>\n      <li>Also provides HTTP interface for non-Java and .Net applications to use conveniently.</li>\n    </ul>\n  </li>\n  <li>Provides an open platform API\n    <ul>\n      <li>Apollo itself provides a relatively complete unified configuration management interface, supporting features such as multi-environment, multi-data center configuration management, permissions, and process governance. However, Apollo, for generality considerations, does not impose excessive restrictions on configuration modifications. As long as it conforms to the basic format, it can be saved without targeted validation for different configuration values such as database usernames, passwords, Redis service addresses, etc.</li>\n      <li>For such application configurations, Apollo supports applications to modify and publish configurations in Apollo through open platform APIs, with complete authorization and permission control.</li>\n    </ul>\n  </li>\n</ol>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%BA%8C-Apollo%E7%AE%80%E4%BB%8B/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 2) - Introduction to Apollo'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2023-11-23T13:13:25+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 2) - Introduction to Apollo</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/configuration' class='article__tag'>configuration</a>  <a href='/tag/configuration center' class='article__tag'>configuration center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Apollo Configuration Center (Part 1) - Configuration and Configuration Management",
      "category" : "Apollo",
      "tags"     : "Configuration, Configuration Center, and Apollo",
      "url"      : "/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%80-%E9%85%8D%E7%BD%AE%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/",
      "date"     : "Nov 23, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#introduction-reflecting-on-blogging\" id=\"markdown-toc-introduction-reflecting-on-blogging\">Introduction: Reflecting on Blogging</a></li>\n  <li><a href=\"#configuration\" id=\"markdown-toc-configuration\">Configuration</a></li>\n  <li><a href=\"#configuration-center\" id=\"markdown-toc-configuration-center\">Configuration Center</a></li>\n</ol>\n\n<h2 id=\"introduction-reflecting-on-blogging\">Introduction: Reflecting on Blogging</h2>\n\n<p>My journey with Apollo primarily relied on three processes: training videos, official documentation, and sample code. Along the way, I gradually realized that learning predominantly through training videos and blog posts leads to a fast-food-style consumption of knowledge, which isn’t conducive to deep learning.</p>\n\n<p>While this approach allows for the rapid acquisition of knowledge, learners often fail to achieve a true mastery of the content. Documentation learning varies in difficulty depending on the developer’s writing skills and the reader’s familiarity with the subject matter. However, this method can afford readers more time for reflection, making it a valuable learning approach.</p>\n\n<p>Additionally, this blog post on the Apollo Configuration Center was completed during my spare time, so most of the content is derived from official documentation. The main purpose of documenting this blog is to deepen my understanding and impression of microservices architecture. As for the specific implementation details, they should be referred to the <a href=\"https://www.apolloconfig.com/#/en/README\">official documentation</a>.</p>\n\n<h2 id=\"configuration\">Configuration</h2>\n\n<p>Applications often need to read configuration information during startup and runtime, with configurations accompanying the application throughout its lifecycle. This includes parameters like database connection strings and startup parameters.</p>\n\n<p>Configurations have several characteristics:</p>\n\n<ol>\n  <li><strong>Independent Read-only Variables</strong>:\n    <ul>\n      <li>Configurations are independent of the program; the same program behaves differently under different configurations.</li>\n      <li>Furthermore, configurations are read-only for the program; the program adjusts its behavior based on configuration but should not modify the configuration itself.</li>\n    </ul>\n  </li>\n  <li><strong>Accompanies Application Lifecycle</strong>:\n    <ul>\n      <li>Configurations span the entire lifecycle of an application, used for initialization during startup and behavior adjustment during runtime. For example, reading service port numbers during startup or executing scheduled tasks based on timing policies during runtime.</li>\n    </ul>\n  </li>\n  <li><strong>Multiple Loading Methods</strong>:\n    <ul>\n      <li>Common loading methods include hardcoding within the program, configuration files, environment variables, startup parameters, and database-based configurations.</li>\n    </ul>\n  </li>\n  <li><strong>Requires Governance</strong>:\n    <ul>\n      <li>Permissions Control: Since configurations can alter program behavior, incorrect configurations could lead to disasters. Therefore, configuration modifications must have robust permission controls.</li>\n      <li>Environment and Cluster Configuration Management: The same program often requires different configurations in different environments (development, testing, production) or clusters (different data centers). Hence, comprehensive environment and cluster configuration management is essential.</li>\n    </ul>\n  </li>\n</ol>\n\n<h2 id=\"configuration-center\">Configuration Center</h2>\n\n<p>Traditional monolithic applications have inherent flaws, including decreased deployment efficiency with scale, poor team collaboration efficiency, decreased system reliability, maintenance difficulties, and lengthy new feature deployment cycles. Thus, there’s an urgent need for a new architecture to address these issues, and microservices architecture is one of the solutions.</p>\n\n<p>When a system transitions from a monolithic application to a distributed system with individual service nodes, configuration files must also migrate (split). This disperses configurations, often leading to redundancy.</p>\n\n<p>The <strong>configuration center abstracts configurations from applications for centralized management</strong>. This resolves issues related to dynamic configuration changes, persistence, and operational costs.</p>\n\n<p>Applications no longer need to add configuration management interfaces or implement configuration persistence themselves, nor do they need to introduce “scheduled tasks” to reduce operational costs.</p>\n\n<p><strong>In summary, the configuration center is a fundamental service component for centrally managing various application configurations.</strong></p>\n\n<p>In the system architecture, the configuration center is a component of the entire microservices infrastructure. A qualified configuration center should:</p>\n\n<ul>\n  <li>Allow easy reading and modification of configuration items.</li>\n  <li>Simplify the addition of new configurations.</li>\n  <li>Support monitoring of configuration changes to control risks.</li>\n  <li>Provide a history of configuration modifications.</li>\n  <li>Support isolation across different deployment environments.</li>\n</ul>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/apollo/2023/11/23/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E4%B8%80-%E9%85%8D%E7%BD%AE%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/'> <img src='/images/covers/apollo-cover.jpg' alt='Apollo Configuration Center (Part 1) - Configuration and Configuration Management'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2023-11-23T12:01:05+11:00'>Nov 23, 2023</time> </span> </div><h2 class='article__title'>Apollo Configuration Center (Part 1) - Configuration and Configuration Management</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Configuration' class='article__tag'>Configuration</a>  <a href='/tag/Configuration Center' class='article__tag'>Configuration Center</a>  <a href='/tag/Apollo' class='article__tag'>Apollo</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Migrating Your System with DiskGenius",
      "category" : "",
      "tags"     : "Disk Management",
      "url"      : "/2023/10/12/%E4%BD%BF%E7%94%A8DiskGenius%E8%BF%81%E7%A7%BBC%E7%9B%98/",
      "date"     : "Oct 12, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#introduction\" id=\"markdown-toc-introduction\">Introduction</a></li>\n  <li><a href=\"#system-disk-migration\" id=\"markdown-toc-system-disk-migration\">System Disk Migration</a>    <ol>\n      <li><a href=\"#introduction-to-diskgenius\" id=\"markdown-toc-introduction-to-diskgenius\">Introduction to DiskGenius</a></li>\n      <li><a href=\"#disk-formatting\" id=\"markdown-toc-disk-formatting\">Disk Formatting</a></li>\n      <li><a href=\"#system-migration\" id=\"markdown-toc-system-migration\">System Migration</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#modifying-boot-order\" id=\"markdown-toc-modifying-boot-order\">Modifying Boot Order</a></li>\n</ol>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>For the past four years of my undergraduate studies, I’ve been plagued by the torment of insufficient disk space. Finally, I got the opportunity to add a solid-state drive (SSD). However, the most cumbersome part of the installation process was migrating the system disk. So, I’ve documented the migration process here, perhaps it will be useful in the future.</p>\n\n<h2 id=\"system-disk-migration\">System Disk Migration</h2>\n\n<h3 id=\"introduction-to-diskgenius\">Introduction to DiskGenius</h3>\n\n<p>DiskGenius (<a href=\"https://www.diskgenius.cn/download.php\">Chinese Version</a> <code>&#124;</code> <a href=\"https://www.diskgenius.com/download.php\">English Version</a>) is a commonly used professional disk management software. It includes features such as partition management, backup, and restoration. In this article, we’ll use this tool to complete the system disk migration.</p>\n\n<h3 id=\"disk-formatting\">Disk Formatting</h3>\n\n<p>After installing the new disk, the first step is to format it, choosing the NTFS storage format. To avoid the hassle of frequently cleaning the C drive, I opt not to partition it.</p>\n\n<h3 id=\"system-migration\">System Migration</h3>\n\n<p>After installing DiskGenius, navigate to the system migration feature in its menu bar.</p>\n\n<p><img src=\"\\images\\posts\\diskGenius-0.jpg\" style=\"     display: block;     margin-left: auto;     margin-right: auto;      zoom:50%;\" /></p>\n\n<p>Then, select the original system partition, usually the C drive, and choose the target disk for migration, the one we formatted earlier.</p>\n\n<p>System migration can be done in the PE environment or through hot migration. Since I haven’t delved deeply into hot migration, I opt for the more reliable PE environment for migration.</p>\n\n<p>After a while, the system disk migration is complete.</p>\n\n<h2 id=\"modifying-boot-order\">Modifying Boot Order</h2>\n\n<p>The final step is to modify the boot order of the disks. First, enter the BIOS environment (this varies depending on the computer model, for me it’s by pressing F2 during the boot process).</p>\n\n<p>In the Boot menu, modify the system boot priority, swapping the priority of the newly installed disk with the original one.</p>\n\n<p>After restarting, conduct tests to ensure smooth operation of the migrated system disk, which should perform just as well as before migration.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2023/10/12/%E4%BD%BF%E7%94%A8DiskGenius%E8%BF%81%E7%A7%BBC%E7%9B%98/'> <img src='https://www.bing.com/th?id=OHR.TexasIndigoBunting_ZH-CN3699392300_1920x1080.jpg' alt='Migrating Your System with DiskGenius'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2023-10-12T21:54:54+11:00'>Oct 12, 2023</time> </span> </div><h2 class='article__title'>Migrating Your System with DiskGenius</h2> <p class='article__excerpt'>Learn how to migrate your system disk using DiskGenius, a powerful disk management tool.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Disk Management' class='article__tag'>Disk Management</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Using ChatGPT to Control Arduino Devices",
      "category" : "",
      "tags"     : "ChatGPT, Arduino, and Smart Home",
      "url"      : "/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/",
      "date"     : "Apr 24, 2023",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#integrating-chatgpt\" id=\"markdown-toc-integrating-chatgpt\">Integrating ChatGPT</a>    <ol>\n      <li><a href=\"#prompt-creation-and-testing\" id=\"markdown-toc-prompt-creation-and-testing\">Prompt Creation and Testing</a></li>\n      <li><a href=\"#integrating-openai-api\" id=\"markdown-toc-integrating-openai-api\">Integrating OpenAI API</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#building-a-server-with-flask\" id=\"markdown-toc-building-a-server-with-flask\">Building a Server with Flask</a>    <ol>\n      <li><a href=\"#setting-up-flask\" id=\"markdown-toc-setting-up-flask\">Setting Up Flask</a></li>\n      <li><a href=\"#adding-user-api\" id=\"markdown-toc-adding-user-api\">Adding User API</a></li>\n      <li><a href=\"#arduino-api\" id=\"markdown-toc-arduino-api\">Arduino API</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#storing-device-states-with-mongodb\" id=\"markdown-toc-storing-device-states-with-mongodb\">Storing Device States with MongoDB</a>    <ol>\n      <li><a href=\"#mongodb-database-structure\" id=\"markdown-toc-mongodb-database-structure\">MongoDB Database Structure</a></li>\n      <li><a href=\"#integrating-mongodb-with-flask\" id=\"markdown-toc-integrating-mongodb-with-flask\">Integrating MongoDB with Flask</a></li>\n      <li><a href=\"#interacting-with-the-database-and-data-caching\" id=\"markdown-toc-interacting-with-the-database-and-data-caching\">Interacting with the Database and Data Caching</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#writing-a-qqbot-to-control-devices-via-qq\" id=\"markdown-toc-writing-a-qqbot-to-control-devices-via-qq\">Writing a QQbot to Control Devices via QQ</a></li>\n  <li><a href=\"#arduino-state-control\" id=\"markdown-toc-arduino-state-control\">Arduino State Control</a>    <ol>\n      <li><a href=\"#arduino-device-code-implementation\" id=\"markdown-toc-arduino-device-code-implementation\">Arduino Device Code Implementation</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#results\" id=\"markdown-toc-results\">Results</a></li>\n</ol>\n\n<p>In this blog post, we will introduce how to use ChatGPT to control Arduino devices. ChatGPT, developed by OpenAI, is a powerful natural language processing model that has sparked significant discussion. This post outlines a method to integrate ChatGPT with external systems, leveraging it as a controller to manage Arduino devices. This approach explores the potential of using natural language commands to control home devices and the future development direction of smart home technology.</p>\n\n<p>The code for this blog is publicly available in my GitHub repository, <a href=\"https://github.com/MortalreminderPT/HomeGPT-Intelligent-Home-Assistant\">click here</a> to access the project.</p>\n\n<h2 id=\"integrating-chatgpt\">Integrating ChatGPT</h2>\n\n<h3 id=\"prompt-creation-and-testing\">Prompt Creation and Testing</h3>\n\n<p>We expect ChatGPT to output commands in JSON format to control the devices. Therefore, we need to create an appropriate prompt to instruct ChatGPT on our requirements. In this prompt, we should clearly express the questions we want ChatGPT to understand and respond to, such as turning on/off an LED light, controlling motor speed, etc. After several tests, we integrated all our requirements using the following Python code:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">possible_device</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">air-conditioner</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">curtain</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">0 close,1 open</span><span class=\"sh\">'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">As an Intelligent Assistant you need to rely on my words to determine what to do with some devices.</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">your reply should contain a list with JSON [device] only from these devices: </span><span class=\"si\">{</span><span class=\"n\">possible_device</span><span class=\"si\">}</span><span class=\"sh\">'</span> \\\n             <span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\"> and only write JSON list without any discourse.</span><span class=\"sh\">'</span>\n    <span class=\"k\">return</span> <span class=\"n\">prompt</span>\n</code></pre></div></div>\n\n<p>Testing this prompt on the official ChatGPT website, we found that ChatGPT can correctly understand our requirements and respond accordingly.</p>\n\n<p><img src=\"\\images\\posts\\gpt1.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>At this point, we believe that ChatGPT can be integrated into our project.</p>\n\n<h3 id=\"integrating-openai-api\">Integrating OpenAI API</h3>\n\n<p>OpenAI provides an official API to interact with ChatGPT in real-time by sending requests.</p>\n\n<p>First, we need to obtain an OpenAI API key. You can register an account and get the API key on OpenAI’s developer portal. Keep the API key secure, as it will be used to communicate with the OpenAI API.</p>\n\n<p>Next, we can integrate the OpenAI API package to interact with ChatGPT, which is encapsulated in a function:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">mask</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n        <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">().</span><span class=\"nf\">rstrip</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">completions</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">ChatCompletion</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">prompt</span><span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n        <span class=\"k\">return</span> <span class=\"n\">message</span>\n</code></pre></div></div>\n\n<p>Running the code and observing the output, we successfully interacted with ChatGPT.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>In: As an Intelligent Assistant you need to rely on my words to determine what to <span class=\"k\">do </span>with some devices.\n我很冷，你可以帮我些什么吗\nyour reply should contain a list with JSON <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"device_1\"</span>,<span class=\"s2\">\"param\"</span>:0<span class=\"o\">}]</span> only from these devices: <span class=\"o\">[{</span><span class=\"s1\">'light'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'air-conditioner'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}</span>, <span class=\"o\">{</span><span class=\"s1\">'curtain'</span>: <span class=\"s1\">'0 close,1 open'</span><span class=\"o\">}]</span> and only write JSON list without any discourse.\n\nOut: <span class=\"o\">[{</span><span class=\"s2\">\"device\"</span>:<span class=\"s2\">\"air-conditioner\"</span>,<span class=\"s2\">\"param\"</span>:1<span class=\"o\">}]</span>\n</code></pre></div></div>\n\n<h2 id=\"building-a-server-with-flask\">Building a Server with Flask</h2>\n<p>In the previous section, we completed the interaction and integration with ChatGPT. To facilitate user interaction and interaction with Arduino, we will build a server using the Flask framework to enable web-based interaction.</p>\n\n<h3 id=\"setting-up-flask\">Setting Up Flask</h3>\n<p>Flask is a lightweight Python web framework, ideal for building simple web applications. We will use Flask to set up a simple server to receive requests from users or Arduino.</p>\n\n<p>First, we need to install Flask using pip:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>flask\n</code></pre></div></div>\n\n<p>Then, create the main Flask file:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">import</span> <span class=\"n\">flask_restful</span> <span class=\"k\">as</span> <span class=\"n\">restful</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">restful</span><span class=\"p\">.</span><span class=\"nc\">Api</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">default_mediatype</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>At this point, we have set up a RESTful Flask framework and need to add user and Arduino interaction interfaces.</p>\n\n<h3 id=\"adding-user-api\">Adding User API</h3>\n<p>Define a user API file <code class=\"language-plaintext highlighter-rouge\">order.py</code> to send requests to the server and receive responses. The core code is as follows:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">OrderApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">text_dict</span> <span class=\"o\">=</span> <span class=\"nc\">RequestParser</span><span class=\"p\">()</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> \\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">add_argument</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">json</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\\\n            <span class=\"p\">.</span><span class=\"nf\">parse_args</span><span class=\"p\">()</span>\n            \n        <span class=\"n\">mask_reply</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">mask_reply</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">]})</span>\n\n        <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"nf\">generate_prompt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text_dict</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n        <span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"nf\">get_reply</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                        <span class=\"n\">mask_reply</span><span class=\"o\">=</span><span class=\"n\">mask_reply</span><span class=\"p\">)</span>\n        <span class=\"n\">update_state</span> <span class=\"o\">=</span> <span class=\"nf\">match_json</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">reply</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">update_state</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Then, register the API file in the main file:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">OrderApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Users can now control the status of Arduino devices via POST requests.</p>\n\n<h3 id=\"arduino-api\">Arduino API</h3>\n\n<p>Arduino devices mainly work by reading the current device status and making corresponding adjustments, so we need to write a simple GET request response:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ArduinoApi</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">device_states</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>Similarly, register the API file in the main file:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">add_resource</span><span class=\"p\">(</span><span class=\"n\">ArduinoApi</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/arduino</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Testing with Postman, we found that the server works correctly.</p>\n\n<p><img src=\"\\images\\posts\\gpt2.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"storing-device-states-with-mongodb\">Storing Device States with MongoDB</h2>\n\n<p>To prevent power outages and other factors from affecting device memory, we use a database to persist device states. MongoDB, a general-purpose NoSQL database based on key-value pairs, is well-suited for this need.</p>\n\n<h3 id=\"mongodb-database-structure\">MongoDB Database Structure</h3>\n<p>Before we begin, we need to define the data structure for device states. In this example, we assume our device has an LED light that can be turned on or off. We can use the following JSON format to represent the device state:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"nl\">\"device\"</span><span class=\"p\">:</span><span class=\"s2\">\"light\"</span><span class=\"p\">,</span><span class=\"nl\">\"param\"</span><span class=\"p\">:</span><span class=\"mf\">1.0</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>In the example above, <code class=\"language-plaintext highlighter-rouge\">device</code> is the unique identifier of the device, and <code class=\"language-plaintext highlighter-rouge\">param</code> represents the LED light’s state.</p>\n\n<h3 id=\"integrating-mongodb-with-flask\">Integrating MongoDB with Flask</h3>\n<p>To interact with MongoDB, we use the official Python driver <code class=\"language-plaintext highlighter-rouge\">pymongo</code>. We need to install it:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>pymongo\n</code></pre></div></div>\n\n<p>Next, add the MongoDB connection and data access logic to the Flask application.</p>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">app.py</code> file, add the <code class=\"language-plaintext highlighter-rouge\">pymongo</code> library:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"n\">flask_pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">PyMongo</span>\n<span class=\"n\">mongo</span> <span class=\"o\">=</span> <span class=\"nc\">PyMongo</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">MONGO_URI</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"interacting-with-the-database-and-data-caching\">Interacting with the Database and Data Caching</h3>\n\n<p>We write a <code class=\"language-plaintext highlighter-rouge\">DeviceStates</code> class to interact with the database. To enhance device response immediacy, we can add caching to the database.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">DeviceStates</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_flash</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">device_state</span> <span class=\"ow\">in</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">projection</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})):</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">device_state</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">device_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dict</span><span class=\"p\">:</span><span class=\"n\">DeviceState</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">update_device</span><span class=\"p\">,</span> <span class=\"n\">update_state</span> <span class=\"ow\">in</span> <span class=\"n\">update_dict</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">update_one</span><span class=\"p\">({</span><span class=\"sa\">f</span><span class=\"sh\">'</span><span class=\"s\">_id</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"n\">update_device</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">$set</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"o\">**</span><span class=\"n\">update_state</span><span class=\"p\">}},</span> <span class=\"n\">upsert</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">update_device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">update_state</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"n\">devices</span><span class=\"p\">.</span><span class=\"nf\">delete_many</span><span class=\"p\">({}).</span><span class=\"n\">deleted_count</span>\n</code></pre></div></div>\n\n<h2 id=\"writing-a-qqbot-to-control-devices-via-qq\">Writing a QQbot to Control Devices via QQ</h2>\n\n<p>This section demonstrates writing a simple QQbot, allowing users to interact with the QQbot on the QQ platform to control the state of Arduino devices.</p>\n\n<p>Install the <code class=\"language-plaintext highlighter-rouge\">botpy</code> package:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>botpy\n</code></pre></div></div>\n\n<p>Write the interaction code for the QQbot:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n\n\n<span class=\"kn\">import</span> <span class=\"n\">botpy</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy</span> <span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.ext.cog_yaml</span> <span class=\"kn\">import</span> <span class=\"n\">read</span>\n<span class=\"kn\">from</span> <span class=\"n\">botpy.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">test_config</span> <span class=\"o\">=</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">),</span> <span class=\"sh\">\"</span><span class=\"s\">config.yaml</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">_log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">get_logger</span><span class=\"p\">()</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">accept-language</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">zh-CN,zh;q=0.9,en;q=0.8</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">content-type</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">application/json</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_ready</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">robot 「</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">robot</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">」 on_ready!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_at_message_create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">avatar</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">sleep</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">_log</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">server</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n        <span class=\"kn\">import</span> <span class=\"n\">re</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">&lt;.*?&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">text</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">light</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">param</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">POST</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">reply</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">unicode_escape</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">intents</span> <span class=\"o\">=</span> <span class=\"n\">botpy</span><span class=\"p\">.</span><span class=\"nc\">Intents</span><span class=\"p\">(</span><span class=\"n\">public_guild_messages</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">MyClient</span><span class=\"p\">(</span><span class=\"n\">intents</span><span class=\"o\">=</span><span class=\"n\">intents</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">appid</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">appid</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">test_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">token</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Now, we can interact with the QQbot on the QQ channel to control Arduino devices.</p>\n\n<p><img src=\"\\images\\posts\\gpt3.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<h2 id=\"arduino-state-control\">Arduino State Control</h2>\n<p>After setting up the server and interaction platform, this section shows the implementation of Arduino device code. The main principle is to send a GET request to obtain the device state, then control the device state through string matching.</p>\n\n<h3 id=\"arduino-device-code-implementation\">Arduino Device Code Implementation</h3>\n\n<p><strong>This part of the code was written by my teammate, who quickly learned Arduino coding and implemented device state control. Thanks to him for his contribution to this project.</strong></p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ESP8266WiFi.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;SoftwareSerial.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ESP8266HTTPClient.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;ArduinoJson.h&gt;</span><span class=\"cp\">\n</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">ssid</span><span class=\"p\">;</span> <span class=\"c1\">//Enter your Wi-Fi SSID</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">password</span><span class=\"p\">;</span> <span class=\"c1\">//Enter you Wi-Fi Password</span>\n<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">ledpin</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"n\">String</span> <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n<span class=\"n\">define</span> <span class=\"n\">URL</span> <span class=\"s\">\"http://localhost:5000/arduino\"</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">WIFI_STA</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"mi\">115200</span><span class=\"p\">);</span>\n    <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">);</span>\n    <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"开始连接\"</span><span class=\"p\">);</span>\n    <span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"正在连接到\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">ssid</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">WL_CONNECTED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"waiting for \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"s...\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"WiFi connected!\"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"IP address: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">WiFi</span><span class=\"p\">.</span><span class=\"n\">localIP</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">WiFiClient</span> <span class=\"n\">tcpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">HTTPClient</span> <span class=\"n\">httpClient</span><span class=\"p\">;</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">tcpClient</span><span class=\"p\">,</span> <span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">httpCode</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">GET</span><span class=\"p\">();</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Send GET request to URL: \"</span><span class=\"p\">);</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">httpCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">getString</span><span class=\"p\">();</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"s\">\"Server Response Payload: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">Server Respose Code: \"</span><span class=\"p\">);</span>\n        <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">httpCode</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">httpClient</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span>\n    <span class=\"n\">StaticJsonDocument</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span> <span class=\"o\">&gt;</span> <span class=\"n\">doc</span><span class=\"p\">;</span>\n    <span class=\"n\">DeserializationError</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">deserializeJson</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">Payload</span><span class=\"p\">);</span>\n    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s\">\"light\"</span><span class=\"p\">][</span><span class=\"s\">\"param\"</span><span class=\"p\">];</span>\n    <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">HIGH</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">ledpin</span><span class=\"p\">,</span> <span class=\"n\">LOW</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Payload</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">;</span>\n    <span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"results\">Results</h2>\n\n<p>As shown in the image, after making a request to the QQbot, ChatGPT successfully received and understood our request, converting it into a command, which subsequently changed the state of the Arduino device.</p>\n\n<p><img src=\"\\images\\posts\\gpt4.jpg\" style=\"   display: block;   margin-left: auto;   margin-right: auto;    zoom:50%;\" /></p>\n\n<p>ChatGPT’s powerful role in this experiment demonstrates the significant potential of large language models in smart home technology. This includes, but is not limited to, identifying and discovering deep needs, multimodal intelligent home control, personalized user experiences, and other potential directions.</p>\n\n<p>However, this application also raises issues such as privacy protection and data security, requiring further consideration and resolution.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2023/04/24/%E4%BD%BF%E7%94%A8ChatGPT%E6%8E%A7%E5%88%B6Arduino%E8%AE%BE%E5%A4%87/'> <img src='https://www.bing.com/th?id=OHR.LittleDuckling_ZH-CN2922471258_1920x1080.jpg' alt='Using ChatGPT to Control Arduino Devices'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>16 min read <time class='article__date' datetime='2023-04-24T02:00:00+10:00'>Apr 24, 2023</time> </span> </div><h2 class='article__title'>Using ChatGPT to Control Arduino Devices</h2> <p class='article__excerpt'>This post explores a method to integrate ChatGPT with external systems, leveraging ChatGPT as a controller to manage Arduino devices, thus exploring the potential of natural language commands to control home devices and the development direction of smart home technology.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/ChatGPT' class='article__tag'>ChatGPT</a>  <a href='/tag/Arduino' class='article__tag'>Arduino</a>  <a href='/tag/Smart Home' class='article__tag'>Smart Home</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Two Pointer Problems (Part 2) - Sliding Window",
      "category" : "",
      "tags"     : "Algorithms, Pointers, Linked List, and Data Structures",
      "url"      : "/2021/10/20/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
      "date"     : "Oct 20, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#concept\" id=\"markdown-toc-concept\">Concept</a></li>\n  <li><a href=\"#209-minimum-size-subarray-sum\" id=\"markdown-toc-209-minimum-size-subarray-sum\">209. Minimum Size Subarray Sum</a></li>\n  <li><a href=\"#713-subarray-product-less-than-k\" id=\"markdown-toc-713-subarray-product-less-than-k\">713. Subarray Product Less Than K</a></li>\n  <li><a href=\"#3-longest-substring-without-repeating-characters\" id=\"markdown-toc-3-longest-substring-without-repeating-characters\">3. Longest Substring Without Repeating Characters</a></li>\n  <li><a href=\"#438-find-all-anagrams-in-a-string\" id=\"markdown-toc-438-find-all-anagrams-in-a-string\">438. Find All Anagrams in a String</a></li>\n</ol>\n\n<h2 id=\"concept\">Concept</h2>\n<p>A sliding window is a method used to solve problems on arrays by moving two pointers in the same direction. Problems of this nature don’t necessarily require a specific name; their solutions are quite natural.</p>\n\n<p>Sliding window is typically an optimization of brute force solutions. The best way to master this type of problem is through practice and understanding why sliding window can be applied.</p>\n\n<h2 id=\"209-minimum-size-subarray-sum\"><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">209. Minimum Size Subarray Sum</a></h2>\n\n<p>This problem is the most basic sliding window problem. We can use two pointers \\(l\\) and \\(r\\) to represent the left and right ends of the window, then move the pointer \\(r\\) continuously to the right. Meanwhile, use a variable \\(sum\\) to record the sum of the interval \\([l,r]\\). If \\(sum\\) meets the condition, record the difference between \\(l\\) and \\(r\\) as the answer, and move the pointer \\(l\\). Here’s the code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">INT_MAX</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h2 id=\"713-subarray-product-less-than-k\"><a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">713. Subarray Product Less Than K</a></h2>\n\n<p>The solution to this problem is very similar to the previous one, but instead of finding the length of the interval, we’re looking for the number of consecutive subintervals.</p>\n\n<p>For the number of subintervals, we can observe that if \\([l,r]\\) is a valid window, then \\([l+i,r]\\) for \\(0&lt;i≤r-l\\) must also be valid windows.</p>\n\n<p>For any valid interval \\([l,r]\\), the number of subsets ending at \\(r\\) is always \\(r-l+1\\). Therefore, before updating \\(r\\) each time, we add \\(r-l+1\\) to the answer. Here’s the code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numSubarrayProductLessThanK</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">*=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">/=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h2 id=\"3-longest-substring-without-repeating-characters\"><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">3. Longest Substring Without Repeating Characters</a></h2>\n\n<p>Unlike the previous contiguous subsequence problem, this problem requires the length of contiguous substrings. Therefore, we need to modify the condition. If duplicate characters appear within the window interval, we update \\(l\\). Here’s the code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLongestSubstring</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">cnt</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h2 id=\"438-find-all-anagrams-in-a-string\"><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">438. Find All Anagrams in a String</a></h2>\n\n<p>The solution to this problem is quite similar to the previous one, but instead of comparing characters, we’re comparing strings. Additionally, the length of the window in this problem remains constant, which is the length of \\(p\\).</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">findAnagrams</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">target</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"n\">sum</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">)]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n                <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/20/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%BA%8C-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/'> <img src='https://www.bing.com/th?id=OHR.IndianStarTortoise_EN-US4160827746_1920x1080.jpg' alt='Two Pointer Problems (Part 2) - Sliding Window'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2021-10-20T00:41:33+11:00'>Oct 20, 2021</time> </span> </div><h2 class='article__title'>Two Pointer Problems (Part 2) - Sliding Window</h2> <p class='article__excerpt'>Two pointers are used to scan in two directions during traversal, achieving the desired algorithmic goals.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Pointers' class='article__tag'>Pointers</a>  <a href='/tag/Linked List' class='article__tag'>Linked List</a>  <a href='/tag/Data Structures' class='article__tag'>Data Structures</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Binary Search",
      "category" : "",
      "tags"     : "Algorithms",
      "url"      : "/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/",
      "date"     : "Oct 15, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#concept\" id=\"markdown-toc-concept\">Concept</a>    <ol>\n      <li><a href=\"#template\" id=\"markdown-toc-template\">Template</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#problems\" id=\"markdown-toc-problems\">Problems</a>    <ol>\n      <li><a href=\"#34-find-first-and-last-position-of-element-in-sorted-array\" id=\"markdown-toc-34-find-first-and-last-position-of-element-in-sorted-array\">34. Find First and Last Position of Element in Sorted Array</a></li>\n      <li><a href=\"#74-search-a-2d-matrix\" id=\"markdown-toc-74-search-a-2d-matrix\">74. Search a 2D Matrix</a></li>\n      <li><a href=\"#33-search-in-rotated-sorted-array\" id=\"markdown-toc-33-search-in-rotated-sorted-array\">33. Search in Rotated Sorted Array</a></li>\n      <li><a href=\"#153-find-minimum-in-rotated-sorted-array\" id=\"markdown-toc-153-find-minimum-in-rotated-sorted-array\">153. Find Minimum in Rotated Sorted Array</a></li>\n      <li><a href=\"#162-find-peak-element\" id=\"markdown-toc-162-find-peak-element\">162. Find Peak Element</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"concept\">Concept</h2>\n<p>Binary search is a common method for finding a specific value in a sorted array. It doesn’t need to traverse the entire sequence; it only needs to focus on the boundaries and the middle value of the sequence. Therefore, its time complexity can reach \\(O(\\log n)\\).</p>\n\n<h3 id=\"template\">Template</h3>\n\n<p>The template code for finding the key in a sorted sequence is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"problems\">Problems</h2>\n\n<p>The template for binary search problems is usually fixed. The key is to determine what to binary search and how to perform the binary search.</p>\n\n<h3 id=\"34-find-first-and-last-position-of-element-in-sorted-array\"><a href=\"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. Find First and Last Position of Element in Sorted Array</a></h3>\n\n<p>This problem requires not only finding the first occurrence of an element but also the last occurrence. In the template code, if <code class=\"language-plaintext highlighter-rouge\">nums[i] &lt; key</code>, it continues searching on the left side. To continue searching after finding the element, we need to modify it to <code class=\"language-plaintext highlighter-rouge\">nums[i] &lt;= key</code>. This modification finds the position of the first element greater than or equal to \\(key\\). Therefore, the code for this problem is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">last</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">key</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">last</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">searchRange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">),</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">};</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"74-search-a-2d-matrix\"><a href=\"https://leetcode.com/problems/search-a-2d-matrix/\">74. Search a 2D Matrix</a></h3>\n\n<p>According to the problem, the element to be searched must be greater than or equal to the first element in its row. Therefore, we first perform a binary search on the columns to find the largest element not greater than \\(target\\).</p>\n\n<p>Then, we perform a basic binary search on that row to find the result. The code for this problem is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">searchMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"c1\">// Find the position of the first element greater than target</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>  \t\t\t\t\t     <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\t\t\t\t\t\t   <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">][</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"33-search-in-rotated-sorted-array\"><a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/\">33. Search in Rotated Sorted Array</a></h3>\n\n<p>This problem only guarantees partial order in the array. However, after binary partitioning the array, we always find that one half of the array is sorted. In this case, we can continue to binary search the sorted part of the array. The code for this problem is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"153-find-minimum-in-rotated-sorted-array\"><a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\">153. Find Minimum in Rotated Sorted Array</a></h3>\n\n<p>This problem requires finding the minimum value in the rotated sorted array, which is the value at the rotation point found in the previous problem. We still utilize the partially ordered property and perform binary search to find the minimum value in the array. The code for this problem is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findMin</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h3 id=\"162-find-peak-element\"><a href=\"https://leetcode.com/problems/find-peak-element/\">162. Find Peak Element</a></h3>\n\n<p>We can use the \\([l,r]\\) range</p>\n\n<p>to store the possible intervals containing peaks. Based on the midpoint, we perform binary search. If <code class=\"language-plaintext highlighter-rouge\">nums[mid] &lt; nums[mid + 1]</code>, it means a peak exists in the \\([mid+1,r]\\) interval; otherwise, it exists in the \\([l,mid]\\) interval. The code for this problem is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">findPeakElement</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// Use l,r to represent possible intervals containing peaks</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// mid+1 to r has a larger value</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span> <span class=\"c1\">// l to mid has a larger value</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-Binary-Search/'> <img src='/images/covers/blackrock2.jpg' alt='Binary Search'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>10 min read <time class='article__date' datetime='2021-10-15T23:51:55+11:00'>Oct 15, 2021</time> </span> </div><h2 class='article__title'>Binary Search</h2> <p class='article__excerpt'>Binary search is a common method for finding a specific value in a sorted array. It doesn&#39;t need to traverse the entire sequence; it only needs to focus on the boundaries and the middle value of the sequence. Therefore, its time complexity can reach O(log n).</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Dynamic Programming (Part 4): Longest Increasing Subsequence (LIS)",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "Algorithms and Dynamic Programming",
      "url"      : "/dynamic%20programming%20fundamentals/2021/10/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/",
      "date"     : "Oct 12, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#dynamic-programming\" id=\"markdown-toc-dynamic-programming\">Dynamic Programming</a></li>\n  <li><a href=\"#fenwick-tree-binary-indexed-tree\" id=\"markdown-toc-fenwick-tree-binary-indexed-tree\">Fenwick Tree (Binary Indexed Tree)</a></li>\n</ol>\n\n<p><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\">300. Longest Increasing Subsequence</a></p>\n\n<h2 id=\"dynamic-programming\">Dynamic Programming</h2>\n\n<p>We can define \\(dp[i]\\) as the maximum length of increasing subsequence ending at index \\(i\\) (a common pattern for the \\(dp\\) array). Then, we can write the state transition equation as\n\\(dp[i]=\\max(dp[j])+1,(0≤j&lt;i, nums[j]&lt;nums[i])\\)</p>\n\n<p>Finally, the result of this problem is \\(\\max(dp[i])\\), and the code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>The time complexity of this solution is \\(O(n^2)\\).</p>\n\n<h2 id=\"fenwick-tree-binary-indexed-tree\">Fenwick Tree (Binary Indexed Tree)</h2>\n\n<p>The LIS problem is essentially a partial order problem. Previously, in two-dimensional partial order problems, we mentioned that a Fenwick tree can easily solve such problems. However, in the previous problems, we were counting the number of pairs, not the length of sequences. To find the length of sequences, we need to modify the Fenwick tree structure.</p>\n\n<p>We can use a Fenwick tree to store the maximum value of increasing subsequences ending at index \\(i\\). The modification of the Fenwick tree structure is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Then, we traverse the array in the same way as with \\(dp\\), and we can obtain the correct result. Also, we need to pay attention to data discretization. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Fenwick</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">lowbit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kt\">int</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n            <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"n\">lowbit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lengthOfLIS</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">Fenwick</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Fenwick</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>The time complexity of this solution is \\(O(n\\log n)\\).</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/dynamic%20programming%20fundamentals/2021/10/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%9B%9B-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97-LIS/'> <img src='/images/covers/village.jpg' alt='Dynamic Programming (Part 4): Longest Increasing Subsequence (LIS)'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2021-10-12T00:19:19+11:00'>Oct 12, 2021</time> </span> </div><h2 class='article__title'>Dynamic Programming (Part 4): Longest Increasing Subsequence (LIS)</h2> <p class='article__excerpt'>The core idea of dynamic programming lies in breaking down a problem into smaller subproblems and storing previous computation results to reduce computational complexity.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Dynamic Programming' class='article__tag'>Dynamic Programming</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Binary Tree Basics (Part 3) - Segment Tree",
      "category" : "",
      "tags"     : "Algorithms, Data Structures, Binary Tree, and Tree Data Structures",
      "url"      : "/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/",
      "date"     : "Oct 9, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#concept\" id=\"markdown-toc-concept\">Concept</a>    <ol>\n      <li><a href=\"#structure\" id=\"markdown-toc-structure\">Structure</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#basic-operations\" id=\"markdown-toc-basic-operations\">Basic Operations</a>    <ol>\n      <li><a href=\"#building-the-segment-tree\" id=\"markdown-toc-building-the-segment-tree\">Building the Segment Tree</a></li>\n      <li><a href=\"#interval-query\" id=\"markdown-toc-interval-query\">Interval Query</a></li>\n      <li><a href=\"#interval-modification\" id=\"markdown-toc-interval-modification\">Interval Modification</a></li>\n      <li><a href=\"#lazy-propagation\" id=\"markdown-toc-lazy-propagation\">Lazy Propagation</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#complete-code\" id=\"markdown-toc-complete-code\">Complete Code</a></li>\n</ol>\n\n<h2 id=\"concept\">Concept</h2>\n<p>A segment tree is a data structure commonly used for <strong>maintaining interval information</strong>.</p>\n\n<p>Segment trees can perform operations like single-point modification, interval modification, and interval queries (such as interval sum, maximum value, minimum value) in $O(\\log n)$ time complexity.</p>\n\n<h3 id=\"structure\">Structure</h3>\n\n<p>A segment tree divides each interval of non-unit length into left and right sub-intervals recursively. It forms a tree structure where the entire segment is divided. The information of the interval is obtained by merging the information of the left and right sub-intervals. This data structure facilitates most interval operations.</p>\n\n<p>Suppose we have an array $a=[6,7,8,9,10]$. Let the root node of the segment tree be numbered $1$, and we use an array $node$ to store the segment tree, where $node[i]$ stores the value of the node with index $i$ in the segment tree.</p>\n\n<p>The structure of this segment tree is as follows:</p>\n\n<p><img src=\"/images/posts/segmenttree1.png\" alt=\"Segment Tree Structure\" /></p>\n\n<p>Here’s the corresponding code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// Segment tree indexing starts from 1</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// Auxiliary for building the tree</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h2 id=\"basic-operations\">Basic Operations</h2>\n<h3 id=\"building-the-segment-tree\">Building the Segment Tree</h3>\n\n<p>For a node $i$, its child nodes are numbered $2i$ and $2i+1$. If node $i$ stores the interval $[a,b]$, then node $2i$ should store the interval $[a,\\frac{a+b}{2}]$, and similarly, node $2i+1$ should store the interval $[\\frac{a+b}{2}+1,b]$. We can build the tree recursively. Here’s the code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i represents the current node, l represents the left boundary, r represents the right boundary</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"interval-query\">Interval Query</h3>\n<p>If the query interval is $[1,5]$, we can directly return $node[1]$. But if the query is $[3,5]$, we need to merge the answers of $[3,3]$ and $[4,5]$. Here’s the code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i represents the current node, [l,r] is the query interval, [s,t] represents the interval covered by the current node</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// If [s,t] is a sub-interval of [l,r], directly return</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// Recursively query sub-intervals with intersections</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively query left subtree</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively query right subtree</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"interval-modification\">Interval Modification</h3>\n<p>Similar to interval queries, if there’s a containment relationship, we can directly add the value to be updated. If there’s an intersection, we perform recursive updates. Here’s the code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// If [s,t] is a sub-interval of [l,r], directly update</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// Recursively update sub-intervals with intersections</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively update left subtree</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively update right subtree</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"lazy-propagation\">Lazy Propagation</h3>\n<p>When updating the interval $[3,5]$ of the array $[6,7,8,9,10]$ by adding $2$, the updated segment tree structure becomes:</p>\n\n<p><img src=\"/images/posts/segmenttree2.png\" alt=\"Segment Tree Lazy Propagation\" /></p>\n\n<p>We notice that when recursively updating, the process stops at node $3$, leaving its two child nodes unchanged.</p>\n\n<p>To handle this, we introduce lazy propagation. We mark the nodes where recursion ends with a flag. During the next query operation, we update the unprocessed child nodes. This flag is called a lazy tag. The effect of updating is as follows:</p>\n\n<p><img src=\"/images/posts/segmenttree3.png\" alt=\"Segment Tree Lazy Propagation Update\" /></p>\n\n<p>And the effect after querying is as follows:</p>\n\n<p><img src=\"/images/posts/segmenttree4.png\" alt=\"Segment Tree Lazy Propagation Query\" /></p>\n\n<p>We can use a <code class=\"language-plaintext highlighter-rouge\">vector&lt;int&gt; lazy</code> to store the lazy tags. Here’s the lazy propagation code:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// Propagate lazy tag down</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// Add the value of the lazy tag to the child nodes</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then call <code class=\"language-plaintext highlighter-rouge\">push_down()</code> in the query and update functions accordingly.</p>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SegmentTree</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span><span class=\"p\">;</span> <span class=\"c1\">// Segment tree indexing starts from 1</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lazy</span><span class=\"p\">;</span> <span class=\"c1\">// Lazy tags</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">;</span> <span class=\"c1\">// Auxiliary for building the tree</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"n\">SegmentTree</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">nums</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i represents the current node</span>\n\n<span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"n\">represents</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">boundary</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"n\">represents</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">boundary</span>\n        <span class=\"n\">N</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n        <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>             <span class=\"c1\">// Propagate lazy tag down</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// Add the value of the lazy tag to the child nodes</span>\n        <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// i represents the current node, [l,r] is the query interval, [s,t] represents the interval covered by the current node</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"c1\">// If [s,t] is a sub-interval of [l,r], directly return</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// Recursively query sub-intervals with intersections</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively query left subtree</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively query right subtree</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// If [s,t] is a sub-interval of [l,r], directly update</span>\n            <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">add</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">push_down</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// Recursively update sub-intervals with intersections</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively update left subtree</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">);</span> <span class=\"c1\">// Recursively update right subtree</span>\n        <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">node</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%89-%E7%BA%BF%E6%AE%B5%E6%A0%91-Segment-Tree/'> <img src='/images/covers/数据结构-cover1.png' alt='Binary Tree Basics (Part 3) - Segment Tree'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>12 min read <time class='article__date' datetime='2021-10-09T22:00:50+11:00'>Oct 9, 2021</time> </span> </div><h2 class='article__title'>Binary Tree Basics (Part 3) - Segment Tree</h2> <p class='article__excerpt'>A binary tree is an ordered tree where each node has a maximum of two children. It is the simplest and most essential type of tree.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Data Structures' class='article__tag'>Data Structures</a>  <a href='/tag/Binary Tree' class='article__tag'>Binary Tree</a>  <a href='/tag/Tree Data Structures' class='article__tag'>Tree Data Structures</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Two Pointer Problems (Part 1) - Two Pointer and Fast Slow Pointer",
      "category" : "",
      "tags"     : "Algorithms, Pointers, Linked List, and Data Structure",
      "url"      : "/2021/10/09/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/",
      "date"     : "Oct 9, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#concept\" id=\"markdown-toc-concept\">Concept</a></li>\n  <li><a href=\"#two-pointer-problems\" id=\"markdown-toc-two-pointer-problems\">Two Pointer Problems</a>    <ol>\n      <li><a href=\"#two-pointer\" id=\"markdown-toc-two-pointer\">Two Pointer</a></li>\n      <li><a href=\"#fast-slow-pointer\" id=\"markdown-toc-fast-slow-pointer\">Fast Slow Pointer</a></li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"concept\">Concept</h2>\n<p>Two pointers are used to scan in two directions during traversal, achieving the respective algorithmic goals.</p>\n\n<p>In a broad sense, two pointers refer to problems solved by traversing with two variables in linear structures.</p>\n\n<p>In a narrow sense:</p>\n\n<ul>\n  <li>For arrays, it refers to problems solved by two variables moving in opposite directions on the array.</li>\n  <li>For linked lists, it refers to problems solved by two variables moving in the same direction on the linked list, also known as the “fast-slow pointer” problem.</li>\n</ul>\n\n<h2 id=\"two-pointer-problems\">Two Pointer Problems</h2>\n<h3 id=\"two-pointer\">Two Pointer</h3>\n<p>The two-pointer approach defines the leftmost index as the left pointer (left) and the rightmost index as the right pointer (right), traversing the array from both ends towards the middle.</p>\n\n<p>The two-pointer approach is suitable for <strong>sorted arrays and strings</strong>.</p>\n\n<p>The time complexity of the two-pointer approach is \\(O(n)\\).</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/\">LeetCode Problem 21</a></p>\n\n<p>This problem requires rearranging the order of the array by odd and even numbers. We can use the left pointer to find odd numbers and the right pointer to find even numbers. When the left pointer finds an even number and the right pointer finds an odd number, swap the two numbers. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">exchange</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\">LeetCode Problem 57</a></p>\n\n<p>This problem requires finding pairs of numbers that sum to \\(target\\). Since the array is already sorted in this problem, we can determine:</p>\n\n<p>If the pair \\((nums[i+1], nums[j]) &lt; target\\),\nthen \\((nums[i], nums[j]) &lt; target\\).</p>\n\n<p>Similarly, if \\((nums[i], nums[j]) &gt; target\\),\nthen \\((nums[i+1], nums[j]) &gt; target\\).</p>\n\n<p>Therefore, this problem can also be solved using the two-pointer approach. When \\(nums[l] + nums[r] &lt; target\\), move \\(l\\) to the right; otherwise, if \\(nums[l] + nums[r] &gt; target\\), move \\(r\\) to the left. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">twoSum</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]);</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]);</span>\n            <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"fast-slow-pointer\">Fast Slow Pointer</h3>\n<p>The fast-slow pointer defines a pair of pointers with different speeds in the sequence to solve one-way sequence problems.</p>\n\n<p>The time complexity of the fast-slow pointer approach is \\(O(n)\\), and the space complexity is \\(O(1)\\).</p>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">LeetCode Problem 141</a></p>\n\n<p>This problem requires determining whether a linked list has a cycle. We can define a fast pointer and a slow pointer, and then move them. If the fast pointer catches up with the slow pointer, it means the linked list definitely has a cycle. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">hasCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">LeetCode Problem 142</a></p>\n\n<p>This problem requires finding the first node of the cycle while determining if there is a cycle. We can reason based on the condition that the fast pointer’s speed is always twice that of the slow pointer.</p>\n\n<p>Assuming the fast and slow pointers meet at point \\(bc\\), at this point, the distance the slow pointer has traveled should be \\(a+b\\), while the fast pointer has traveled \\(a+b+k(b+c)\\).</p>\n\n<p>Since the fast pointer’s speed is twice that of the slow pointer, we have:</p>\n\n<p>\\(a+b+k(b+c)=2(a+b)\\),</p>\n\n<p>which implies \\(a=k(b+c)-b=(k-1)(b+c)+c\\).</p>\n\n<p>Therefore, when the fast and slow pointers meet, the distance from the meeting point to the entry point of the cycle is always \\(a\\). We can then use another pointer \\(cur\\) to find the entry point of the cycle while updating \\(cur\\) and the slow pointer. When they meet, the meeting node is the entry point of the cycle. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"nf\">detectCycle</span><span class=\"p\">(</span><span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"n\">ListNode</span> <span class=\"o\">*</span><span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">cur</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/09/%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98-%E4%B8%80-%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88%E5%92%8C%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/'> <img src='https://www.bing.com/th?id=OHR.IndianStarTortoise_EN-US4160827746_1920x1080.jpg' alt='Two Pointer Problems (Part 1) - Two Pointer and Fast Slow Pointer'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2021-10-09T00:14:13+11:00'>Oct 9, 2021</time> </span> </div><h2 class='article__title'>Two Pointer Problems (Part 1) - Two Pointer and Fast Slow Pointer</h2> <p class='article__excerpt'>Two pointers are used to scan in two directions during traversal, achieving the respective algorithmic goals.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Pointers' class='article__tag'>Pointers</a>  <a href='/tag/Linked List' class='article__tag'>Linked List</a>  <a href='/tag/Data Structure' class='article__tag'>Data Structure</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Binary Trees Basics (Part 2) - Binary Search Trees (BSTs)",
      "category" : "",
      "tags"     : "Algorithms, Data Structures, Binary Tree, and Tree Data Structures",
      "url"      : "/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/",
      "date"     : "Oct 5, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#concept\" id=\"markdown-toc-concept\">Concept</a>    <ol>\n      <li><a href=\"#properties\" id=\"markdown-toc-properties\">Properties</a></li>\n      <li><a href=\"#structure\" id=\"markdown-toc-structure\">Structure</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#code\" id=\"markdown-toc-code\">Code</a>    <ol>\n      <li><a href=\"#basic-operations\" id=\"markdown-toc-basic-operations\">Basic Operations</a>        <ol>\n          <li><a href=\"#find\" id=\"markdown-toc-find\">$find()$</a></li>\n          <li><a href=\"#insert\" id=\"markdown-toc-insert\">$insert()$</a></li>\n          <li><a href=\"#delete\" id=\"markdown-toc-delete\">$delete()$</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"concept\">Concept</h2>\n<p><strong>Binary Search Tree (BST)</strong>, also known as a binary sort tree or binary ordered tree, is either an empty tree or a binary tree with the following properties:</p>\n<ul>\n  <li>If its left subtree is not empty, then all the nodes on the left subtree have values less than the root node’s value.</li>\n  <li>If its right subtree is not empty, then all the nodes on the right subtree have values greater than the root node’s value.</li>\n  <li>Both its left and right subtrees are also binary search trees.</li>\n</ul>\n\n<p>As a classical data structure, binary search trees offer fast insertion and deletion operations, along with efficient searching capabilities. Hence, they find wide applications, such as in file systems and database systems for efficient sorting and retrieval operations.</p>\n\n<h3 id=\"properties\">Properties</h3>\n<p>Binary search trees possess the following properties:</p>\n<ul>\n  <li>If the left subtree is non-empty, all the node values on the left subtree are less than the root node’s value.</li>\n  <li>If the right subtree is non-empty, all the node values on the right subtree are greater than the root node’s value.</li>\n  <li>Both the left and right subtrees are binary search trees.</li>\n</ul>\n\n<h3 id=\"structure\">Structure</h3>\n<p>A BST is constructed using binary trees. In addition to key and positional data, each node also contains attributes <code class=\"language-plaintext highlighter-rouge\">lchild</code> and <code class=\"language-plaintext highlighter-rouge\">rchild</code>. If a child node does not exist, the corresponding attribute value is null.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                               <span class=\"c1\">// Data</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span>  \t\t\t<span class=\"c1\">// Left and Right Child</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BST</span><span class=\"p\">,</span> <span class=\"n\">BSTNode</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h2 id=\"code\">Code</h2>\n<h3 id=\"basic-operations\">Basic Operations</h3>\n\n<p>The construction and destruction of a BST are similar to those of a regular binary tree. Here, we focus on additional operations like search, insertion, and deletion compared to regular binary trees.</p>\n\n<h4 id=\"find\">$find()$</h4>\n<p>The <code class=\"language-plaintext highlighter-rouge\">find()</code> function searches whether a node with a known data value exists in the tree and returns the node. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">BST</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">BST</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"insert\">$insert()$</h4>\n<p>The <code class=\"language-plaintext highlighter-rouge\">insert()</code> function inserts a node into the tree. All nodes in a BST are inserted as leaf nodes. Hence, after creating node $p$, we find the appropriate parent node $f$ and insert $p$ there. The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// Record f as the parent node of p</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// Check if data is already in the tree</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BSTNode</span><span class=\"p\">));</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>             <span class=\"c1\">// Create node</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"delete\">$delete()$</h4>\n<p>After deleting a node in a binary search tree, its sorting order must still be maintained. Therefore, deletion is divided into three cases:</p>\n<ul>\n  <li>If the node to be deleted has no left child, replace it with its right child.</li>\n  <li>If the node to be deleted has no right child, replace it with its left child.</li>\n  <li>If the node to be deleted has both left and right children, replace it with either the maximum node in its left subtree or the minimum node in its right subtree.</li>\n</ul>\n\n<p>The code is as follows:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">BST</span><span class=\"o\">&amp;</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"n\">BST</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>                  <span class=\"c1\">// Record f as the parent node of p</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>                           <span class=\"c1\">// Find the position of data</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>       <span class=\"c1\">// If not found, return false</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"c1\">// Case 1</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"nf\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">){</span>        <span class=\"c1\">// Case 2</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">tree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">{</span>                       <span class=\"c1\">// Case 3</span>\n        <span class=\"n\">BST</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"n\">fl</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">,</span><span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">==</span> <span class=\"n\">tmp</span><span class=\"p\">)</span> <span class=\"n\">fl</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%BA%8C-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-BST/'> <img src='/images/covers/数据结构-cover1.png' alt='Binary Trees Basics (Part 2) - Binary Search Trees (BSTs)'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>7 min read <time class='article__date' datetime='2021-10-05T04:14:28+11:00'>Oct 5, 2021</time> </span> </div><h2 class='article__title'>Binary Trees Basics (Part 2) - Binary Search Trees (BSTs)</h2> <p class='article__excerpt'>A binary tree is a tree in which each node has at most two children, making it a simple yet fundamental tree structure.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Data Structures' class='article__tag'>Data Structures</a>  <a href='/tag/Binary Tree' class='article__tag'>Binary Tree</a>  <a href='/tag/Tree Data Structures' class='article__tag'>Tree Data Structures</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Dynamic Programming Series on Stock Problems",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "Algorithms and Dynamic Programming",
      "url"      : "/dynamic%20programming%20fundamentals/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 29, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#121-best-time-to-buy-and-sell-stock\" id=\"markdown-toc-121-best-time-to-buy-and-sell-stock\">121. Best Time to Buy and Sell Stock</a>    <ol>\n      <li><a href=\"#state-transition-equation\" id=\"markdown-toc-state-transition-equation\">State Transition Equation</a>        <ol>\n          <li><a href=\"#representing-price_min\" id=\"markdown-toc-representing-price_min\">Representing $price_{min}$</a></li>\n          <li><a href=\"#boundary-conditions\" id=\"markdown-toc-boundary-conditions\">Boundary Conditions</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#code\" id=\"markdown-toc-code\">Code</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#122-best-time-to-buy-and-sell-stock-ii\" id=\"markdown-toc-122-best-time-to-buy-and-sell-stock-ii\">122. Best Time to Buy and Sell Stock II</a>    <ol>\n      <li><a href=\"#state-transition-equation-1\" id=\"markdown-toc-state-transition-equation-1\">State Transition Equation</a></li>\n      <li><a href=\"#code-1\" id=\"markdown-toc-code-1\">Code</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#714-best-time-to-buy-and-sell-stock-with-transaction-fee\" id=\"markdown-toc-714-best-time-to-buy-and-sell-stock-with-transaction-fee\">714. Best Time to Buy and Sell Stock with Transaction Fee</a>    <ol>\n      <li><a href=\"#state-transition-equation-2\" id=\"markdown-toc-state-transition-equation-2\">State Transition Equation</a></li>\n      <li><a href=\"#code-2\" id=\"markdown-toc-code-2\">Code</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#309-best-time-to-buy-and-sell-stock-with-cooldown\" id=\"markdown-toc-309-best-time-to-buy-and-sell-stock-with-cooldown\">309. Best Time to Buy and Sell Stock with Cooldown</a>    <ol>\n      <li><a href=\"#state-transition-equation-3\" id=\"markdown-toc-state-transition-equation-3\">State Transition Equation</a></li>\n      <li><a href=\"#code-3\" id=\"markdown-toc-code-3\">Code</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#123-best-time-to-buy-and-sell-stock-iii\" id=\"markdown-toc-123-best-time-to-buy-and-sell-stock-iii\">123. Best Time to Buy and Sell Stock III</a>    <ol>\n      <li><a href=\"#approach\" id=\"markdown-toc-approach\">Approach</a></li>\n      <li><a href=\"#code-4\" id=\"markdown-toc-code-4\">Code</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#188-best-time-to-buy-and-sell-stock-iv\" id=\"markdown-toc-188-best-time-to-buy-and-sell-stock-iv\">188. Best Time to Buy and Sell Stock IV</a></li>\n  <li><a href=\"#general-solution-for-stock-problems\" id=\"markdown-toc-general-solution-for-stock-problems\">General Solution for Stock Problems</a>    <ol>\n      <li><a href=\"#state-transition-equation-4\" id=\"markdown-toc-state-transition-equation-4\">State Transition Equation</a>        <ol>\n          <li><a href=\"#boundary-conditions-1\" id=\"markdown-toc-boundary-conditions-1\">Boundary Conditions</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ol>\n\n<h2 id=\"121-best-time-to-buy-and-sell-stock\"><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">121. Best Time to Buy and Sell Stock</a></h2>\n<h3 id=\"state-transition-equation\">State Transition Equation</h3>\n<p>We can use $dp[i]$ to represent the maximum profit we can get before day $i$. So, on day $i$, we have two choices:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. Selling on day $i$ might yield a higher profit compared to the previous profit ($dp[i-1]$).\n2. The previous profit is higher, so we don't do anything.\n</code></pre></div></div>\n\n<p>For case 1, the state transition equation is $dp[i]=prices[i]-price_{min}$.\nFor case 2, it’s $dp[i]=dp[i-1]$.\nCombining both cases, we get the state transition equation for this problem:</p>\n\n<p>$dp[i]=max(dp[i-1],prices[i]-price_{min})$</p>\n\n<p>The challenge now is how to represent $price_{min}$.</p>\n\n<h4 id=\"representing-price_min\">Representing $price_{min}$</h4>\n<p>We realize that calculating $price_{min}$ is also a problem of optimal substructure. We can solve it using dynamic programming too. Let $dp_{price_{min}}[i]$ represent the lowest price of the stock for the first $i$ days. The state transition equation for $dp_{price_{min}}[i]$ can be written as:</p>\n\n<p>$dp_{price_{min}}[i]$ = $min(prices[i],dp_{price_{min}}[i-1])$</p>\n\n<p>Now, let’s use $dp[i][j]$ to represent the maximum profit when we have $j$ stocks on day $i$. With this, we can formulate the state transition equation for $dp[i][j]$:</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i]+dp[i - 1][1]);$\n$dp[i][1] = max(-prices[i], dp[i - 1][1]);$</p>\n\n<h4 id=\"boundary-conditions\">Boundary Conditions</h4>\n<p>$dp[0][0]$ represents the maximum profit when we have 0 stocks on day 0, so $dp[0][0]=0$.</p>\n\n<p>$dp[0][1]$ represents the maximum profit when we have 1 stock on day 0, so $dp[0][0]=-prices[0]$.</p>\n\n<h3 id=\"code\">Code</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> \n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Due to space limitations, optimizing space complexity is left for the reader to contemplate.</p>\n\n<h2 id=\"122-best-time-to-buy-and-sell-stock-ii\"><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">122. Best Time to Buy and Sell Stock II</a></h2>\n<h3 id=\"state-transition-equation-1\">State Transition Equation</h3>\n<p>The difference between this and problem 121 lies in the fact that multiple buying operations are allowed here. Consequently, the state transition equation changes accordingly.</p>\n\n<p>Based on the state transition equation from problem 121, when we sell on day $i$, our profit can keep accumulating because there’s no restriction on the number of buying operations. Thus, if our maximum profit before day $i-1$ was $dp[i-1][0]$, after selling on day $i$, it becomes $dp[i-1][0]-prices[i]$. Hence, the state transition equation for $dp[i][1]$ becomes:</p>\n\n<p>$dp[i][1] = max(dp[i-1][0]-prices[i], dp[i - 1][1]);$</p>\n\n<h3 id=\"code-1\">Code</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"714-best-time-to-buy-and-sell-stock-with-transaction-fee\"><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">714. Best Time to Buy and Sell Stock with Transaction Fee</a></h2>\n<h3 id=\"state-transition-equation-2\">State Transition Equation</h3>\n<p>This problem introduces a fixed transaction fee when selling. If the profit from selling on day $i$ isn’t enough to cover the fee, we would prefer the previous profit. Hence, the state transition equation for this problem becomes:</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], prices[i] - fee+dp[i - 1][1]);$</p>\n\n<h3 id=\"code-2\">Code</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">fee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">fee</span><span class=\"p\">),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"309-best-time-to-buy-and-sell-stock-with-cooldown\"><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">309. Best Time to Buy and Sell Stock with Cooldown</a></h2>\n<h3 id=\"state-transition-equation-3\">State Transition Equation</h3>\n<p>This problem introduces a cooldown period after selling, meaning we can’t buy on the next day after selling. This changes the buying state transition equation as it can only happen after a cooldown period. Thus, the state transition equations become:</p>\n\n<p>$dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])$\n$dp[i][1] = max(dp[i - 1][2]-prices[i], dp[i - 1][1])$\n$dp[i][2] = dp[i - 1][0]$</p>\n\n<h3 id=\"code-3\">Code</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n     <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\n <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"c1\">//</span>\n         <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"123-best-time-to-buy-and-sell-stock-iii\"><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">123. Best Time to Buy and Sell Stock III</a></h2>\n<h3 id=\"approach\">Approach</h3>\n<p>This problem extends the concept from problem 121 and 122 by introducing a limit on the number of transactions ($k=2$). We use a three-dimensional array to represent the maximum profit with two transactions allowed.</p>\n\n<h3 id=\"code-4\">Code</h3>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">100100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Although not elegant, this code effectively solves the problem.</p>\n\n<h2 id=\"188-best-time-to-buy-and-sell-stock-iv\"><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">188. Best Time to Buy and Sell Stock IV</a></h2>\n\n<p>When the problem extends to $k$, the approach used in problem 123 remains effective. We initialize the boundary as 0 and then use a for loop to calculate the result.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">prices</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1100</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">110</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span>  <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]),</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">prices</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">];</span>\n <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"general-solution-for-stock-problems\">General Solution for Stock Problems</h2>\n<h3 id=\"state-transition-equation-4\">State Transition Equation</h3>\n<p>For stock problems, the three limiting factors are:</p>\n\n<ul>\n  <li>Current day $i$</li>\n  <li>Stocks held $j$</li>\n  <li>Maximum operations allowed $k$</li>\n</ul>\n\n<p>Let $dp[i][j][k]$ represent the maximum profit on day $i$ with $j$ stocks and $k$ operations allowed. The state transition equation becomes:</p>\n\n<p>$dp[i][0][k] = max(dp[i-1][1][k] + prices[i], dp[i-1][0][k])$\n$dp[i][1][k] = max(dp[i-1][0][k-1] - prices[i], dp[i-1][1][k])$</p>\n\n<h4 id=\"boundary-conditions-1\">Boundary Conditions</h4>\n<p>$dp[0][1][k] = -prices[0]$\nAll other values are 0.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Stock problems have a close relationship with the concept of dynamic programming. Understanding the different types of dynamic programming problems can significantly help in quickly identifying subproblems and formulating state transition equations.</p>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/dynamic%20programming%20fundamentals/2021/09/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%89-%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='Dynamic Programming Series on Stock Problems'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>11 min read <time class='article__date' datetime='2021-09-29T22:29:46+10:00'>Sep 29, 2021</time> </span> </div><h2 class='article__title'>Dynamic Programming Series on Stock Problems</h2> <p class='article__excerpt'>The core idea of dynamic programming lies in breaking down a problem into subproblems, retaining previous computational results to reduce the amount of computation needed.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Dynamic Programming' class='article__tag'>Dynamic Programming</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Binary Trees Basics (Part 1) - Understanding Binary Trees",
      "category" : "Fundamentals of Data Structures",
      "tags"     : "Algorithms, Data Structures, Binary Tree, and Tree Data Structures",
      "url"      : "/fundamentals%20of%20data%20structures/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/",
      "date"     : "Sep 28, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#introduction\" id=\"markdown-toc-introduction\">Introduction</a>    <ol>\n      <li><a href=\"#definition-of-binary-tree\" id=\"markdown-toc-definition-of-binary-tree\">Definition of Binary Tree</a></li>\n      <li><a href=\"#basic-forms\" id=\"markdown-toc-basic-forms\">Basic Forms</a></li>\n      <li><a href=\"#special-types\" id=\"markdown-toc-special-types\">Special Types</a></li>\n      <li><a href=\"#related-terminology\" id=\"markdown-toc-related-terminology\">Related Terminology</a></li>\n      <li><a href=\"#properties\" id=\"markdown-toc-properties\">Properties</a></li>\n    </ol>\n  </li>\n  <li><a href=\"#implementing-binary-trees-in-c\" id=\"markdown-toc-implementing-binary-trees-in-c\">Implementing Binary Trees in C++</a>    <ol>\n      <li><a href=\"#sequential-storage-of-binary-trees\" id=\"markdown-toc-sequential-storage-of-binary-trees\">Sequential Storage of Binary Trees</a>        <ol>\n          <li><a href=\"#implementation-code\" id=\"markdown-toc-implementation-code\">Implementation Code</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#linked-storage-of-binary-trees\" id=\"markdown-toc-linked-storage-of-binary-trees\">Linked Storage of Binary Trees</a>        <ol>\n          <li><a href=\"#implementation-code-1\" id=\"markdown-toc-implementation-code-1\">Implementation Code</a></li>\n        </ol>\n      </li>\n      <li><a href=\"#recursive-traversal-of-binary-trees\" id=\"markdown-toc-recursive-traversal-of-binary-trees\">Recursive Traversal of Binary Trees</a>        <ol>\n          <li><a href=\"#preorder-traversal-dlr\" id=\"markdown-toc-preorder-traversal-dlr\">Preorder Traversal (DLR)</a></li>\n          <li><a href=\"#inorder-traversal-ldr\" id=\"markdown-toc-inorder-traversal-ldr\">Inorder Traversal (LDR)</a></li>\n          <li><a href=\"#postorder-traversal-lrd\" id=\"markdown-toc-postorder-traversal-lrd\">Postorder Traversal (LRD)</a></li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<h2 id=\"introduction\">Introduction</h2>\n<p>A binary tree is a crucial type of tree structure. Many data structures abstracted from practical problems often take the form of binary trees. Even general trees can be easily converted into binary trees, and the storage structure and algorithms for binary trees are relatively simple. Hence, binary trees are particularly important. The defining characteristic of a binary tree is that each node can have at most two child nodes, with a distinction between left and right.</p>\n\n<h3 id=\"definition-of-binary-tree\">Definition of Binary Tree</h3>\n<p>A binary tree is a type of ordered tree in which the degree of each node is at most 2. It is the simplest and most important tree structure. The recursive definition of a binary tree states that a binary tree is either an empty tree or a tree formed by a root node and two disjoint, mutually exclusive binary trees called the left subtree and the right subtree.</p>\n\n<h3 id=\"basic-forms\">Basic Forms</h3>\n<p><img src=\"/images/posts/tree1.png\" alt=\"Binary Tree Forms\" /></p>\n<ul>\n  <li>Empty binary tree</li>\n  <li>Binary tree with only one root node</li>\n  <li>Binary tree with only a left subtree of the root node</li>\n  <li>Binary tree with only a right subtree of the root node</li>\n  <li><strong>Complete binary tree</strong> with both left and right subtrees of the root node\n    <h3 id=\"special-types\">Special Types</h3>\n  </li>\n  <li>Full binary tree: A tree where each node has either 0 or 2 children, and nodes with 0 children are at the same level.</li>\n  <li>Complete binary tree: A binary tree of depth k where each node is in the same level as the nodes of a full binary tree of depth k, numbered from 1 to n.\n<img src=\"/images/posts/tree2.png\" alt=\"Complete Binary Tree\" />\n    <h3 id=\"related-terminology\">Related Terminology</h3>\n  </li>\n  <li>Node: Contains a data element and information pointing to child subtrees.</li>\n  <li>Node degree: The number of child subtrees a node has.</li>\n  <li>Leaf node: Also known as a terminal node, it has no child subtrees or has a degree of 0.</li>\n  <li>Branch node: Also known as a non-terminal node, it has a degree greater than 0.</li>\n  <li>Tree degree: The maximum degree among all nodes in the tree.</li>\n  <li>Node level: Starting from the root node, where the root node is at level 0, its children are at level 1, and so on.</li>\n  <li>Tree depth: Also known as the height of the tree, it is the maximum level among all nodes in the tree.</li>\n  <li>Ordered tree: If the subtrees of a tree have a specific sequence, the tree is ordered.</li>\n  <li>Unordered tree: If the subtrees of a tree have no specific sequence, the tree is unordered.</li>\n  <li>Forest: A collection of m (m≥0) disjoint trees. Removing the root node of a non-empty tree turns it into a forest, where each tree consists of the original root node’s subtrees.\n    <h3 id=\"properties\">Properties</h3>\n  </li>\n  <li>A binary tree’s ith level can have at most $2^i$ nodes $(i≥0)$.</li>\n  <li>A binary tree of depth k can have at most $2^{k+1}-1$ nodes $(k≥0)$.</li>\n  <li>For a binary tree with n nodes, if the number of nodes with a degree of 0 is $n_0$ and with a degree of 2 is $n_2$, then $n_0=n_2+1$.</li>\n  <li>Full binary tree theorem: The number of leaf nodes in a non-empty full binary tree equals the number of internal nodes $+1$.</li>\n  <li>Corollary of full binary tree theorem: In a binary tree with n nodes, the number of null subtrees equals $n+1$.</li>\n  <li>The height of a complete binary tree with n nodes is $log_2(n+1)$, and the depth is $log_2(n+1)-1$.</li>\n</ul>\n\n<h2 id=\"implementing-binary-trees-in-c\">Implementing Binary Trees in C++</h2>\n\n<h3 id=\"sequential-storage-of-binary-trees\">Sequential Storage of Binary Trees</h3>\n\n<p>We can use an array to store all the nodes. The root node is stored at index 0, and its left child is stored at index $2<em>0+1$, and its right child is stored at index $2</em>0+2$, and so on. For a node with index i, its left and right children are stored at indexes $2<em>i+1$ and $2</em>i+2$, respectively.</p>\n\n<h4 id=\"implementation-code\">Implementation Code</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">BinaryTree</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"linked-storage-of-binary-trees\">Linked Storage of Binary Trees</h3>\n\n<p>Sequential storage is generally suitable for complete binary trees. Typically, we use linked storage to represent binary trees.</p>\n\n<h4 id=\"implementation-code-1\">Implementation Code</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>                     <span class=\"c1\">// Data</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Node</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"c1\">// Left and right subtrees</span>\n<span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"n\">BinaryTree</span><span class=\"p\">,</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"o\">&amp;</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">input</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BtNode</span><span class=\"p\">;</span>\n    <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">input</span><span class=\"p\">;</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateBinaryTree</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"recursive-traversal-of-binary-trees\">Recursive Traversal of Binary Trees</h3>\n\n<h4 id=\"preorder-traversal-dlr\">Preorder Traversal (DLR)</h4>\n<p>If the binary tree is empty, do nothing. Otherwise:</p>\n\n<ol>\n  <li>Visit the current node.</li>\n  <li>Traverse the left subtree in preorder.</li>\n  <li>Traverse the right subtree in preorder.</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">DLR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">DLR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"inorder-traversal-ldr\">Inorder Traversal (LDR)</h4>\n<p>If the binary tree is empty, do nothing. Otherwise:</p>\n\n<ol>\n  <li>Traverse the left subtree in inorder.</li>\n  <li>Visit the current node.</li>\n  <li>Traverse the right subtree in inorder.</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LDR</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">LDR</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"postorder-traversal-lrd\">Postorder Traversal (LRD)</h4>\n<p>If the binary tree is empty, do nothing. Otherwise:</p>\n\n<ol>\n  <li>Traverse the left subtree in postorder.</li>\n  <li>Traverse the right subtree in postorder.</li>\n  <li>Visit the current node.</li>\n</ol>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">LRD</span><span class=\"p\">(</span><span class=\"n\">BinaryTree</span> <span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n        <span class=\"n\">LRD</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tree</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/fundamentals%20of%20data%20structures/2021/09/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80-%E4%B8%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/'> <img src='/images/covers/数据结构-cover1.png' alt='Binary Trees Basics (Part 1) - Understanding Binary Trees'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2021-09-28T15:58:19+10:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>Binary Trees Basics (Part 1) - Understanding Binary Trees</h2> <p class='article__excerpt'>A binary tree is a fundamental type of tree structure where each node has at most two child nodes, making it one of the simplest and most important trees.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Data Structures' class='article__tag'>Data Structures</a>  <a href='/tag/Binary Tree' class='article__tag'>Binary Tree</a>  <a href='/tag/Tree Data Structures' class='article__tag'>Tree Data Structures</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Dynamic Programming (Part 2) - Optimal Subsequence Series",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "Algorithms and Dynamic Programming",
      "url"      : "/dynamic%20programming%20fundamentals/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 28, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#core-idea-of-dynamic-programming\" id=\"markdown-toc-core-idea-of-dynamic-programming\">Core Idea of Dynamic Programming</a></li>\n  <li><a href=\"#198-house-robber\" id=\"markdown-toc-198-house-robber\">198. House Robber</a></li>\n</ol>\n\n<h2 id=\"core-idea-of-dynamic-programming\">Core Idea of Dynamic Programming</h2>\n<p>The core idea of dynamic programming lies in breaking down a problem into smaller subproblems, retaining previously computed results to reduce computational effort.</p>\n\n<p>Dynamic Programming Fundamentals</p>\n\n<p>Let’s illustrate this with an example:</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B ( Calculation ): 8</p>\n\n  <p>A: What if we add “1+” to the left side of the equation?</p>\n\n  <p>B ( Instantly ): 9</p>\n\n  <p>A: How did you arrive at the answer so quickly?</p>\n\n  <p>B: Just add 1 to 8</p>\n\n  <p>A: So, you don’t need to recalculate because you remembered that the value of the first equation was 8. The dynamic programming algorithm can be said to remember the solutions it has found to save time.</p>\n</blockquote>\n\n<h2 id=\"198-house-robber\"><a href=\"https://leetcode-cn.com/problems/house-robber/\">198. House Robber</a></h2>\n\n<ol>\n  <li>When there is only one house, we choose to rob that house.</li>\n  <li>When there are two houses, we choose to rob the one with the larger value.</li>\n  <li>If there are more than two houses, for example, the third house, we need to consider whether the total value of the first and third houses is greater than that of the second house. If the total value of the first and third houses is greater, we choose to rob both the first and third houses; otherwise, we choose not to rob the first and third houses and rob the second house instead.</li>\n  <li>Generalizing this, for the first i houses, we have two options for robbery:\n    <ol>\n      <li>Rob the ith house, obtaining the total amount equal to the value of the ith house plus the total amount obtained by robbing the first i-2 houses.</li>\n      <li>Do not rob the ith house, obtaining the total amount equal to the total amount obtained by robbing the first i-1 houses.</li>\n    </ol>\n  </li>\n</ol>\n\n<p>We always choose the option that gives a higher amount from 1 and 2. Here, we use $d[i]$ to represent the total amount obtained by robbing the first i houses, and $d[i]$ to represent options 1 and 2:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + \\text{nums}[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/dynamic%20programming%20fundamentals/2021/09/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%BA%8C-%E6%9C%80%E4%BC%98%E5%AD%90%E5%BA%8F%E5%88%97%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='Dynamic Programming (Part 2) - Optimal Subsequence Series'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2021-09-28T13:12:38+10:00'>Sep 28, 2021</time> </span> </div><h2 class='article__title'>Dynamic Programming (Part 2) - Optimal Subsequence Series</h2> <p class='article__excerpt'>The core idea of dynamic programming lies in breaking down a problem into smaller subproblems, retaining previously computed results to reduce computational effort.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Dynamic Programming' class='article__tag'>Dynamic Programming</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "Dynamic Programming (Part 1) - House Robber Series",
      "category" : "Dynamic Programming Fundamentals",
      "tags"     : "Algorithms and Dynamic Programming",
      "url"      : "/dynamic%20programming%20fundamentals/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/",
      "date"     : "Sep 27, 2021",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#core-idea-of-dynamic-programming\" id=\"markdown-toc-core-idea-of-dynamic-programming\">Core Idea of Dynamic Programming</a></li>\n  <li><a href=\"#198-house-robber\" id=\"markdown-toc-198-house-robber\">198. House Robber</a></li>\n</ol>\n\n<h2 id=\"core-idea-of-dynamic-programming\">Core Idea of Dynamic Programming</h2>\n<p>The core idea of dynamic programming lies in breaking down a problem into smaller subproblems and retaining previously computed results to reduce computational complexity.</p>\n\n<p>Let’s illustrate with an example:</p>\n\n<blockquote>\n  <p>A: 1+1+1+1+1+1+1+1 = ?</p>\n\n  <p>B (calculating): 8</p>\n\n  <p>A: What if we add “1+” to the left side of the equation?</p>\n\n  <p>B (quickly): 9</p>\n\n  <p>A: How did you arrive at the answer so quickly?</p>\n\n  <p>B: Just add 1 to 8.</p>\n\n  <p>A: So you didn’t have to recalculate because you remembered the value of the first equation as 8. Dynamic programming algorithms also memorize previously computed solutions to save time.</p>\n</blockquote>\n\n<h2 id=\"198-house-robber\"><a href=\"https://leetcode.com/problems/house-robber/\">198. House Robber</a></h2>\n\n<ol>\n  <li>When there is only one house, we choose to rob it.</li>\n  <li>When there are two houses, we choose the one with the larger amount to rob.</li>\n  <li>If there are more than two houses, for example, the third one, we need to consider whether the sum of the first and third houses is greater than the second one. If the sum of the first and third houses is greater, we rob both the first and third houses; otherwise, we skip the first and third houses and rob the second one.</li>\n  <li>Generalizing to the common case, for the first i houses, we have two options for robbing:\n    <ol>\n      <li>Robbing the ith house, which results in the total amount being the value of the ith house plus the total amount of money robbed from the first i-2 houses.</li>\n      <li>Not robbing the ith house, resulting in the total amount being the same as the total amount robbed from the first i-1 houses.</li>\n    </ol>\n  </li>\n</ol>\n\n<p>We always choose the option that yields a higher amount between 1 and 2. Here, we use \\(d[i]\\) to represent the total amount robbed from the first i houses, and \\(d[i]\\) represents the two options:</p>\n\n\\[\\begin{equation}\n\\left\\{\n\\begin{aligned}\n%\\nonumber\n&amp;d[i] = d[i-2] + nums[i], \\\\\n&amp;d[i] = d[i-1].\n\\end{aligned}\n\\right.\n\\end{equation}\\]\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/dynamic%20programming%20fundamentals/2021/09/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%80-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/'> <img src='/images/covers/village.jpg' alt='Dynamic Programming (Part 1) - House Robber Series'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read <time class='article__date' datetime='2021-09-27T22:12:45+10:00'>Sep 27, 2021</time> </span> </div><h2 class='article__title'>Dynamic Programming (Part 1) - House Robber Series</h2> <p class='article__excerpt'>The core idea of dynamic programming lies in breaking down a problem into smaller subproblems and retaining previously computed results to reduce computational complexity.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Algorithms' class='article__tag'>Algorithms</a>  <a href='/tag/Dynamic Programming' class='article__tag'>Dynamic Programming</a> </span></div></div></div></div></div>"
       } ,
  
    {
      "title"    : "One-Click Hanmu on Sunshine Sports Platform",
      "category" : "",
      "tags"     : "Computer Networking",
      "url"      : "/2019/10/11/%E9%98%B3%E5%85%89%E4%BD%93%E8%82%B2%E4%B8%80%E9%94%AE%E6%B1%89%E5%A7%86/",
      "date"     : "Oct 11, 2019",
      "content"  : "<ol id=\"markdown-toc\">\n  <li><a href=\"#login-process\" id=\"markdown-toc-login-process\">Login Process</a></li>\n  <li><a href=\"#applying-for-a-run\" id=\"markdown-toc-applying-for-a-run\">Applying for a Run</a></li>\n  <li><a href=\"#ending-the-run\" id=\"markdown-toc-ending-the-run\">Ending the Run</a></li>\n  <li><a href=\"#password-table\" id=\"markdown-toc-password-table\">Password Table</a></li>\n</ol>\n\n<p>This blog introduces a method for completing Hanmu on the Sunshine Sports platform using HTTP requests. Compared to virtual positioning, this method is faster and more convenient.</p>\n\n<p>This blog is inspired by Senior Li Ye’s project. <a href=\"https://github.com/HackerLiye/fuckhanmu\">Click here</a> to visit the project.</p>\n\n<h2 id=\"login-process\">Login Process</h2>\n\n<p>The login process is about <strong>acquiring the <code class=\"language-plaintext highlighter-rouge\">token</code></strong>. During this process, the user’s <code class=\"language-plaintext highlighter-rouge\">IMEI</code> is required.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">IMEI</code> is a <strong>32-bit hexadecimal number</strong> that can be captured during the login process on the Sunshine Sports platform.</p>\n\n<p>During the login process, we need to pass the <code class=\"language-plaintext highlighter-rouge\">IMEI</code> as a parameter, like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://client3.aipao.me/api/{token}/QM_Users/Login_AndroidSchool?IMEICode=00000000000000000000000000000000\n</code></pre></div></div>\n\n<p>At the same time, we need to include the current version of <strong>LePao (<code class=\"language-plaintext highlighter-rouge\">version</code>)</strong> in the header. Usually, the version is 2.40.</p>\n\n<p>This HTTP request will fetch a <code class=\"language-plaintext highlighter-rouge\">json</code>, where the <code class=\"language-plaintext highlighter-rouge\">token</code> under <code class=\"language-plaintext highlighter-rouge\">Data</code> is the value we need to obtain.</p>\n\n<h2 id=\"applying-for-a-run\">Applying for a Run</h2>\n\n<p>The running process requires a request based on the previously obtained <code class=\"language-plaintext highlighter-rouge\">token</code>. The link and parameters for the request are as follows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://client3.aipao.me/api/{token}/QM_Runs/SRS?S1=30.534737&amp;S2=114.367785&amp;S3=2000\n</code></pre></div></div>\n\n<p>You can notice that there are three parameters: S1, S2, and S3, representing the <strong>latitude and longitude</strong> of the running location and the <strong>distance</strong> respectively.</p>\n\n<p>The parameters used in the above link represent the track of the Wuhan University Information School playground and a 2000-meter distance.</p>\n\n<p>After sending this request, you will receive a <code class=\"language-plaintext highlighter-rouge\">RunId</code> and enter the running state.</p>\n\n<h2 id=\"ending-the-run\">Ending the Run</h2>\n\n<p>In Li Ye’s code, there is a process of waiting for the run to finish. This is to ensure the accuracy and consistency of the data. However, in practical testing, we found that we don’t actually need to wait for the run to finish. We can directly request the end of the run to submit the Hanmu result.</p>\n\n<p>The link for this request is as follows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://client3.aipao.me/api/{token}/QM_Runs/ES\n</code></pre></div></div>\n\n<p>At this point, several parameters need to be submitted, let’s explain them one by one:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Parameter</th>\n      <th>Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>S1</td>\n      <td>RunId obtained during the run application</td>\n    </tr>\n    <tr>\n      <td>S4</td>\n      <td>Time spent on running, reasonable value</td>\n    </tr>\n    <tr>\n      <td>S5</td>\n      <td>Actual running distance, usually 1 to 2 meters more than the theoretical distance</td>\n    </tr>\n    <tr>\n      <td>S8</td>\n      <td>Password table, will be explained later</td>\n    </tr>\n    <tr>\n      <td>S9</td>\n      <td>Number of steps, reasonable value</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"password-table\">Password Table</h2>\n\n<p>In the parameters for ending the run, all integer parameters are encrypted using a password table. The principle is similar to the Caesar cipher, where numbers and letters correspond one-to-one. When submitting, both the ciphertext and the password table are submitted simultaneously.</p>\n\n<p>When submitting, we must <strong>ensure that the password table corresponds correctly to the numbers</strong> for successful submission.</p>\n\n<p>Here’s an example of encrypting the running distance:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Actual Value</th>\n      <th>Encrypted Value</th>\n      <th>Password Table</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>2000</td>\n      <td>caaa</td>\n      <td>abcdefghijklmnopqrstuvwxyz</td>\n    </tr>\n    <tr>\n      <td>246</td>\n      <td>oqs</td>\n      <td>mnopqrstuvwxyzabcdefghijkl</td>\n    </tr>\n  </tbody>\n</table>\n",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/10/11/%E9%98%B3%E5%85%89%E4%BD%93%E8%82%B2%E4%B8%80%E9%94%AE%E6%B1%89%E5%A7%86/'> <img src='https://src.onlinedown.net/images/h_imges/wdj/3/logo/c76a697a57cfc446c777513a033e19b1_256_256.png' alt='One-Click Hanmu on Sunshine Sports Platform'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2019-10-11T14:59:11+11:00'>Oct 11, 2019</time> </span> </div><h2 class='article__title'>One-Click Hanmu on Sunshine Sports Platform</h2> <p class='article__excerpt'>This blog introduces a method for completing Hanmu (a type of running challenge) on the Sunshine Sports platform using HTTP requests. Compared to virtual positioning, this method is faster and more convenient.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Mortalreminder PT'><img class='article__author-image' src='https://q.qlogo.cn/headimg_dl?dst_uin=2656453168&spec=140&img_type=jpg' alt='Mortalreminder PT's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Mortalreminder PT</a><span> in </span> <span class='article-tags'> <a href='/tag/Computer Networking' class='article__tag'>Computer Networking</a> </span></div></div></div></div></div>"
       } 
  
]
